<project name="MAT" basedir="." default="make.war" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property file="build.properties" />
    <property environment="env"/>
    <property name="deployment.dir.prefix" value="${output.war.dir}" /> 
    <property name="web.output.dir" value="${output.dir}"/>
	<property name="output.file" value="${output.war.dir}/${war.name}.war"/>
    <property name="web.lib.dir" value="${output.dir}/WEB-INF/lib"/>
	<property name="java.src.dir" value="src" /> 
	<property name="test.src.dir" value="test" /> 
	
	
    <path id="build.classpath">
        <pathelement location="${web.output.dir}/WEB-INF/classes"/>
        <pathelement location="src"/>
        <pathelement location="war/WEB-INF/lib"/>
        <fileset dir="war/WEB-INF/lib" includes="*.jar" />
    </path>
	
	<property name="PMD.home" location="war/WEB-INF"/>
	<property name="pmddoc" location="${output.dir}/pmddoc" />
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
	    <classpath>
	        <fileset dir="${PMD.home}">
	            <include name="lib/*.jar"/>    
	        </fileset>
	    </classpath>
	</taskdef>
	
	
	<path id="test.classpath">
	  <pathelement path="${web.output.dir}/test-classes" />
	  <pathelement path="${web.output.dir}/WEB-INF/classes" />
	  <fileset dir="${web.output.dir}/WEB-INF/lib" includes="*.jar" />
	</path>

    <target name="ivy.resolve">
    	<!-- not full configured
        <ivy:configure file="ivyconf.xml"/>
        <ivy:resolve file="ivy.xml" conf="default"/>
        <ivy:retrieve pattern="${web.lib.dir}/[artifact].[ext]" conf="default" />
        -->
    </target>
    
	<!-- copy all files in the web folder, except the compiled classes, to output dir -->
    <target name="copy.web">
        <copy todir="${web.output.dir}">
            <fileset dir="war">
                <exclude name="WEB-INF/classes/**"/>
            	<!-- do not copy the file from this location, get from conf/deploy -->
                <exclude name="WEB-INF/${persistence.file}"/>
            	<exclude name="WEB-INF/${security.file}"/>
            	<exclude name="WEB-INF/${mail.file}"/>
            	<!-- uncomment when ivy.resolve is ready
                <exclude name="WEB-INF/lib/**"/>
                -->
            </fileset>                              
        </copy>
        <copy todir="${web.output.dir}/WEB-INF/classes/">
            <fileset dir="src" excludes="**/*.java">
            </fileset>                              
        </copy>
    	
    	<!-- copy custom file(s) -->
        <copy todir="${web.output.dir}/WEB-INF">
            <fileset dir="conf/deploy">
            </fileset>                              
        </copy>
    	
    </target>

	<!--  creates the jUnit test xml file used by Quickbuild  --> 
	 
	 <target name="JUnit-report" depends="test">
	 	<mkdir dir="${web.output.dir}/reports"/>
		 <junitreport todir="${web.output.dir}/reports">
		 <fileset dir="${web.output.dir}/test-results">
		  <include name="TEST-*.xml" /> 
		  </fileset>
		  </junitreport>
	  </target>
	  
	 <!--  compiles the test files, runs the jUnit tests and creates the code coverage information used by cobertura. This coverage information is provided by running the jUnit tests on the 'instrumented-classes' that cobertura creates.
	   -->
	 <target name="test">
	 	<mkdir dir="${web.output.dir}/test-classes" />
	 	<mkdir dir="${web.output.dir}/test-results" />
		<javac classpathref="test.classpath" srcdir="${test.src.dir}" destdir="${web.output.dir}/test-classes" fork="true" debug="true">
		</javac>
		<copy todir="${web.output.dir}/test-classes">
			<fileset dir="${test.src.dir}" /> 
		</copy>
		<junit haltonfailure="no" printsummary="on" fork="yes">
		  <formatter type="brief" usefile="false" />
		  <formatter type="xml" />
			<classpath>
				<path refid="test.classpath" />
				<path location="${web.output.dir}/WEB-INF/classes"/>
			</classpath>
		 	<batchtest fork="yes" todir="${web.output.dir}/test-results">
		    	<fileset dir="${web.output.dir}/test-classes" includes="**/FileUploadValidationTest.class" /> 
		    	<fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImplOidTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ExcelSheetParserTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/SortUtilityTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/US547ListObjectDAOTest.class" />
		 		
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/CodeListExportTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/AdminServiceImplTest.class" />
		 		<!--<fileset dir="${web.output.dir}/test-classes" includes="**/LoginServiceImplTest.class" />-->
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/PasswordVerifierTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/SecurityQuestionVerifierTest.class" />

		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImplTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ManageQDMElementTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ValidationTestForCloning.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/DotNotationTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/SortUtilityTest.class" />
		 		
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/CodeListRequiredFieldTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/SimpleEMeasureServiceImplTest.class" />
		 		<!--<fileset dir="${web.output.dir}/test-classes" includes="**/ResetUserPasswordTest.class" />-->
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/UserServiceImplTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ManageQDSImplTest.class" />
		 		
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ClauseServiceImplTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/QDSAttributesServiceImplTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImplMockedTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/PagingToolHelperTest.class" />
		 		
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/DAOTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ForgotPasswordTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/V1_0_2_US7_US8_SimpleEMeasureServiceImplTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/V1_0_2_US4_MeasureLibraryServiceImplTest.class" />
		
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/Sprint21Tests.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/Sprint22Tests.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/Sprint23Tests.class" />
		 		<!--
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ReportsDataAccessTestCase.class" />
		 		-->
		 		<!-- broken tests -->
		 		<!--
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ClauseDAOTest.class" />
		 		<fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImpl2Test.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/UserServiceImplMockedTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/PackagerServiceImplMockedTest.class" />
				
				<fileset dir="${web.output.dir}/test-classes" includes="**/MeasureDAOTest.class" />
				
				<fileset dir="${web.output.dir}/test-classes" includes="**/ExcelFileParsingTest" />
		 		-->
		 		
		 		
		 		
		 	</batchtest>
		 </junit>
	  </target>      

    <!-- compile gwt (client side code)-->
    <target name="compile.gwt" depends="compile.java,copy.web,ivy.resolve">
        <java classpathref="build.classpath" classname="com.google.gwt.dev.Compiler" fork="true" maxmemory="256m">
        	<arg value="-war" />
            <arg value="${web.output.dir}" />
            <arg value="mat.Mat" />
            <arg value="mat.Login" />
        </java>
    	
    </target>
    
	<!-- compile for server side code -->
    <target name="compile.java" depends="copy.web,ivy.resolve">     
        <javac classpathref="build.classpath" 
               srcdir="src"   
               destdir="${web.output.dir}/WEB-INF/classes"                     
               fork="true"
               debug="true"
        />
    	
    </target>

	<!-- get latest code from SVN -->
    <target name="svn.update">
    	<!-- uncomment for local build only 
        <exec executable="${tortoise.path}tortoiseproc">
            <arg line="/command:update /path:. /rev:HEAD"/>
        </exec>
        -->
    </target>
	
	<!-- clean up local working directories -->
    <target name="clean" description="Clean">
        <delete dir="${web.output.dir}"/> 
        <mkdir dir="${web.output.dir}/WEB-INF/classes"/>        
        <mkdir dir="${web.output.dir}/WEB-INF/classes/hibernate"/>        
        <mkdir dir="${web.output.dir}/WEB-INF/lib"/>
    </target>
    
	<!-- jar up the working directory as a war file -->
    <target name="make.war" depends="clean,svn.update,compile.gwt,compile.java" description="Build war">
        <mkdir dir="${web.output.dir}/META-INF"/>
        <manifest file="${web.output.dir}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}"/>
         </manifest>
    	<mkdir dir="${output.war.dir}"/>
        <jar destfile="${output.file}" basedir="${web.output.dir}" manifest="${web.output.dir}/META-INF/MANIFEST.MF"></jar>
    	<antcall target="pmd"/>
    	<!--<antcall target="JUnit-report" /> -->
    	<antcall target="checksum"/>
    	
    </target>
	
	<!-- Save Checksum of war file after creating war file  -->
	<target name="checksum">
			<checksum file="${output.war.dir}/${war.name}.war" algorithm="${output.checksum.algo}" fileext=".checksum.${output.checksum.algo}"/>
	</target>
	
	<target name="init">
	    <mkdir dir="${pmddoc}" />
	</target>
	
	<target name="pmd" depends="init">
		<pmd>
		<formatter type="html" toFile="${pmddoc}/pmd_src_report.html" toConsole="true"/>
	    <ruleset>rulesets/basic.xml</ruleset> 
        <fileset dir="src/mat">
            <include name="**/*.java"/>     
        </fileset>
	  </pmd>
	</target>
	
</project>

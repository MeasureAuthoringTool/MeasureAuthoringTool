<project name="MAT" basedir="." default="make.war" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="build.properties" />
	<property environment="env"/>
	<property name="deployment.dir.prefix" value="${output.war.dir}" />
	<property name="web.output.dir" value="${output.dir}"/>
	<property name="output.file" value="${output.war.dir}/${war.name}.war"/>
	<property name="web.lib.dir" value="${output.dir}/WEB-INF/lib"/>
	<property name="java.src.dir" value="src" />
	<property name="test.src.dir" value="test" />


	<path id="build.classpath">
		<pathelement location="${web.output.dir}/WEB-INF/classes"/>
		<pathelement location="src"/>
		<pathelement location="war/WEB-INF/lib"/>
		<fileset dir="war/WEB-INF/lib" includes="*.jar" />
	</path>

	<!--<pathconvert property="manifest.classpath" pathsep=" ">
              <path refid="build.classpath"/>
              <mapper>
                <chainedmapper>
                   <flattenmapper/>
                   <globmapper from="*.jar" to="MeasureAuthoringTool/WEB-INF/lib/*.jar"/>
                </chainedmapper>
              </mapper>
    </pathconvert>-->

	<property name="PMD.home" location="war/WEB-INF"/>
	<property name="pmddoc" location="${output.dir}/pmddoc" />
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
		<classpath>
			<fileset dir="${PMD.home}">
				<include name="lib/*.jar"/>
			</fileset>
		</classpath>
	</taskdef>

	<property name="CHECKSTYLE.home" location="war/WEB-INF"/>
	<property name="checkStyledoc" location="${output.dir}/checkStyledoc" />

	<property name="FINDBUG.home" location="doc"/>
	<property name="findBugdoc" location="${output.dir}/findBugdoc" />

	<path id="test.classpath">
		<pathelement path="${web.output.dir}/test-classes" />
		<pathelement path="${web.output.dir}/WEB-INF/classes" />
		<fileset dir="${web.output.dir}/WEB-INF/lib" includes="*.jar" />
	</path>

	<target name="ivy.resolve">
		<!-- not full configured
        <ivy:configure file="ivyconf.xml"/>
        <ivy:resolve file="ivy.xml" conf="default"/>
        <ivy:retrieve pattern="${web.lib.dir}/[artifact].[ext]" conf="default" />
        -->
	</target>

	<!-- copy all files in the web folder, except the compiled classes, to output dir -->
	<target name="copy.web">
		<copy todir="${web.output.dir}">
			<fileset dir="war">
				<exclude name="WEB-INF/classes/**"/>
				<!-- do not copy the file from this location, get from conf/deploy -->
				<exclude name="WEB-INF/${persistence.file}"/>
				<exclude name="WEB-INF/${security.file}"/>
				<exclude name="WEB-INF/${mail.file}"/>
				<!-- uncomment when ivy.resolve is ready
                <exclude name="WEB-INF/lib/**"/>
                -->
			</fileset>
		</copy>
		<copy todir="${web.output.dir}/WEB-INF/classes/">
			<fileset dir="src" excludes="**/*.java">
			</fileset>
		</copy>

		<!-- copy custom file(s) -->
		<copy todir="${web.output.dir}/WEB-INF">
			<fileset dir="conf/deploy">
			</fileset>
		</copy>

	</target>

	<!--  creates the jUnit test xml file used by Quickbuild  -->

	<target name="JUnit-report" depends="test">
		<mkdir dir="${web.output.dir}/reports"/>
		<junitreport todir="${web.output.dir}/reports">
			<fileset dir="${web.output.dir}/test-results">
				<include name="TEST-*.xml" />
			</fileset>
		</junitreport>
	</target>

	<!--  compiles the test files, runs the jUnit tests and creates the code coverage information used by cobertura. This coverage information is provided by running the jUnit tests on the 'instrumented-classes' that cobertura creates.
       -->
	<target name="test">
		<mkdir dir="${web.output.dir}/test-classes" />
		<mkdir dir="${web.output.dir}/test-results" />
		<javac classpathref="test.classpath" srcdir="${test.src.dir}" destdir="${web.output.dir}/test-classes" fork="true" debug="true">
		</javac>
		<copy todir="${web.output.dir}/test-classes">
			<fileset dir="${test.src.dir}" />
		</copy>
		<junit haltonfailure="no" printsummary="on" fork="yes">
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<classpath>
				<path refid="test.classpath" />
				<path location="${web.output.dir}/WEB-INF/classes"/>
			</classpath>
			<batchtest fork="yes" todir="${web.output.dir}/test-results">
				<fileset dir="${web.output.dir}/test-classes" includes="**/FileUploadValidationTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImplOidTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/ExcelSheetParserTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/SortUtilityTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/US547ListObjectDAOTest.class" />

				<fileset dir="${web.output.dir}/test-classes" includes="**/CodeListExportTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/AdminServiceImplTest.class" />
				<!--<fileset dir="${web.output.dir}/test-classes" includes="**/LoginServiceImplTest.class" />-->
				<fileset dir="${web.output.dir}/test-classes" includes="**/PasswordVerifierTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/SecurityQuestionVerifierTest.class" />

				<fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImplTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/ManageQDMElementTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/ValidationTestForCloning.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/DotNotationTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/SortUtilityTest.class" />

				<fileset dir="${web.output.dir}/test-classes" includes="**/CodeListRequiredFieldTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/SimpleEMeasureServiceImplTest.class" />
				<!--<fileset dir="${web.output.dir}/test-classes" includes="**/ResetUserPasswordTest.class" />-->
				<fileset dir="${web.output.dir}/test-classes" includes="**/UserServiceImplTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/ManageQDSImplTest.class" />

				<fileset dir="${web.output.dir}/test-classes" includes="**/ClauseServiceImplTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/QDSAttributesServiceImplTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImplMockedTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/PagingToolHelperTest.class" />

				<fileset dir="${web.output.dir}/test-classes" includes="**/DAOTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/ForgotPasswordTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/V1_0_2_US7_US8_SimpleEMeasureServiceImplTest.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/V1_0_2_US4_MeasureLibraryServiceImplTest.class" />

				<fileset dir="${web.output.dir}/test-classes" includes="**/Sprint21Tests.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/Sprint22Tests.class" />
				<fileset dir="${web.output.dir}/test-classes" includes="**/Sprint23Tests.class" />
				<!--
                <fileset dir="${web.output.dir}/test-classes" includes="**/ReportsDataAccessTestCase.class" />
                -->
				<!-- broken tests -->
				<!--
                <fileset dir="${web.output.dir}/test-classes" includes="**/ClauseDAOTest.class" />
                <fileset dir="${web.output.dir}/test-classes" includes="**/ManageCodeListServiceImpl2Test.class" />
                <fileset dir="${web.output.dir}/test-classes" includes="**/UserServiceImplMockedTest.class" />
                <fileset dir="${web.output.dir}/test-classes" includes="**/PackagerServiceImplMockedTest.class" />
                
                <fileset dir="${web.output.dir}/test-classes" includes="**/MeasureDAOTest.class" />
                
                <fileset dir="${web.output.dir}/test-classes" includes="**/ExcelFileParsingTest" />
                -->



			</batchtest>
		</junit>
	</target>

	<!-- compile gwt (client side code)-->
	<target name="compile.gwt" depends="compile.java,copy.web,ivy.resolve">
		<java classpathref="build.classpath" classname="com.google.gwt.dev.Compiler" fork="true" maxmemory="1024m">
			<!--<arg value="-logLevel"/><arg value="DEBUG"/>-->
			<arg value="-war" />
			<arg value="${web.output.dir}" />
			<arg value="mat.Mat" />
			<arg value="mat.Login" />
		</java>

	</target>

	<!-- compile for server side code -->
	<target name="compile.java" depends="copy.web,ivy.resolve">
		<javac classpathref="build.classpath" 
            srcdir="src"   
            destdir="${web.output.dir}/WEB-INF/classes"                     
            fork="true"
            debug="true"
	    />

	</target>

	<!-- get latest code from SVN -->
	<target name="svn.update">
		<!-- uncomment for local build only 
        <exec executable="${tortoise.path}tortoiseproc">
            <arg line="/command:update /path:. /rev:HEAD"/>
        </exec>
        -->
	</target>

	<!-- clean up local working directories -->
	<target name="clean" description="Clean">
		<delete dir="${web.output.dir}"/>
		<mkdir dir="${web.output.dir}/WEB-INF/classes"/>
		<mkdir dir="${web.output.dir}/WEB-INF/classes/hibernate"/>
		<mkdir dir="${web.output.dir}/WEB-INF/lib"/>
	</target>

	<!-- jar up the working directory as a war file -->
	<target name="make.war" depends="clean,svn.update,compile.gwt,compile.java" description="Build war">
		<mkdir dir="${web.output.dir}/META-INF"/>
		<manifest file="${web.output.dir}/META-INF/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}"/>
			<!--<attribute name="Class-Path" value="${manifest.classpath}"/>-->
		</manifest>
		<mkdir dir="${output.war.dir}"/>
		<delete file="${web.output.dir}/WEB-INF/lib/gwt-dev.jar"/>
		<delete dir="${web.output.dir}/WEB-INF/classes/org"/>
		<jar destfile="${output.file}" basedir="${web.output.dir}" manifest="${web.output.dir}/META-INF/MANIFEST.MF">
		</jar>
		<!--<antcall target="pmd"/>
        <antcall target="JUnit-report" /> -->
		<antcall target="checksum"/>
		<antcall target="checkstyle"/>
	</target>

	<!-- Save Checksum of war file after creating war file  -->
	<target name="checksum">
		<checksum file="${output.war.dir}/${war.name}.war" algorithm="${output.checksum.algo}" fileext=".checksum.${output.checksum.algo}"/>
	</target>

	<target name="init">
		<mkdir dir="${pmddoc}" />
	</target>

	<target name="initCheckStyle">
		<mkdir dir="${checkStyledoc}" />
	</target>

	<target name="pmd" depends="init" description="Generates a pmd report of code convention violations.">
		<pmd>
			<formatter type="html" toFile="${pmddoc}/pmd_src_report.html" toConsole="true"/>
			<ruleset>rulesets/java/basic.xml,java-imports,java-basic,java-j2ee</ruleset>
			<fileset dir="src/mat">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
	</target>


	<target name="checkstyle" depends="initCheckStyle"
        description="Generates a report of code convention violations.">
		<taskdef resource="checkstyletask.properties" classpath ="${CHECKSTYLE.home}/lib/checkstyle-5.3-all.jar"/>
		<checkstyle config="doc/checkstyle-javasg.xml"
            failureProperty="checkstyle.failure"
            failOnViolation="false">
			<formatter type="xml" tofile="${checkStyledoc}/checkstyle_report.xml" />
			<fileset dir="src/mat" includes="**/*.java"/>
		</checkstyle>
		<style in="${checkStyledoc}/checkstyle_report.xml" 
            out="${checkStyledoc}/checkstyle_report.html"
            style="doc/checkstyle-noframes.xsl"
        />
	</target>

	<target name="findbugs"  depends="compile.gwt,compile.java" description="Run code analysis over code to check for problems.">
		<!-- Fail this target if FindBugs is not installed. -->
		<available file="${FINDBUG.home}/findBug/lib/findbugs.jar" property="findbugs.available" />
		<fail unless="findbugs.available" message="Error: FINDBUGS_HOME not set or findbugs.jar not found." />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${FINDBUG.home}/findBug/lib/findbugs-ant.jar"/>

		<!-- Run FindBugs. -->
		<mkdir dir="${findBugdoc}" />
		<findbugs home="${FINDBUG.home}/findBug/lib" workHard="true" output="html" outputFile="${findBugdoc}/findbugs.html">
			<class location="${output.dir}/WEB-INF/classes" />
			<auxClasspath>
				<fileset file="${output.dir}/WEB-INF/lib/gwt-user.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/hibernate-3.5.6.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/spring-security-core-3.0.3.RELEASE.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/vt-password-3.1.1.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/vt-dictionary-3.0.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/http*.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/vsac_framework.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/commons*.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/xstream-1.3.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/xercesImpl-2.9.1.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/log4j-1.2.14.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/castor-*.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/org.springframework.*.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/poi*.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/velocity-1.7.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/backport-concurrent.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/ant*.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/cos.jar" />
				<fileset file="${output.dir}/WEB-INF/lib/saxon*.jar" />
			</auxClasspath>
		</findbugs>
	</target>
</project>

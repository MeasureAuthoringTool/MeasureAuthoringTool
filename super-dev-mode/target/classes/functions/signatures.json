[
	{
		"name": "Abs",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Integer"
			}
		],
		"documentation": "The Abs function returns the absolute value of its argument. "
	},
	{
		"name": "Abs",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Abs function returns the absolute value of its argument. "
	},
	{
		"name": "Abs",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Quantity"
			}
		],
		"documentation": "The Abs function returns the absolute value of its argument."
	},
	{
		"name": "AgeInDays",
		"returnType": "Integer",
		"arguments": [
		],
		"documentation": "The Age operators calculate the age of the patient as of now in the precision named in the operator."
	},
	{
		"name": "AgeInDaysAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInDaysAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInHours",
		"returnType": "Integer",
		"arguments": [
		],
		"documentation": "The Age operators calculate the age of the patient as of now in the precision named in the operator."
	},
	{
		"name": "AgeInHoursAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInMinutes",
		"returnType": "Integer",
		"arguments": [
		],
		"documentation": "The Age operators calculate the age of the patient as of now in the precision named in the operator."
	},
	{
		"name": "AgeInMinutesAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInSeconds",
		"returnType": "Integer",
		"arguments": [
		],
		"documentation": "The Age operators calculate the age of the patient as of now in the precision named in the operator."
	},
	{
		"name": "AgeInSecondsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInWeeks",
		"returnType": "Integer",
		"arguments": [
		],
		"documentation": "The Age operators calculate the age of the patient as of now in the precision named in the operator."
	},
	{
		"name": "AgeInWeeksAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInWeeksAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInYears",
		"returnType": "Integer",
		"arguments": [
		],
		"documentation": "The Age operators calculate the age of the patient as of now in the precision named in the operator."
	},
	{
		"name": "AgeInYearsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInYearsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInMonths",
		"returnType": "Integer",
		"arguments": [
		],
		"documentation": "The Age operators calculate the age of the patient as of now in the precision named in the operator."
	},
	{
		"name": "AgeInMonthsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AgeInMonthsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The AgeAt operators calculate the age of the patient as of the given date in the precision named in the operator."
	},
	{
		"name": "AllTrue",
		"returnType": "Boolean",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Boolean>"
			}
		],
		"documentation": "The AllTrue operator returns true if all the non-null elements in the source are true."
	},
	{
		"name": "AnyTrue",
		"returnType": "Boolean",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Boolean>"
			}
		],
		"documentation": "The AnyTrue operator returns true if any non-null element in the source is true."
	},
	{
		"name": "Avg",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Avg operator returns the average of the non-null elements in the source."
	},
	{
		"name": "Avg",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Avg operator returns the average of the non-null elements in the source."
	},
	{
		"name": "CalculateAgeInDays",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInDays",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInDaysAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			},
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInDaysAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			},
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInHours",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInHoursAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			},
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInMinutes",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInMinutesAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			},
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInMonths",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInMonths",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInMonthsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			},
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInMonthsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			},
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInSeconds",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInSecondsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			},
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInWeeks",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInWeeks",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInWeeksAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			},
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInWeeksAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			},
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInYears",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInYears",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAge operators calculate the age of a person born on the given birthdate as of now in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInYearsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "DateTime"
			},
			{
				"name": "asOf",
				"returnType": "DateTime"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "CalculateAgeInYearsAt",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "birthDate",
				"returnType": "Date"
			},
			{
				"name": "asOf",
				"returnType": "Date"
			}
		],
		"documentation": "The CalculateAgeAt operators calculate the age of a person born on the given birthdate as of the given date in the precision named in the operator."
	},
	{
		"name": "Ceiling",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Ceiling function returns the first integer greater than or equal to the argument. When invoked with an Integer argument, the argument will be implicitly converted to Decimal. If the argument is null, the result is null. "
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "Count",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<QDM>"
			}
		],
		"documentation": "The Count operator returns the number of non-null elements in the source."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			},
			{
				"name": "month",
				"returnType": "Integer"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			},
			{
				"name": "month",
				"returnType": "Integer"
			},
			{
				"name": "day",
				"returnType": "Integer"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			},
			{
				"name": "month",
				"returnType": "Integer"
			},
			{
				"name": "day",
				"returnType": "Integer"
			},
			{
				"name": "hour",
				"returnType": "Integer"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			},
			{
				"name": "month",
				"returnType": "Integer"
			},
			{
				"name": "day",
				"returnType": "Integer"
			},
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			},
			{
				"name": "month",
				"returnType": "Integer"
			},
			{
				"name": "day",
				"returnType": "Integer"
			},
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			},
			{
				"name": "second",
				"returnType": "Integer"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			},
			{
				"name": "month",
				"returnType": "Integer"
			},
			{
				"name": "day",
				"returnType": "Integer"
			},
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			},
			{
				"name": "second",
				"returnType": "Integer"
			},
			{
				"name": "millisecond",
				"returnType": "Integer"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "DateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "year",
				"returnType": "Integer"
			},
			{
				"name": "month",
				"returnType": "Integer"
			},
			{
				"name": "day",
				"returnType": "Integer"
			},
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			},
			{
				"name": "second",
				"returnType": "Integer"
			},
			{
				"name": "millisecond",
				"returnType": "Integer"
			},
			{
				"name": "timezoneOffset",
				"returnType": "Decimal"
			}
		],
		"documentation": "The DateTime operator constructs a date/time value from the given components."
	},
	{
		"name": "Exp",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Exp operator raises e to the power of its argument."
	},
	{
		"name": "First",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "First",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "First",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "First",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "First",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "First",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "First",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "First",
		"returnType": "QDM",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<QDM>"
			}
		],
		"documentation": "The First operator returns the first element in a list."
	},
	{
		"name": "Floor",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Floor operator returns the first integer less than or equal to the argument."
	},
	{
		"name": "GeometricMean",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The GeometricMean operator returns the geometric mean of the non-null elements in the source."
	},
	{
		"name": "HighBoundary",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "input",
				"returnType": "Decimal"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The HighBoundary function returns the greatest possible value of the input to the specified precision."
	},
	{
		"name": "HighBoundary",
		"returnType": "Date",
		"arguments": [
			{
				"name": "input",
				"returnType": "Date"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The HighBoundary function returns the greatest possible value of the input to the specified precision."
	},
	{
		"name": "HighBoundary",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "input",
				"returnType": "DateTime"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The HighBoundary function returns the greatest possible value of the input to the specified precision."
	},
	{
		"name": "HighBoundary",
		"returnType": "Time",
		"arguments": [
			{
				"name": "input",
				"returnType": "Time"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The HighBoundary function returns the greatest possible value of the input to the specified precision."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			},
			{
				"name": "element",
				"returnType": "Integer"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			},
			{
				"name": "element",
				"returnType": "Decimal"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			},
			{
				"name": "element",
				"returnType": "Quantity"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			},
			{
				"name": "element",
				"returnType": "Date"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			},
			{
				"name": "element",
				"returnType": "DateTime"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			},
			{
				"name": "element",
				"returnType": "Time"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			},
			{
				"name": "element",
				"returnType": "String"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "IndexOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<QDM>"
			},
			{
				"name": "element",
				"returnType": "QDM"
			}
		],
		"documentation": "The IndexOf operator returns the 0-based index of the given element in the given source list."
	},
	{
		"name": "Last",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Last",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Last",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Last",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Last",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Last",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Last",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Last",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<QDM>"
			}
		],
		"documentation": "The Last operator returns the last element in a list."
	},
	{
		"name": "Length",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Length operator returns the number of elements in a list."
	},
	{
		"name": "Length",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Length operator returns the number of elements in a list."
	},
	{
		"name": "Length",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Length operator returns the number of elements in a list."
	},
	{
		"name": "Length",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The Length operator returns the number of elements in a list."
	},
	{
		"name": "Length",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The Length operator returns the number of elements in a list."
	},
	{
		"name": "Length",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The Length operator returns the number of elements in a list."
	},
	{
		"name": "Length",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The Length operator returns the number of elements in a list."
	},
	{
		"name": "Ln",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Ln operator computes the natural logarithm of its argument."
	},
	{
		"name": "Log",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			},
			{
				"name": "base",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Log operator computes the logarithm of its first argument, using the second argument as the base."
	},
	{
		"name": "LowBoundary",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "input",
				"returnType": "Decimal"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The LowBoundary function returns the least possible value of the input to the specified precision."
	},
	{
		"name": "LowBoundary",
		"returnType": "Date",
		"arguments": [
			{
				"name": "input",
				"returnType": "Date"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The LowBoundary function returns the least possible value of the input to the specified precision."
	},
	{
		"name": "LowBoundary",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "input",
				"returnType": "DateTime"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The LowBoundary function returns the least possible value of the input to the specified precision."
	},
	{
		"name": "LowBoundary",
		"returnType": "Time",
		"arguments": [
			{
				"name": "input",
				"returnType": "Time"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The LowBoundary function returns the least possible value of the input to the specified precision."
	},
	{
		"name": "Lower",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The Lower operator returns the given string with all characters converted to their lower case equivalents."
	},
	{
		"name": "Matches",
		"returnType": "Boolean",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			},
			{
				"name": "pattern",
				"returnType": "String"
			}
		],
		"documentation": "The Matches operator returns true if the given string matches the given regular expression pattern."
	},
	{
		"name": "Matches",
		"returnType": "Boolean",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			},
			{
				"name": "pattern",
				"returnType": "String"
			},
			{
				"name": "substitution",
				"returnType": "String"
			}
		],
		"documentation": "The Matches operator returns true if the given string matches the given regular expression pattern."
	},
	{
		"name": "Max",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Max operator returns the maximum element in the source."
	},
	{
		"name": "Max",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Max operator returns the maximum element in the source."
	},
	{
		"name": "Max",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Max operator returns the maximum element in the source."
	},
	{
		"name": "Max",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The Max operator returns the maximum element in the source."
	},
	{
		"name": "Max",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The Max operator returns the maximum element in the source."
	},
	{
		"name": "Max",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The Max operator returns the maximum element in the source."
	},
	{
		"name": "Max",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The Max operator returns the maximum element in the source."
	},
	{
		"name": "Median",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Median operator returns the median of the elements in source."
	},
	{
		"name": "Median",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Median operator returns the median of the elements in source."
	},
	{
		"name": "Min",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Min operator returns the minimum element in the source."
	},
	{
		"name": "Min",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Min operator returns the minimum element in the source."
	},
	{
		"name": "Min",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Min operator returns the minimum element in the source."
	},
	{
		"name": "Min",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The Min operator returns the minimum element in the source."
	},
	{
		"name": "Min",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The Min operator returns the minimum element in the source."
	},
	{
		"name": "Min",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The Min operator returns the minimum element in the source."
	},
	{
		"name": "Min",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The Min operator returns the minimum element in the source."
	},
	{
		"name": "Mode",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Mode operator returns the statistical mode of the elements in source."
	},
	{
		"name": "Mode",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Mode operator returns the statistical mode of the elements in source."
	},
	{
		"name": "Now",
		"returnType": "DateTime",
		"arguments": [
		],
		"documentation": "The Now operator returns the date and time of the start timestamp associated with the evaluation request."
	},
	{
		"name": "PopulationStdDev",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The PopulationStdDev operator returns the statistical standard deviation of the elements in source.."
	},
	{
		"name": "PopulationStdDev",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The PopulationStdDev operator returns the statistical standard deviation of the elements in source."
	},
	{
		"name": "PopulationVariance",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The PopulationVariance operator returns the statistical population variance of the elements in source."
	},
	{
		"name": "PopulationVariance",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The StdDev operator returns the statistical standard deviation of the elements in source."
	},
	{
		"name": "PositionOf",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "pattern",
				"returnType": "String"
			},
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The PositionOf operator returns the 0-based index of the given pattern in the given string. If the pattern is not found, the result is -1."
	},
	{
		"name": "Precision",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Precision function returns the number of digits of precision in the input value."
	},
	{
		"name": "Precision",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Date"
			}
		],
		"documentation": "The Precision function returns the number of digits of precision in the input value."
	},
	{
		"name": "Precision",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "DateTime"
			}
		],
		"documentation": "The Precision function returns the number of digits of precision in the input value."
	},
	{
		"name": "Precision",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Time"
			}
		],
		"documentation": "The Precision function returns the number of digits of precision in the input value."
	},
	{
		"name": "Product",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Product operator returns the geometric product of the elements in source."
	},
	{
		"name": "Product",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Product operator returns the geometric product of the elements in source."
	},
	{
		"name": "Product",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Product operator returns the geometric product of the elements in source."
	},
	{
		"name": "Round",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Integer"
			}
		],
		"documentation": "The Round function returns the nearest whole number to its argument. The semantics of round are defined as a traditional round, meaning that a decimal value of 0. 5 or higher will round to 1. When invoked with an Integer argument, the argument will be implicitly converted to Decimal. If the argument is null, the result is null. Precision determines the decimal place at which the rounding will occur. If precision is not specified or null, 0 is assumed. "
	},
	{
		"name": "Round",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			},
			{
				"name": "precision",
				"returnType": "Integer"
			}
		],
		"documentation": "The Round function returns the nearest whole number to its argument. The semantics of round are defined as a traditional round, meaning that a decimal value of 0. 5 or higher will round to 1. When invoked with an Integer argument, the argument will be implicitly converted to Decimal. If the argument is null, the result is null. Precision determines the decimal place at which the rounding will occur. If precision is not specified or null, 0 is assumed. "
	},
	{
		"name": "Size",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Interval<Integer>"
			}
		],
		"documentation": "The Size operator returns the size of an interval. Note that because CQL defines duration and difference operations for date and time valued intervals, size is not defined for intervals of these types."
	},
	{
		"name": "Size",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Interval<Decimal>"
			}
		],
		"documentation": "The Size operator returns the size of an interval. Note that because CQL defines duration and difference operations for date and time valued intervals, size is not defined for intervals of these types."
	},


	{
		"name": "Size",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Interval<Date>"
			}
		],
		"documentation": "The Size operator returns the size of an interval. Note that because CQL defines duration and difference operations for date and time valued intervals, size is not defined for intervals of these types."
	},
	{
		"name": "Size",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Interval<DateTime>"
			}
		],
		"documentation": "The Size operator returns the size of an interval. Note that because CQL defines duration and difference operations for date and time valued intervals, size is not defined for intervals of these types."
	},
	{
		"name": "Size",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Interval<Time>"
			}
		],
		"documentation": "The Size operator returns the size of an interval. Note that because CQL defines duration and difference operations for date and time valued intervals, size is not defined for intervals of these types."
	},
	{
		"name": "Size",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Interval<Quantity>"
			}
		],
		"documentation": "The Size operator returns the size of an interval. Note that because CQL defines duration and difference operations for date and time valued intervals, size is not defined for intervals of these types."
	},
	{
		"name": "Skip",
		"returnType": "List<Date>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<DateTime>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<Decimal>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<Integer>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<Quantity>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<Ratio>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Ratio>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<String>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<Time>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Skip",
		"returnType": "List<QDM>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<QDM>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Skip operator returns the elements in the list, skipping the first number elements. If the list has less number elements, the result is empty."
	},
	{
		"name": "Split",
		"returnType": "List<String>",
		"arguments": [
			{
				"name": "stringToSplit",
				"returnType": "String"
			},
			{
				"name": "separator",
				"returnType": "String"
			}
		],
		"documentation": "The Split operator splits a string into a list of strings using a separator."
	},
	{
		"name": "SplitOnMatches",
		"returnType": "List<String>",
		"arguments": [
			{
				"name": "stringToSplit",
				"returnType": "String"
			},
			{
				"name": "separatorPattern",
				"returnType": "String"
			}
		],
		"documentation": "The SplitOnMatches operator splits a string into a list of strings using a separator that is defined by a regular expression pattern. If the stringToSplit argument is null, the result is null."
	},
	{
		"name": "StartsWith",
		"returnType": "Boolean",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			},
			{
				"name": "prefix",
				"returnType": "String"
			}
		],
		"documentation": "The StartsWith operator returns true if the given string starts with the given prefix. If the prefix is the empty string, the result is true."
	},
	{
		"name": "StdDev",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The StdDev operator returns the statistical standard deviation of the elements in source."
	},
	{
		"name": "StdDev",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The PopulationVariance operator returns the statistical population variance of the elements in source."
	},
	{
		"name": "Substring",
		"returnType": "String",
		"arguments": [
			{
				"name": "stringToSub",
				"returnType": "String"
			},
			{
				"name": "startIndex",
				"returnType": "Integer"
			}
		],
		"documentation": "The Substring operator returns the string within stringToSub, starting at the 0-based index startIndex, and consisting of length characters. If length is omitted, the substring returned starts at startIndex and continues to the end of stringToSub."
	},
	{
		"name": "Substring",
		"returnType": "String",
		"arguments": [
			{
				"name": "stringToSub",
				"returnType": "String"
			},
			{
				"name": "startIndex",
				"returnType": "Integer"
			},
			{
				"name": "length",
				"returnType": "Integer"
			}
		],
		"documentation": "The Substring operator returns the string within stringToSub, starting at the 0-based index startIndex, and consisting of length characters. If length is omitted, the substring returned starts at startIndex and continues to the end of stringToSub."
	},
	{
		"name": "Sum",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Sum operator returns the sum of non-null elements in the source."
	},
	{
		"name": "Sum",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Sum operator returns the sum of non-null elements in the source."
	},
	{
		"name": "Sum",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Sum operator returns the sum of non-null elements in the source."
	},
	{
		"name": "Tail",
		"returnType": "List<Date>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<Datetime>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<Decimal>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<Integer>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<Quantity>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<Ratio>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Ratio>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<String>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<Time>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Tail",
		"returnType": "List<QDM>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<QDM>"
			}
		],
		"documentation": "The Tail operator returns all but the first element from the given list. If the list is empty, the result is empty."
	},
	{
		"name": "Take",
		"returnType": "List<Date>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<DateTime>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<Decimal>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<Integer>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<Quantity>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<Ratio>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Ratio>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<String>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<Time>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Take",
		"returnType": "List<QDM>",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<QDM>"
			},
			{
				"name": "number",
				"returnType": "Integer"
			}
		],
		"documentation": "The Take operator returns the first number elements from the given list. If the list has less than number elements, the result only contains the elements in the list."
	},
	{
		"name": "Time",
		"returnType": "Time",
		"arguments": [
			{
				"name": "hour",
				"returnType": "Integer"
			}
		],
		"documentation": "The Time operator constructs a time value from the given components."
	},
	{
		"name": "Time",
		"returnType": "Time",
		"arguments": [
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			}
		],
		"documentation": "The Time operator constructs a time value from the given components."
	},
	{
		"name": "Time",
		"returnType": "Time",
		"arguments": [
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			},
			{
				"name": "second",
				"returnType": "Integer"
			}
		],
		"documentation": "The Time operator constructs a time value from the given components."
	},
	{
		"name": "Time",
		"returnType": "Time",
		"arguments": [
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			},
			{
				"name": "second",
				"returnType": "Integer"
			},
			{
				"name": "millisecond",
				"returnType": "Integer"
			}
		],
		"documentation": "The Time operator constructs a time value from the given components."
	},
	{
		"name": "Time",
		"returnType": "Time",
		"arguments": [
			{
				"name": "hour",
				"returnType": "Integer"
			},
			{
				"name": "minute",
				"returnType": "Integer"
			},
			{
				"name": "second",
				"returnType": "Integer"
			},
			{
				"name": "millisecond",
				"returnType": "Integer"
			},
			{
				"name": "timezoneOffset",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Time operator constructs a time value from the given components."
	},
	{
		"name": "ToBoolean",
		"returnType": "Boolean",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The ToBoolean operator converts the value of its argument to a Boolean value."
	},
	{
		"name": "ToDate",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "DateTime"
			}
		],
		"documentation": "The ToDate operator converts the value of its argument to a Date value."
	},
	{
		"name": "ToDate",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The ToDate operator converts the value of its argument to a Date value."
	},
	{
		"name": "ToDateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Date"
			}
		],
		"documentation": "The ToDateTime operator converts the value of its argument to a Date value."
	},
	{
		"name": "ToDateTime",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The ToDateTime operator converts the value of its argument to a Date value."
	},
	{
		"name": "ToDecimal",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The ToDecimal operator converts the value of its argument to a Decimal value."
	},
	{
		"name": "ToInteger",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The ToInteger operator converts the value of its argument to a Integer value."
	},
	
	{
		"name": "ToQuantity",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The ToQuantity operator converts the value of its argument to a Quantity value."
	},
		{
		"name": "ToQuantity",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Integer"
			}
		],
		"documentation": "The ToQuantity operator converts the value of its argument to a Quantity value."
	},
		{
		"name": "ToQuantity",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The ToQuantity operator converts the value of its argument to a Quantity value."
	},
	
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Boolean"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Integer"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Quantity"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Ratio"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Date"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "DateTime"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToString",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Time"
			}
		],
		"documentation": "The ToString operator converts the value of its argument to a String value."
	},
	{
		"name": "ToTime",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The ToTime operator converts the value of its argument to a Time value."
	},	
	{
		"name": "TimeOfDay",
		"returnType": "Time",
		"arguments": [
		],
		"documentation": "The TimeOfDay operator returns the time of day of the start timestamp associated with the evaluation request."
	},
	{
		"name": "Today",
		"returnType": "DateTime",
		"arguments": [
		],
		"documentation": "The Today operator returns the date (with no time component) of the start timestamp associated with the evaluation request."
	},
	{
		"name": "Truncate",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Truncate operator returns the integer component of its argument."
	},
	{
		"name": "Upper",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "String"
			}
		],
		"documentation": "The Upper operator returns the given string with all characters converted to their upper case equivalents."
	},
	{
		"name": "Variance",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Variance operator returns the statistical variance of the elements in source."
	},
	{
		"name": "Variance",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Variance operator returns the statistical variance of the elements in source."
	},
	{
		"name": "Coalesce",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Integer>"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Decimal>"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Quantity",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Quantity>"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Date>"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<DateTime>"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<Time>"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument",
				"returnType": "List<String>"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Integer"
			},
			{
				"name": "argument2",
				"returnType": "Integer"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Integer"
			},
			{
				"name": "argument2",
				"returnType": "Integer"
			},
			{
				"name": "argument3",
				"returnType": "Integer"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Integer"
			},
			{
				"name": "argument2",
				"returnType": "Integer"
			},
			{
				"name": "argument3",
				"returnType": "Integer"
			},
			{
				"name": "argument4",
				"returnType": "Integer"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Integer",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Integer"
			},
			{
				"name": "argument2",
				"returnType": "Integer"
			},
			{
				"name": "argument3",
				"returnType": "Integer"
			},
			{
				"name": "argument4",
				"returnType": "Integer"
			},
			{
				"name": "argument5",
				"returnType": "Integer"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Decimal"
			},
			{
				"name": "argument2",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Decimal"
			},
			{
				"name": "argument2",
				"returnType": "Decimal"
			},
			{
				"name": "argument3",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Decimal"
			},
			{
				"name": "argument2",
				"returnType": "Decimal"
			},
			{
				"name": "argument3",
				"returnType": "Decimal"
			},
			{
				"name": "argument4",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Decimal",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Decimal"
			},
			{
				"name": "argument2",
				"returnType": "Decimal"
			},
			{
				"name": "argument3",
				"returnType": "Decimal"
			},
			{
				"name": "argument4",
				"returnType": "Decimal"
			},
			{
				"name": "argument5",
				"returnType": "Decimal"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Date"
			},
			{
				"name": "argument2",
				"returnType": "Date"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Date"
			},
			{
				"name": "argument2",
				"returnType": "Date"
			},
			{
				"name": "argument3",
				"returnType": "Date"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Date"
			},
			{
				"name": "argument2",
				"returnType": "Date"
			},
			{
				"name": "argument3",
				"returnType": "Date"
			},
			{
				"name": "argument4",
				"returnType": "Date"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Date",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Date"
			},
			{
				"name": "argument2",
				"returnType": "Date"
			},
			{
				"name": "argument3",
				"returnType": "Date"
			},
			{
				"name": "argument4",
				"returnType": "Date"
			},
			{
				"name": "argument5",
				"returnType": "Date"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "DateTime"
			},
			{
				"name": "argument2",
				"returnType": "DateTime"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "DateTime"
			},
			{
				"name": "argument2",
				"returnType": "DateTime"
			},
			{
				"name": "argument3",
				"returnType": "DateTime"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "DateTime"
			},
			{
				"name": "argument2",
				"returnType": "DateTime"
			},
			{
				"name": "argument3",
				"returnType": "DateTime"
			},
			{
				"name": "argument4",
				"returnType": "DateTime"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "DateTime",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "DateTime"
			},
			{
				"name": "argument2",
				"returnType": "DateTime"
			},
			{
				"name": "argument3",
				"returnType": "DateTime"
			},
			{
				"name": "argument4",
				"returnType": "DateTime"
			},
			{
				"name": "argument5",
				"returnType": "DateTime"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Time"
			},
			{
				"name": "argument2",
				"returnType": "Time"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Time"
			},
			{
				"name": "argument2",
				"returnType": "Time"
			},
			{
				"name": "argument3",
				"returnType": "Time"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Time"
			},
			{
				"name": "argument2",
				"returnType": "Time"
			},
			{
				"name": "argument3",
				"returnType": "Time"
			},
			{
				"name": "argument4",
				"returnType": "Time"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "Time",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "Time"
			},
			{
				"name": "argument2",
				"returnType": "Time"
			},
			{
				"name": "argument3",
				"returnType": "Time"
			},
			{
				"name": "argument4",
				"returnType": "Time"
			},
			{
				"name": "argument5",
				"returnType": "Time"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "String"
			},
			{
				"name": "argument2",
				"returnType": "String"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "String"
			},
			{
				"name": "argument2",
				"returnType": "String"
			},
			{
				"name": "argument3",
				"returnType": "String"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "String"
			},
			{
				"name": "argument2",
				"returnType": "String"
			},
			{
				"name": "argument3",
				"returnType": "String"
			},
			{
				"name": "argument4",
				"returnType": "String"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments."
	},
	{
		"name": "Coalesce",
		"returnType": "String",
		"arguments": [
			{
				"name": "argument1",
				"returnType": "String"
			},
			{
				"name": "argument2",
				"returnType": "String"
			},
			{
				"name": "argument3",
				"returnType": "String"
			},
			{
				"name": "argument4",
				"returnType": "String"
			},
			{
				"name": "argument5",
				"returnType": "String"
			}
		],
		"documentation": "The Coalesce operator returns the first non-null result in a list of arguments"
	}
]
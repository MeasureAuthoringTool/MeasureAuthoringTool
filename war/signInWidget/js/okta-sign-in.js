(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["OktaSignIn"] = factory();
	else
		root["OktaSignIn"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 139);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(32);

var _stringify2 = _interopRequireDefault2(_stringify);

var _typeof2 = __webpack_require__(45);

var _typeof3 = _interopRequireDefault2(_typeof2);

var _defineProperty = __webpack_require__(94);

var _defineProperty2 = _interopRequireDefault2(_defineProperty);

function _interopRequireDefault2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*! THIS FILE IS GENERATED FROM PACKAGE @okta/courage@4.6.0-beta.3045.gbd4a3b0 */
module.exports =
/******/function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/(0, _defineProperty2.default)(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 33);
  /******/
}(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(35);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);
  /* eslint @okta/okta/enforce-requirejs-names: 0, @okta/okta/no-specific-methods: 0, @okta/okta/no-specific-modules: 0 */

  var _ = __WEBPACK_IMPORTED_MODULE_1_underscore___default.a.noConflict();

  _.mixin({
    resultCtx: function resultCtx(object, property, context, defaultValue) {
      var value = _.isObject(object) ? object[property] : void 0;

      if (_.isFunction(value)) {
        value = value.call(context || object);
      }
      if (value) {
        return value;
      } else {
        return !_.isUndefined(defaultValue) ? defaultValue : value;
      }
    },

    isInteger: function isInteger(x) {
      return _.isNumber(x) && x % 1 === 0;
    },

    template: function template(source, data) {
      var template = __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.compile(source);

      return data ? template(data) : function (data) {
        return template(data);
      };
    }
  });

  /* harmony default export */__webpack_exports__["default"] = _;

  /***/
},
/* 1 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_backbone__ = __webpack_require__(6);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__framework_View__ = __webpack_require__(22);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__ = __webpack_require__(4);

  var eventBus = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(__WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Events);

  // add `broadcast` and `listen` functionality to all views
  // We use one event emitter per all views
  // This means we need to be very careful with event names

  var proto = {
    constructor: function constructor() {
      __WEBPACK_IMPORTED_MODULE_2__framework_View__["a" /* default */].apply(this, arguments);
      this.module && this.$el.attr('data-view', this.module.id);
    },

    /**
     * @deprecated Use {@link #removeChildren}
     */
    empty: function empty() {
      return this.removeChildren();
    },

    compileTemplate: __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__["default"].tpl,

    /**
     *
     * Broadcasts a global event that all views and controllers can subscribe to
     * for framework use only - prefer using a shared model
     *
     * @param {String} eventName A unique identifier for the event
     * @param {...String} param Parameter to pass with the event (can pass more than one parameter)
     * @deprecated For internal use only
     * @private
     */
    broadcast: function broadcast() {
      eventBus.trigger.apply(eventBus, arguments);
      return this;
    },

    /**
     * Subscribe to broadcast events
     * for framework use only - prefer using a shared model
     *
     * @param {String} eventName The event identifier to subscribe
     * @param {Function} fn The callback function to invoke
     * @deprecated For internal use only
     * @private
     */
    listen: function listen(name, fn) {
      eventBus.off(name, fn);
      this.listenTo(eventBus, name, fn);
      return this;
    },

    /**
     * Shows a notification box
     * @param {String} level success / warning / error
     * @param {String} message The message to display
     * @param {Object} [options]
     * @param {Number} [options.width] Set a custom width
     * @param {String} [options.title] Set a custom title
     * @param {Boolean} [options.hide=true] Do we want to auto-hide this notification?
     * @param {Boolean} [options.dismissable] Show a dismiss button
     * @example
     * view.notify('success', 'Group created successfully');
     */
    notify: function notify(level, message, options) {
      this.broadcast('notification', __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].defaults({ message: message, level: level }, options));
      return this;
    },

    /**
     * Shows a confirmation dialog
     *
     * The main difference between this and the native javascript `confirm` method
     * Is this method is non blocking (note the callback pattern).
     *
     * The callback function will run in the context (`this`) of the invoking view.
     *
     * @param {String} [title] The title of the confirmation dialog
     * @param {String} [message] The message of the confirmation dialog
     * @param {Function} [okfn] The callback to run when the user hits "OK" (runs in the context of the invoking view)
     * @param {Function} [cancelfn] The callback to run when the user hits "Cancel"
     *        (runs in the context of the invoking view)
     * @example
     * view.confirm('Delete Group', 'Are you sure you want to delete the selected group?', function () {
     *   model.destroy();
     * });
     *
     * // title will be auto-set to "Okta"
     * view.confirm('Are you sure you want to delete the selected group?', function () {
     *   model.destroy();
     * });
     *
     * view.confirm({
     *   title: 'Delete Group', //=> Modal title
     *   subtitle: 'Are you sure you want to delete the selected group?', //=> Modal subtitle
     *   content: '<h3 color="red">THIS WILL DELETE THE GROUP!</h3>', //=> A template or a view to add to the modal
     *   save: 'Delete Group', //=> Button label
     *   ok: _.bind(model.save, model) // Callback function on hitting "ok" button
     *   cancel: 'Cancel', //=> Button label
     *   cancelFn: _.bind(model.destroy, model) // Callback function on hitting "cancel" button
     * });
     */
    confirm: function confirm(title, message, okfn, cancelfn) {
      var options = void 0;
      /* eslint max-statements: [2, 12] */

      if ((typeof title === 'undefined' ? 'undefined' : (0, _typeof3.default)(title)) === 'object') {
        options = title;
      } else {
        if (arguments.length === 2 && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(message)) {
          options = {
            title: 'Okta',
            subtitle: title,
            ok: message
          };
        } else {
          options = {
            title: title,
            subtitle: message,
            ok: okfn,
            cancelFn: cancelfn
          };
        }
      }
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(options.ok)) {
        options.ok = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].bind(options.ok, this);
      }
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(options.cancelFn)) {
        options.cancelFn = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].bind(options.cancelFn, this);
      }
      this.broadcast('confirmation', options);
      return this;
    },

    /**
     * Shows an alert box
     *
     * The main difference between this and the native javascript `alert` method
     * Is this method is non blocking.
     *
     * @param {String} message The message
     * @example
     * view.alert('Mission complete');
     */
    alert: function alert(params) {
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isString(params)) {
        params = {
          subtitle: params
        };
      }
      this.confirm(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend({}, params, {
        noCancelButton: true
      }));
      return this;
    }
  };

  /**
   * See {@link src/framework/View} for more detail and examples from the base class.
   * @class module:Okta.View
   * @extends src/framework/View
   */

  /** @lends module:Okta.View.prototype */

  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_2__framework_View__["a" /* default */].extend(proto,
  /** @lends View.prototype */{
    /** @method */
    decorate: function decorate(TargetView) {
      var BaseViewView = TargetView.extend({});

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].defaults(BaseViewView.prototype, proto);
      return BaseViewView;
    }
  });

  /***/
},
/* 2 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(12);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
  /* eslint-disable @okta/okta/enforce-requirejs-names, @okta/okta/no-specific-modules */

  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.ajaxSetup({
    beforeSend: function beforeSend(xhr) {
      xhr.setRequestHeader('X-Okta-XsrfToken', __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#_xsrfToken').text());
    },
    converters: {
      'text secureJSON': function textSecureJSON(str) {
        if (str.substring(0, 11) === 'while(1){};') {
          str = str.substring(11);
        }
        return JSON.parse(str);
      }
    }
  });

  // Selenium Hook
  // Widget such as autocomplete and autosuggest needs to be triggered from the running version of jQuery.
  // We have 2 versions of jQuery running in parallel and they don't share the same events bus
  window.jQueryCourage = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a;
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a;

  /***/
},
/* 3 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles__ = __webpack_require__(39);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles__);

  var entityMap = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': '\'',
    '&#039;': '\'',
    '&#x2F;': '/'
  };
  var emailValidator = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@(?!-)((\[?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\]?)|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

  /* eslint max-len: 0*/

  var StringUtil = /** @lends module:Okta.internal.util.StringUtil */{
    /** @static */
    sprintf: function sprintf() {
      var args = Array.prototype.slice.apply(arguments);
      var value = args.shift();
      var oldValue = value;
      /* eslint max-statements: [2, 13] */

      function triggerError() {
        throw new Error('Mismatch number of variables: ' + arguments[0] + ', ' + (0, _stringify2.default)(args));
      }

      for (var i = 0, l = args.length; i < l; i++) {
        var entity = args[i];

        value = value.replace('{' + i + '}', entity);
        if (entity === undefined || entity === null || value === oldValue) {
          triggerError();
        }
        oldValue = value;
      }

      if (/\{[\d+]\}/.test(value)) {
        triggerError();
      }

      return value;
    },

    /**
     * Converts a URI encoded query string into a hash map
     * @param  {String} query The query string
     * @return {Object} The map
     * @static
     * @example
     * StringUtil.parseQuery('foo=bar&baz=qux') // {foo: 'bar', baz: 'qux'}
     */
    parseQuery: function parseQuery(query) {
      var params = {};
      var pairs = decodeURIComponent(query.replace(/\+/g, ' ')).split('&');

      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var data = pair.split('=');

        params[data.shift()] = data.join('=');
      }
      return params;
    },

    /** @static */
    encodeJSObject: function encodeJSObject(jsObj) {
      return encodeURIComponent((0, _stringify2.default)(jsObj));
    },

    /** @static */
    decodeJSObject: function decodeJSObject(jsObj) {
      try {
        return JSON.parse(decodeURIComponent(jsObj));
      } catch (e) {
        return null;
      }
    },

    /** @static */
    unescapeHtml: function unescapeHtml(string) {
      return String(string).replace(/&[\w#\d]{2,};/g, function (s) {
        return entityMap[s] || s;
      });
    },

    /**
     * Get the original i18n template directly without string format with parameters
     * @param {String} key The key
     * @param {String} bundle="messages"] The name of the i18n bundle. Defaults to the first bundle in the list.
     */
    getTemplate: function getTemplate(key, bundleName) {
      var bundle = bundleName ? __WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles___default.a[bundleName] : __WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles___default.a[__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].keys(__WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles___default.a)[0]];
      if (!bundle) {
        return 'L10N_ERROR[' + bundleName + ']';
      }
      return bundle[key] || 'L10N_ERROR[' + key + ']';
    },

    /**
     * Translate a key to the localized value
     * @static
     * @param  {String} key The key
     * @param  {String} [bundle="messages"] The name of the i18n bundle. Defaults to the first bundle in the list.
     * @param  {Array} [params] A list of parameters to apply as tokens to the i18n value
     * @return {String} The localized value
     */
    localize: function localize(key, bundleName, params) {
      var bundle = bundleName ? __WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles___default.a[bundleName] : __WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles___default.a[__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].keys(__WEBPACK_IMPORTED_MODULE_2_okta_i18n_bundles___default.a)[0]];
      /* eslint complexity: [2, 7] */

      if (!bundle) {
        return 'L10N_ERROR[' + bundleName + ']';
      }

      var value = bundle[key];

      try {
        params = params && params.slice ? params.slice(0) : [];
        params.unshift(value);
        value = StringUtil.sprintf.apply(null, params);
      } catch (e) {
        value = null;
      }

      return value || 'L10N_ERROR[' + key + ']';
    },

    /**
     * Convert a string to a float if valid, otherwise return the string.
     * Valid numbers may contain a negative sign and a decimal point.
     * @static
     * @param {String} string The string to convert to a number
     * @return {String|Number} Returns a number if the string can be casted, otherwise returns the original string
     */
    parseFloat: function (_parseFloat) {
      function parseFloat(_x) {
        return _parseFloat.apply(this, arguments);
      }

      parseFloat.toString = function () {
        return _parseFloat.toString();
      };

      return parseFloat;
    }(function (string) {
      var number = +string;

      return typeof string === 'string' && number === parseFloat(string) ? number : string;
    }),

    /**
     * Convert a string to an integer if valid, otherwise return the string
     * @static
     * @param {String} string The string to convert to an integer
     * @return {String|integer} Returns an integer if the string can be casted, otherwise, returns the original string
     */
    parseInt: function (_parseInt) {
      function parseInt(_x2) {
        return _parseInt.apply(this, arguments);
      }

      parseInt.toString = function () {
        return _parseInt.toString();
      };

      return parseInt;
    }(function (string) {
      var int = +string;

      return __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].isString(string) && int === parseInt(string, 10) ? int : string;
    }),

    /**
     * Convert a string to an object if valid, otherwise return the string
     * @static
     * @param {String} string The string to convert to an object
     * @return {String|object} Returns an object if the string can be casted, otherwise, returns the original string
     */
    parseObject: function parseObject(string) {
      if (!__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].isString(string)) {
        return string;
      }

      try {
        var object = JSON.parse(string);

        return __WEBPACK_IMPORTED_MODULE_0__jquery_wrapper__["default"].isPlainObject(object) ? object : string;
      } catch (e) {
        return string;
      }
    },

    /**
     * Returns a random string from [a-z][A-Z][0-9] of a given length
     * @static
     * @param {Number} length The length of the random string.
     * @return {String} Returns a random string from [a-z][A-Z][0-9] of a given length
     */
    randomString: function randomString(length) {
      var characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';

      if (length === undefined) {
        length = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].random(characters.length);
      } else if (length === 0) {
        return '';
      }

      var stringArray = [];

      while (length--) {
        stringArray.push(characters[__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].random(characters.length - 1)]);
      }
      return stringArray.join('');
    },

    /**
     * Returns if a str ends with another string
     * @static
     * @param {String} str The string to search
     * @param {String} ends The string it should end with
     *
     * @return {Boolean} Returns if the str ends with ends
     */
    endsWith: function endsWith(str, ends) {
      str += '';
      ends += '';
      return str.length >= ends.length && str.substring(str.length - ends.length) === ends;
    },

    /** @static */
    isEmail: function isEmail(str) {
      var target = __WEBPACK_IMPORTED_MODULE_0__jquery_wrapper__["default"].trim(str);

      return !__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].isEmpty(target) && emailValidator.test(target);
    }
  };

  /**
   * Handy utility functions to handle strings.
   *
   * @class module:Okta.internal.util.StringUtil
   * @hideconstructor
   */

  /* harmony default export */__webpack_exports__["default"] = StringUtil;

  /***/
},
/* 4 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__ = __webpack_require__(0);
  /* eslint @okta/okta/no-specific-methods: 0 */

  /**
   * @class module:Okta.internal.util.TemplateUtil
   * @hideconstructor
   */
  /* harmony default export */__webpack_exports__["default"] = {
    /**
     * Compiles a Handlebars template
     * @static
     * @method
     */
    tpl: __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].memoize(function (tpl) {
      /* eslint okta/no-specific-methods: 0 */
      return __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.compile(tpl);
    })
  };

  /***/
},
/* 5 */
/***/function (module, exports) {

  module.exports = __webpack_require__(95);

  /***/
},
/* 6 */
/***/function (module, exports) {

  module.exports = __webpack_require__(164);

  /***/
},
/* 7 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  function _log(level, args) {
    if (window.console && window.okta && window.okta.debug) {
      window.console[level].apply(window.console, args);
    }
  }

  /**
   * Utility library of logging functions.
   * @class module:Okta.Logger
   */
  /* harmony default export */__webpack_exports__["default"] = {
    /**
     * See [console.trace](https://developer.mozilla.org/en-US/docs/Web/API/Console.trace)
     * @static
     */
    trace: function trace() {
      return _log('trace', arguments);
    },
    /**
     * See [console.dir](https://developer.mozilla.org/en-US/docs/Web/API/Console.dir)
     * @static
     */
    dir: function dir() {
      return _log('dir', arguments);
    },
    /**
     * See [console.time](https://developer.mozilla.org/en-US/docs/Web/API/Console.time)
     * @static
     */
    time: function time() {
      return _log('time', arguments);
    },
    /**
     * See [console.timeEnd](https://developer.mozilla.org/en-US/docs/Web/API/Console.timeEnd)
     * @static
     */
    timeEnd: function timeEnd() {
      return _log('timeEnd', arguments);
    },
    /**
     * See [console.group](https://developer.mozilla.org/en-US/docs/Web/API/Console.group)
     * @static
     */
    group: function group() {
      return _log('group', arguments);
    },
    /**
     * See [console.groupEnd](https://developer.mozilla.org/en-US/docs/Web/API/Console.groupEnd)
     * @static
     */
    groupEnd: function groupEnd() {
      return _log('groupEnd', arguments);
    },
    /**
     * See [console.assert](https://developer.mozilla.org/en-US/docs/Web/API/Console.assert)
     * @static
     */
    assert: function assert() {
      return _log('assert', arguments);
    },
    /**
     * See [console.log](https://developer.mozilla.org/en-US/docs/Web/API/Console.log)
     * @static
     */
    log: function log() {
      return _log('log', arguments);
    },
    /**
     * See [console.info](https://developer.mozilla.org/en-US/docs/Web/API/Console.info)
     * @static
     */
    info: function info() {
      return _log('info', arguments);
    },
    /**
     * See [console.warn](https://developer.mozilla.org/en-US/docs/Web/API/Console.warn)
     * @static
     */
    warn: function warn() {
      return _log('warn', arguments);
    },
    /**
     * See [console.error](https://developer.mozilla.org/en-US/docs/Web/API/Console.error)
     * @static
     */
    error: function error() {
      return _log('error', arguments);
    }
  };

  /***/
},
/* 8 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony default export */__webpack_exports__["default"] = {
    UP: 38,
    DOWN: 40,
    DEL: 46,
    TAB: 9,
    RETURN: 13,
    ENTER: 13,
    ESC: 27,
    COMMA: 188,
    PAGEUP: 33,
    PAGEDOWN: 34,
    SPACE: 32,
    BACKSPACE: 8,
    __isKey: function __isKey(e, key) {
      return (e.which || e.keyCode) === this[key];
    },
    isEnter: function isEnter(e) {
      return this.__isKey(e, 'ENTER');
    },
    isEsc: function isEsc(e) {
      return this.__isKey(e, 'ESC');
    },
    isSpaceBar: function isSpaceBar(e) {
      return this.__isKey(e, 'SPACE');
    }
  };

  /***/
},
/* 9 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_Keys__ = __webpack_require__(8);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_Logger__ = __webpack_require__(7);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__util_ViewUtil__ = __webpack_require__(24);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__BaseView__ = __webpack_require__(1);
  /* eslint max-params: [2, 6] */

  var LABEL_OPTIONS = ['model', 'id', 'inputId', 'type', 'label', 'sublabel', 'tooltip', 'name'];
  var CONTAINER_OPTIONS = ['wide', 'multi', 'input', 'label-top', 'explain', 'explain-top', 'customExplain', 'model', 'name', 'type', 'autoRender'];
  var WRAPPER_OPTIONS = ['model', 'name', 'label-top', 'readOnly', 'events', 'initialize', 'showWhen', 'bindings', 'render', 'className', 'data-se', 'toggleWhen'];
  var INPUT_OPTIONS = ['model', 'name', 'inputId', 'type', // base options
  'input', // custom input
  'placeholder', 'label', // labels
  'readOnly', 'read', 'disabled', 'readModeString', // modes
  'options', // select/radio
  'deps', // used to specify inputs that have dependencies and show a callout to user on select
  'from', 'to', // model transformers,
  'autoRender', // model attributes change event to trigger rerendering of the input
  'inlineValidation', // control inline validating against the model on focus lost
  'validateOnlyIfDirty', // check if field has been interacted with and then validate
  'ariaLabel', // 508 compliance for inputs that do not have label associated with them
  'params'];
  var // widgets params - for input specific widgets

  OTHER_OPTIONS = ['errorField'];

  var ALL_OPTIONS = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].uniq(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].union(LABEL_OPTIONS, CONTAINER_OPTIONS, WRAPPER_OPTIONS, INPUT_OPTIONS, OTHER_OPTIONS));

  var SAVE_BUTTON_PHASES = ['•         ', '•  •      ', '•  •  •   ', '•  •  •  •', '   •  •  •', '      •  •', '         •', '          ', '          ', '          '];

  function decorateDoWhen(doWhen) {
    if (doWhen && !doWhen['__edit__']) {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({ __edit__: __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].constant(true) }, doWhen);
    }
  }

  function _createButton(options) {
    options = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].pick(options || {}, 'action', 'id', 'className', 'text', 'type');

    var timeoutId = void 0;
    var intervalId = void 0;
    var phaseCount = void 0;

    return __WEBPACK_IMPORTED_MODULE_5__BaseView__["default"].extend({
      tagName: 'input',
      className: 'button',
      events: {
        click: function click() {
          if (options.action && !this.disabled()) {
            options.action.call(this);
          }
        },
        keyup: function keyup(e) {
          if (__WEBPACK_IMPORTED_MODULE_1__util_Keys__["default"].isEnter(e) && options.action && !this.disabled()) {
            options.action.call(this);
          }
        }
      },

      disabled: function disabled() {
        return this.$el.prop('disabled') === true;
      },

      disable: function disable() {
        this.$el.prop('disabled', true);
        this.$el.addClass('btn-disabled');
      },

      enable: function enable() {
        this.$el.prop('disabled', false);
        this.$el.removeClass('btn-disabled');
      },

      initialize: function initialize() {
        var self = this;

        this.$el.attr('type', options.type === 'save' ? 'submit' : 'button');
        this.$el.val(options.text);
        if (options.id) {
          this.$el.attr('id', options.id);
        }
        if (options.className) {
          this.$el.addClass(options.className);
        }
        if (options.type) {
          this.$el.attr('data-type', options.type);
        }

        this.$el.mousedown(function () {
          self.model.set('__pending__', true);
        });

        this.$el.mouseup(function () {
          self.model.set('__pending__', false);
        });

        this.listenTo(this.model, 'form:set-saving-state', function () {
          this.disable();
          if (options.type === 'save') {
            timeoutId = setTimeout(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].bind(this.__changeSaveText, this), 1000);
          }
        });
        this.listenTo(this.model, 'form:clear-saving-state', function () {
          this.enable();
          if (options.type === 'save') {
            clearTimeout(timeoutId);
            clearInterval(intervalId);
            this.$el.val(options.text);
          }
        });
      },

      __changeSaveText: function __changeSaveText() {
        phaseCount = 0;
        intervalId = setInterval(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].bind(this.__showLoadingText, this), 200);
      },

      __showLoadingText: function __showLoadingText() {
        this.$el.val(SAVE_BUTTON_PHASES[phaseCount++ % SAVE_BUTTON_PHASES.length]);
      }
    });
  }

  function validateInput(options, model) {
    /* eslint max-statements: 0, complexity: 0 */

    options || (options = {});

    if (options.type === 'label') {
      if (!options.label) {
        __WEBPACK_IMPORTED_MODULE_2__util_Logger__["default"].warn('A label input must have a "label" parameter', options);
      }
      return;
    }

    if (options.type === 'button') {
      if (!options.title && !options.icon) {
        __WEBPACK_IMPORTED_MODULE_2__util_Logger__["default"].warn('A button input must have a "title" and/or an "icon" parameter', options);
      }
      if (!options.click && !options.href) {
        __WEBPACK_IMPORTED_MODULE_2__util_Logger__["default"].warn('A button input must have a "click" and/or an "href" parameter', options);
      }
      return;
    }

    if (!options.name && !options.input) {
      __WEBPACK_IMPORTED_MODULE_2__util_Logger__["default"].warn('Missing "name" or "input" parameters', options);
    }

    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(options.name) && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(options.input)) {
      throw new Error('Not allowed to have both "name" and "input" defined as array.');
    }

    if (options.type !== 'list' && options.name && model && model.allows) {
      var names = [];

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(options.name)) {
        names = options.name;
      } else {
        names.push(options.name);
      }
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(names, function (name) {
        if (!model.allows(name)) {
          throw new Error('field not allowed: ' + options.name);
        }
      });
    }

    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(options.input) && options.type !== 'list') {
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(options.input, function (input) {
        validateInput(input, model);
      });
    }

    var keys = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].keys(options);

    var intersection = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].intersection(keys, ALL_OPTIONS);

    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(intersection) !== __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(options)) {
      var fields = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(ALL_OPTIONS);

      fields.unshift(keys);
      __WEBPACK_IMPORTED_MODULE_2__util_Logger__["default"].warn('Invalid input parameters', __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].without.apply(null, fields), options);
    }
  }

  function generateInputOptions(options, form, createFn) {
    options = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(options);

    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains(['list', 'group'], options.type)) {
      options.params = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults({
        create: createFn,
        inputs: __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(options.input) ? options.input : [options.input], function (input) {
          return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].first(generateInputOptions(input, form, createFn));
        })
      }, options.params || {});
      delete options.input;
    }

    var inputs = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(options.input) ? __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(options.input) : [options];

    return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(inputs, function (input) {
      var target = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults({ model: form.model }, input, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(options, 'input', 'inputs'), form.options, {
        id: __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].uniqueId('input'),
        readOnly: form.isReadOnly(),
        read: form.hasReadMode()
      });

      if (form.isReadOnly()) {
        target.read = target.readOnly = true;
      }
      return target;
    });
  }

  /* harmony default export */__webpack_exports__["default"] = {
    LABEL_OPTIONS: LABEL_OPTIONS,
    CONTAINER_OPTIONS: CONTAINER_OPTIONS,
    WRAPPER_OPTIONS: WRAPPER_OPTIONS,
    INPUT_OPTIONS: INPUT_OPTIONS,

    generateInputOptions: generateInputOptions,

    changeEventString: function changeEventString(fieldNames) {
      return 'change:' + fieldNames.join(' change:');
    },

    createReadFormButton: function createReadFormButton(options) {
      var action = void 0;
      var text = void 0;
      var ariaLabel = void 0;

      if (options.type === 'cancel') {
        text = ariaLabel = __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].localize('oform.cancel', 'courage');
        action = function action() {
          this.model.trigger('form:cancel');
        };
      } else {
        text = __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].localize('oform.edit', 'courage');
        ariaLabel = text + ' ' + options.formTitle;
        action = function action() {
          this.model.set('__edit__', true);
        };
      }

      return __WEBPACK_IMPORTED_MODULE_5__BaseView__["default"].extend({
        tagName: 'a',
        attributes: {
          href: '#',
          'aria-label': ariaLabel
        },
        template: function template() {
          return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].escape(text);
        },
        events: {
          click: function click(e) {
            e.preventDefault();
            action.call(this);
          }
        }
      });
    },

    createButton: function createButton(options) {
      options = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(options);
      switch (options.type) {
        case 'save':
          __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(options, { className: 'button-primary' });
          break;
        case 'cancel':
          __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(options, {
            text: __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].localize('oform.cancel', 'courage'),
            action: function action() {
              this.model.trigger('form:cancel');
            }
          });
          break;
        case 'previous':
          __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(options, {
            text: __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].localize('oform.previous', 'courage'),
            action: function action() {
              this.model.trigger('form:previous');
            }
          });
          break;
      }
      return _createButton(options);
    },

    validateInput: validateInput,

    /**
     * Applies a show-when logic on a view instance.
     * The show-when is a map of a model field name -> a boolean or a function that returns a boolean.
     * The view will toggle based on the field value.
     *
     * @param  {Okta.View} view a view instance that has a this.model attached to it
     * @param  {Object} showWhen
     */
    applyShowWhen: function applyShowWhen(view, showWhen) {
      var toggleAndResize = function toggleAndResize(bool) {
        return function () {
          // The `toggle` is here since an event may be triggered before the el is in the DOM
          // and in that case slide events may not function as expected.
          view.$el.toggle(bool);
          view.model.trigger('form:resize');
        };
      };

      __WEBPACK_IMPORTED_MODULE_4__util_ViewUtil__["a" /* default */].applyDoWhen(view, decorateDoWhen(showWhen), function (bool, options) {
        if (!options.animate) {
          view.$el.toggle(bool);
        } else {
          view.$el['slide' + (bool ? 'Down' : 'Up')](200, toggleAndResize(bool));
        }
      });
    },

    applyToggleWhen: function applyToggleWhen(view, toggleWhen) {
      __WEBPACK_IMPORTED_MODULE_4__util_ViewUtil__["a" /* default */].applyDoWhen(view, decorateDoWhen(toggleWhen), function (bool, options) {
        view.$el.toggle(bool);
        view.model.trigger('form:resize');
        if (options.animate) {
          view.render();
        }
      });
    }
  };

  /***/
},
/* 10 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_ButtonFactory__ = __webpack_require__(23);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__BaseView__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__components_Callout__ = __webpack_require__(29);
  /* eslint-env es6 */
  /* eslint max-statements: [2, 17], max-len: [2, 160], max-params: [2, 6] */

  /**
   * @class BaseInput
   * @private
   * An abstract object that defines an input for {@link Okta.Form}
   *
   * BaseInputs are typically not created directly, but being passed to {@link Okta.Form#addInput}
   * @extends Okta.View
   */

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].extend({
    tagName: 'span',

    attributes: function attributes() {
      return {
        'data-se': 'o-form-input-' + this.getNameString()
      };
    },

    /**
     * default placeholder text when options.placeholder is not defined
     */
    defaultPlaceholder: '',

    constructor: function constructor(options) {
      /* eslint complexity: [2, 7] */
      options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].defaults(options || {}, {
        inputId: options.id || __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].uniqueId('input'),
        placeholder: this.defaultPlaceholder,
        inlineValidation: true,
        validateOnlyIfDirty: false
      });

      delete options.id;

      // decorate the `enable` and `disable` and toggle the `o-form-disabled` class.
      // so we wont need to worry about this when overriding the methods
      var self = this;

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each({ enable: 'removeClass', disable: 'addClass' }, function (method, action) {
        self[action] = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].wrap(self[action], function (fn) {
          fn.apply(self, arguments);
          self.$el[method]('o-form-disabled');
        });
      });

      __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].call(this, options);

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(options, 'readOnly') !== true && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(options, 'read') === true) {
        this.listenTo(this.model, 'change:__edit__', this.render);
      }

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(this.focus)) {
        this.focus = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].debounce(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].bind(this.focus, this), 50);
      }

      // Enable inline validation if this is not the first field in the form.
      if (!__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(options, 'validateOnlyIfDirty')) {
        this.addInlineValidation();
      }

      this.addModelListeners();
      this.$el.addClass('o-form-input-name-' + this.getNameString());
    },

    addAriaLabel: function addAriaLabel() {
      var ariaLabel = this.options.ariaLabel;

      if (ariaLabel) {
        this.$(':input').attr('aria-label', ariaLabel);
      }
    },

    addInlineValidation: function addInlineValidation() {
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this.options, 'inlineValidation')) {
        this.$el.on('focusout', ':input', __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].bind(this.validate, this));
      }
    },

    toModelValue: function toModelValue() {
      var value = this.val();

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(this.to)) {
        value = this.to.call(this, value);
      }
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(this.options.to)) {
        value = this.options.to.call(this, value);
      }
      return value;
    },

    __getDependencyCalloutBtn: function __getDependencyCalloutBtn(btnConfig) {
      var self = this;

      var btnOptions = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(btnConfig);

      var originalClick = btnOptions.click || function () {};
      // add onfocus listener to re-evaluate depedency when callout button is clicked

      btnOptions.click = function () {
        Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(window).one('focus.dependency', function () {
          self.__showInputDependencies();
        });
        originalClick.call(self);
      };
      var BaseInputCalloutBtn = __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].extend({
        children: [__WEBPACK_IMPORTED_MODULE_2__util_ButtonFactory__["default"].create(btnOptions)]
      });

      return new BaseInputCalloutBtn();
    },

    getCalloutParent: function getCalloutParent() {
      return this.$('input[value="' + this.getModelValue() + '"]').parent();
    },

    __getCalloutMsgContainer: function __getCalloutMsgContainer(calloutMsg) {
      return __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].extend({
        template: '\
        <span class="o-form-explain">\
           {{msg}}\
        </span>\
        ',
        getTemplateData: function getTemplateData() {
          return {
            msg: calloutMsg
          };
        }
      });
    },

    showCallout: function showCallout(calloutConfig, dependencyResolved) {
      var callout = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(calloutConfig);

      callout.className = 'dependency-callout';
      if (callout.btn) {
        callout.content = this.__getDependencyCalloutBtn(callout.btn);
        delete callout.btn;
      }
      var dependencyCallout = __WEBPACK_IMPORTED_MODULE_5__components_Callout__["default"].create(callout);

      if (!dependencyResolved) {
        dependencyCallout.add(this.__getCalloutMsgContainer(__WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].localize('dependency.callout.msg', 'courage')));
      }
      var calloutParent = this.getCalloutParent();

      calloutParent.append(dependencyCallout.render().el);
      if (callout.type === 'success') {
        __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].delay(function () {
          // fade out success callout
          dependencyCallout.$el.fadeOut(800);
        }, 1000);
      }
    },

    removeCallout: function removeCallout() {
      this.$el.find('.dependency-callout').remove();
    },

    __evaluateCalloutObject: function __evaluateCalloutObject(dependencyResolved, calloutTitle) {
      var defaultCallout = void 0;

      if (dependencyResolved) {
        defaultCallout = {
          title: __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].localize('dependency.action.completed', 'courage'),
          size: 'large',
          type: 'success'
        };
      } else {
        defaultCallout = {
          title: __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].localize('dependency.action.required', 'courage', [calloutTitle]),
          size: 'large',
          type: 'warning'
        };
      }
      return defaultCallout;
    },

    __handleDependency: function __handleDependency(result, callout) {
      var self = this;
      var calloutConfig = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(callout) ? callout(result) : __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend({}, callout, self.__evaluateCalloutObject(result.resolved, callout.title));

      // remove existing callouts if any
      self.removeCallout();
      self.showCallout(calloutConfig, result.resolved);
    },

    __showInputDependencies: function __showInputDependencies() {
      var self = this;
      var fieldDependency = self.options.deps[self.getModelValue()];

      if (fieldDependency && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(fieldDependency.func)) {
        fieldDependency.func().done(function (data) {
          self.__handleDependency({ resolved: true, data: data }, fieldDependency.callout);
        }).fail(function (data) {
          self.__handleDependency({ resolved: false, data: data }, fieldDependency.callout);
        });
      } else {
        self.removeCallout();
      }
    },

    _isEdited: false,
    /**
     * updates the model with the input's value
     */
    update: function update() {
      if (!this._isEdited && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this.options, 'validateOnlyIfDirty')) {
        this._isEdited = true;
        this.addInlineValidation();
      }
      this.model.set(this.options.name, this.toModelValue());
      if (this.options.deps) {
        // check for dependencies
        this.__showInputDependencies();
      }
    },

    /**
     * Is the input in edit mode
     * @return {Boolean}
     */
    isEditMode: function isEditMode() {
      var ret = !__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this.options, 'readOnly') && (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this.options, 'read') !== true || this.model.get('__edit__') === true);

      return ret;
    },

    /**
     * Renders the input
     * @readonly
     */
    render: function render() {
      this.preRender();
      var params = this.options.params;

      this.options.params = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].resultCtx(this.options, 'params', this);

      if (this.isEditMode()) {
        this.editMode();
        if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].resultCtx(this.options, 'disabled', this)) {
          this.disable();
        } else {
          this.enable();
        }
      } else {
        this.readMode();
      }

      this.options.params = params;
      this.addAriaLabel();
      this.postRender();

      return this;
    },

    /**
     * checks if the current value in the model is valid for this field
     */
    validate: function validate() {
      if (!this.model.get('__pending__') && this.isEditMode() && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(this.model.validateField)) {
        var validationError = this.model.validateField(this.options.name);

        if (validationError) {
          __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].delay(function () {
            this.model.trigger('form:clear-error:' + this.options.name);
            this.model.trigger('invalid', this.model, validationError, false);
          }.bind(this), 100);
        }
      }
    },

    /**
     * Add model event listeners
     */
    addModelListeners: function addModelListeners() {
      this.listenTo(this.model, 'form:field-error', function (name) {
        if (this.options.name === name) {
          this.__markError();
        }
      });
      this.listenTo(this.model, 'form:clear-errors change:' + this.options.name, this.__clearError);
      this.listenTo(this.model, 'form:clear-error:' + this.options.name, this.__clearError);
    },

    /**
     * The value of the input
     * @return {Mixed}
     */
    val: function val() {
      throw new Error('val() is an abstract method');
    },

    /**
     * Set focus on the input
     */
    focus: function focus() {
      throw new Error('focus() is an abstract method');
    },

    /**
     * Default value in read mode
     * When model has no value for the field
     */
    defaultValue: function defaultValue() {
      return '';
    },

    /**
     * Renders the input in edit mode
     */
    editMode: function editMode() {
      var options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend({}, this.options, {
        value: this.getModelValue()
      });

      this.$el.html(this.template(options));
      this.options.multi && this.$el.removeClass('margin-r');
      return this;
    },

    /**
     * Renders the readable value of the input in read mode
     */
    readMode: function readMode() {
      this.$el.text(this.getReadModeString());
      this.$el.removeClass('error-field');
      this.options.multi && this.$el.addClass('margin-r');
      return this;
    },

    getReadModeString: function getReadModeString() {
      var readModeStr = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].resultCtx(this.options, 'readModeString', this);

      if (readModeStr) {
        return readModeStr;
      }
      return this.toStringValue();
    },

    /**
     * The model value off the field associated with the input
     * @return {Mixed}
     */
    getModelValue: function getModelValue() {
      var value = this.model.get(this.options.name);

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(this.from)) {
        value = this.from.call(this, value);
      }
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(this.options.from)) {
        value = this.options.from.call(this, value);
      }
      return value;
    },

    /*
    * convenience method to get the textual value from the model
    * will return the textual label rather than value in case of select/radio
    * @return {String}
    */
    toStringValue: function toStringValue() {
      var value = this.getModelValue();

      if (this.options.options) {
        // dropdown or radio
        value = this.options.options[value];
      }
      return value || this.defaultValue();
    },

    /**
     * Triggers a form:resize event in order to tell dialogs content size has changed
     */
    resize: function resize() {
      this.model.trigger('form:resize');
    },

    /**
     * Disable the input
     */
    disable: function disable() {
      this.$(':input').prop('disabled', true);
    },

    /**
     * Enable the input
     */
    enable: function enable() {
      this.$(':input').prop('disabled', false);
    },

    /**
     * Change the type of the input field. (e.g., text <--> password)
     * @param type
     */
    changeType: function changeType(type) {
      this.$(':input').prop('type', type);
      // Update the options so that it keeps the uptodate state
      this.options.type = type;
    },

    getNameString: function getNameString() {
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(this.options.name)) {
        return this.options.name.join('-');
      }
      return this.options.name;
    },

    /**
     * Get parameters, computing _.result
     * @param  {[type]} options alternative options
     * @return {Object} the params
     */
    getParams: function getParams(options) {
      var opts = options || this.options || {};

      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].resultCtx(opts, 'params', this) || {});
    },

    /**
     * get a parameter from options.params, compute _.result when needed.
     * @param  {String} key
     * @param  {Object} defaultValue
     * @return {Object} the params
     */
    getParam: function getParam(key, defaultValue) {
      var result = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].resultCtx(this.getParams(), key, this);

      return !__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isUndefined(result) ? result : defaultValue;
    },

    /**
     * Get a parameter from options.params or if empty, object attribute.
     *
     * @param  {String} key
     * @return {Object} the param or attribute
     */
    getParamOrAttribute: function getParamOrAttribute(key) {
      return this.getParam(key) || __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, key);
    },

    __markError: function __markError() {
      this.$el.addClass('o-form-has-errors');
    },

    __clearError: function __clearError() {
      this.$el.removeClass('o-form-has-errors');
    }
  });

  /***/
},
/* 11 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__framework_Model__ = __webpack_require__(37);

  /**
   * Wrapper around the more generic {@link src/framework/Model} that
   * contains Okta-specific logic.
   * @class module:Okta.Model
   * @extends src/framework/Model
   */
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_1__framework_Model__["a" /* default */].extend(
  /** @lends module:Okta.Model.prototype */{
    /**
     * Is the end point using the legacy "secureJSON" format
     * @type {Function|Boolean}
     */
    secureJSON: false,

    _builtInLocalProps: {
      __edit__: 'boolean',
      __pending__: 'boolean'
    },

    constructor: function constructor() {
      this.local = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults({}, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'local'), this._builtInLocalProps);

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'secureJSON')) {
        this.sync = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].wrap(this.sync, function (sync, method, model, options) {
          return sync.call(this, method, model, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({ dataType: 'secureJSON' }, options));
        });
      }

      __WEBPACK_IMPORTED_MODULE_1__framework_Model__["a" /* default */].apply(this, arguments);
    }
  });

  /***/
},
/* 12 */
/***/function (module, exports) {

  module.exports = __webpack_require__(54);

  /***/
},
/* 13 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__StringUtil__ = __webpack_require__(3);

  var loc = __WEBPACK_IMPORTED_MODULE_1__StringUtil__["default"].localize;
  var SchemaUtils = {
    STRING: 'string',
    NUMBER: 'number',
    INTEGER: 'integer',
    BOOLEAN: 'boolean',
    OBJECT: 'object',
    FORMATDISPLAYTYPE: {
      'date-time': 'date',
      uri: 'uri',
      email: 'email',
      // TODO: settle on using EITHER underscores OR hyphens --- not both (OKTA-202818)
      'country-code': 'country-code',
      'language-code': 'language-code',
      'country_code': 'country_code',
      'language_code': 'language_code',
      locale: 'locale',
      timezone: 'timezone',
      'ref-id': 'reference'
    },
    ARRAYDISPLAYTYPE: {
      arrayofobject: 'arrayofobject',
      arrayofstring: 'arrayofstring',
      arrayofnumber: 'arrayofnumber',
      arrayofinteger: 'arrayofinteger',
      'arrayofref-id': 'arrayofref-id'
    },
    DISPLAYTYPES: {
      date: { type: 'string', format: 'date-time' },
      uri: { type: 'string', format: 'uri' },
      email: { type: 'string', format: 'email' },
      // TODO: Resolve inconsistencies in hyphens vs. underscores for these properties (OKTA-202818)
      'country-code': { type: 'string', format: 'country-code' },
      'language-code': { type: 'string', format: 'language-code' },
      'country_code': { type: 'string' },
      'language_code': { type: 'string' },
      locale: { type: 'string', format: 'locale' },
      timezone: { type: 'string', format: 'timezone' },
      string: { type: 'string' },
      number: { type: 'number' },
      boolean: { type: 'boolean' },
      integer: { type: 'integer' },
      reference: { type: 'string', format: 'ref-id' },
      arrayofobject: { type: 'array', items: { type: 'object' } },
      arrayofstring: { type: 'array', items: { type: 'string' } },
      arrayofnumber: { type: 'array', items: { type: 'number' } },
      arrayofinteger: { type: 'array', items: { type: 'integer' } },
      'arrayofref-id': { type: 'array', items: { type: 'string', format: 'ref-id' } },
      image: { type: 'image' },
      password: { type: 'string' }
    },
    SUPPORTSMINMAX: ['string', 'number', 'integer', 'password'],
    SUPPORTENUM: ['string', 'number', 'integer', 'object', 'arrayofstring', 'arrayofnumber', 'arrayofinteger', 'arrayofobject'],
    DATATYPE: {
      string: 'string',
      number: 'number',
      boolean: 'boolean',
      integer: 'integer',
      date: 'datetime',
      object: 'object',
      arrayofobject: 'object array',
      arrayofstring: 'string array',
      arrayofnumber: 'number array',
      arrayofinteger: 'integer array',
      'arrayofref-id': 'reference array',
      // TODO: settle on using EITHER underscores OR hyphens --- not both (OKTA-202818)
      'country-code': 'country code',
      'language-code': 'language code',
      'country_code': 'country code',
      'language_code': 'language code',
      reference: 'reference',
      timezone: 'timezone',
      image: 'image'
    },
    MUTABILITY: {
      READONLY: 'READ_ONLY',
      WRITEONLY: 'WRITE_ONLY',
      READWRITE: 'READ_WRITE',
      IMMUTABLE: 'IMMUTABLE'
    },
    SCOPE: {
      NONE: 'NONE',
      SELF: 'SELF',
      SYSTEM: 'SYSTEM'
    },
    DISPLAYSCOPE: {
      SELF: 'User personal',
      SYSTEM: 'System',
      NA: 'None'
    },
    UNION: {
      DISABLE: 'DISABLE',
      ENABLE: 'ENABLE'
    },
    UNION_OPTIONS: {
      DISABLE: loc('universal-directory.profiles.attribute.form.union.enable.display', 'courage'),
      ENABLE: loc('universal-directory.profiles.attribute.form.union.disable.display', 'courage')
    },
    PERMISSION: {
      HIDE: 'HIDE',
      READ_ONLY: 'READ_ONLY',
      WRITE_ONLY: 'WRITE_ONLY',
      READ_WRITE: 'READ_WRITE'
    },
    ENDUSER_ATTRIBUTE_PERMISSION_OPTIONS: {
      HIDE: loc('universal-directory.profiles.attribute.enduser.permission.hide', 'courage'),
      READ_ONLY: loc('universal-directory.profiles.attribute.enduser.permission.readonly', 'courage'),
      READ_WRITE: loc('universal-directory.profiles.attribute.enduser.permission.readwrite', 'courage')
    },
    ATTRIBUTE_LEVEL_MASTERING_OPTIONS: {
      INHERIT: loc('universal-directory.profiles.attribute.master.inherit', 'courage'),
      OKTA_MASTERED: loc('universal-directory.profiles.attribute.master.oktamastered', 'courage'),
      OVERRIDE: loc('universal-directory.profiles.attribute.master.override', 'courage')
    },
    USERNAMETYPE: {
      NONE: 'non-username',
      OKTA_TO_APP: 'okta-to-app-username',
      OKTA_TO_AD: 'okta-to-ad-username',
      APP_TO_OKTA: 'app-to-okta-username',
      IDP_TO_OKTA: 'idp-to-okta-username'
    },
    LOGINPATTERNFORMAT: {
      EMAIL: 'EMAIL',
      CUSTOM: 'CUSTOM',
      NONE: 'NONE'
    },
    UNIQUENESS: {
      NOT_UNIQUE: 'NOT_UNIQUE',
      PENDING_UNIQUENESS: 'PENDING_UNIQUENESS',
      UNIQUE_VALIDATED: 'UNIQUE_VALIDATED'
    },

    /*
     * Get a display string for a schema attribute type.
     * @param {String} type Type of an attribute
     * @param {String} format Format of an attribute
     * @param {String} itemType Item type of an attribute if an array
     * @param {String} defaultValue The default value if an attribute type is undefined
     * @return {String} the display value
     */
    getDisplayType: function getDisplayType(type, format, itemType, defaultValue) {
      var displayType = void 0;

      // type is undefined for
      // - an un-mapped source attribute from mapping
      // - an source attribute which is mapped to username target attribute
      if (type) {
        // format is only defined for complicated types (ex. reference, date time, array)
        // not for simple types (ex. string, integer, boolean)
        if (format) {
          displayType = this.FORMATDISPLAYTYPE[format];
        } else {
          // itemType is only defined for array type
          // to specify an array element type (ex. string, integer, number)
          displayType = itemType ? this.ARRAYDISPLAYTYPE[type + 'of' + itemType] : type;
        }
      }
      if (!displayType) {
        displayType = typeof defaultValue === 'undefined' ? '' : defaultValue;
      }
      return displayType;
    },

    /*
     * Get attribute mapping source attribute username type
     * @param {String} mappingDirection
     * @param {String} targetName The mapping target attribute name
     * @param {String} appName The app name that's mapped to/from Okta
     * @return {String} the source attribute username type value
     */
    getSourceUsernameType: function getSourceUsernameType(mappingDirection, targetName, appName) {
      var sourceUsernameType = this.USERNAMETYPE.NONE;
      /* eslint complexity: [2, 7] */

      if (mappingDirection === 'oktaToApp') {
        if (targetName === 'userName') {
          sourceUsernameType = this.USERNAMETYPE.OKTA_TO_APP;
        } else if (targetName === 'cn') {
          sourceUsernameType = this.USERNAMETYPE.OKTA_TO_AD;
        }
      } else if (mappingDirection === 'appToOkta' && targetName === 'login') {
        if (appName === 'saml_idp') {
          sourceUsernameType = this.USERNAMETYPE.IDP_TO_OKTA;
        } else {
          sourceUsernameType = this.USERNAMETYPE.APP_TO_OKTA;
        }
      }
      return sourceUsernameType;
    },

    isArrayDataType: function isArrayDataType(type) {
      return __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].contains(__WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].values(this.ARRAYDISPLAYTYPE), type);
    },

    isObjectDataType: function isObjectDataType(type) {
      return this.DATATYPE.object === type;
    }
  };
  /* harmony default export */__webpack_exports__["a"] = SchemaUtils;

  /***/
},
/* 14 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__framework_Collection__ = __webpack_require__(36);

  /**
   * Wrapper around the more generic {@link src/framework/Collection} that
   * contains Okta-specific logic.
   * @class module:Okta.Collection
   * @extends src/framework/Collection
   */
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_1__framework_Collection__["a" /* default */].extend(
  /** @lends module:Okta.Collection.prototype */{
    /**
     * Is the end point using the legacy "secureJSON" format
     * @type {Function|Boolean}
     */
    secureJSON: false,

    constructor: function constructor() {
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'secureJSON')) {
        this.sync = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].wrap(this.sync, function (sync, method, collection, options) {
          return sync.call(this, method, collection, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({ dataType: 'secureJSON' }, options));
        });
      }
      __WEBPACK_IMPORTED_MODULE_1__framework_Collection__["a" /* default */].apply(this, arguments);
    }
  });

  /***/
},
/* 15 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__Model__ = __webpack_require__(11);

  var hasProps = function hasProps(model) {
    var local = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(model.local, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].keys(model._builtInLocalProps));

    return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(model.props) + __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(local) > 0;
  };

  /**
   * @class module:Okta.BaseModel
   * @extends module:Okta.Model
   * @deprecated Use {@link module:Okta.Model|Okta.Model} instead
   * @example
   * var Model = BaseModel.extend({
   *   defaults: {
   *     name: BaseModel.ComputedProperty(['fname', 'lname'], function (fname, lname) {
   *       return fname + ' ' + lname;
   *     })
   *   }
   * });
   * var model = new Model({fname: 'Joe', lname: 'Doe'});
   * model.get('name'); //=> "Joe Doe"
   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
   *
   * model.set('__private__', 'private property');
   * model.get('__private__'); //=> "private property"
   * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
   */

  var BaseModelBaseModel = __WEBPACK_IMPORTED_MODULE_1__Model__["default"].extend(
  /** @lends module:Okta.BaseModel.prototype */{
    /**
     * @type {Boolean}
     */
    flat: false,

    constructor: function constructor() {
      __WEBPACK_IMPORTED_MODULE_1__Model__["default"].apply(this, arguments);
      this.on('sync', this._setSynced);
    },

    allows: function allows() {
      if (hasProps(this)) {
        return __WEBPACK_IMPORTED_MODULE_1__Model__["default"].prototype.allows.apply(this, arguments);
      } else {
        return true;
      }
    },

    // bw compatibility support for old computed properties
    set: function set(key, val) {
      var attrs = void 0;

      if ((typeof key === 'undefined' ? 'undefined' : (0, _typeof3.default)(key)) === 'object') {
        attrs = key;
      } else {
        (attrs = {})[key] = val;
      }

      // computed properties
      Object(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"])(attrs).each(function (fn, attr) {
        if (!fn || !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(fn.__attributes)) {
          return;
        }
        this.on('change:' + fn.__attributes.join(' change:'), function () {
          var val = this.get(attr);

          if (val !== this['__schema__'].computedProperties[attr]) {
            this['__schema__'].computedProperties[attr] = val;
            this.trigger('change:' + attr, val);
          }
        }, this);
      }, this);

      return __WEBPACK_IMPORTED_MODULE_1__Model__["default"].prototype.set.apply(this, arguments);
    },

    /**
     * Get the current value of an attribute from the model. For example: `note.get("title")`
     *
     * See [Model.get](http://backbonejs.org/#Model-get)
     * @param {String} attribute
     * @return {Mixed} The value of the model attribute
     */
    get: function get() {
      var value = __WEBPACK_IMPORTED_MODULE_1__Model__["default"].prototype.get.apply(this, arguments);

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(value)) {
        return value.apply(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(value.__attributes || [], this.get, this));
      }
      return value;
    },

    /**
     * Return a shallow copy of the model's attributes for JSON stringification.
     * This can be used for persistence, serialization, or for augmentation before being sent to the server.
     * The name of this method is a bit confusing, as it doesn't actually return a JSON string —
     *  but I'm afraid that it's the way that the JavaScript API for JSON.stringify works.
     *
     * ```javascript
     * var artist = new Model({
     *   firstName: "Wassily",
     *   lastName: "Kandinsky"
     * });
     *
     * artist.set({birthday: "December 16, 1866"});
     * alert(JSON.stringify(artist)); // {"firstName":"Wassily","lastName":"Kandinsky","birthday":"December 16, 1866"}
     * ```
     * See [Model.toJSON](http://backbonejs.org/#Model-toJSON)
     * @param  {Object} options
     * @return {Object}
     */
    toJSON: function toJSON(options) {
      options || (options = {});
      var res = __WEBPACK_IMPORTED_MODULE_1__Model__["default"].prototype.toJSON.apply(this, arguments);

      // cleanup computed properties
      Object(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"])(res).each(function (value, key) {
        if (typeof value === 'function') {
          if (options.verbose) {
            res[key] = this.get(key);
          } else {
            delete res[key];
          }
        }
      }, this);

      // cleanup private properties
      if (!options.verbose) {
        Object(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"])(res).each(function (value, key) {
          if (/^__\w+__$/.test(key)) {
            delete res[key];
          }
        });
      }

      return res;
    },

    sanitizeAttributes: function sanitizeAttributes(attributes) {
      var attrs = {};

      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(attributes, function (value, key) {
        if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(value)) {
          attrs[key] = value;
        }
      });
      return attrs;
    },

    reset: function reset(options) {
      this.clear(options);
      this.set(this.sanitizeAttributes(this.defaults), options);
    },

    clear: function clear(options) {
      var attrs = {};

      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(this.sanitizeAttributes(this.attributes), function (value, key) {
        attrs[key] = void 0;
      });
      return this.set(attrs, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, options, { unset: true }));
    },

    /**
     * @private
     */
    _setSynced: function _setSynced(newModel) {
      this._syncedData = newModel && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(newModel.toJSON) ? newModel.toJSON() : {};
    },

    /**
     * @private
     */
    _getSynced: function _getSynced() {
      return this._syncedData;
    },

    isSynced: function isSynced() {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isEqual(this._getSynced(), this.toJSON());
    }
  },
  /** @lends module:Okta.BaseModel.prototype */{
    /**
     * @static
     *
     * Example:
     *
     * ```javascript
     * var Model = BaseModel.extend({
     *   defaults: {
     *     name: BaseModel.ComputedProperty(['fname', 'lname'], function (fname, lname) {
     *       return fname + ' ' + lname;
     *     })
     *   }
     * });
     * var model = new Model({fname: 'Joe', lname: 'Doe'});
     * model.get('name'); // Joe Doe
     * model.toJSON(); // {fname: 'Joe', lname: 'Doe'}
     * ```
     *
     * @param {Array} attributes - an array of the attribute names this method depends on
     * @param {Function} callback the function that computes the value of the property
     *
     * @deprecated Use {@link #derived} instead
     */
    ComputedProperty: function ComputedProperty() {
      var args = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].toArray(arguments);

      var fn = args.pop();

      fn.__attributes = args.pop();
      return fn;
    }
  });
  /* harmony default export */__webpack_exports__["default"] = BaseModelBaseModel;

  /***/
},
/* 16 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__views_BaseView__ = __webpack_require__(1);

  /* harmony default export */__webpack_exports__["default"] = {
    redirect: function redirect(url) {
      window.location = url;
    },

    reloadPage: function reloadPage() {
      window.location.reload();
    },

    constantError: function constantError(errorMessage) {
      return function () {
        throw new Error(errorMessage);
      };
    },

    /**
     * Simply convert an URL query key value pair object into an URL query string.
     * Remember NOT to escape the query string when using this util.
     * example:
     * input: {userId: 123, instanceId: undefined, expand: 'schema,app'}
     * output: '?userId=123&expand=schema,app'
     */
    getUrlQueryString: function getUrlQueryString(queries) {
      __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].isObject(queries) || (queries = {});

      var queriesString = __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].without(__WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].map(queries, function (value, key) {
        if (value !== undefined && value !== null) {
          return key + '=' + encodeURIComponent(value);
        }
      }), undefined).join('&');

      return __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].isEmpty(queriesString) ? '' : '?' + queriesString;
    },

    isABaseView: function isABaseView(obj) {
      return obj instanceof __WEBPACK_IMPORTED_MODULE_1__views_BaseView__["default"] || obj.prototype instanceof __WEBPACK_IMPORTED_MODULE_1__views_BaseView__["default"] || obj === __WEBPACK_IMPORTED_MODULE_1__views_BaseView__["default"];
    }
  };

  /***/
},
/* 17 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__BaseCollection__ = __webpack_require__(14);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__BaseModel__ = __webpack_require__(15);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__util_Logger__ = __webpack_require__(7);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__ = __webpack_require__(13);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__util_StringUtil__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__views_forms_helpers_EnumTypeHelper__ = __webpack_require__(18);
  /* eslint max-statements: [2, 16], complexity: [2, 8], max-params: [2, 8] */

  var loc = __WEBPACK_IMPORTED_MODULE_6__util_StringUtil__["default"].localize;
  var STRING = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].STRING;
  var NUMBER = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].NUMBER;
  var INTEGER = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].INTEGER;
  var OBJECT = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].OBJECT;

  var getArrayTypeName = function getArrayTypeName(type, elementType) {
    return type + 'of' + elementType;
  };

  var SchemaPropertySubSchema = __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].extend({
    defaults: {
      description: undefined,
      minLength: undefined,
      maxLength: undefined,
      format: undefined
    },
    parse: function parse(resp) {
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isString(resp.format)) {
        var matcher = /^\/(.+)\/$/.exec(resp.format);

        if (matcher) {
          resp.format = matcher[1];
        }
      }
      return resp;
    }
  });
  var SchemaPropertySubSchemaCollection = __WEBPACK_IMPORTED_MODULE_2__BaseCollection__["default"].extend({
    model: SchemaPropertySubSchema
  });
  var SchemaPropertySubSchemaAllOfCollection = SchemaPropertySubSchemaCollection.extend({
    _type: 'allOf'
  });
  var SchemaPropertySubSchemaOneOfCollection = SchemaPropertySubSchemaCollection.extend({
    _type: 'oneOf'
  });
  var SchemaPropertySubSchemaNoneOfCollection = SchemaPropertySubSchemaCollection.extend({
    _type: 'noneOf'
  });
  var constraintTypeErrorMessages = {
    string: loc('schema.validation.field.value.must.string', 'courage'),
    number: loc('schema.validation.field.value.must.number', 'courage'),
    integer: loc('schema.validation.field.value.must.integer', 'courage'),
    object: loc('schema.validation.field.value.must.object', 'courage')
  };
  var loginFormatNonePattern = '.+';
  var escapedLoginCharsRe = /[^a-zA-Z0-9-]/;
  var SchemaPropertySchemaProperty = __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].extend({
    constraintHandlers: {
      between: '_checkBetweenConstraints',
      greaterThan: '_checkGreaterThanConstraint',
      lessThan: '_checkLessThanConstraint',
      equals: '_checkEqualsConstraint'
    },

    idAttribute: 'name',

    local: {
      __oneOf__: {
        type: 'array',
        minItems: 1
      }
    },

    defaults: {
      // OKTA-28445, set empty string by default as the key for each property when syncing with server
      // so that server can respond with error when a name is not provided
      name: '',
      title: undefined,
      type: undefined,
      description: undefined,
      required: false,
      format: undefined,
      // choose disable option be default.
      union: undefined,
      subSchemas: undefined,
      settings: { permissions: { SELF: __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].PERMISSION.READ_ONLY } },
      unique: undefined,
      __metadata__: undefined,
      __isSensitive__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['settings'], function (settings) {
        return !!(settings && settings.sensitive);
      }),
      __unique__: false,
      __isUniqueValidated__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['unique'], function (unique) {
        return unique === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].UNIQUENESS.UNIQUE_VALIDATED;
      }),
      __isPendingUniqueness__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['unique'], function (unique) {
        return unique === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].UNIQUENESS.PENDING_UNIQUENESS;
      }),
      __isUniqueness__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__isUniqueValidated__', '__isPendingUniqueness__'], function (isValidated, isPending) {
        return isValidated || isPending;
      }),
      __canBeSensitive__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__metadata__'], function (metadata) {
        return !!(metadata && metadata.sensitivizable);
      }),
      __userPermission__: __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].PERMISSION.READ_ONLY,
      __displayType__: undefined,
      __displayTypeLabel__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__displayType__'], function (displayType) {
        return __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].DATATYPE[displayType] || displayType;
      }),
      __supportsMinMax__: false,
      // use the private naming convention for these computed properties,
      // to deal with the complexity in cloning schema with properties (toJSON({verbose: true})),
      // to make sure these attributes are being excluded from api request
      __isReadOnly__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['mutability'], function (mutability) {
        return mutability === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].MUTABILITY.READONLY;
      }),
      __isWriteOnly__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['mutability'], function (mutability) {
        return mutability === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].MUTABILITY.WRITEONLY;
      }),
      __displayScope__: undefined,
      __isScopeSelf__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['scope'], function (scope) {
        return scope === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].SCOPE.SELF;
      }),
      __isNoneScopeArrayType__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__isScopeSelf__', '__displayType__'], function (isScopeSelf, displayType) {
        return !isScopeSelf && __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].isArrayDataType(displayType);
      }),
      __isImported__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['externalName'], function (externalName) {
        return !!externalName;
      }),
      __isFromBaseSchema__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__schemaMeta__'], function (schemaMeta) {
        return schemaMeta && schemaMeta.name === 'base';
      }),
      // Only UI can turn on __enumDefined__ and reprocess the enum/oneOf value; otherwise,
      // it should leave existing value untouch
      __enumDefined__: false,
      __supportEnum__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__displayType__'], function (displayType) {
        return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].contains(__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].SUPPORTENUM, displayType);
      }),
      __isNumberTypeEnum__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__displayType__'], function (displayType) {
        return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].contains([__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].NUMBER, __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].ARRAYDISPLAYTYPE.arrayofnumber], displayType);
      }),
      __isIntegerTypeEnum__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__displayType__'], function (displayType) {
        return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].contains([__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].INTEGER, __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].ARRAYDISPLAYTYPE.arrayofinteger], displayType);
      }),
      __isObjectTypeEnum__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__displayType__'], function (displayType) {
        return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].contains([__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].OBJECT, __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].ARRAYDISPLAYTYPE.arrayofobject], displayType);
      }),
      __isStringTypeEnum__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__displayType__'], function (displayType) {
        return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].contains([__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].STRING, __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].ARRAYDISPLAYTYPE.arrayofstring], displayType);
      }),
      __enumConstraintType__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__isStringTypeEnum__', '__isNumberTypeEnum__', '__isIntegerTypeEnum__', '__isObjectTypeEnum__'], function (isStringType, isNumberType, isIntegerType, isObjectType) {
        if (isStringType) {
          return STRING;
        }
        if (isNumberType) {
          return NUMBER;
        }
        if (isIntegerType) {
          return INTEGER;
        }
        if (isObjectType) {
          return OBJECT;
        }
      }),
      __isEnumDefinedAndSupported__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__enumDefined__', '__supportEnum__'], function (enumDefined, supportEnum) {
        return enumDefined && supportEnum;
      }),
      __isLoginOfBaseSchema__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__isFromBaseSchema__', 'name'], function (isFromBaseSchema, name) {
        return isFromBaseSchema && name === 'login';
      }),
      __isLoginFormatRestrictionToEmail__: __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].ComputedProperty(['__loginFormatRestriction__'], function (loginFormatRestriction) {
        return loginFormatRestriction === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].LOGINPATTERNFORMAT.EMAIL;
      })
    },

    initialize: function initialize() {
      __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].prototype.initialize.apply(this, arguments);
      this.listenTo(this, 'change:__displayType__', this._updateTypeFormatConstraints);
      this.listenTo(this, 'change:type change:format change:items', this._updateDisplayType);
      this.listenTo(this, 'change:__minVal__ change:__maxVal__', this._updateMinMax);
      this.listenTo(this, 'change:__equals__', this._convertEqualsToMinMax);
      this.listenTo(this, 'change:__constraint__', this._setConstraintText);
      this._setConstraintText();
      this._setLoginPattern();
    },

    parse: function parse(resp) {
      /* eslint complexity: [2, 9] */
      resp = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(resp);

      if (resp.type === 'object' && resp.extendedType === 'image') {
        resp.type = 'image';
      }
      resp['__displayType__'] = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].getDisplayType(resp.type, resp.format, resp.items ? resp.items.format ? resp.items.format : resp.items.type : undefined);
      this._setRangeConstraints(resp);
      resp['__supportsMinMax__'] = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].SUPPORTSMINMAX.indexOf(resp['__displayType__']) !== -1;
      resp['__displayScope__'] = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].DISPLAYSCOPE[resp.scope] || __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].DISPLAYSCOPE.NA;
      if (resp.settings && resp.settings.permissions && resp.settings.permissions.SELF) {
        resp['__userPermission__'] = resp.settings.permissions.SELF;
      }
      this._setMasterOverride(resp);
      this._setSubSchemas(resp);
      this._setUniqueness(resp);
      return resp;
    },

    validate: function validate() {
      var enumValidationError = this._validateEnumOneOf();

      if (enumValidationError) {
        return enumValidationError;
      }

      if (!this.get('__supportsMinMax__') || !this.get('__constraint__')) {
        return undefined;
      }

      var constraitType = this.get('__constraint__');
      var constraitHandler = this[this.constraintHandlers[constraitType]];

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(constraitHandler)) {
        return constraitHandler.call(this);
      } else {
        __WEBPACK_IMPORTED_MODULE_4__util_Logger__["default"].warn('No constraint handler found for: ' + constraitType);
        return undefined;
      }
    },

    _checkBetweenConstraints: function _checkBetweenConstraints() {
      var minVal = this.get('__minVal__');
      var maxVal = this.get('__maxVal__');

      if (!minVal && !maxVal) {
        return;
      }
      if (!minVal) {
        return { __minVal__: 'Min value is required' };
      }
      if (!maxVal) {
        return { __maxVal__: 'Max value is required' };
      }

      var val = this._checkIntegerConstraints('__minVal__', 'Min value');

      if (val) {
        return val;
      }
      val = this._checkIntegerConstraints('__maxVal__', 'Max value');
      if (val) {
        return val;
      }
      if (+minVal >= +maxVal) {
        return { __maxVal__: 'Max val must be greater than min val' };
      }
    },

    _checkGreaterThanConstraint: function _checkGreaterThanConstraint() {
      var minVal = this.get('__minVal__');

      if (!minVal) {
        return;
      }

      var val = this._checkIntegerConstraints('__minVal__', 'Min value');

      if (val) {
        return val;
      }
    },

    _checkLessThanConstraint: function _checkLessThanConstraint() {
      var maxVal = this.get('__maxVal__');

      if (!maxVal) {
        return;
      }

      var val = this._checkIntegerConstraints('__maxVal__', 'Max value');

      if (val) {
        return val;
      }
    },

    _checkEqualsConstraint: function _checkEqualsConstraint() {
      var equals = this.get('__equals__');

      if (!equals) {
        return;
      }

      var val = this._checkIntegerConstraints('__equals__', 'Constraint');

      if (val) {
        return val;
      }
    },

    _checkIntegerConstraints: function _checkIntegerConstraints(field, name) {
      var val = this.get(field);
      var error = {};

      if (isNaN(val)) {
        error[field] = name + ' must be a number';
        return error;
      }
      if (+val < 0) {
        error[field] = name + ' must be greater than 0';
        return error;
      }
    },

    _setMasterOverride: function _setMasterOverride(resp) {
      if (resp.settings && resp.settings.masterOverride && resp.settings.masterOverride) {
        var masterOverrideValue = resp.settings.masterOverride.value;

        if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(masterOverrideValue) && !__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isEmpty(masterOverrideValue)) {
          resp['__masterOverrideType__'] = 'OVERRIDE';
          resp['__masterOverrideValue__'] = masterOverrideValue || [];
        } else {
          resp['__masterOverrideType__'] = resp.settings.masterOverride.type;
        }
      } else {
        resp['__masterOverrideType__'] = 'INHERIT';
      }
    },

    _setRangeConstraints: function _setRangeConstraints(resp) {
      /* eslint complexity: [2, 11] */
      if (resp['__displayType__'] === STRING) {
        resp['__minVal__'] = resp.minLength;
        resp['__maxVal__'] = resp.maxLength;
      } else if (resp['__displayType__'] === INTEGER || resp['__displayType__'] === NUMBER) {
        resp['__minVal__'] = resp.minimum;
        resp['__maxVal__'] = resp.maximum;
      }
      if (resp['__minVal__'] && resp['__maxVal__']) {
        if (resp['__minVal__'] === resp['__maxVal__']) {
          resp['__constraint__'] = 'equals';
          resp['__equals__'] = resp['__minVal__'];
        } else {
          resp['__constraint__'] = 'between';
        }
      } else if (!resp['__minVal__'] && resp['__maxVal__']) {
        resp['__constraint__'] = 'lessThan';
      } else if (!resp['__maxVal__'] && resp['__minVal__']) {
        resp['__constraint__'] = 'greaterThan';
      }
    },

    _setSubSchemas: function _setSubSchemas(resp) {
      if (resp.allOf) {
        resp['subSchemas'] = new SchemaPropertySubSchemaAllOfCollection(resp.allOf, { parse: true });
      } else if (resp.oneOf) {
        resp['subSchemas'] = new SchemaPropertySubSchemaOneOfCollection(resp.oneOf, { parse: true });
      } else if (resp.noneOf) {
        resp['subSchemas'] = new SchemaPropertySubSchemaNoneOfCollection(resp.noneOf, { parse: true });
      }
    },

    _setUniqueness: function _setUniqueness(resp) {
      var unique = resp && resp.unique;
      resp['__unique__'] = !!(unique && (unique === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].UNIQUENESS.UNIQUE_VALIDATED || unique === __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].UNIQUENESS.PENDING_UNIQUENESS));
    },

    _setLoginPattern: function _setLoginPattern() {
      if (!this.get('__isLoginOfBaseSchema__')) {
        return;
      }

      var pattern = this.get('pattern');

      if (pattern === loginFormatNonePattern) {
        this.set('__loginFormatRestriction__', __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].LOGINPATTERNFORMAT.NONE);
      } else if (pattern) {
        this.set('__loginFormatRestriction__', __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].LOGINPATTERNFORMAT.CUSTOM);
        this.set('__loginFormatRestrictionCustom__', this._extractLoginPattern(pattern));
      } else {
        this.set('__loginFormatRestriction__', __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].LOGINPATTERNFORMAT.EMAIL);
      }
    },

    _updateDisplayType: function _updateDisplayType() {
      var type = this.get('type');

      if (type === STRING && this.get('format')) {
        this.set('__displayType__', __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].FORMATDISPLAYTYPE[this.get('format')]);
      } else {
        var items = this.get('items');
        var arraytype = items && (items.format ? items.format : items.type);

        if (type && arraytype) {
          this.set('__displayType__', __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].ARRAYDISPLAYTYPE[getArrayTypeName(type, arraytype)]);
        } else {
          this.set('__displayType__', type);
        }
      }
    },

    _validateEnumOneOf: function _validateEnumOneOf() {
      if (!this.get('__isEnumDefinedAndSupported__')) {
        return;
      }

      var enumOneOf = this.get('__oneOf__') || [];

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isEmpty(enumOneOf)) {
        return { __oneOf__: loc('model.validation.field.blank', 'courage') };
      }

      if (!this._isValidateOneOfConstraint(enumOneOf)) {
        var constraintType = this.get('__enumConstraintType__');
        var errorTypeMsg = constraintTypeErrorMessages[constraintType];

        return { __oneOf__: errorTypeMsg };
      }
    },

    _isValidateOneOfConstraint: function _isValidateOneOfConstraint(values) {
      var constraintType = this.get('__enumConstraintType__');

      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].all(values, function (value) {
        return __WEBPACK_IMPORTED_MODULE_7__views_forms_helpers_EnumTypeHelper__["a" /* default */].isConstraintValueMatchType(value.const, constraintType);
      });
    },

    toJSON: function toJSON() {
      var json = __WEBPACK_IMPORTED_MODULE_3__BaseModel__["default"].prototype.toJSON.apply(this, arguments);

      json.settings = { permissions: {} };
      json.settings.permissions['SELF'] = this.get('__userPermission__');

      // omit "sensitive" filed will have default it value to false.
      if (this.get('__isSensitive__')) {
        json.settings.sensitive = this.get('__isSensitive__');
      }
      if (this.get('type') === 'image') {
        json.type = 'object';
        json.extendedType = 'image';
      }

      json = this._enumAssignment(json);
      json = this._attributeOverrideToJson(json);
      json = this._normalizeUnionValue(json);
      json = this._patternAssignment(json);
      json = this._uniquenessAssignment(json);
      return json;
    },

    _attributeOverrideToJson: function _attributeOverrideToJson(json) {
      var masterOverrideType = this.get('__masterOverrideType__');
      var masterOverrideValue = this.get('__masterOverrideValue__');

      if (masterOverrideType === 'OKTA_MASTERED') {
        json.settings.masterOverride = { type: 'OKTA_MASTERED' };
      } else if (masterOverrideType === 'OVERRIDE') {
        json.settings.masterOverride = { type: 'ORDERED_LIST', value: [] };
        if (masterOverrideValue instanceof __WEBPACK_IMPORTED_MODULE_2__BaseCollection__["default"]) {
          __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(masterOverrideValue.toJSON(), function (overrideProfile) {
            json.settings.masterOverride.value.push(overrideProfile.id);
          });
        } else if (masterOverrideValue instanceof Array) {
          json.settings.masterOverride.value = masterOverrideValue;
        }
        if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isEmpty(json.settings.masterOverride.value)) {
          delete json.settings.masterOverride;
        }
      }

      if (masterOverrideType === 'INHERIT') {
        delete json.settings.masterOverride;
      }
      return json;
    },

    /**
     * Only allow set "union" value when isScopeSelf is NONE and displayType is
     * array of (string/number/integer), otherwise reset to default.
     *
     * @see /universal-directory/shared/views/components/UnionGroupValuesRadio.js
     */
    _normalizeUnionValue: function _normalizeUnionValue(json) {
      if (!this.get('__isNoneScopeArrayType__')) {
        json['union'] = undefined;
      }

      return json;
    },

    _enumAssignment: function _enumAssignment(json) {
      if (!this.get('__isEnumDefinedAndSupported__')) {
        return json;
      }

      // backfill empty title by constraint

      var enumOneOf = this._getEnumOneOfWithTitleCheck();

      if (this.get('type') === 'array') {
        delete json.items.enum;
        json.items.oneOf = enumOneOf;
      } else {
        delete json.enum;
        json.oneOf = enumOneOf;
      }

      return json;
    },

    _patternAssignment: function _patternAssignment(json) {
      if (!this.get('__isLoginOfBaseSchema__') || !this.get('__loginFormatRestriction__')) {
        return json;
      }

      switch (this.get('__loginFormatRestriction__')) {
        case __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].LOGINPATTERNFORMAT.EMAIL:
          delete json.pattern;
          break;
        case __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].LOGINPATTERNFORMAT.CUSTOM:
          json.pattern = this._buildLoginPattern(this.get('__loginFormatRestrictionCustom__'));
          break;
        case __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].LOGINPATTERNFORMAT.NONE:
          json.pattern = loginFormatNonePattern;
          break;
      }

      return json;
    },

    _uniquenessAssignment: function _uniquenessAssignment(json) {
      if (!this.get('__unique__')) {
        delete json.unique;
      } else if (!this.get('__isUniqueness__')) {
        json.unique = __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].UNIQUENESS.UNIQUE_VALIDATED;
      }

      return json;
    },

    /**
     * Character should be escaped except letters, digits and hyphen
     */
    _escapedRegexChar: function _escapedRegexChar(pattern, index) {
      var char = pattern.charAt(index);

      if (escapedLoginCharsRe.test(char)) {
        return '\\' + char;
      }

      return char;
    },

    _buildLoginPattern: function _buildLoginPattern(pattern) {
      var result = '';

      for (var i = 0; i < pattern.length; i++) {
        result = result + this._escapedRegexChar(pattern, i);
      }

      return '[' + result + ']+';
    },

    _extractLoginPattern: function _extractLoginPattern(pattern) {
      var re = /^\[(.*)\]\+/;
      var matches = pattern.match(re);

      return matches ? matches[1].replace(/\\(.)/g, '$1') : pattern;
    },

    _getEnumOneOfWithTitleCheck: function _getEnumOneOfWithTitleCheck() {
      var enumOneOf = this.get('__oneOf__');

      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].map(enumOneOf, function (value) {
        if (__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].trim(value.title) !== '') {
          return value;
        }

        value.title = !__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isString(value.const) ? (0, _stringify2.default)(value.const) : value.const;

        return value;
      });
    },

    _updateTypeFormatConstraints: function _updateTypeFormatConstraints() {
      var displayType = this.get('__displayType__');

      // OKTA-31952 reset format according to its displayType
      this.unset('format', { silent: true });
      this.unset('items', { silent: true });
      this.set(__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].DISPLAYTYPES[displayType]);
      if (displayType !== NUMBER && displayType !== INTEGER) {
        this.unset('minimum');
        this.unset('maximum');
      }
      if (displayType !== STRING) {
        this.unset('minLength');
        this.unset('maxLength');
      }

      this.unset('__minVal__');
      this.unset('__maxVal__');
      this.unset('__equals__');
      this.set('__supportsMinMax__', __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].SUPPORTSMINMAX.indexOf(this.get('__displayType__')) !== -1);
    },

    _updateMinMax: function _updateMinMax() {
      var min = void 0;
      var max = void 0;
      var displayType = this.get('__displayType__');

      if (displayType === STRING) {
        min = 'minLength';
        max = 'maxLength';
      } else if (displayType === INTEGER || displayType === NUMBER) {
        min = 'minimum';
        max = 'maximum';
      }

      if (this.get('__minVal__')) {
        this.set(min, parseInt(this.get('__minVal__'), 10));
      } else {
        this.unset(min);
      }

      if (this.get('__maxVal__')) {
        this.set(max, parseInt(this.get('__maxVal__'), 10));
      } else {
        this.unset(max);
      }
    },

    _convertEqualsToMinMax: function _convertEqualsToMinMax() {
      var equals = this.get('__equals__');

      if (equals) {
        this.set('__minVal__', equals);
        this.set('__maxVal__', equals);
      }
    },

    /*
     Normally we would use a derived property here but derived properties do not work with the model Clone function
     so we use this workaround instead.
     */
    _setConstraintText: function _setConstraintText() {
      var constraint = this.get('__constraint__');
      var min = this.get('__minVal__');
      var max = this.get('__maxVal__');
      var equals = this.get('__equals__');

      switch (constraint) {
        case 'between':
          this.set('__constraintText__', 'Between ' + min + ' and ' + max);
          break;
        case 'greaterThan':
          this.set('__constraintText__', 'Greater than ' + min);
          break;
        case 'lessThan':
          this.set('__constraintText__', 'Less than ' + max);
          break;
        case 'equals':
          this.set('__constraintText__', 'Equals ' + equals);
          break;
        default:
          this.set('__constraintText__', '');
          break;
      }
    },

    cleanup: function cleanup() {
      if (this.get('__constraint__') === 'lessThan') {
        this.unset('__minVal__');
      } else if (this.get('__constraint__') === 'greaterThan') {
        this.unset('__maxVal__');
      }
      if (this.get('scope') !== __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].SCOPE.SYSTEM) {
        if (this.get('__isScopeSelf__') === true) {
          this.set({ scope: __WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].SCOPE.SELF }, { silent: true });
        } else {
          this.unset('scope');
        }
      }

      if (!this.get('__unique__')) {
        this.unset('unique');
      }
    },

    /**
     * Since there is not an dedicated attribute to flag enum type,
     * use enum values to determine whether the property is enum type or not.
     */
    isEnumType: function isEnumType() {
      return !!this.getEnumValues();
    },

    getEnumValues: function getEnumValues() {
      return this.get('oneOf') || this.get('enum') || this.get('items') && this.get('items')['oneOf'] || this.get('items') && this.get('items')['enum'];
    },

    detectHasEnumDefined: function detectHasEnumDefined() {
      var enumValues = this.getEnumValues();

      if (!enumValues) {
        return;
      }

      this.set('__oneOf__', __WEBPACK_IMPORTED_MODULE_7__views_forms_helpers_EnumTypeHelper__["a" /* default */].convertToOneOf(enumValues));
      this.set('__enumDefined__', true);
    }
  });
  var SchemaPropertySchemaProperties = __WEBPACK_IMPORTED_MODULE_2__BaseCollection__["default"].extend({
    model: SchemaPropertySchemaProperty,
    clone: function clone() {
      return new this.constructor(this.toJSON({ verbose: true }), { parse: true });
    },
    areAllReadOnly: function areAllReadOnly() {
      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].all(this.pluck('__isReadOnly__'));
    },
    createModelProperties: function createModelProperties() {
      return this.reduce(function (p, schemaProperty) {
        var type = schemaProperty.get('type');

        p[schemaProperty.id] = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].DISPLAYTYPES[type]);
        if (__WEBPACK_IMPORTED_MODULE_5__util_SchemaUtil__["a" /* default */].SUPPORTSMINMAX.indexOf(type) !== -1) {
          p[schemaProperty.id].minLength = schemaProperty.get('minLength');
          p[schemaProperty.id].maxLength = schemaProperty.get('maxLength');
        }
        if (type === 'string') {
          p[schemaProperty.id].format = schemaProperty.get('format');
        }
        return p;
      }, {});
    }
  });
  /* harmony default export */__webpack_exports__["default"] = {
    Model: SchemaPropertySchemaProperty,
    Collection: SchemaPropertySchemaProperties
  };

  /***/
},
/* 18 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_SchemaUtil__ = __webpack_require__(13);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__ = __webpack_require__(3);
  /* eslint max-statements: 0 */

  var NAME = 'name';
  var ENUM_KEY_PREFIX = '_enum_';

  /**
   * Generate Input Options in order to create an input in an Form for Enum type attribute.
   * @param {Object} config informations for creating input options
   *   config.name        schema property name
   *   config.title       schema property title
   *   config.readOnly    create an read only input?
   *   config.explain     sub-title to the input
   *   config.enumValues  list of enum values for creating input options (Dropdown/SimpleCheckBoxSet)
   *   config.displayType display type of schema property
   *
   * @return {Object} inputOptions options for create an Input view. (Dropdown/SimpleCheckBoxSet)
   *
   */
  function getEnumInputOptions(config) {
    var enumOneOf = convertToOneOf(config.enumValues);
    var inputOptions = {
      name: config.name,
      label: config.title,
      readOnly: config.readOnly,
      customExplain: config.explain,
      params: { enumOneOf: enumOneOf },
      options: getDropdownOptionsFromOneOf(enumOneOf)
    };

    // input type
    if (__WEBPACK_IMPORTED_MODULE_2__util_SchemaUtil__["a" /* default */].isArrayDataType(config.displayType)) {
      inputOptions.type = 'checkboxset';
      inputOptions.to = valuesToEnumObjects;
      inputOptions.from = enumObjectsToValues;
    } else {
      inputOptions.type = 'select';
      inputOptions.to = valueToEnumObject;
      inputOptions.from = enumObjectToValue;
    }

    inputOptions.input = null;
    return inputOptions;
  }

  function getDropdownOptions(values) {
    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(values) ? getDropdownOptionsFromOneOf(convertToOneOf(values)) : {};
  }

  function getDropdownOptionsFromOneOf(values) {
    if (!isOneOfEnumObject(values)) {
      return {};
    }

    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].reduce(values, function (options, value, index) {
      options[convertIndexToEnumIndex(index)] = value.title;
      return options;
    }, {});
  }

  function convertToOneOf(values) {
    // assume this is a legacy enum array and convert to oneOf object
    if (!__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].all(values, __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].isPlainObject)) {
      return convertEnumToOneOf(values);

      // we assume object without const and title is an enum object which need special conversion
    } else if (!isOneOfEnumObject(values)) {
      return convertEnumObjectToOneOf(values);
    }

    return values;
  }

  function isOneOfEnumObject(values) {
    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(values) && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].all(values, function (value) {
      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].has(value, 'const') && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].has(value, 'title');
    });
  }

  function convertEnumToOneOf(values) {
    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].map(values, function (value) {
      return {
        const: value,
        title: valueToTitle(value)
      };
    });
  }

  function valueToTitle(value) {
    if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isObject(value)) {
      return (0, _stringify2.default)(value);
    }

    if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isNumber(value)) {
      return value + '';
    }

    return value;
  }

  function convertEnumObjectToOneOf(values) {
    var findKey = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].partial(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].has, __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"], NAME);
    // If all object found the key NAME, use the NAME's value as display name

    if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].all(values, findKey)) {
      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].chain(values).filter(function (value) {
        return __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].isPlainObject(value) && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].has(value, NAME);
      }).map(function (value) {
        return { const: value, title: value[NAME] };
      }).value();
    }

    // Assume a legacy object array does not need special handling and just convert to const/title enum
    return convertEnumToOneOf(values);
  }

  function convertIndexToEnumIndex(index) {
    return '' + ENUM_KEY_PREFIX + index;
  }

  function enumObjectToValue(obj) {
    var index = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].findIndex(this.options.params.enumOneOf, function (oneOfObj) {
      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isObject(obj) ? __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isEqual(oneOfObj.const, obj) : oneOfObj.const === obj;
    });
    // Cannot rely on comparator in findIndex when compare objects so need special handling

    return index > -1 ? convertIndexToEnumIndex(index) : obj;
  }

  function valueToEnumObject(val) {
    if (!__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isString(val) || val.indexOf(ENUM_KEY_PREFIX) !== 0) {
      return val;
    }

    var index = val.replace(ENUM_KEY_PREFIX, '');
    var enumValue = this.options.params && __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(this.options.params.enumOneOf) ? this.options.params.enumOneOf[index] : null;

    // @see `getEnumInputOptions` how enumValues has been set.

    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].has(enumValue, 'const') ? enumValue.const : enumValue;
  }

  function valuesToEnumObjects(values) {
    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].map(values, valueToEnumObject.bind(this));
  }

  function enumObjectsToValues(values) {
    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].map(values, enumObjectToValue.bind(this));
  }

  function isStringConstraint(value) {
    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isString(value) && __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].trim(value) !== '';
  }

  function isNumberConstraint(value) {
    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isNumber(value) || __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isNumber(__WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].parseFloat(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].trim(value)));
  }

  function isIntegerConstraint(value) {
    var integer = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isNumber(value) ? value : __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].parseInt(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].trim(value));

    return typeof integer === 'number' && isFinite(integer) && Math.floor(integer) === integer;
  }

  function isObjectConstraint(value) {
    if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isObject(value) && !__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(value)) {
      return true;
    }

    var object = __WEBPACK_IMPORTED_MODULE_3__util_StringUtil__["default"].parseObject(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].trim(value));

    return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isObject(object) && !__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(object);
  }

  function isConstraintValueMatchType(value, type) {
    switch (type) {
      case __WEBPACK_IMPORTED_MODULE_2__util_SchemaUtil__["a" /* default */].STRING:
        return isStringConstraint(value);
      case __WEBPACK_IMPORTED_MODULE_2__util_SchemaUtil__["a" /* default */].NUMBER:
        return isNumberConstraint(value);
      case __WEBPACK_IMPORTED_MODULE_2__util_SchemaUtil__["a" /* default */].INTEGER:
        return isIntegerConstraint(value);
      case __WEBPACK_IMPORTED_MODULE_2__util_SchemaUtil__["a" /* default */].OBJECT:
        return isObjectConstraint(value);
    }
  }

  /* harmony default export */__webpack_exports__["a"] = {
    getEnumInputOptions: getEnumInputOptions,
    getDropdownOptions: getDropdownOptions,
    convertToOneOf: convertToOneOf,
    isConstraintValueMatchType: isConstraintValueMatchType
  };

  /***/
},
/* 19 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_backbone__ = __webpack_require__(6);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__Logger__ = __webpack_require__(7);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__SettingsModel__ = __webpack_require__(20);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5_ConfirmationDialog__ = __webpack_require__(21);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5_ConfirmationDialog___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_ConfirmationDialog__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__views_components_Notification__ = __webpack_require__(41);
  /* eslint max-len: [2, 150], max-params: [2, 7] */

  function getRoute(router, route) {
    var root = __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].result(router, 'root') || '';

    if (root && __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].isString(route)) {
      return [root, route].join('/').replace(/\/{2,}/g, '/');
    }
    return route;
  }

  /**
   * BaseRouter is a standard [Backbone.Router](http://backbonejs.org/#Router)
   * with a few additions:
   * - Explicit mapping between routes and controllers
   * - Support for rendering notification and confirmation dialogs
   *
   * Checkout the [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World)
   * for a step-by-step guide to using this.
   *
   * @class module:Okta.Router
   * @extends external:Backbone.Router
   * @param {Object} options options hash
   * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM
   */
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Router.extend(
  /** @lends module:Okta.Router.prototype */{
    /**
     * The root URL for the router. When setting {@link http://backbonejs.org/#Router-routes|routes},
     * it will be prepended to each route.
     * @type {String|Function}
     */
    root: '',

    listen: __WEBPACK_IMPORTED_MODULE_6__views_components_Notification__["a" /* default */].prototype.listen,

    constructor: function constructor(options) {
      options || (options = {});
      this.el = options.el;
      this.settings = new __WEBPACK_IMPORTED_MODULE_4__SettingsModel__["a" /* default */](__WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].omit(options, 'el'));
      if (options.root) {
        this.root = options.root;
      }

      __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Router.apply(this, arguments);

      this.listen('notification', this._notify);
      this.listen('confirmation', this._confirm);
    },

    /**
     * Fires up a confirmation dialog
     *
     * @param  {Object} options Options Hash
     * @param  {String} options.title The title
     * @param  {String} options.subtitle The explain text
     * @param  {String} options.save The text for the save button
     * @param  {Function} options.ok The callback function to run when hitting "OK"
     * @param  {String} options.cancel The text for the cancel button
     * @param  {Function} options.cancelFn The callback function to run when hitting "Cancel"
     * @param  {Boolean} options.noCancelButton Don't render the cancel button (useful for alert dialogs)
     *
     * @private
     *
     * @return {Okta.View} the dialog view
     */
    _confirm: function _confirm(options) {
      options || (options = {});
      var Dialog = __WEBPACK_IMPORTED_MODULE_5_ConfirmationDialog___default.a.extend(__WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].pick(options, 'title', 'subtitle', 'save', 'ok', 'cancel', 'cancelFn', 'noCancelButton', 'content', 'danger', 'type', 'closeOnOverlayClick'));
      var dialog = new Dialog({ model: this.settings });
      // The model is here because itsa part of the BaseForm paradigm.
      // It will be ignored in the context of a confirmation dialog.

      dialog.render();
      return dialog; // test hook
    },

    /**
     * Fires up a notification banner
     *
     * @param  {Object} options Options Hash
     * @return {Okta.View} the notification view
     * @private
     */
    _notify: function _notify(options) {
      var notification = new __WEBPACK_IMPORTED_MODULE_6__views_components_Notification__["a" /* default */](options);

      Object(__WEBPACK_IMPORTED_MODULE_1__jquery_wrapper__["default"])('#content').prepend(notification.render().el);
      return notification; // test hook
    },

    /**
     * Renders a Controller
     * This will initialize new instance of a controller and call render on it
     *
     * @param  {Okta.Controller} Controller The controller Class we which to render
     * @param  {Object} [options] Extra options to the controller constructor
     */
    render: function render(Controller, options) {
      this.unload();
      options = __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].extend(__WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].pick(this, 'settings', 'el'), options || {});
      this.controller = new Controller(options);
      this.controller.render();
    },

    /**
     * Starts the backbone history object
     *
     * Waits for the dom to be ready before calling `Backbone.history.start()` (IE issue).
     *
     * See [Backbone History](http://backbonejs.org/#History) for more information.
     */
    start: function start() {
      var args = arguments;

      Object(__WEBPACK_IMPORTED_MODULE_1__jquery_wrapper__["default"])(function () {
        if (__WEBPACK_IMPORTED_MODULE_0_backbone___default.a.History.started) {
          __WEBPACK_IMPORTED_MODULE_3__Logger__["default"].error('History has already been started');
          return;
        }
        __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.history.start.apply(__WEBPACK_IMPORTED_MODULE_0_backbone___default.a.history, args);
      });
    },

    /**
     * Removes active controller and frees up event listeners
     */
    unload: function unload() {
      if (this.controller) {
        this.stopListening(this.controller);
        this.stopListening(this.controller.state);
        this.controller.remove();
      }
    },

    route: function route(_route, name, callback) {
      return __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Router.prototype.route.call(this, getRoute(this, _route), name, callback);
    },

    navigate: function navigate(fragment, options) {
      return __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Router.prototype.navigate.call(this, getRoute(this, fragment), options);
    }
  });

  /***/
},
/* 20 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__models_Model__ = __webpack_require__(11);

  /**
   * @class SettingsModel
   * @extends {Okta.Model}
   * @private
   */

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_1__models_Model__["default"].extend({
    local: function local() {
      var settings = window.okta && window.okta.settings || {};

      return {
        orgId: ['string', false, settings.orgId],
        orgName: ['string', false, settings.orgName],
        serverStatus: ['string', false, settings.serverStatus],
        persona: ['string', false, settings.persona],
        isDeveloperConsole: ['boolean', false, settings.isDeveloperConsole],
        isPreview: ['boolean', false, settings.isPreview],
        permissions: ['array', true, settings.permissions || []]
      };
    },

    extraProperties: true,

    constructor: function constructor() {
      this.features = window._features || [];
      __WEBPACK_IMPORTED_MODULE_1__models_Model__["default"].apply(this, arguments);
    },

    /**
     * Checks if the user have a feature flag enabled (Based of the org level feature flag)
     * @param  {String}  feature Feature name
     * @return {Boolean}
     */
    hasFeature: function hasFeature(feature) {
      if (window._possibleFeatures && !__WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].contains(window._possibleFeatures, feature) && window.okta && window.okta.logHasFeatureError) {
        window.okta.logHasFeatureError(feature);
      }
      return __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].contains(this.features, feature);
    },

    /**
     * Checks if any of the given feature flags are enabled (Based of the org level feature flags)
     * @param  {Array}  featureArray Features names
     * @return {Boolean} true if any of the give features are enabled. False otherwise
     */
    hasAnyFeature: function hasAnyFeature(featureArray) {
      return __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].some(featureArray, this.hasFeature, this);
    },

    /**
     * Checks if the user have a specific permission (based on data passed from JSP)
     * @param  {String}  permission Permission name
     * @return {Boolean}
     */
    hasPermission: function hasPermission(permission) {
      return __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].contains(this.get('permissions'), permission);
    }
  });

  /***/
},
/* 21 */
/***/function (module, exports, __webpack_require__) {

  "use strict";

  var __WEBPACK_AMD_DEFINE_RESULT__;

  // TODO: maybe replaced by
  // https://github.com/Calvein/empty-module
  // https://github.com/crimx/empty-module-loader
  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  /***/
},
/* 22 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_backbone__ = __webpack_require__(6);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone__);

  var CHILDREN = '__children__',
      RENDERED = '__rendered__',
      PARENT = '__parent__',
      CHILD_DEFINITIONS = '__children_definitions__',
      ADD_TO_CONTAINER = '__add_to_container__';

  function getIndex(container, view) {
    for (var i = 0; i < container[CHILDREN].length; i++) {
      if (view.cid === container[CHILDREN][i].cid) {
        return i;
      }
    }
  }

  function noop() {}

  function doRender(view) {
    view[RENDERED] = true;

    var html = view.renderTemplate(view.template);
    if (html) {
      view.$el.html(html);
    } else if (view.length) {
      view.$el.empty();
    }

    view.each(function (view) {
      view[ADD_TO_CONTAINER]();
    });
  }

  function subscribeEvents(view) {
    var isEventPropertyRe = /^(?!(?:delegate|undelegate|_))([a-zA-Z0-9]+)(?:Events)$/;
    __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].allKeys(view), function (key) {
      var matchKeys = key.match(isEventPropertyRe);
      if (!matchKeys) {
        return;
      }
      var bindings = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(view, key),
          entity = view.options[matchKeys[1]] || view[matchKeys[1]];
      if (!entity || !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isObject(bindings) || !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(entity.trigger)) {
        return;
      }
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(bindings, function (callback, event) {
        var callbacks = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(callback) ? [callback] : __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].reduce(callback.split(/\s+/), function (arr, name) {
          if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(view[name])) {
            arr.push(view[name]);
          }
          return arr;
        }, []);
        __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(callbacks, function (cb) {
          view.listenTo(entity, event, cb);
        });
      });
    });
  }

  /**
     * A View operates on a string template, an token based template, or a model based template, with a few added hooks.
     * It provides a collection of child views, when a child view could be a View or another View.
     * Conceptually, if we were in a file system, the View is a folder, when the concrete child views are files,
     * and the child Views are sub folders.
     *
     * *Technically, when using a View as a container, it could have its own concrete logic,
     * but conceptually we like to keep it separated so a view is either a concrete view or a collection of child views.*
     *
     * In addition to the standard backbone options, we added `settings` and `state` as first class options.
     * it will automatically assign `options` to `this.options` as an instance member.
     *
     * See [Backbone.View](http://backbonejs.org/#View).
     *
     * @class src/framework/View
     * @extends external:Backbone.View
     * @param {Object} [options] options hash
     * @example
     * var DocumentView = Archer.View.extend({
     *   template: [
     *     '<header></header>',
     *     '<article></article>',
     *     '<footer></footer>'
     *   ].join(''),
     *   children: [[HeaderView, 'header'], [ContentView, 'article'], [FooterView, 'footer']]
     * });
     */
  var View = __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.View.extend( /** @lends src/framework/View.prototype */{

    /**
       * An object listing events and callback bind to this.{entity}
       * @name *Events
       * @memberof src/framework/View
       * @type {(Object|Function)}
       * @instance
       * @example
       * var FooView = View.extend({
       *   modelEvents: {
       *     'change:name': 'render'
       *   }
       * })
       * //equivalent to ==>
       * var FooView = View.extend({
       *   initialize: function() {
       *     this.listenTo(this.model, 'change:name', this.render);
       *   }
       * });
       *
       *
       * //Multiple callbacks:
       * var FooView = View.extend({
       *   modelEvents: {
       *     'change:name': 'render foo'
       *   },
       *   foo: function() {}
       * });
       *
       * //Callbacks As Function:
       * var FooView = View.extend({
       *   stateEvents: {
       *     'change': function() {
       *   }
       * });
       *
       * //Event Configuration As Function
       * var FooView = View.extend({
       *   collectionEvents: function() {
       *     var events = { 'change:name deleteItem': 'render' };
       *     events['changeItem'] = 'spin';
       *     events['addItem'] = function() {};
       *     return events;
       *   }
       * });
       */

    constructor: function constructor(options) {
      /* eslint max-statements: [2, 17] */
      this.options = options || {};
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].pick(this.options, 'state', 'settings'));

      // init per-instance children collection
      this[CHILDREN] = [];
      this[RENDERED] = false;
      this[PARENT] = null;
      this[CHILD_DEFINITIONS] = this.children;

      // we want to make sure initialize is triggered *after* we append the views from the `this.views` array
      var initialize = this.initialize;
      this.initialize = noop;

      __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.View.apply(this, arguments);

      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, CHILD_DEFINITIONS), function (childDefinition) {
        this.add.apply(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(childDefinition) ? childDefinition : [childDefinition]);
      }, this);
      delete this[CHILD_DEFINITIONS];

      if (this.autoRender && this.model) {
        var event = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(this.autoRender) ? __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(this.autoRender, function (field) {
          return 'change:' + field;
        }).join(' ') : 'change';
        this.listenTo(this.model, event, function () {
          this.render();
        });
      }

      this.initialize = initialize;
      this.initialize.apply(this, arguments);
      subscribeEvents(this);
    },

    /**
       * Unregister view from container
       * Note: this will not remove the view from the dom
       * and will not call the `remove` method on the view
       *
       * @param {src/framework/View} view the view to unregister
       * @private
       */
    unregister: function unregister(view) {

      this.stopListening(view);
      var viewIndex = getIndex(this, view);
      // viewIndex is undefined when the view is not found (may have been removed)
      // check if it is undefined to prevent unexpected thing to happen
      // array.splice(undefined, x) removes the first x element(s) from the array
      // this protects us against issues when calling `remove` on a child view multiple times
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNumber(viewIndex)) {
        this[CHILDREN].splice(viewIndex, 1);
      }
    },

    /**
       * Should we auto render the view upon model change. Boolean or array of field names to listen to.
       * @type {Boolean|Array}
       * @deprecated Instead, please use modelEvents
       * @example
       * modelEvents: {
       *   change:name: 'render'
       * }
       */
    autoRender: false,

    /**
       *
       * When the template is an underscore template, the render method will pass the options has to the template
       * And the associated model, if exists, when it will prefer the model over the options in case of a conflict.
       * {@link #render View.render}
       * @type {(String|Function)}
       * @example
       * var View = View.extend({
       *   template: '<p class="name">{{name}}</p>'
       * };
       */
    template: null,

    /**
       * A list of child view definitions to be passed to {@link #add this.add()}.
       * Note: these definitions will be added **before** the {@link #constructor initiliaze} method invokes.
       * @type {(Array|Function)}
       * @example
       * var Container = View.extend({
       *    template: '<p class="content"></p>',
       *    children: [
       *      [ContentView, '.content'],
       *      [OtherContentView, '.content'],
       *      OtherView
       *    ]
       *  })
       *
       * var Container = View.extend({
       *    template: '<dov class="form-wrap"></div>',
       *    children: function () {
       *      return [
       *        [FormView, '.form-wrap', {options: {model: this.optiosn.otherModel}}]
       *      ]
       *    }
       *  })
       */
    children: [],

    /**
       * Add a child view to the container.
       * If the container is already rendered, will also render the view  and append it to the DOM.
       * Otherwise will render and append once the container is rendered.
       *
       * *We believe that for the sake of encapsulation, a view should control its own chilren, so we treat this method as
       * protected and even though technically you can call `view.add` externally we strongly discourage it.*
       *
       * @param {(src/framework/View|String)} view A class (or an instance which is discouraged) of a View - or an HTML
       * string/template
       * @param {String} [selector] selector in the view's template on which the view will be added to
       * @param {Object} [options]
       * @param {Boolean} [options.bubble=false] Bubble (proxy) events from this view up the chain
       * @param {Boolean} [options.prepend=false] Prepend the view instend of appending
       * @param {String} [options.selector] Selector in the view's template on which the view will be added to
       * @param {Object} [options.options] Extra options to pass to the child constructor
       * @protected
       * @returns {src/framework/View} - The instance of itself for the sake of chaining
       * @example
       * var Container = View.extend({
       *
       *   template: [
       *     '<h1></h1>',
       *     '<section></section>',
       *   ].join(''),
       *
       *   initalize: function () {
       *
       *     this.add(TitleView, 'h1'); // will be added to <h1>
       *
       *     this.add(ContentView1, 'section'); // will be added to <section>
       *
       *     this.add(ContentView2, 'section', {prepend: true}); // will be add into <section> **before** ContentView1
       *
       *     this.add(OtherView, {
       *       options: {
       *         model: new Model()
       *       }
       *     }); // will be added **after** the <section> element
       *
       *     this.add('<p class="name">some html</p>'); //=> "<p class="name">some html</p>"
       *     this.add('<p class="name">{{name}}</p>'); //=> "<p class="name">John Doe</p>"
       *     this.add('{{name}}') //=> "<div>John Doe</div>"
       *     this.add('<span>{{name}}</span> w00t') //=> "<div><span>John Doe</span> w00t</div>"
       *   }
       *
       * });
       *
       * var container - new View({name: 'John Doe'});
       */
    add: function add(view, selector, bubble, prepend, extraOptions) {
      /* eslint max-statements: [2, 28], complexity: [2, 9] */

      var options = {},
          args = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].toArray(arguments);

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isObject(selector)) {
        options = selector;
        selector = options.selector;
        bubble = options.bubble;
        prepend = options.prepend;
        extraOptions = options.options;
      } else if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isObject(bubble)) {
        options = bubble;
        bubble = options.bubble;
        prepend = options.prepend;
        extraOptions = options.options;
      }

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isString(view)) {
        view = function (template) {
          return View.extend({
            constructor: function constructor() {
              try {
                var $el = __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.$(template);

                if ($el.length != 1) {
                  throw 'invalid Element';
                }

                var unescapingRexExp = /&(\w+|#x\d+);/g;
                var elementUnescapedOuterHTMLLength = $el.prop('outerHTML').replace(unescapingRexExp, ' ').length;
                var templateUnescapedLength = template.replace(unescapingRexExp, ' ').length;

                if (elementUnescapedOuterHTMLLength !== templateUnescapedLength) {
                  throw 'invalid Element';
                }

                this.template = $el.html();
                this.el = $el.empty()[0];
              } catch (e) {
                // not a valid html tag.
                this.template = template;
              }
              View.apply(this, arguments);
            }
          });
        }(view);
      }

      if (view.prototype && view.prototype instanceof View) {
        /* eslint new-cap: 0 */
        var viewOptions = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, this.options, extraOptions), 'el');
        args[0] = new view(viewOptions);
        return this.add.apply(this, args);
      }

      // prevent dups
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNumber(getIndex(this, view))) {
        throw new Error('Duplicate child');
      }

      view[PARENT] = this;

      // make the view responsible for adding itself to the parent:
      // * register the selector in the closure
      // * register a reference the parent in the closure
      view[ADD_TO_CONTAINER] = function (selector) {
        return function () {
          if (selector && view[PARENT].$(selector).length != 1) {
            throw new Error('Invalid selector: ' + selector);
          }
          var $el = selector ? this[PARENT].$(selector) : this[PARENT].$el;
          this.render();
          // we need to delegate events in case
          // the view was added and removed before
          this.delegateEvents();

          // this[PARENT].at(index).$el.before(this.el);
          prepend ? $el.prepend(this.el) : $el.append(this.el);
        };
      }.call(view, selector);

      // if flag to bubble events is set
      // proxy all child view events
      if (bubble) {
        this.listenTo(view, 'all', function () {
          this.trigger.apply(this, arguments);
        });
      }

      // add to the dom if `render` has been called
      if (this.rendered()) {
        view[ADD_TO_CONTAINER]();
      }

      // add view to child views collection
      this[CHILDREN].push(view);

      return this;
    },

    /**
       * Remove all children from container
       */
    removeChildren: function removeChildren() {
      this.each(function (view) {
        view.remove();
      });
      return this;
    },

    /**
       *  Removes a view from the DOM, and calls stopListening to remove any bound events that the view has listenTo'd.
       *  Also removes all childern of the view if any, and removes itself from its parent view(s)
       */
    remove: function remove() {
      this.removeChildren();
      if (this[PARENT]) {
        this[PARENT].unregister(this);
      }
      return __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.View.prototype.remove.apply(this, arguments);
    },

    /**
       * Compile the template to function you can apply tokens on on render time.
       * Uses the underscore tempalting engine by default
       * @protected
       * @param  {String} template
       * @return {Function} a compiled template
       */
    compileTemplate: function compileTemplate(template) {
      /* eslint  @okta/okta/no-specific-methods: 0*/
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].template(template);
    },

    /**
       * Render a template with `this.model` and `this.options` as parameters
       * preferring the model over the options.
       *
       * @param  {(String|Function)} template The template to build
       * @return {String} An HTML string
       * @protected
       */
    renderTemplate: function renderTemplate(template) {
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isString(template)) {
        template = this.compileTemplate(template);
      }
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(template)) {
        return template(this.getTemplateData());
      }
    },

    /**
       * The data hash passed to the compiled template
       * @return {Object}
       * @protected
       */
    getTemplateData: function getTemplateData() {
      var modelData = this.model && this.model.toJSON({ verbose: true }) || {};
      var options = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(this.options, ['state', 'settings', 'model', 'collection']);
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults({}, modelData, options);
    },

    /**
       * Renders the template to `$el` and append all children in order
       * {@link #template View.template}
       */
    render: function render() {
      this.preRender();
      doRender(this);
      this.postRender();
      return this;
    },

    /**
       * Pre render routine. Will be called right *before* the logic in {@link #render} is executed
       * @method
       */
    preRender: noop,

    /**
       * Post render routine. Will be called right *after* the logic in {@link #render} is executed
       * @method
       */
    postRender: noop,

    /**
       * Was this instance rendered
       */
    rendered: function rendered() {
      return this[RENDERED];
    },

    /**
       * Get all direct child views.
       * @returns {src/framework/View[]}
       * @example
       * var container = View.extend({
       *   children: [View1, View2]
       * }).render();
       * container.getChildren() //=> [view1, view2];
       */
    getChildren: function getChildren() {
      return this.toArray();
    },

    /**
       * Get a child by index
       * @param {number} index
       * @returns {src/framework/View} The child view
       */
    at: function at(index) {
      return this.getChildren()[index];
    },

    /**
       * Invokes a method on all children down the tree
       *
       * @param {String} method The method to invoke
       */
    invoke: function invoke(methodName) {
      var args = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].toArray(arguments);
      this.each(function (child) {
        // if child has children, bubble down the tree
        if (child.size()) {
          child.invoke.apply(child, args);
        }
        // run the function on the child
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(child[methodName])) {
          child[methodName].apply(child, args.slice(1));
        }
      });
      return this;
    }
  });

  // Code borrowed from Backbone.js source
  // Underscore methods that we want to implement on the Container.
  var methods = ['each', 'map', 'reduce', 'reduceRight', 'find', 'filter', 'reject', 'every', 'some', 'contains', 'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'chain', 'where', 'findWhere'];

  __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(methods, function (method) {
    View.prototype[method] = function () {
      var args = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].toArray(arguments);
      args.unshift(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].toArray(this[CHILDREN]));
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"][method].apply(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"], args);
    };
  }, this);

  /**
     * See [_.each](http://underscorejs.org/#each)
     * @name each
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} iterator
     * @param {Object} [context]
     */
  /**
     * See [_.map](http://underscorejs.org/#map)
     * @name map
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} iterator
     * @param {Object} [context]
     */
  /**
     * See [_.reduce](http://underscorejs.org/#reduce)
     * @name reduce
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} iterator
     * @param {Mixed} memo
     * @param {Object} [context]
     */

  /**
     * See [_.reduceRight](http://underscorejs.org/#reduceRight)
     * @name reduceRight
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} iterator
     * @param {Mixed} memo
     * @param {Object} [context]
     */
  /**
     * See [_.find](http://underscorejs.org/#find)
     * @name find
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} predicate
     * @param {Object} [context]
     */
  /**
     * See [_.filter](http://underscorejs.org/#filter)
     * @name filter
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} predicate
     * @param {Object} [context]
     */
  /**
     * See [_.reject](http://underscorejs.org/#reject)
     * @name reject
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} predicate
     * @param {Object} [context]
     */
  /**
     * See [_.every](http://underscorejs.org/#every)
     * @name every
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} [predicate]
     * @param {Object} [context]
     */
  /**
     * See [_.some](http://underscorejs.org/#some)
     * @name some
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Function} [predicate]
     * @param {Object} [context]
     */
  /**
     * See [_.contains](http://underscorejs.org/#contains)
     * @name contains
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Mixed} value
     */
  /**
     * See [_.toArray](http://underscorejs.org/#toArray)
     * @name toArray
     * @memberof src/framework/View
     * @method
     * @instance
     */
  /**
     * See [_.size](http://underscorejs.org/#size)
     * @name size
     * @memberof src/framework/View
     * @method
     * @instance
     */
  /**
     * See [_.first](http://underscorejs.org/#first)
     * @name first
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Number} [n]
     */
  /**
     * See [_.initial](http://underscorejs.org/#initial)
     * @name initial
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Number} [n]
     */
  /**
     * See [_.last](http://underscorejs.org/#last)
     * @name last
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Number} [n]
     */
  /**
     * See [_.rest](http://underscorejs.org/#rest)
     * @name rest
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Number} [index]
     */
  /**
     * See [_.without](http://underscorejs.org/#without)
     * @name without
     * @memberof src/framework/View
     * @method
     * @instance
     */
  /**
     * See [_.indexOf](http://underscorejs.org/#indexOf)
     * @name indexOf
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Mixed} value
     * @param {Boolean} [isSorted]
     */
  /**
     * See [_.shuffle](http://underscorejs.org/#shuffle)
     * @name shuffle
     * @memberof src/framework/View
     * @method
     * @instance
     */
  /**
     * See [_.shuffle](http://underscorejs.org/#lastIndexOf)
     * @name lastIndexOf
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Mixed} value
     * @param {Number} [fromIndex]
     */
  /**
     * See [_.isEmpty](http://underscorejs.org/#isEmpty)
     * @name isEmpty
     * @memberof src/framework/View
     * @method
     * @instance
     */
  /**
     * See [_.chain](http://underscorejs.org/#chain)
     * @name chain
     * @memberof src/framework/View
     * @method
     * @instance
     */
  /**
     * See [_.where](http://underscorejs.org/#where)
     * @name where
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Object} properties
     */
  /**
     * See [_.findWhere](http://underscorejs.org/#findWhere)
     * @name findWhere
     * @memberof src/framework/View
     * @method
     * @instance
     * @param {Object} properties
     */

  /* harmony default export */__webpack_exports__["a"] = View;

  /***/
},
/* 23 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__views_components_BaseButtonLink__ = __webpack_require__(43);
  /* eslint '@okta/okta-ui/no-deprecated-methods': [0, [{ name: 'BaseButtonLink.extend', use: 'Okta.createButton'}, ]] */

  /**
   * A factory method wrapper for {@link BaseButtonLink} creation
   * @class module:Okta.internal.util.ButtonFactory
   */

  function normalizeEvents(options) {
    var events = __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].extend(options.click ? { click: options.click } : {}, options.events || {});

    var target = {};

    __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].each(events, function (fn, eventName) {
      target[eventName] = function (e) {
        if (!options.href) {
          e.preventDefault();
          e.stopPropagation();
        }
        fn.apply(this, arguments);
      };
    });
    return target;
  }

  /* harmony default export */__webpack_exports__["default"] = {
    /**
     * Creates a {@link module:Okta.internal.views.components.BaseButtonLink|BaseButtonLink}.
     * @param  {Object} options Options hash
     * @param  {String} [options.title] The button text
     * @param  {String} [options.icon]
     * CSS class for the icon to display. See [Style guide](http://rain.okta1.com:1802/su/dev/style-guide#icons)
     * @param {String} [options.href] The button link
     * @param {Function} [options.click] On click callback
     * @param {Object} [options.events] a [Backbone events](http://backbonejs.org/#View-delegateEvents) hash
     * @returns {module:Okta.internal.views.components.BaseButtonLink} BaseButtonLink prototype ("class")
     */
    create: function create(options) {
      options = __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].clone(options);
      options.attrs = options.attributes;
      delete options.attributes;

      return __WEBPACK_IMPORTED_MODULE_1__views_components_BaseButtonLink__["a" /* default */].extend(__WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].extend(options, {
        events: normalizeEvents(options)
      }));
    }
  };

  /***/
},
/* 24 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);

  function changeEventString(doWhen) {
    return 'change:' + __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].keys(doWhen).join(' change:');
  }

  function calcDoWhen(value, key) {
    var modelValue = this.model.get(key);

    if (__WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].isFunction(value)) {
      return value.call(this, modelValue);
    } else {
      return value === modelValue;
    }
  }

  function _doWhen(view, doWhen, fn) {
    var toggle = __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].bind(fn, view, view, doWhen);

    view.render = __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].wrap(view.render, function (render) {
      var val = render.call(view);

      toggle({ animate: false });
      return val;
    });

    view.listenTo(view.model, changeEventString(doWhen), function () {
      toggle({ animate: true });
    });
  }

  /* harmony default export */__webpack_exports__["a"] = {
    applyDoWhen: function applyDoWhen(view, doWhen, fn) {
      if (!(view.model && __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].isObject(doWhen) && __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].size(doWhen) && __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].isFunction(fn))) {
        return;
      }
      _doWhen(view, doWhen, function (view, doWhen, options) {
        var result = __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].every(__WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].map(doWhen, calcDoWhen, view));

        fn.call(view, result, options);
      });
    }
  };

  /***/
},
/* 25 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__BaseView__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__helpers_FormUtil__ = __webpack_require__(9);

  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_1__BaseView__["default"].extend({
    className: 'o-form-button-bar',

    initialize: function initialize(options) {
      this.addButton({
        type: 'save',
        text: __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(options, 'save', this),
        id: __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(options, 'saveId', this),
        className: __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(options, 'saveClassName', this)
      });

      if (!options.noCancelButton) {
        this.addButton({ type: 'cancel', text: __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(options, 'cancel', this) });
      }

      if (options.hasPrevStep) {
        this.addButton({ type: 'previous' }, { prepend: true });
      }
    },

    /**
     * Adds a buttomn to the toolbar
     * @param {Object} params button parameters
     * @param {Object} options {@link Okta.View#add} options
     */
    addButton: function addButton(params, options) {
      return this.add(__WEBPACK_IMPORTED_MODULE_2__helpers_FormUtil__["default"].createButton(params), options);
    }
  });

  /***/
},
/* 26 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);

  var registry = {};

  function isBaseInput(input) {
    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(input)) {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(input.prototype.editMode) && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(input.prototype.readMode);
    } else {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isObject(input) && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(input.editMode) && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(input.readMode);
    }
  }

  /**
   * @class module:Okta.internal.views.forms.helpers.InputRegistry
   */
  /* harmony default export */__webpack_exports__["default"] = {
    isBaseInput: isBaseInput,

    /**
     * Register a form input
     * @param {String} type string identifier for the input
     * @param {BaseInput} input the input to register
     */
    register: function register(type, input) {
      registry[type] = input;
    },

    /**
     * Get a form input by type
     * @param {Object} options input definition
     * @param {String} options.type string identifier for the input
     * @return {BaseInput} a matching input
     */
    get: function get(options) {
      var input = registry[options.type];

      return input && (isBaseInput(input) ? input : input(options));
    },

    /**
     * Unregister an input type
     * @param {String} type
     */
    unregister: function unregister(type) {
      delete registry[type];
    }
  };

  /***/
},
/* 27 */
/***/function (module, exports) {

  module.exports = __webpack_require__(74);

  /***/
},
/* 28 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_Keys__ = __webpack_require__(8);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4_vendor_plugins_chosen_jquery__ = __webpack_require__(67);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4_vendor_plugins_chosen_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_vendor_plugins_chosen_jquery__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__BaseInput__ = __webpack_require__(10);

  var template = __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__["default"].tpl('<select id="{{inputId}}" name="{{name}}"></select>');
  var option = __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__["default"].tpl('<option value="{{key}}">{{value}}</option>');
  var CHOSEN_WINDOW_MARGIN = 20;

  // Chosen has known problems when it's at the bottom of a container that has
  // overflow:hidden set. Because it attaches to the parent container, its
  // dropdown will be cut off in the UI. Any modal with a chosen select element
  // at the bottom will manifest this behavior.
  //
  // The fix (aside from replacing Chosen) is to change Chosen's behavior -
  // use the existing styles, but attach it to 'body' and position it correctly
  // so that it is not affected by a parent overflow.
  //
  // More details can be found in OKTA-46489, OKTA-83570

  var CHOSEN_MAX_HEIGHT = 240;
  var CHOSEN_Z_INDEX = 50000;

  function defer(fn) {
    if (this.params.autoWidth) {
      return fn.call(this);
    } else {
      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].defer(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].bind(fn, this));
    }
  }

  function findSelectWidth(self) {
    self.$select.hide();
    var select = Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(self.$select[0]).hide();

    Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])('body').append(select);
    var width = self.params.width = select.width() * 1.2 + 'px';

    self.$el.append(select.show());
    return width;
  }

  function recalculateChosen($chosen, $results, $clone) {
    var offset = $clone.offset();

    $chosen.css({
      left: offset.left,
      top: offset.top
    });
    // Update the max-height to fit within the constraints of the window. This
    // is especially important for modals because page scrolling is disabled.
    var $win = Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(window);
    var rHeight = $results.outerHeight();
    var rBottom = rHeight + $results.offset().top - $win.scrollTop();
    var wHeight = $win.height() - CHOSEN_WINDOW_MARGIN;
    var maxHeight = Math.min(rHeight + wHeight - rBottom, CHOSEN_MAX_HEIGHT);

    $results.css('max-height', maxHeight);
  }

  function fixChosenModal($select) {
    var $chosen = $select.next('.chzn-container');
    var $clone = $chosen.clone();
    var $results = $chosen.find('.chzn-results');

    // Use a hidden clone to maintain layout and calculate offset. This is
    // necessary for more complex layouts (like adding a group rule) where
    // the chosen element is floated.
    $clone.css('visibility', 'hidden');
    $clone.removeAttr('id');
    $clone.find('li').removeAttr('id');

    // Save the original styles - we'll revert to them when the select closes
    var baseStyles = {
      left: $chosen.css('left'),
      top: $chosen.css('top'),
      position: $chosen.css('position'),
      float: $chosen.css('float'),
      'z-index': $chosen.css('z-index')
    };

    $results.hide();

    // Handler for any resize events that happen when the results list is open

    var resizeHandler = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].debounce(function () {
      recalculateChosen($chosen, $results, $clone);
    }, 10);

    // When the dropdown opens, attach it to body, with the correct absolute
    // position coordinates
    $select.off('.fixChosen'); // Remove events we could have added before
    $select.on('liszt:showing_dropdown.fixChosen', function () {
      $chosen.width($chosen.width());
      $select.after($clone);
      // .chzn-container can trigger the vertical scrollbar if it causes scrollHeight > window height after append to
      // the body. Force top -999999 to avoid the scrollbar so $chosen can find the right offset for relocation.
      $chosen.css({
        position: 'absolute',
        float: 'none',
        'z-index': CHOSEN_Z_INDEX,
        top: -999999
      });
      Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])('body').append($chosen);
      $results.show();
      recalculateChosen($chosen, $results, $clone);
      // Capture scroll events:
      // - for forms that use fixed positioning (like editing attributes in
      //   Profile Editor) - window scroll
      // - for forms that are too long for the modal - o-form-content scroll
      $select.parents().scroll(resizeHandler);
      Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(window).on('resize scroll', resizeHandler);
    });

    // When the dropdown closes or the element is removed, revert to the
    // original styles and reattach it to its original placement in the dom.
    $select.on('liszt:hiding_dropdown.fixChosen remove.fixChosen', function () {
      $select.parents().off('scroll', resizeHandler);
      Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(window).off('resize scroll', resizeHandler);
      $chosen.css(baseStyles);
      $results.hide();
      $results.css('max-height', CHOSEN_MAX_HEIGHT);
      $clone.remove();
      $select.after($chosen);
    });
  }

  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_5__BaseInput__["a" /* default */].extend({
    className: 'o-form-select',

    /**
     * @Override
     */
    events: {
      'change select': 'update',
      'keyup .chzn-search > :text': function keyupChznSearchText(e) {
        if (__WEBPACK_IMPORTED_MODULE_2__util_Keys__["default"].isEsc(e)) {
          this.$('.chzn-search > :text').val('');
          e.stopPropagation();
        }
      }
    },

    constructor: function constructor() {
      this.template = template;
      this.option = option;
      __WEBPACK_IMPORTED_MODULE_5__BaseInput__["a" /* default */].apply(this, arguments);
      this.params = this.options.params || {};
    },

    /**
     * @Override
     */
    editMode: function editMode() {
      /* eslint max-statements: [2, 13] */

      this.$el.html(template(this.options));
      this.$select = this.$('select');

      var options = this.getOptions();

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(options, function (value, key) {
        this.$select.append(option({ key: key, value: value }));
      }, this);

      // Fix a regression in jQuery 1.x on Firefox
      // jQuery.val(value) prepends an empty option to the dropdown
      // if value doesnt exist in the dropdown.
      // http://bugs.jquery.com/ticket/13514
      var value = this.getModelValue();

      if (value) {
        this.$select.val(value);
      } else {
        this.$('option:first-child').prop('selected', true);
      }
      this.$el.addClass('o-form-control');

      if (this.params.chosen !== false) {
        this.__applyChosen();
      }
      return this;
    },

    __applyChosen: function __applyChosen(update) {
      var width = this.options.wide ? '100%' : this.params.width || '62%';

      if (this.params.autoWidth) {
        width = findSelectWidth(this);
      }

      defer.call(this, function () {
        var searchThreshold = this.getParam('searchThreshold', 10);

        if (!__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this.options, 'autoRender') && update !== false) {
          this.update();
        }
        this.$select.chosen({
          width: width,
          disable_search_threshold: searchThreshold, //eslint-disable-line camelcase
          placeholder_text: this.options['placeholder'] //eslint-disable-line camelcase
        });
        fixChosenModal(this.$select);

        if (this.params.autoWidth) {
          // fix a chosen css bug
          this.$el.width(0);
        }

        this.model.trigger('form:resize');
      });
    },

    /**
     * @Override
     */
    val: function val() {
      return this.$select && this.$select.val();
    },

    /**
     * @Override
     */
    focus: function focus() {
      if (this.$select) {
        return this.$select.focus();
      }
    },

    /**
     * @Override
     */
    toStringValue: function toStringValue() {
      var selectedOption = this.getModelValue();
      var displayString = selectedOption;
      var options = this.getOptions();

      if (!__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isEmpty(options)) {
        displayString = options[selectedOption];
      }
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isUndefined(displayString)) {
        displayString = this.defaultValue();
      }
      return displayString || '';
    },

    /**
     * Convert options to an object
     * support input options that is a
     * 1. a static object such as {key1: val1, key2: val2...}
     * 2. a function to be called to return a static object
     * will return an object with key-value pairs or with empty content
     * @return {Object} The value
     */
    getOptions: function getOptions() {
      var options = this.options.options;

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(options)) {
        options = options.call(this);
      }

      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isObject(options) ? options : {};
    },

    remove: function remove() {
      if (this.$select) {
        this.$select.trigger('remove');
      }
      return __WEBPACK_IMPORTED_MODULE_5__BaseInput__["a" /* default */].prototype.remove.apply(this, arguments);
    }
  });

  /***/
},
/* 29 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_Time__ = __webpack_require__(30);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__BaseView__ = __webpack_require__(1);

  function getOption(callout, option) {
    return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(callout.options, option, callout) || __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(callout, option);
  }

  function getTopClass(callout) {
    var klass = 'infobox clearfix infobox-' + getOption(callout, 'type');

    switch (getOption(callout, 'size')) {
      case 'standard':
        klass += '';
        break;
      case 'slim':
        klass += ' infobox-slim';
        break;
      case 'compact':
        klass += ' infobox-compact';
        break;
      case 'large':
        klass += ' infobox-md';
        break;
    }
    if (getOption(callout, 'dismissible')) {
      klass += ' infobox-dismiss';
    }
    return klass;
  }

  var events = {
    'click .infobox-dismiss-link': function clickInfoboxDismissLink(e) {
      var _this2 = this;

      e.preventDefault();
      this.$el.fadeOut(__WEBPACK_IMPORTED_MODULE_1__util_Time__["a" /* default */].UNLOADING_FADE, function () {
        _this2.trigger('dismissed');
        _this2.remove();
      });
    }
  };
  var template = '\
    {{#if dismissible}}\
      <a data-se="dismiss-link" class="infobox-dismiss-link" title="Dismiss" href="#">\
        <span data-se="icon" class="dismiss-icon"></span>\
      </a>\
    {{/if}}\
    <span data-se="icon" class="icon {{icon}}"></span>\
    {{#if title}}<h3 data-se="header">{{title}}</h3>{{/if}}\
    {{#if subtitle}}<p data-se="sub-header">{{subtitle}}</p>{{/if}}\
    {{#if bullets}}\
      <ul data-se="list" class="bullets">\
      {{#each bullets}}<li data-se="list-item">{{this}}</li>{{/each}}\
      </ul>\
    {{/if}}\
  ';
  var CalloutCallout = __WEBPACK_IMPORTED_MODULE_2__BaseView__["default"].extend(
  /** @lends src/views/components/Callout.prototype */{
    attributes: {
      'data-se': 'callout'
    },

    /**
     * Custom HTML or view to inject to the callout
     * @type {String|Okta.View}
     */
    content: null,

    /**
     * Size of icon. options are standard, large, compact
     * @type {String}
     */
    size: 'standard',

    /**
     * Type of the callout. Valid values are: info, success, warning, error, tip
     * @type {String}
     */
    type: 'info',

    /**
     * Can the callout be dismissed
     * @type {Boolean}
     */
    dismissible: false,

    /**
     * Callout title
     * @type {String}
     */
    title: null,

    /**
     * Callout subtitle
     * @type {String}
     */
    subtitle: null,

    /**
     * Array of strings to render as bullet points
     * @type {Array}
     */
    bullets: null,

    /**
     * Fired after the callout is dismised - applies when
     * {@link module:Okta.internal.views.components.Callout|dismissible} is set to true
     * @event src/views/components/Callout#dismissed
     */

    constructor: function constructor() {
      this.events = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(this.events || {}, events);

      __WEBPACK_IMPORTED_MODULE_2__BaseView__["default"].apply(this, arguments);

      this.$el.addClass(getTopClass(this));

      this.template = template;

      var content = getOption(this, 'content');

      if (content) {
        this.add(content);
      }
    },

    getTemplateData: function getTemplateData() {
      var icon = getOption(this, 'type');

      var size = getOption(this, 'size');
      if (icon === 'tip') {
        // css is inconsistent
        icon = 'light-bulb';
      }
      switch (size) {
        case 'slim':
          icon = '';
          break;
        case 'large':
          icon = [icon, '-', '24'].join('');
          break;
        default:
          icon = [icon, '-', '16'].join('');
      }
      return {
        icon: icon,
        title: getOption(this, 'title'),
        subtitle: getOption(this, 'subtitle'),
        bullets: getOption(this, 'bullets'),
        dismissible: getOption(this, 'dismissible')
      };
    }
  });

  /**
   * @class src/views/components/Callout
   * @extends module:Okta.View
   */

  /**
   * @class module:Okta.internal.views.components.Callout
   */
  /* harmony default export */__webpack_exports__["default"] = {
    /**
     * Creates a {@link src/views/components/Callout|Callout}.
     * @static
     * @param {Object} options
     * @param {String|Function} [options.size] Size of icon. options are standard, large, compact, slim
     * @param {String|Okta.View} [options.content] Custom HTML or view to inject to the callout
     * @param {String|Function} [options.title] Callout title
     * @param {String|Function} [options.subtitle] Callout subtitle
     * @param {Array|Function} [options.bullets] Array of strings to render as bullet points
     * @param {Boolean|Function} [options.dismissible] Can the callout be dismissed
     * @param {String|Function} [options.type] Callout type. Valid values are: info, success, warning, error, tip
     *
     * @return {src/views/components/Callout}
     */
    create: function create(options) {
      return new CalloutCallout(options);
    }
  };

  /***/
},
/* 30 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony default export */
  __webpack_exports__["a"] = {
    DEBOUNCE_DELAY: 200,
    LOADING_FADE: 400,
    UNLOADING_FADE: 400,
    ROW_EXPANDER_TRANSITION: 150,
    HIDE_ADD_MAPPING_FORM: 300
  };

  /***/
},
/* 31 */
/***/function (module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /**
                                                                   * There are following local modifications:
                                                                   * - Author: Uzi Kilon ukilon@okta.com
                                                                   *   Bug: OKTA-20830 - solves the conflict when there are multiple labels
                                                                   */
  /**
   * --------------------------------------------------------------------
   * jQuery customInput plugin
   * Author: Maggie Costello Wachs maggie@filamentgroup.com, Scott Jehl, scott@filamentgroup.com
   * Copyright (c) 2009 Filament Group
   * licensed under MIT (filamentgroup.com/examples/mit-license.txt)
   * --------------------------------------------------------------------
  */
  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
    var $ = jQuery;
    jQuery.fn.customInput = function () {
      return $(this).each(function () {
        if ($(this).is('[type=checkbox],[type=radio]')) {
          var input = $(this);

          // get the associated label using the input's id
          var label = input.siblings('label[for="' + input.attr('id') + '"]:first');
          if (!label.length) {
            label = input.closest('label[for="' + input.attr('id') + '"]:first');
          }
          // wrap the input + label in a div
          input.add(label).wrapAll('<div class="custom-' + input.attr('type') + '"></div>');

          // necessary for browsers that don't support the :hover pseudo class on labels
          label.hover(function () {
            $(this).addClass('hover');
          }, function () {
            $(this).removeClass('hover');
          });

          //bind custom event, trigger it, bind click,focus,blur events
          input.bind('updateState', function () {
            input.is(':checked') ? label.addClass('checked') : label.removeClass('checked checkedHover checkedFocus');
          }).trigger('updateState').click(function () {
            $('input[name="' + $(this).attr('name') + '"]').trigger('updateState');
          }).focus(function () {
            label.addClass('focus');
            if (input.is(':checked')) {
              $(this).addClass('checkedFocus');
            }
          }).blur(function () {
            label.removeClass('focus checkedFocus');
          });
        }
      });
    };
  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  /***/
},
/* 32 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_qtip__ = __webpack_require__(27);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_qtip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_qtip__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_Keys__ = __webpack_require__(8);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4_vendor_plugins_jquery_placeholder__ = __webpack_require__(72);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4_vendor_plugins_jquery_placeholder___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_vendor_plugins_jquery_placeholder__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__BaseInput__ = __webpack_require__(10);

  var className = 'okta-form-input-field input-fix';

  function hasTitleAndText(options) {
    var title = options.title;
    var text = options.text;

    return title && text && title !== text;
  }

  // options may be a string or an object.
  function createQtipContent(options) {
    if (hasTitleAndText(options)) {
      return options;
    }
    return { text: options.text || options };
  }

  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_5__BaseInput__["a" /* default */].extend({
    template: __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__["default"].tpl('\
      {{#if params.innerTooltip}}\
        <span class="input-tooltip icon form-help-16"></span>\
      {{/if}}\
      {{#if params.icon}}\
        <span class="icon input-icon {{params.icon}}"></span>\
      {{/if}}\
      <input type="{{type}}" placeholder="{{placeholder}}" name="{{name}}" id="{{inputId}}"\
       value="{{value}}" aria-label="{{placeholder}}" autocomplete="off"/>\
      {{#if params.iconDivider}}\
        <span class="input-icon-divider"></span>\
      {{/if}}\
      '),
    /**
     * @Override
     */
    events: {
      'input input': 'update',
      'change input': 'update',
      'keydown input': 'update',
      'keyup input': function keyupInput(e) {
        if (__WEBPACK_IMPORTED_MODULE_2__util_Keys__["default"].isEnter(e)) {
          this.model.trigger('form:save');
        } else if (__WEBPACK_IMPORTED_MODULE_2__util_Keys__["default"].isEsc(e)) {
          this.model.trigger('form:cancel');
        }
      }
    },

    constructor: function constructor() {
      __WEBPACK_IMPORTED_MODULE_5__BaseInput__["a" /* default */].apply(this, arguments);
      this.$el.addClass('o-form-control');
    },

    /**
     * @Override
     */
    editMode: function editMode() {
      this.$el.addClass(className);
      __WEBPACK_IMPORTED_MODULE_5__BaseInput__["a" /* default */].prototype.editMode.apply(this, arguments);
      this.$('input').placeholder();
    },

    /**
     * @Override
     */
    readMode: function readMode() {
      __WEBPACK_IMPORTED_MODULE_5__BaseInput__["a" /* default */].prototype.readMode.apply(this, arguments);
      if (this.options.type === 'password') {
        this.$el.text('********');
      }
      this.$el.removeClass(className);
    },

    /**
     * @Override
     */
    val: function val() {
      var inputValue = this.$('input[type="' + this.options.type + '"]').val();
      //IE will only read clear text pw if type="password" is explicitly in selector

      if (this.options.type !== 'password') {
        inputValue = __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].trim(inputValue);
      }
      return inputValue;
    },

    /**
     * @Override
     */
    focus: function focus() {
      return this.$('input').focus();
    },

    postRender: function postRender() {
      var params = this.options.params;
      var content = void 0;

      if (params && params.innerTooltip) {
        content = createQtipContent(params.innerTooltip);
        this.$('.input-tooltip').qtip({
          content: content,
          style: { classes: 'okta-tooltip qtip-custom qtip-shadow' },
          position: {
            my: 'bottom left',
            // Note: qTip2 has a known issue calculating the tooltip offset when:
            // 1. A container element has both:
            //    a) position: relative/absolute
            //    b) overlay: value other than 'visible'
            // 2. The page is scrolled
            //
            // We set position:relative and overlay:auto on the body element,
            // where both are required for:
            // - Positioning the footer correctly
            // - Displaying long pages in embedded browsers
            //
            // The original design called for a fixed position relative to the
            // tooltip icon - this has been switched to "relative to mouse, and
            // update position when mouse moves" because of this constraint.
            target: 'mouse',
            adjust: {
              method: 'flip',
              mouse: true,
              y: -5,
              x: 5
            },
            viewport: Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])('body')
          }
        });
      }
    }
  });

  /***/
},
/* 33 */
/***/function (module, exports, __webpack_require__) {

  module.exports = __webpack_require__(34);

  /***/
},
/* 34 */
/***/function (module, exports, __webpack_require__) {

  "use strict";

  var _BaseCollection = __webpack_require__(14);

  var _BaseCollection2 = _interopRequireDefault(_BaseCollection);

  var _BaseModel = __webpack_require__(15);

  var _BaseModel2 = _interopRequireDefault(_BaseModel);

  var _BaseSchema = __webpack_require__(38);

  var _BaseSchema2 = _interopRequireDefault(_BaseSchema);

  var _Model = __webpack_require__(11);

  var _Model2 = _interopRequireDefault(_Model);

  var _SchemaProperty = __webpack_require__(17);

  var _SchemaProperty2 = _interopRequireDefault(_SchemaProperty);

  var _BaseController = __webpack_require__(40);

  var _BaseController2 = _interopRequireDefault(_BaseController);

  var _BaseRouter = __webpack_require__(19);

  var _BaseRouter2 = _interopRequireDefault(_BaseRouter);

  var _ButtonFactory = __webpack_require__(23);

  var _ButtonFactory2 = _interopRequireDefault(_ButtonFactory);

  var _Class = __webpack_require__(44);

  var _Class2 = _interopRequireDefault(_Class);

  var _Cookie = __webpack_require__(45);

  var _Cookie2 = _interopRequireDefault(_Cookie);

  var _Keys = __webpack_require__(8);

  var _Keys2 = _interopRequireDefault(_Keys);

  var _Logger = __webpack_require__(7);

  var _Logger2 = _interopRequireDefault(_Logger);

  var _StringUtil = __webpack_require__(3);

  var _StringUtil2 = _interopRequireDefault(_StringUtil);

  var _TemplateUtil = __webpack_require__(4);

  var _TemplateUtil2 = _interopRequireDefault(_TemplateUtil);

  var _Util = __webpack_require__(16);

  var _Util2 = _interopRequireDefault(_Util);

  var _handlebarsWrapper = __webpack_require__(47);

  var _handlebarsWrapper2 = _interopRequireDefault(_handlebarsWrapper);

  var _jqueryWrapper = __webpack_require__(2);

  var _jqueryWrapper2 = _interopRequireDefault(_jqueryWrapper);

  var _underscoreWrapper = __webpack_require__(0);

  var _underscoreWrapper2 = _interopRequireDefault(_underscoreWrapper);

  var _Backbone = __webpack_require__(54);

  var _Backbone2 = _interopRequireDefault(_Backbone);

  var _BaseView = __webpack_require__(1);

  var _BaseView2 = _interopRequireDefault(_BaseView);

  var _BaseDropDown = __webpack_require__(56);

  var _BaseDropDown2 = _interopRequireDefault(_BaseDropDown);

  var _BaseForm = __webpack_require__(57);

  var _BaseForm2 = _interopRequireDefault(_BaseForm);

  var _Toolbar = __webpack_require__(25);

  var _Toolbar2 = _interopRequireDefault(_Toolbar);

  var _FormUtil = __webpack_require__(9);

  var _FormUtil2 = _interopRequireDefault(_FormUtil);

  var _InputRegistry = __webpack_require__(26);

  var _InputRegistry2 = _interopRequireDefault(_InputRegistry);

  var _SchemaFormFactory = __webpack_require__(65);

  var _SchemaFormFactory2 = _interopRequireDefault(_SchemaFormFactory);

  var _CheckBox = __webpack_require__(70);

  var _CheckBox2 = _interopRequireDefault(_CheckBox);

  var _PasswordBox = __webpack_require__(71);

  var _PasswordBox2 = _interopRequireDefault(_PasswordBox);

  var _Radio = __webpack_require__(73);

  var _Radio2 = _interopRequireDefault(_Radio);

  var _Select = __webpack_require__(28);

  var _Select2 = _interopRequireDefault(_Select);

  var _TextBox = __webpack_require__(32);

  var _TextBox2 = _interopRequireDefault(_TextBox);

  var _Callout = __webpack_require__(29);

  var _Callout2 = _interopRequireDefault(_Callout);

  var _backbone = __webpack_require__(6);

  var _backbone2 = _interopRequireDefault(_backbone);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var Okta = {
    Backbone: _backbone2.default,

    $: _jqueryWrapper2.default,

    _: _underscoreWrapper2.default,

    Handlebars: _handlebarsWrapper2.default,

    loc: _StringUtil2.default.localize,

    createButton: _ButtonFactory2.default.create,

    createCallout: _Callout2.default.create,

    registerInput: _InputRegistry2.default.register,

    tpl: _TemplateUtil2.default.tpl,

    Model: _Model2.default,

    BaseModel: _BaseModel2.default,

    Collection: _BaseCollection2.default,

    View: _BaseView2.default,

    ListView: _Backbone2.default,

    Router: _BaseRouter2.default,

    Controller: _BaseController2.default,

    Form: _BaseForm2.default,

    internal: {
      util: {
        Util: _Util2.default,
        Cookie: _Cookie2.default,
        Logger: _Logger2.default,
        Class: _Class2.default,
        Keys: _Keys2.default
      },

      views: {
        components: {
          BaseDropDown: _BaseDropDown2.default
        },

        forms: {
          helpers: {
            FormUtil: _FormUtil2.default,
            SchemaFormFactory: _SchemaFormFactory2.default
          },

          components: {
            Toolbar: _Toolbar2.default
          },

          inputs: {
            TextBox: _TextBox2.default,
            PasswordBox: _PasswordBox2.default,
            CheckBox: _CheckBox2.default,
            Radio: _Radio2.default,
            Select: _Select2.default
          }
        }
      },

      models: {
        BaseSchema: _BaseSchema2.default,
        SchemaProperty: _SchemaProperty2.default
      }
    }
  };

  Okta.registerInput('text', _TextBox2.default);
  Okta.registerInput('password', _PasswordBox2.default);
  Okta.registerInput('checkbox', _CheckBox2.default);
  Okta.registerInput('radio', _Radio2.default);
  Okta.registerInput('select', _Select2.default);

  module.exports = Okta;

  /***/
},
/* 35 */
/***/function (module, exports) {

  module.exports = __webpack_require__(61);

  /***/
},
/* 36 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_backbone__ = __webpack_require__(6);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone__);

  var STATE = '__STATE__',
      FETCH_DATA = 'FETCH_DATA',
      PAGINATION_DATA = 'PAGINATION_DATA',
      DEFAULT_PARAMS = 'DEFAULT_PARAMS',
      LINK_BY_HEADER = 'LINK_BY_HEADER',
      XHR = 'XHR';

  /*
   * Sets the next page URL on the collection from link headers
   * See: http://www.rfc-editor.org/rfc/rfc5988.txt
   *
   * This method is looking for a link header with `rel="next"`
   * An set's it as the next page's URL.
   *
   * If it doesn't find a next page, and current page is set by a link header
   * it assumes we are at the last page and deletes the current `next`
   */
  function setLinkHeadersPagination(collection, xhr) {
    try {
      var links = parseLinkHeader(xhr.getResponseHeader('link'));
      collection[STATE].set(LINK_BY_HEADER, true);
      collection.setPagination(links['next'].href);
    } catch (e) {
      if (collection[STATE].get(LINK_BY_HEADER)) {
        collection.setPagination(null);
      }
    }
  }

  function parseQuery(url) {
    var params = {},
        rawQueryStr = url && url.split('?')[1],
        queryString = rawQueryStr && decodeURIComponent(rawQueryStr.split('#')[0]).replace(/\+/g, ' '),
        props = queryString ? queryString.split('&') : [];
    for (var i = 0; i < props.length; i++) {
      var parts = props[i].split('=');
      params[parts.shift()] = parts.join('=');
    }
    return params;
  }

  // ################################################
  // # Source: https://gist.github.com/deiu/9335803
  // ################################################

  // unquote string (utility)
  function unquote(value) {
    if (value.charAt(0) == '"' && value.charAt(value.length - 1) == '"') {
      return value.substring(1, value.length - 1);
    }
    return value;
  }
  /*
  parse a Link header
  Link:<https://example.org/.meta>; rel=meta
  var r = parseLinkHeader(xhr.getResponseHeader('Link');
  r['meta']['href'] outputs https://example.org/.meta
  */
  function parseLinkHeader(header) {
    /* eslint max-statements: 0 */
    var linkexp = /<[^>]*>\s*(\s*;\s*[^()<>@,;:"/[\]?={} \t]+=(([^()<>@,;:"/[\]?={} \t]+)|("[^"]*")))*(,|$)/g,
        paramexp = /[^()<>@,;:"/[\]?={} \t]+=(([^()<>@,;:"/[\]?={} \t]+)|("[^"]*"))/g;

    var matches = header.match(linkexp);
    var rels = {};
    for (var i = 0; i < matches.length; i++) {
      var split = matches[i].split('>');
      var href = split[0].substring(1);
      var link = {};
      link.href = href;
      var s = split[1].match(paramexp);
      for (var j = 0; j < s.length; j++) {
        var paramsplit = s[j].split('=');
        var name = paramsplit[0];
        link[name] = unquote(paramsplit[1]);
      }

      if (link.rel !== undefined) {
        rels[link.rel] = link;
      }
    }

    return rels;
  }

  // ################################################
  // # /Source
  // ################################################
  //

  /**
   *
   * Archer.Collection is a standard [Backbone.Collection](http://backbonejs.org/#Collection) with pre-set `data`
   * parameters and built in pagination - works with [http link headers](https://tools.ietf.org/html/rfc5988)
   * out of the box:
   *
   * @class src/framework/Collection
   * @extends external:Backbone.Collection
   * @example
   * var Users = Archer.Collection.extend({
   *   url: '/api/v1/users'
   *   params: {expand: true}
   * });
   * var users = new Users(null, {params: {type: 'new'}}),
   *     $button = this.$('a.fetch-more');
   *
   * $button.click(function () {
   *   users.fetchMore();
   * });
   *
   * this.listenTo(users, 'sync', function () {
   *   $button.toggle(users.hasMore());
   * });
   *
   * collection.fetch(); //=> '/api/v1/users?expand=true&type=new'
   */

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Collection.extend( /** @lends src/framework/Collection.prototype */{

    /**
     * Default fetch parameters
     * @type {Object}
     */
    params: {},

    constructor: function constructor(models, options) {
      var state = this[STATE] = new __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Model();
      state.set(DEFAULT_PARAMS, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(options && options.params || {}, this.params || {}));
      __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Collection.apply(this, arguments);
    },

    /**
     * See [Backbone Collection.sync](http://backbonejs.org/#Collection-sync).
     */
    sync: function sync(method, collection, options) {
      var self = this,
          success = options.success;
      options.success = function (resp, status, xhr) {
        // its important to set the pagination data *before* we call the success callback
        // because we want the pagination data to be ready when the collection triggers the `sync` event
        setLinkHeadersPagination(self, xhr);
        success.apply(null, arguments);
      };
      return __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Collection.prototype.sync.call(this, method, collection, options);
    },

    /**
     * See [Backbone Collection.fetch](http://backbonejs.org/#Collection-fetch).
     */
    fetch: function fetch(options) {
      options || (options = {});
      var state = this[STATE],
          xhr = state.get(XHR);

      options.data = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, state.get(DEFAULT_PARAMS), options.data || {});
      options.fromFetch = true;

      state.set(FETCH_DATA, options.data);
      if (xhr && xhr.abort && options.abort !== false) {
        xhr.abort();
      }
      xhr = __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Collection.prototype.fetch.call(this, options);
      state.set(XHR, xhr);
      return xhr;
    },

    /**
     * Set pagination data to get to the next page
     * @param {Mixed} params
     * @param {Object} [options]
     * @param {Boolean} [options.fromFetch] should we include data from the previous fetch call in this object
     * @example
     * collection.setPagination({q: 'foo', page: '2'}); //=> {q: 'foo', page: '2'}
     *
     * collection.setPagination('/path/to/resource?q=baz&page=4'); //=> {q: 'baz', page: '4'}
     *
     * collection.setPagination('/path/to/resource'); //=> {}
     *
     * collection.fetch({data: {q: 'foo'}});
     * collection.setPagination({page: 2}, {fromFetch: true}); //=> {q: 'foo', page: 2}
     *
     * any "falsy" value resets pagination
     * collection.setPagination(); //=> {}
     * collection.setPagination(null); //=> {}
     * collection.setPagination(false); //=> {}
     * collection.setPagination(''); //=> {}
     * collection.setPagination(0); //=> {}
     * @protected
     */
    setPagination: function setPagination(params, options) {
      /* eslint complexity: [2, 8] */
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isString(params) && params) {
        params = parseQuery(params);
      }
      if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isObject(params) || __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(params) || !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(params)) {
        params = null;
      } else if (options && options.fromFetch) {
        params = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, this.getFetchData(), params);
      }
      this[STATE].set(PAGINATION_DATA, params);
    },

    /**
     * Returns the `data` parameters applied in th most recent `fetch` call
     * It will include parameters set by {@link #params} and optios.params passed to the constructor
     * @return {Object}
     * @protected
     */
    getFetchData: function getFetchData() {
      return this[STATE].get(FETCH_DATA) || {};
    },

    /**
     * Data object for constructing a request to fetch the next page
     * @return {Object}
     * @protected
     */
    getPaginationData: function getPaginationData() {
      return this[STATE].get(PAGINATION_DATA) || {};
    },

    /**
     * Does this collection have more data on the server (e.g is there a next "page")
     * @return {Boolean}
     */
    hasMore: function hasMore() {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(this.getPaginationData()) > 0;
    },

    /**
     * Get the next page from the server
     * @return {Object} xhr returned by {@link #fetch}
     */
    fetchMore: function fetchMore() {
      if (!this.hasMore()) {
        throw new Error('Invalid Request');
      }
      return this.fetch({ data: this.getPaginationData(), add: true, remove: false, update: true });
    },

    /**
     * See [Backbone Collection.reset](http://backbonejs.org/#Collection-reset).
     */
    reset: function reset(models, options) {
      options || (options = {});
      // only reset the pagination when reset is being called explicitly.
      // this is to avoid link headers pagination being overriden and reset when
      // fetching the collection using `collection.fetch({reset: true})`
      if (!options.fromFetch) {
        this.setPagination(null);
      }
      return __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Collection.prototype.reset.apply(this, arguments);
    },

    // we want "where" to be able to search through derived properties as well
    where: function where(attrs, first) {
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isEmpty(attrs)) {
        return first ? void 0 : [];
      }
      return this[first ? 'find' : 'filter'](function (model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) {
            return false;
          }
        }
        return true;
      });
    },

    /**
     * See [Backbone Collection.create](http://backbonejs.org/#Collection-create).
     */
    create: function create(model, options) {
      options || (options = {});
      if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(model, 'urlRoot')) {
        options.url = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'url');
      }
      return __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Collection.prototype.create.call(this, model, options);
    }

  });

  /***/
},
/* 37 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_backbone__ = __webpack_require__(6);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_Logger__ = __webpack_require__(7);

  /**
     * Archer.Model is a standard [Backbone.Model](http://backbonejs.org/#Model) with a few additions:
     *
     * - {@link src/framework/Model#derived Derived properties}
     * - {@link src/framework/Model#props Built in schema validation}
     * - {@link src/framework/Model#local Private properties (with schema validation)}
     * - {@link src/framework/Model#flat Flattening of nested objects}
     *
     * Both derived and private properties are filtered out when sending the data to the server.
     *
     * See [Backbone.Model](http://backbonejs.org/#Model-constructor).
     *
     * @class src/framework/Model
     * @extends external:Backbone.Model
     * @param {Object} [attributes] - Initial model attributes (data)
     * @param {Object} [options] - Options hash
     * @example
     * var Person = Archer.Model.extend({
     *   props: {
     *     'fname': 'string',
     *     'lname': 'string'
     *   },
     *   local: {
     *     isLoggedIn: 'boolean'
     *   },
     *   derived: {
     *     name: {
     *       deps: ['fname', 'lname'],
     *       fn: function (fname, lname) {
     *         return fname + ' ' + lname;
     *       }
     *     }
     *   }
     * });
     * var model = new Person({fname: 'Joe', lname: 'Doe'});
     * model.get('name'); //=> "Joe Doe"
     * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
     *
     * model.set('isLoggedIn', true);
     * model.get('isLoggedIn'); //=> true
     * model.toJSON(); //=> {fname: 'Joe', lname: 'Doe'}
     */
  var Model;

  function flatten(value, objectTypeFields, key, target) {
    var filter = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains(objectTypeFields, key);
    target || (target = {});
    if (!filter && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isObject(value) && !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(value) && !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(value)) {
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(value, function (val, i) {
        flatten(val, objectTypeFields, key ? key + '.' + i : i, target);
      });
    }
    // Case where target is an empty object. Guard against returning {undefined: undefined}.
    else if (key !== undefined) {
        target[key] = value;
      }
    return target;
  }

  function unflatten(data) {
    __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(data, function (value, key, data) {
      if (key.indexOf('.') == -1) {
        return;
      }
      var part,
          ref = data,
          parts = key.split('.');
      while ((part = parts.shift()) !== undefined) {
        if (!ref[part]) {
          ref[part] = parts.length ? {} : value;
        }
        ref = ref[part];
      }
      delete data[key];
    });
    return data;
  }

  function createMessage(field, msg) {
    var obj = {};
    obj[field.name] = msg;
    return obj;
  }

  function normalizeSchemaDef(field, name) {
    var target;
    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isString(field)) {
      target = {
        type: field
      };
    } else if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(field)) {
      target = {
        type: field[0],
        required: field[1],
        value: field[2]
      };
    } else {
      target = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(field);
    }
    __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(target, { required: false, name: name });
    return target;
  }

  function capitalize(string) {
    return string.toLowerCase().replace(/\b[a-z]/g, function (letter) {
      return letter.toUpperCase();
    });
  }

  function _validateRegex(value, pattern, error) {
    if (!pattern.test(value)) {
      return error;
    }
  }

  var StringFormatValidators = {
    /*eslint max-len: 0 */
    email: function email(value) {
      // Taken from  http://emailregex.com/ on 2017-03-06.
      var pattern = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_EMAIL);
    },
    uri: function uri(value) {
      // source: https://mathiasbynens.be/demo/url-regex
      var pattern = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;
      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_URI);
    },
    ipv4: function ipv4(value) {
      // source: https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
      var pattern = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_IPV4);
    },
    hostname: function hostname(value) {
      // source: http://www.regextester.com/23
      var pattern = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/;
      return _validateRegex(value, pattern, Model.ERROR_INVALID_FORMAT_HOSTNAME);
    }
  };

  function validateStringFormat(field, value) {
    var validator = StringFormatValidators[field.format];
    if (field.format && !validator) {
      throw new TypeError(field.format + ' is not a supported string format');
    }
    return validator && validator(value);
  }

  function validateString(field, value) {
    var createMessageWith = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].partial(createMessage, field),
        invalidFormat = validateStringFormat(field, value);
    if (invalidFormat) {
      return createMessageWith(invalidFormat);
    }
    if (value && field.minLength && value.length < field.minLength) {
      return createMessageWith(Model.ERROR_STRING_STRING_MIN_LENGTH, value.length);
    }
    if (value && field.maxLength && value.length > field.maxLength) {
      return createMessageWith(Model.ERROR_STRING_STRING_MAX_LENGTH, value.length);
    }
  }

  function _validateField(field, value) {
    /* eslint complexity: [2, 25], max-statements: [2, 27] */
    var createMessageWith = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].partial(createMessage, field),
        isDefined = !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isUndefined(value) && !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNull(value),
        checkType,
        errorMessage;

    // If using an array validator, perform the validation
    if (Array.isArray(field.validate)) {
      var output = [];
      var foundError = false;
      var _result = void 0;
      field.validate.forEach(function (item) {
        if (!value) {
          _result = false;
        } else {
          switch (item.type.toLowerCase()) {
            case 'regex':
              _result = new RegExp(item.value.pattern, item.value.flags || '').test(value);
              break;
            default:
              _result = false;
          }
        }
        // Append the result.
        foundError = foundError || !_result;
        output.push({
          message: item.hasOwnProperty('message') ? item.message : '',
          passed: _result
        });
      });
      if (foundError) {
        return createMessageWith(output);
      }
      return;
    }

    // check required fields
    if (field.required && (!isDefined || __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNull(value) || value === '')) {
      return createMessageWith(Model.ERROR_BLANK);
    }
    // check type
    checkType = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"]['is' + capitalize(field.type)];
    if (isDefined && field.type != 'any' && (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(checkType) || !checkType(value))) {
      return createMessageWith(Model.ERROR_WRONG_TYPE);
    }
    // validate string format
    if (value && field.type == 'string') {
      var error = validateString(field, value);
      if (error) {
        return error;
      }
    }
    // check pre set values (enum)
    if (isDefined && field.values && !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains(field.values, value)) {
      return createMessageWith(Model.ERROR_NOT_ALLOWED);
    }
    // check validate method
    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(field.validate)) {
      var result = field.validate(value);
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isString(result) && result) {
        return createMessageWith(result);
      } else if (result === false) {
        return createMessageWith(Model.ERROR_INVALID);
      }
    }
    // check array items
    if (isDefined && field.type == 'array' && (errorMessage = validateArrayField(field, value))) {
      return createMessageWith(errorMessage);
    }
  }

  function validateArrayField(field, arr) {
    if (field.minItems && arr.length < field.minItems) {
      return 'model.validation.field.array.minItems';
    } else if (field.maxItems && arr.length > field.maxItems) {
      return 'model.validation.field.array.maxItems';
    } else if (field.uniqueItems && arr.length > __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].uniq(arr).length) {
      return Model.ERROR_IARRAY_UNIQUE;
    } else if (field.items) {
      /* eslint max-depth: [2, 3] */
      var arrayField = normalizeSchemaDef(field.items, 'placeholder');
      for (var i = 0; i < arr.length; i++) {
        var value = arr[i];
        var error = _validateField(arrayField, value);
        if (error) {
          return error['placeholder'];
        }
      }
    }
  }

  Model = __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Model.extend( /** @lends src/framework/Model.prototype */{

    /**
       * Pass props as an object to extend, describing the observable properties of your model. The props
       * properties should not be set on an instance, as this won't define new properties, they should only be passed to
       * extend.
       * Properties can be defined in three different ways:
       *
       * - As a string with the expected dataType. One of string, number, boolean, array, object, date, or any.
       * Eg: `name: 'string'`.
       * - An array of `[dataType, required, default]`
       * - An object `{type: 'string', format: '', required: true, value: '', values: [], validate: function() {}`
       *   - `value` will be the value that the property will be set to if it is undefined, either by not being set during
       *   initialization, or by being explicitly set to undefined.
       *   - `format` is a json-schame derived string format. Supported formats are: `email`, `uri`, `hostname` and `ipv4`.
       *   - If `required` is true, one of two things will happen. If a default is set for the property, the property will
       *   start with that value. If a default is not set for the property, validation will fail
       *   - If `values` array is passed, then you'll be able to change a property to one of those values only.
       *   - If `validate` is defined, it should return false or a custom message string when the validation fails.
       *   - If the type is defined as `array`, the array elements could be defined by `minItems` (Number),
       *   `uniqueItems` (Boolean) and `items` (a field definition such as this one that will validate each array member)
       *   To the `validate` method
       *   - Trying to set a property to an invalid type will raise an exception.
       *
       * @type {Mixed}
       * @example
       * var Person = Model.extend({
       *   props: {
       *     name: 'string',
       *     age: 'number',
       *     paying: ['boolean', true, false], //required attribute, defaulted to false
       *     type: {
       *       type: 'string',
       *       values: ['regular-hero', 'super-hero', 'mega-hero']
       *     },
       *     likes: {
       *       type: 'string',
       *       validate: function (value) {
       *         return /^[\w]+ing$/.test(value)
       *       }
       *     }
       *   }
       * });
       */
    props: {},

    /**
       * Derived properties (also known as computed properties) are properties of the model that depend on the
       * other (props, local or even derived properties to determine their value. Best demonstrated with an example:
       *
       * Each derived property, is defined as an object with the current properties:
       *
       * - `deps` {Array} - An array of property names which the derived property depends on.
       * - `fn` {Function} - A function which returns the value of the computed property. It is called in the context of
       * the current object, so that this is set correctly.
       * - `cache` {Boolean} -  - Whether to cache the property. Uncached properties are computed every time they are
       * accessed. Useful if it depends on the current time for example. Defaults to `true`.
       *
       * Derived properties are retrieved and fire change events just like any other property. They cannot be set
       * directly.
       * @type {Object}
       * @example
       * var Person = Model.extend({
       *   props: {
       *     firstName: 'string',
       *     lastName: 'string'
       *   },
       *   derived: {
       *     fullName: {
       *       deps: ['firstName', 'lastName'],
       *       fn: function (firstName, lastName) {
       *         return firstName + ' ' + lastName;
       *       }
       *     }
       *   }
       * });
       *
       * var person = new Person({ firstName: 'Phil', lastName: 'Roberts' })
       * console.log(person.get('fullName')) //=> "Phil Roberts"
       *
       * person.set('firstName', 'Bob');
       * console.log(person.get('fullName')) //=> "Bob Roberts"
       */
    derived: {},

    /**
       * local properties are defined and work in exactly the same way as {@link src/framework/Model#props|props}, but generally only exist for
       * the lifetime of the page.
       * They would not typically be persisted to the server, and are not returned by calls to {@link src/framework/Model#toJSON|toJSON}.
       *
       * @type {Object}
       * @example
       * var Person = Model.extend({
       *   props: {
       *     name: 'string',
       *   },
       *   local: {
       *     isLoggedIn: 'boolean'
       *   }
       * );
       */
    local: {},

    /**
       * Flatten the payload into dot notation string keys:
       *
       * @type {Boolean}
       * @example
       * var Person = Model.extend({
       *   props: {
       *     'profile.fname': 'string',
       *     'profile.lname': 'string',
       *     'profile.languages': 'object'
       *   },
       *   flat: true
       * });
       * var person = new Person({'profile': {
       *                            'fname': 'John',
       *                            'lname': 'Doe',
       *                            'languages': {name: "English", value: "EN"}
       *                         }}, {parse: true});
       * person.get('profile'); //=> undefined
       * person.get('profile.fname'); //=> 'John'
       * person.get('profile.lname'); //=> 'Doe'
       * person.get('profile.languages'); //=> {name: "English", value: "EN"}
       * person.get('profile.languages.name'); //=> undefined
       * person.toJSON(); //=> {'profile': {'fname': 'John'} }
       */
    flat: true,

    /**
       * @deprecated
       * @alias Backbone.Model#defaults
       */
    defaults: {},

    constructor: function constructor(options) {
      this.options = options || {};

      var schema = this['__schema__'] = {},
          objectTypeFields = [];

      schema.computedProperties = {};

      schema.props = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'props') || {});
      schema.derived = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'derived') || {});
      schema.local = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'local') || {});

      var defaults = {};
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, schema.props, schema.local), function (options, name) {
        var schemaDef = normalizeSchemaDef(options, name);
        if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isUndefined(schemaDef.value)) {
          defaults[name] = schemaDef.value;
        }
        if (schemaDef.type === 'object') {
          objectTypeFields.push(name);
        }
      }, this);
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(defaults)) {
        var localDefaults = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'defaults');
        this.defaults = function () {
          return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults({}, defaults, localDefaults);
        };
      }

      // override `validate`
      this.validate = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].wrap(this.validate, function (validate) {
        var args = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].rest(arguments),
            res = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend(this._validateSchema.apply(this, args), validate.apply(this, args));
        return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(res) && res || undefined;
      });

      // override `parse`
      this.parse = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].wrap(this.parse, function (parse) {
        var target = parse.apply(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].rest(arguments));
        if (this.flat) {
          target = flatten(target, objectTypeFields);
        }
        return target;
      });

      __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Model.apply(this, arguments);

      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(schema.derived, function (options, name) {
        schema.computedProperties[name] = this.__getDerivedValue(name); // set initial value;
        var deps = options.deps || [];
        if (deps.length) {
          this.on('cache:clear change:' + deps.join(' change:'), function () {
            var value = this.__getDerivedValue(name);
            if (value !== schema.computedProperties[name]) {
              schema.computedProperties[name] = value;
              this.trigger('change:' + name, this, value);
            }
          }, this);
        }
      }, this);

      this.on('sync', function () {
        this.__syncedData = this.toJSON();
      }, this);
    },

    validate: function validate() {},

    /**
       * Check if the schema settings allow this field to exist in the model
       * @param  {String} key
       * @return {Boolean}
       */
    allows: function allows(key) {
      var schema = this['__schema__'],
          all = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, schema.props, schema.local);
      if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].has(all, key)) {
        __WEBPACK_IMPORTED_MODULE_2__util_Logger__["default"].warn('Field not defined in schema', key);
      }
      return true;
    },

    /**
       * Returns the schema for the specific property
       *
       * @param propName - The name of the property
       * @returns {*} | null
       */
    getPropertySchema: function getPropertySchema(propName) {
      var schema = this['__schema__'];
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].reduce([schema.props, schema.local], function (result, options) {
        return result || normalizeSchemaDef(options[propName], propName);
      }, null);
    },

    set: function set(key, val) {
      var attrs;
      if ((typeof key === 'undefined' ? 'undefined' : (0, _typeof3.default)(key)) === 'object') {
        attrs = key;
      } else {
        (attrs = {})[key] = val;
      }

      // Don't override a computed properties
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(attrs, function (value, key) {
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].has(this['__schema__'].derived, key)) {
          throw 'overriding derived properties is not supported: ' + key;
        }
      }, this);

      // Schema validation
      var errorFields = [];
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(attrs, function (value, key) {
        this.allows(key) || errorFields.push(key);
      }, this);
      if (errorFields.length) {
        throw 'field not allowed: ' + errorFields.join(', ');
      }

      return __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Model.prototype.set.apply(this, arguments);
    },

    get: function get(attr) {
      var schema = this['__schema__'];
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].has(schema.derived, attr)) {
        if (schema.derived[attr].cache !== false) {
          return schema.computedProperties[attr];
        } else {
          return this.__getDerivedValue(attr);
        }
      }
      return __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Model.prototype.get.apply(this, arguments);
    },

    /**
       * Return a shallow copy of the model's attributes for JSON stringification.
       * This can be used for persistence, serialization, or for augmentation before being sent to the server.
       * The name of this method is a bit confusing, as it doesn't actually return a JSON string —
       * but I'm afraid that it's the way that the JavaScript API for JSON.stringify works.
       *
       * See [Backbone.Model.toJSON](http://backbonejs.org/#Model-toJSON)
       *
       * @param  {Object} options
       * @return {Object}
       * @example
       * var artist = new Model({
       *   firstName: 'Wassily',
       *   lastName: 'Kandinsky'
       * });
       *
       * artist.set({birthday: 'December 16, 1866'});
       * JSON.stringify(artist); //=> {'firstName':'Wassily','lastName':'Kandinsky','birthday':'December 16, 1866'}
       */
    toJSON: function toJSON(options) {
      options || (options = {});
      var res = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(__WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Model.prototype.toJSON.apply(this, arguments)),
          schema = this['__schema__'];

      // cleanup local properties
      if (!options.verbose) {
        res = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(res, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].keys(schema.local));
      } else {
        // add derived properties
        __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(schema.derived, function (options, name) {
          res[name] = this.get(name);
        }, this);
      }

      if (this.flat) {
        res = unflatten(res);
      }

      return res;
    },

    /**
       * Removes all attributes from the model, including the id attribute.
       * Fires a `"change"` event unless `silent` is passed as an option.
       * Sets the default values to the model
       * @param {Object} [options]
       */
    reset: function reset(options) {
      this.clear(options);
      this.set(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'defaults'), options);
    },

    /**
       * Is the data on the model has local modifications since the last sync event?
       * @return {Boolean} is the model in sync with the server
       */
    isSynced: function isSynced() {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isEqual(this.__syncedData, this.toJSON());
    },

    /**
       * validate a specific field in the model.
       * @param  {String} key
       * @return {Object} returns `{fieldName: errorMessage}` if invalid, otherwise undefined.
       * @readonly
       */
    validateField: function validateField(key) {
      var schema = key && this.getPropertySchema(key);
      return schema && _validateField(schema, this.get(key));
    },

    /**
       * Runs local schema validation. Invoked internally by {@link src/framework/Model#validate|validate}.
       * @return {Object}
       * @protected
       */
    _validateSchema: function _validateSchema() {
      var schema = this['__schema__'];
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].reduce(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, schema.props, schema.local), function (memo, options, name) {
        return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend(memo, this.validateField(name) || {});
      }, {}, this);
    },

    __getDerivedValue: function __getDerivedValue(name) {
      var options = this['__schema__'].derived[name];
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isString(options)) {
        var key = options;
        options = {
          deps: [key],
          fn: function fn() {
            return this.get(key);
          }
        };
      }
      var deps = options.deps || [];
      return options.fn.apply(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(deps, this.get, this));
    }

  }, {
    ERROR_BLANK: 'model.validation.field.blank',
    ERROR_WRONG_TYPE: 'model.validation.field.wrong.type',
    ERROR_NOT_ALLOWED: 'model.validation.field.value.not.allowed',
    ERROR_INVALID: 'model.validation.field.invalid',
    ERROR_IARRAY_UNIQUE: 'model.validation.field.array.unique',
    ERROR_INVALID_FORMAT_EMAIL: 'model.validation.field.invalid.format.email',
    ERROR_INVALID_FORMAT_URI: 'model.validation.field.invalid.format.uri',
    ERROR_INVALID_FORMAT_IPV4: 'model.validation.field.invalid.format.ipv4',
    ERROR_INVALID_FORMAT_HOSTNAME: 'model.validation.field.invalid.format.hostname',
    ERROR_STRING_STRING_MIN_LENGTH: 'model.validation.field.string.minLength',
    ERROR_STRING_STRING_MAX_LENGTH: 'model.validation.field.string.maxLength'
  });

  /* harmony default export */__webpack_exports__["a"] = Model;

  /***/
},
/* 38 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__BaseCollection__ = __webpack_require__(14);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__BaseModel__ = __webpack_require__(15);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__SchemaProperty__ = __webpack_require__(17);

  var parseProperties = function parseProperties(resp) {
    var schemaMeta = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].pick(resp, 'id', 'name', 'displayName');

    var properties = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(resp.schema.properties, function (property, name) {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({ name: name }, property);
    });

    __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(properties, function (property) {
      property['__schemaMeta__'] = schemaMeta;

      if (property.__metadata) {
        property['__metadata__'] = property.__metadata;
        delete property.__metadata;
      }
    });
    return properties;
  };

  var BaseSchemaSchema = __WEBPACK_IMPORTED_MODULE_2__BaseModel__["default"].extend({
    defaults: {
      id: undefined,
      displayName: undefined,
      name: undefined
    },

    constructor: function constructor() {
      this.properties = new __WEBPACK_IMPORTED_MODULE_3__SchemaProperty__["default"].Collection();
      __WEBPACK_IMPORTED_MODULE_2__BaseModel__["default"].apply(this, arguments);
    },

    getProperties: function getProperties() {
      return this.properties;
    },

    clone: function clone() {
      var model = __WEBPACK_IMPORTED_MODULE_2__BaseModel__["default"].prototype.clone.apply(this, arguments);

      model.getProperties().set(this.getProperties().toJSON({ verbose: true }));
      return model;
    },

    parse: function parse(resp) {
      var properties = parseProperties(resp);

      this.properties.set(properties, { parse: true });
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(resp, 'schema');
    },

    trimProperty: function trimProperty(property) {
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(property, 'name');
    },

    toJSON: function toJSON() {
      var json = __WEBPACK_IMPORTED_MODULE_2__BaseModel__["default"].prototype.toJSON.apply(this, arguments);

      json.schema = { properties: {} };
      this.getProperties().each(function (model) {
        var property = model.toJSON();

        json.schema.properties[property.name] = this.trimProperty(property);
      }, this);
      return json;
    },

    save: function save() {
      this.getProperties().each(function (model) {
        model.cleanup();
      });
      return __WEBPACK_IMPORTED_MODULE_2__BaseModel__["default"].prototype.save.apply(this, arguments);
    }
  });
  var BaseSchemaSchemas = __WEBPACK_IMPORTED_MODULE_1__BaseCollection__["default"].extend({
    model: BaseSchemaSchema
  });
  /* harmony default export */__webpack_exports__["default"] = {
    parseProperties: parseProperties,
    Model: BaseSchemaSchema,
    Collection: BaseSchemaSchemas
  };

  /***/
},
/* 39 */
/***/function (module, exports) {

  module.exports = __webpack_require__(55);

  /***/
},
/* 40 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__BaseRouter__ = __webpack_require__(19);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__SettingsModel__ = __webpack_require__(20);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__StateMachine__ = __webpack_require__(42);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__views_BaseView__ = __webpack_require__(1);
  /* eslint max-len: [2, 150] */

  function clean(obj) {
    var res = {};

    __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].each(obj, function (value, key) {
      if (!__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].isNull(value)) {
        res[key] = value;
      }
    });
    return res;
  }

  /**
   * A Controller is our application control flow component.
   *
   * Typically it will:
   * - Initialize the models, controller and main views
   * - Listen to events
   * - Create, read, update and delete models
   * - Create modal dialogs, confirmation dialogs and alert dialogs
   * - Control the application flow
   *
   * The constructor is responsible for:
   * - Create the application state object
   * - Assign or creates the application settings object
   * - Create an instance of the main view with the relevant parameters
   *
   * See:
   * [Hello World Tutorial](https://github.com/okta/courage/wiki/Hello-World),
   * [Jasmine Spec](https://github.com/okta/okta-core/blob/master/WebContent/js/test/unit/spec/shared/util/BaseController_spec.js)
   *
   * @class module:Okta.Controller
   * @param {Object} options Options Hash
   * @param {SettingsModel} [options.settings] Application Settings Model
   * @param {String} options.el a jQuery selector string stating where to attach the controller in the DOM
   */
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_5__views_BaseView__["default"].extend(
  /** @lends module:Okta.Controller.prototype */{
    constructor: function constructor(options) {
      /* eslint max-statements: [2, 15], complexity: [2, 9]*/
      options || (options = {});

      // If 'state' is passed down as options, use it, else create a 'new StateMachine()'
      if (options.state instanceof __WEBPACK_IMPORTED_MODULE_4__StateMachine__["a" /* default */] || this.state instanceof __WEBPACK_IMPORTED_MODULE_4__StateMachine__["a" /* default */]) {
        this.state = options.state || this.state;
      } else {
        var stateData = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].defaults(clean(options.state), this.state || {});
        this.state = new __WEBPACK_IMPORTED_MODULE_4__StateMachine__["a" /* default */](stateData);
        delete options.state;
      }

      if (options.settings) {
        this.settings = options.settings;
      } else {
        // allow the controller to live without a router
        this.settings = options.settings = new __WEBPACK_IMPORTED_MODULE_3__SettingsModel__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].omit(options || {}, 'el'));
        this.listen('notification', __WEBPACK_IMPORTED_MODULE_2__BaseRouter__["default"].prototype._notify);
        this.listen('confirmation', __WEBPACK_IMPORTED_MODULE_2__BaseRouter__["default"].prototype._confirm);
      }

      __WEBPACK_IMPORTED_MODULE_5__views_BaseView__["default"].call(this, options);

      this.listenTo(this.state, '__invoke__', function () {
        var args = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].toArray(arguments);

        var method = args.shift();

        if (__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].isFunction(this[method])) {
          this[method].apply(this, args);
        }
      });

      if (this.View) {
        this.add(new this.View(this.toJSON()));
      }
    },

    /**
     * The default values of our application state
     * @type {Object}
     * @default {}
     */
    state: {},

    /**
     * The main view this controller operate on
     * @type {module:Okta.View}
     * @default null
     */
    View: null,

    /**
     * Renders the {@link module:Okta.Controller#View|main view} after the DOM is ready
     * in case the controller is the root component of the page (e.g there's no router)
     */
    render: function render() {
      var args = arguments;
      var self = this;

      Object(__WEBPACK_IMPORTED_MODULE_0__jquery_wrapper__["default"])(function () {
        __WEBPACK_IMPORTED_MODULE_5__views_BaseView__["default"].prototype.render.apply(self, args);
      });
      return this;
    },

    /**
     * Creates the view constructor options
     * @param {Object} [options] Extra options
     * @return {Object} The view constructor options
     */
    toJSON: function toJSON(options) {
      return __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].extend(__WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].pick(this, 'state', 'settings', 'collection', 'model'), options || {});
    },

    /**
     * Removes the child views, empty the DOM element and stop listening to events
     */
    remove: function remove() {
      this.removeChildren();
      this.stopListening();
      this.$el.empty();
      return this;
    }
  });

  /***/
},
/* 41 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__BaseView__ = __webpack_require__(1);

  var defaults = {
    level: 'success',
    message: 'Great Success!',
    hide: true,
    fade: 400,
    delay: 3000,
    width: 0,
    dismissable: false
  };
  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_2__BaseView__["default"].extend({
    className: 'infobox infobox-confirm infobox-confirm-fixed',

    events: {
      'click .infobox-dismiss-link': function clickInfoboxDismissLink(e) {
        e.preventDefault();
        this.fadeOut();
      }
    },

    template: '\
      {{#if dismissable}}\
      <a class="infobox-dismiss-link" title="Dismiss" href="#">\
        <span class="dismiss-icon"></span>\
      </a>\
      {{/if}}\
      <span class="icon {{level}}-16"></span>\
      {{#if title}}<h3>{{title}}</h3>{{/if}}\
      <p>{{message}}</p>\
    ',

    initialize: function initialize() {
      this.options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].defaults({}, this.options, defaults);
      this.$el.addClass('infobox-' + this.options.level);
      if (this.options.width) {
        this.$el.width(this.options.width).css({
          'margin-left': '0px',
          left: Math.round((Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(window).width() - this.options.width) / 2)
        });
      }
    },

    getTemplateData: function getTemplateData() {
      return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].pick(this.options, 'level', 'message', 'title'), {
        dismissable: this.options.hide === false || this.options.dismissable === true
      });
    },

    postRender: function postRender() {
      if (this.options.hide) {
        __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].delay(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].bind(this.fadeOut, this), this.options.delay);
      }
    },

    fadeOut: function fadeOut() {
      this.$el.fadeOut(this.options.fade, __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].bind(this.remove, this));
    }
  });

  /***/
},
/* 42 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__models_Model__ = __webpack_require__(11);

  /**
   * @class StateMachine
   * @extends Okta.Model
   * @private
   *
   * A state object that holds the applciation state
   */

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_1__models_Model__["default"].extend({
    extraProperties: true,
    /**
     * Invokes a method on the applicable {@link Okta.Controller}
     *
     * ```javascript
     * state.invoke('methodName', 'param1', 'param2')
     * // Will call
     * contoller.methodName('param1', 'param2')
     * ```
     * @param {String} methodName the name of the controller method to invoke on the controller
     */
    invoke: function invoke() {
      var args = __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].toArray(arguments);

      args.unshift('__invoke__');
      this.trigger.apply(this, args);
    }
  });

  /***/
},
/* 43 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_ViewUtil__ = __webpack_require__(24);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__BaseView__ = __webpack_require__(1);

  var disabledEvents = {
    click: function click(e) {
      e.preventDefault();
      e.stopPropagation();
    }
  };

  /**
   * A configurable button.
   * @class module:Okta.internal.views.components.BaseButtonLink
   * @extends module:Okta.View
   * @example
   * var View = BaseButtonLink.extend({
   *   title: 'Click Me',
   *   icon: 'help-text'
   * })
   */
  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_2__BaseView__["default"].extend(
  /** @lends module:Okta.internal.views.components.BaseButtonLink.prototype */{
    attributes: function attributes() {
      var defaultAttrs = {
        'data-se': 'button'
      };
      var additionalAttr = this.__getAttribute('attrs');
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend(defaultAttrs, additionalAttr);
    },

    /**
     * The main text for the button
     * @name title
     * @memberof module:Okta.internal.views.components.BaseButtonLink
     * @type {(String|Function)}
     * @instance
     */

    /**
     * The link for the button
     * @name href
     * @memberof module:Okta.internal.views.components.BaseButtonLink
     * @type {(String|Function)}
     * @instance
     */

    /**
     * CSS class for the icon to display. See [Style guide](http://rain.okta1.com:1802/su/dev/style-guide#icons)
     * @name icon
     * @memberof module:Okta.internal.views.components.BaseButtonLink
     * @type {(String|Function)}
     * @instance
     */

    /**
     * A [Backbone events](http://backbonejs.org/#View-delegateEvents) hash
     * @name events
     * @memberof module:Okta.internal.views.components.BaseButtonLink
     * @type {Object}
     * @instance
     */

    tagName: 'a',

    template: '{{#if icon}}<span class="icon {{icon}}"></span>{{/if}}{{#if title}}{{title}}{{/if}}',

    /**
     * Make this button visible, default to true.
     * @type {(Boolean|Function)}
     * @default true
     */
    visible: true,

    /**
     * Make this button enabled, default to true.
     * @type {(Boolean|Function)}
     * @default true
     */
    enabled: true,

    /**
     * The setting to determine when the button is enabled, default to {} and
     * enabled takes a higher priority.
     * @type {(Object|Function)}
     * @default {}
     */
    enableWhen: {},

    /**
     * The setting to determine when the button is visible, default to {} and
     * visible takes a higher priority.
     * @type {(Object|Function)}
     * @default {}
     */
    showWhen: {},

    constructor: function constructor(options) {
      this.options = options || {};
      var data = this.getTemplateData();

      this.disabled = false;

      __WEBPACK_IMPORTED_MODULE_2__BaseView__["default"].apply(this, arguments);

      this.$el.addClass('link-button');
      if (data.icon) {
        this.$el.addClass('link-button-icon');
        if (!data.title) {
          this.$el.addClass('icon-only');
        }
      }
    },

    getTemplateData: function getTemplateData() {
      return {
        href: this.__getAttribute('href'),
        title: this.__getAttribute('title'),
        icon: this.__getAttribute('icon')
      };
    },

    initialize: function initialize() {
      __WEBPACK_IMPORTED_MODULE_1__util_ViewUtil__["a" /* default */].applyDoWhen(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this, 'enableWhen', this), this.toggle);
      __WEBPACK_IMPORTED_MODULE_1__util_ViewUtil__["a" /* default */].applyDoWhen(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this, 'showWhen', this), this.toggleVisible);
    },

    render: function render() {
      __WEBPACK_IMPORTED_MODULE_2__BaseView__["default"].prototype.render.apply(this, arguments);

      if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'enabled')) {
        this.toggle(false);
      }

      if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'visible')) {
        this.toggleVisible(false);
      }

      var data = this.getTemplateData();

      this.$el.attr('href', data.href || '#');

      return this;
    },

    __getAttribute: function __getAttribute(name, defaultValue) {
      var value = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this.options, name, this);

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isUndefined(value)) {
        value = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, name);
      }
      return !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isUndefined(value) ? value : defaultValue;
    },

    enable: function enable() {
      this.toggle(true);
    },

    disable: function disable() {
      this.toggle(false);
    },

    show: function show() {
      this.toggleVisible(true);
    },

    hide: function hide() {
      this.toggleVisible(false);
    },

    toggle: function toggle(enable) {
      var bool = !!enable && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'enabled');
      //this is to toggle the enability

      this.disabled = !bool;
      this.$el.toggleClass('link-button-disabled btn-disabled disabled', this.disabled);
      this.delegateEvents(this.disabled ? disabledEvents : null);
    },

    toggleVisible: function toggleVisible(visible) {
      var hidden = !visible || !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'visible');

      this.$el.toggleClass('hide', hidden);
    }
  });

  /***/
},
/* 44 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_backbone__ = __webpack_require__(6);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_backbone__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__ = __webpack_require__(0);

  function Class(options) {
    this.options = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].clone(options || {});
    this.cid = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].uniqueId('class');
    this.initialize.apply(this, arguments);
  }

  __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].extend(Class.prototype, __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Events, {
    initialize: function initialize() {}
  });

  Class.extend = __WEBPACK_IMPORTED_MODULE_0_backbone___default.a.Model.extend;

  /* harmony default export */__webpack_exports__["default"] = Class;

  /***/
},
/* 45 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie__ = __webpack_require__(46);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie__);

  var SECURED_COOKIE = /^https/.test(window.location.href);
  /* harmony default export */__webpack_exports__["default"] = {
    setCookie: function setCookie(name, value, options) {
      __WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie___default.a.set(name, value, __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].defaults(options || {}, {
        secure: SECURED_COOKIE,
        path: '/'
      }));
    },

    getCookie: function getCookie() {
      return __WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie___default.a.get.apply(__WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie___default.a, arguments);
    },

    removeCookie: function removeCookie() {
      return __WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie___default.a.remove.apply(__WEBPACK_IMPORTED_MODULE_1_vendor_lib_js_cookie___default.a, arguments);
    }
  };

  /***/
},
/* 46 */
/***/function (module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__; /*!
                                                                     * JavaScript Cookie v2.1.0
                                                                     * https://github.com/js-cookie/js-cookie
                                                                     *
                                                                     * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
                                                                     * Released under the MIT license
                                                                     */
  (function (factory) {
    if (true) {
      !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) === 'object') {
      module.exports = factory();
    } else {
      var _OldCookies = window.Cookies;
      var api = window.Cookies = factory();
      api.noConflict = function () {
        window.Cookies = _OldCookies;
        return api;
      };
    }
  })(function () {
    function extend() {
      var i = 0;
      var result = {};
      for (; i < arguments.length; i++) {
        var attributes = arguments[i];
        for (var key in attributes) {
          result[key] = attributes[key];
        }
      }
      return result;
    }

    function init(converter) {
      function api(key, value, attributes) {
        var result;

        // Write

        if (arguments.length > 1) {
          attributes = extend({
            path: '/'
          }, api.defaults, attributes);

          if (typeof attributes.expires === 'number') {
            var expires = new Date();
            expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
            attributes.expires = expires;
          }

          try {
            result = (0, _stringify2.default)(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {}

          if (!converter.write) {
            value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          } else {
            value = converter.write(value, key);
          }

          key = encodeURIComponent(String(key));
          key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
          key = key.replace(/[\(\)]/g, escape);

          return document.cookie = [key, '=', value, attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
          attributes.path && '; path=' + attributes.path, attributes.domain && '; domain=' + attributes.domain, attributes.secure ? '; secure' : ''].join('');
        }

        // Read

        if (!key) {
          result = {};
        }

        // To prevent the for loop in the first place assign an empty array
        // in case there are no cookies at all. Also prevents odd result when
        // calling "get()"
        var cookies = document.cookie ? document.cookie.split('; ') : [];
        var rdecode = /(%[0-9A-Z]{2})+/g;
        var i = 0;

        for (; i < cookies.length; i++) {
          var parts = cookies[i].split('=');
          var name = parts[0].replace(rdecode, decodeURIComponent);
          var cookie = parts.slice(1).join('=');

          if (cookie.charAt(0) === '"') {
            cookie = cookie.slice(1, -1);
          }

          try {
            cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);

            if (this.json) {
              try {
                cookie = JSON.parse(cookie);
              } catch (e) {}
            }

            if (key === name) {
              result = cookie;
              break;
            }

            if (!key) {
              result[name] = cookie;
            }
          } catch (e) {}
        }

        return result;
      }

      api.get = api.set = api;
      api.getJSON = function () {
        return api.apply({
          json: true
        }, [].slice.call(arguments));
      };
      api.defaults = {};

      api.remove = function (key, attributes) {
        api(key, '', extend(attributes, {
          expires: -1
        }));
      };

      api.withConverter = init;

      return api;
    }

    return init(function () {});
  });

  /***/
},
/* 47 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__handlebars_helper_date__ = __webpack_require__(48);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__handlebars_helper_i18n__ = __webpack_require__(49);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__handlebars_helper_img__ = __webpack_require__(50);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__handlebars_helper_markdown__ = __webpack_require__(51);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__handlebars_helper_xsrfTokenInput__ = __webpack_require__(53);
  /* eslint @okta/okta/no-specific-modules: 0 */

  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a;

  /***/
},
/* 48 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_moment__ = __webpack_require__(21);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_moment__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__ = __webpack_require__(0);
  /* eslint @okta/okta/enforce-requirejs-names: 0, @okta/okta/no-specific-modules: 0, max-params: 0, max-statements: 0 */

  function formatDate(format, dateInISOString) {
    return __WEBPACK_IMPORTED_MODULE_1_moment___default.a.utc(dateInISOString).utcOffset('-07:00').format(format);
  }

  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('shortDate', __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].partial(formatDate, 'MMM Do'));
  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('mediumDate', __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].partial(formatDate, 'MMMM DD, YYYY'));
  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('longDate', __WEBPACK_IMPORTED_MODULE_2__underscore_wrapper__["default"].partial(formatDate, 'MMMM DD, YYYY, h:mma'));
  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('formatDate', formatDate);

  /* unused harmony default export */var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a;

  /***/
},
/* 49 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__StringUtil__ = __webpack_require__(3);
  /* eslint @okta/okta/no-specific-modules: 0 */

  function trim(str) {
    return str && str.replace(/^\s+|\s+$/g, '');
  }

  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('i18n', function (options) {
    var params = void 0;
    var key = trim(options.hash.code);
    var bundle = trim(options.hash.bundle);
    var args = trim(options.hash['arguments']);

    if (args) {
      params = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].map(trim(args).split(';'), function (param) {
        param = trim(param);
        var val = void 0;
        var data = this;

        /*
        * the context(data) may be a deep object, ex {user: {name: 'John', gender: 'M'}}
        * arguments may be 'user.name'
        * return data['user']['name']
        */
        __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].each(param.split('.'), function (p) {
          val = val ? val[p] : data[p];
        });
        return val;
      }, this);
    }

    return __WEBPACK_IMPORTED_MODULE_2__StringUtil__["default"].localize(key, bundle, params);
  });

  /* unused harmony default export */var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a;

  /***/
},
/* 50 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__ = __webpack_require__(0);
  /* eslint @okta/okta/no-specific-modules: 0 */

  var CACHE_BUST_URL_PREFIX = '/assets';

  function prependCachebustPrefix(path) {
    if (path.indexOf(CACHE_BUST_URL_PREFIX) === 0) {
      return path;
    }
    return CACHE_BUST_URL_PREFIX + path;
  }

  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('img', function (options) {
    var cdn = typeof okta !== 'undefined' && okta.cdnUrlHostname || '';
    /*global okta */

    var hash = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].pick(options.hash, ['src', 'alt', 'width', 'height', 'class', 'title']);

    hash.src = '' + cdn + prependCachebustPrefix(hash.src);

    var attrs = __WEBPACK_IMPORTED_MODULE_1__underscore_wrapper__["default"].map(hash, function (value, attr) {
      return attr + '="' + __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.Utils.escapeExpression(value) + '"';
    });

    return new __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.SafeString('<img ' + attrs.join(' ') + '/>');
  });

  /* unused harmony default export */var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a;

  /***/
},
/* 51 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__markdownToHtml__ = __webpack_require__(52);
  /* eslint @okta/okta/no-specific-modules: 0 */

  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('markdown', function (mdText) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__markdownToHtml__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0_handlebars___default.a, mdText);
  });

  /* unused harmony default export */var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a;

  /***/
},
/* 52 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony export (immutable) */
  __webpack_exports__["a"] = mdToHtml;
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__ = __webpack_require__(0);
  // Simple "markdown parser" - just handles markdown formatted links. If we
  // find that we need more extensive markdown support, we should include
  // a fully formulated markdown library like:
  // https://github.com/evilstreak/markdown-js

  var RE_LINK = /\[[^\]]*\]\([^)]*\)/gi;
  var RE_LINK_HREF = /\]\(([^)]*)\)/i;
  var RE_LINK_TEXT = /\[([^\]]*)\]/i;
  var RE_LINK_JS = /javascript:/gi;

  // Converts links
  // FROM:
  // [some link text](http://the/link/url)
  // TO:
  // <a href="http://the/link/url">some link text</a>
  function mdToHtml(Handlebars, markdownText) {
    var linkTemplate = Handlebars.compile('<a href="{{href}}">{{text}}</a>');
    /* eslint  @okta/okta/no-specific-methods: 0*/

    var res = void 0;

    if (!__WEBPACK_IMPORTED_MODULE_0__underscore_wrapper__["default"].isString(markdownText)) {
      res = '';
    } else {
      res = Handlebars.Utils.escapeExpression(markdownText).replace(RE_LINK_JS, '').replace(RE_LINK, function (mdLink) {
        return linkTemplate({
          href: mdLink.match(RE_LINK_HREF)[1],
          text: mdLink.match(RE_LINK_TEXT)[1]
        });
      });
    }
    return new Handlebars.SafeString(res);
  }

  /***/
},
/* 53 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0_handlebars__ = __webpack_require__(5);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_handlebars___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_handlebars__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__jquery_wrapper__ = __webpack_require__(2);
  /* eslint @okta/okta/no-specific-modules: 0 */

  __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.registerHelper('xsrfTokenInput', function () {
    return new __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a.SafeString('<input type="hidden" class="hide" name="_xsrfToken" ' + 'value="' + Object(__WEBPACK_IMPORTED_MODULE_1__jquery_wrapper__["default"])('#_xsrfToken').text() + '">');
  });

  /* unused harmony default export */var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_0_handlebars___default.a;

  /***/
},
/* 54 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__framework_ListView__ = __webpack_require__(55);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__BaseView__ = __webpack_require__(1);

  /**
   * See {@link src/framework/ListView} for more detail and examples from the base class.
   * @class module:Okta.ListView
   * @extends src/framework/ListView
   * @mixes module:Okta.View
   */
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_1__BaseView__["default"].decorate(__WEBPACK_IMPORTED_MODULE_0__framework_ListView__["a" /* default */]);

  /***/
},
/* 55 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__View__ = __webpack_require__(22);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* eslint-disable max-statements */

  /**
     * Archer.ListView is a {@link src/framework/View} that operates on a
     * collection and builds a list of "things" of the same type.
     *
     * Automagically adds, removes and sorts upon standard collection events.
     *
     * Listen to collection events so the ListView will do the right thing when
     * a model is added or the collection is reset or sorted.
     *
     * @class src/framework/ListView
     * @extends src/framework/View
     * @param {Object} options options hash
     * @param {Object} options.collection The collection which this view operates on
     * @example
     * var UserList = Archer.ListView.extend({
     *   tagName: 'ul',
     *   item: '<li>{{fname}} {{lname}}</li>'
     * });
     *
     * var users = new Archer.Collection([
     *   {fname: 'John', lname: 'Doe'},
     *   {fname: 'Jane', lname: 'Doe'}
     * ]);
     *
     * var userList = new UserList({collection: users}).render();
     * userList.el; //=> "<ul><li>John Doe</li><li>Jane Doe</li></ul>"
     *
     * users.push({fname: 'Jim', lname: 'Doe'});
     * userList.el; //=> "<ul><li>John Doe</li><li>Jane Doe</li><li>Jim Doe</li></ul>"
     *
     * users.first().destroy();
     * userList.el; //=> "<ul><li>Jane Doe</li><li>Jim Doe</li></ul>"
     */
  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__View__["a" /* default */].extend( /** @lends src/framework/ListView.prototype */{

    constructor: function constructor() {
      __WEBPACK_IMPORTED_MODULE_0__View__["a" /* default */].apply(this, arguments);
      if (!this.collection) {
        throw new Error('Missing collection');
      }
      this.listenTo(this.collection, 'reset sort', this.reset);
      this.listenTo(this.collection, 'add', this.addItem);

      if (this.fetchCollection) {
        this.collection.fetch();
      } else {
        this.collection.each(this.addItem, this);
      }
    },

    /**
       * The view/template we will use to render each model in the collection.
       * @type {String|module:Okta.View}
       */
    item: null,

    /**
       * A selector in the local template where to append each item
       * @type {String}
       */
    itemSelector: null,

    /**
       * Empty the list and re-add everything from the collection.
       * Usefull for handling `collection.reset()` or for handling the initial load
       * @protected
       */
    reset: function reset() {
      var _this3 = this;

      this.removeChildren();
      this.collection.each(function (model, index) {
        _this3.addItem(model, index);
      });
      return this;
    },

    /**
       * Add an item view to the list that will represent one model from the collection
       *
       * Listen to the model so when it is destoyed or removed from the collection
       * this item will remove itself from the list
       *
       * @param {Backbone.Model} model The model this row operates on
       * @protected
       */
    addItem: function addItem(model) {
      var view = this.add(this.item, this.itemSelector, { options: { model: model } }).last();
      view.listenTo(model, 'destroy remove', view.remove);
      return this;
    },

    addShowMore: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].noop

  });

  /***/
},
/* 56 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__BaseView__ = __webpack_require__(1);

  var optionsTemplate = __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__["default"].tpl('\
    <a href="" class="icon-16 {{className}}" data-se="{{seleniumId}}">\
      {{#if icon}}\
      <span class="icon {{icon}}"></span>\
      {{/if}}\
      {{#if title}}\
      {{title}}\
      {{/if}}\
      {{#if subtitle}}\
        <p class="option-subtitle">{{subtitle}}</p>\
      {{/if}}\
   </a>\
   ');
  var BaseDropDownDropDownOption = __WEBPACK_IMPORTED_MODULE_3__BaseView__["default"].extend({
    tagName: 'li',

    events: {
      click: function click(e) {
        e.preventDefault();
        this.action && this.action.call(this);
      }
    },

    constructor: function constructor() {
      __WEBPACK_IMPORTED_MODULE_3__BaseView__["default"].apply(this, arguments);
      this.$el.addClass('okta-dropdown-option option');
    },

    render: function render() {
      this.$el.html(optionsTemplate({
        icon: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'icon'),
        className: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'className') || '',
        title: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'title'),
        subtitle: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'subtitle'),
        seleniumId: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'seleniumId')
      }));
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'disabled')) {
        this.disable();
      }
      return this;
    },

    disable: function disable() {
      this.$el.addClass('option-disabled');
      this.$el.find('a').attr('tabindex', '-1');
    }
  });
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_3__BaseView__["default"].extend({
    events: {
      'click a.option-selected': function clickAOptionSelected(e) {
        e.preventDefault();
        if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'disabled')) {
          e.stopPropagation();
        }
      },
      'click .dropdown-disabled': function clickDropdownDisabled(e) {
        e.preventDefault();
        e.stopPropagation();
      }
    },

    items: [],

    constructor: function constructor() {
      var className = this.className;

      // In this very specific case we want to NOT append className to $el
      // but to the <a> tag in the template
      // so we want to disable backbone default functionality.

      this.className = null;

      __WEBPACK_IMPORTED_MODULE_3__BaseView__["default"].apply(this, arguments);

      this.className = className;

      this.$el.addClass('dropdown more-actions float-l');

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'items'), function (option) {
        this.addOption(option, this.options);
      }, this);
    },

    template: '\
      <a href="#" class="link-button {{className}} link-button-icon option-selected center"\
        aria-expanded="false" aria-controls="okta-dropdown-options">\
        {{#if icon}}\
        <span class="icon {{icon}}"></span>\
        {{/if}}\
        {{#if screenReaderText}}\
        <span class="off-screen">{{screenReaderText}}</span>\
        {{/if}}\
        <span class="option-selected-text">{{title}}</span>\
        <span class="icon-dm"></span>\
      </a>\
      <div id="okta-dropdown-options" class="options clearfix" style="display: none;">\
      <ul class="okta-dropdown-list options-wrap clearfix"></ul>\
      </div>\
    ',

    getTemplateData: function getTemplateData() {
      var className = [__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'className') || '', __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'disabled') ? 'dropdown-disabled' : ''];

      return {
        icon: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'icon'),
        className: __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].trim(className.join(' ')),
        title: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'title'),
        screenReaderText: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'screenReaderText')
      };
    },

    addOption: function addOption(proto, options) {
      this.add(BaseDropDownDropDownOption.extend(proto), 'ul.options-wrap', { options: options || {} });
    }
  });

  /***/
},
/* 57 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_StringUtil__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__BaseView__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__components_ReadModeBar__ = __webpack_require__(58);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__components_Toolbar__ = __webpack_require__(25);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__helpers_ErrorBanner__ = __webpack_require__(59);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__helpers_ErrorParser__ = __webpack_require__(60);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__ = __webpack_require__(9);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_10__helpers_InputContainer__ = __webpack_require__(61);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_11__helpers_InputFactory__ = __webpack_require__(62);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_12__helpers_InputLabel__ = __webpack_require__(63);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_13__helpers_InputWrapper__ = __webpack_require__(64);
  /* eslint max-statements: [2, 11] */

  var template = '\
    {{#if hasReadMode}}\
      <h2 class="o-form-title-bar" data-se="o-form-title-bar">\
        {{title}}\
      </h2>\
    {{/if}}\
    <div data-se="o-form-content" class="o-form-content {{layout}} clearfix">\
      {{#unless hasReadMode}}\
        {{#if title}}\
          <h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>\
        {{/if}}\
      {{/unless}}\
      {{#if subtitle}}\
        <p class="okta-form-subtitle o-form-explain" data-se="o-form-explain">{{subtitle}}</p>\
      {{/if}}\
      <div class="o-form-error-container" data-se="o-form-error-container"></div>\
      <div class="o-form-fieldset-container" data-se="o-form-fieldset-container"></div>\
    </div>\
  ';
  var pointerEventsSupported = Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])('<div>').css({ 'pointer-events': 'auto' })[0].style.pointerEvents === 'auto';

  // polyfill for `pointer-events: none;` in IE < 11
  // Logic borrowed from https://github.com/kmewhort/pointer_events_polyfill (BSD)

  function pointerEventsPolyfill(e) {
    if (!pointerEventsSupported && this.$el.hasClass('o-form-saving')) {
      var $el = Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(e.currentTarget);

      $el.css('display', 'none');
      var underneathElem = document.elementFromPoint(e.clientX, e.clientY);

      $el.css('display', 'block');

      e.target = underneathElem;
      Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(underneathElem).trigger(e);

      return false;
    }
  }

  var events = {
    submit: function submit(e) {
      e.preventDefault();
      this.__save();
    }
  };

  __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(['click', 'dblclick', 'mousedown', 'mouseup'], function (event) {
    events[event + ' .o-form-input'] = pointerEventsPolyfill;
  });

  var attributes = function attributes(model) {
    model || (model = {});
    var collection = model && model.collection || {};

    return {
      method: 'POST',
      action: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(model, 'urlRoot') || __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(collection, 'url') || window.location.pathname,
      'data-se': 'o-form',
      slot: 'content'
    };
  };

  var convertSavingState = function convertSavingState(rawSavingStateEvent, defaultEvent) {
    rawSavingStateEvent || (rawSavingStateEvent = '');
    var savingStateEvent = [];

    if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isString(rawSavingStateEvent)) {
      savingStateEvent = rawSavingStateEvent.split(' ');
    }
    savingStateEvent = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].union(savingStateEvent, defaultEvent);
    return savingStateEvent.join(' ');
  };

  var getErrorSummary = function getErrorSummary() {
    var responseJSON = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (Array.isArray(responseJSON.errorCauses) && responseJSON.errorCauses.length > 0) {
      //set errorSummary from first errorCause which is not field specific error
      return responseJSON.errorCauses[0].errorSummary;
    } else {
      //set errorSummary from top level errorSummary
      return responseJSON.errorSummary;
    }
  };
  /**
   * A Form utility framework
   *
   * Okta.Form is a form that operates on one flat model
   * It exposes one main factory method, {@link module:Okta.Form#addInput|addInput}, which add inputs to the form,
   * and each input operates on one field in the model, identified by the `name` field.
   *
   * See:
   * [Basic O-Form Tutorial](https://github.com/okta/courage/wiki/Basic-O-Form)
   *
   * @class module:Okta.Form
   * @extends module:Okta.View
   * @param {Object} options options hash (See {@link module:Okta.View|View})
   * @param {Object} options.model the model this form operates on
   * @param {Boolean} [options.label-top=false] position label on top of inputs
   * @param {Boolean} [options.wide=false] Use a wide input layout for all input
   */

  /**
   * Fired when the "Save" button is clicked
   * @event module:Okta.Form#save
   * @param {module:Okta.Model} model Model used in the form
   */

  /**
   * Fired after the model is successfully saved - applies when {@link module:Okta.Form#autoSave|autoSave}
   * is set to true
   * @event module:Okta.Form#saved
   * @param {module:Okta.Model} model Model used in the form
   */

  /**
   * Fired when the model fires an invalid event or an error event;
   * @event module:Okta.Form#error
   * @param {module:Okta.Model} model Model used in the form
   */

  /**
   * Fired when the form layout is likely to be resized
   * @event module:Okta.Form#resize
   * @param {module:Okta.Model} model Model used in the form
   */

  /**
   * Fired when the "Cancel" button is clicked
   * @event module:Okta.Form#cancel
   */

  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].extend(
  /** @lends module:Okta.Form.prototype */{
    /**
     * Specifies how to validate form:
     * - In case "local" string provided as a value of the property,
     * the form will validate only fields added as inputs to the form;
     * - In case array is provided, the validation will be performed only for fields specified in array;
     * - In case function is provided, provided function will be used as a validation function,
     * it must return an error object with the format {fieldName: 'error text'} with as many fields as you need.
     * @name validate
     * @memberof module:Okta.Form
     * @type {String|Array|Function}
     * @instance
     */

    constructor: function constructor(options) {
      /* eslint max-statements: 0, complexity: 0 */
      options || (options = {});
      this.options = options;

      this.id = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].uniqueId('form');
      this.tagName = 'form';

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].defaults(this.events, events);
      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].defaults(this.attributes, attributes(options.model));

      this.__buttons = [];
      this.__errorFields = {};

      this.__saveModelState(options.model);

      if (this.step) {
        if (!this.save) {
          this.save = !this.totalSteps || this.step === this.totalSteps ? 'Finish' : 'Next';
        }
        this.className += ' wizard';
      }
      this.className += ' o-form';

      this.__toolbar = this.__createToolbar(options);

      __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].call(this, options);

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, 'inputs') || [], function (input) {
        // to ingore extra argumests from `each` iteratee function
        // http://underscorejs.org/#each
        this.__addLayoutItem(input);
      }, this);

      this.add(this.__toolbar, '');

      this.listenTo(this.model, 'change:__edit__', this.__applyMode);

      this.listenTo(this.model, 'invalid error', __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].throttle(function (model, resp, showBanner) {
        this.__showErrors(model, resp, showBanner !== false);
      }, 100, { trailing: false }));

      this.listenTo(this.model, 'form:resize', function () {
        this.trigger('resize');
      });

      this.listenTo(this.model, 'form:cancel', __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].throttle(this.__cancel, 100, { trailing: false }));
      this.listenTo(this.model, 'form:previous', __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].throttle(this.__previous, 100, { trailing: false }));

      this.__save = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].throttle(this.__save, 200, { trailing: false });
      this.listenTo(this.model, 'form:save', function () {
        this.$el.submit();
      });

      this.listenTo(this.model, 'sync', function () {
        if (this.model.get('__edit__')) {
          this.model.set('__edit__', false, { silent: true });
        }
        this.__saveModelState(this.model);
        this.render();
      });

      var hasSavingState = this.getAttribute('hasSavingState');

      if (this.getAttribute('autoSave')) {
        this.listenTo(this, 'save', function (model) {
          var _this4 = this;

          var xhr = model.save();

          if (xhr && xhr.done) {
            xhr.done(function () {
              _this4.trigger('saved', model);
            });
          }
        });
        if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isUndefined(hasSavingState)) {
          hasSavingState = true;
        }
      }

      /*
      * Attach model event listeners
      * by default, model's request event starts the form saving state,
      * error and sync event stops it
      * you can define customized saving start and stop state, like
      * customSavingState: {start: 'requestingAdditionalInfo', stop: 'retrievedAdditionalInfo'}
      * doing this does not override the default events
      */
      if (hasSavingState) {
        var customSavingState = this.getAttribute('customSavingState', {});

        this.listenTo(this.model, convertSavingState(customSavingState.start || '', ['request']), this.__setSavingState);
        this.listenTo(this.model, convertSavingState(customSavingState.stop || '', ['error', 'sync']), this.__clearSavingState);
      }
    },

    /**
     * Create the bottom button bar
     * @param  {Object} options options h
     * @return {Okta.View} The toolbar
     * @private
     */
    __createToolbar: function __createToolbar(options) {
      var danger = this.getAttribute('danger');
      var saveBtnClassName = danger === true ? 'button-error' : 'button-primary';
      var toolbar = new __WEBPACK_IMPORTED_MODULE_6__components_Toolbar__["default"](__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend({
        save: this.save || __WEBPACK_IMPORTED_MODULE_2__util_StringUtil__["default"].localize('oform.save', 'courage'),
        saveId: this.saveId,
        saveClassName: saveBtnClassName,
        cancel: this.cancel || __WEBPACK_IMPORTED_MODULE_2__util_StringUtil__["default"].localize('oform.cancel', 'courage'),
        noCancelButton: this.noCancelButton || false,
        hasPrevStep: this.step && this.step > 1
      }, options || this.options));

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(this.__buttons, function (args) {
        toolbar.addButton.apply(toolbar, args);
      });

      return toolbar;
    },

    className: '',

    attributes: {},

    events: {},

    /**
     * An array of input configurations to render in the form
     * @type {Array}
     */
    inputs: [],

    template: null,

    /**
     * Does the form support read/edit toggle.
     * @type {Boolean|Function}
     * @default false
     */
    read: false,

    /**
     * Is the form in readOnly mode.
     * @type {Boolean|Function}
     * @default false
     */
    readOnly: false,

    /**
     * Should we not render the button bar
     * @type {Boolean|Function}
     * @default false
     */
    noButtonBar: false,

    /**
     * Should we not render a cancel button
     * @type {Boolean|Function}
     * @default false
     */
    noCancelButton: false,

    /**
     * The text on the save button
     * @type {String}
     * @default "Save"
     */
    save: null,

    /**
     * The text on the cancel button
     * @type {String}
     * @default "Cancel"
     */
    cancel: null,

    /**
     * To use button-error to style the submit button instead of button-primary.
     * @type {Boolean|Function}
     * @default false
     */
    danger: false,

    /**
     * A layout CSS class to add to the form
     * @type {String|Function}
     * @default ""
     */
    layout: '',

    /**
     * The step this form is in the context of a wizard
     * @type {Number}
     */
    step: undefined,

    /**
     * The total numbers of steps the wizard this form is a part of has
     * @type {Number}
     */
    totalSteps: undefined,

    /**
     * The form's title
     * @type {String|Function}
     */
    title: null,

    /**
     * The form's subtitle
     * @type {String|Function}
     */
    subtitle: null,

    /**
     * Auto-save the model when hitting save. Triggers a `saved` event when done
     * @type {Boolean}
     * @default false
     */
    autoSave: false,

    /**
     * Scroll to the top of the form on error
     * @type {Boolean|Function}
     * @default true
     */
    scrollOnError: true,

    /**
     * Show the error banner upon error
     * @type {Boolean|Function}
     * @default true
     */
    showErrors: true,

    /**
     * The form's scrollable area
     * @type {String}
     * @default ".o-form-content"
     */
    resizeSelector: '.o-form-content',

    /**
     * Sets whether or not the form shows the saving state when
     * the model is saved.  Has no effect on setSavingState and clearSavingState as those are manual calls
     * to trigger/clear the saving state.
     * @name hasSavingState
     * @memberof module:Okta.Form
     * @type {Boolean}
     * @default false
     * @instance
     */

    /**
     * Get an attribute value from options or instance.
     * Prefer options value over instance value
     * @param  {String} name Name of the attribute
     * @param  {Object} defaultValue the default value to return if the attribute is not found
     * @return {Object} The value
     */
    getAttribute: function getAttribute(name, defaultValue) {
      var value = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].resultCtx(this.options, name, this);

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isUndefined(value)) {
        value = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].result(this, name);
      }
      return !__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isUndefined(value) ? value : defaultValue;
    },

    /**
     * Does this form have a "read" mode
     * @return {Boolean}
     */
    hasReadMode: function hasReadMode() {
      return !!this.getAttribute('read');
    },

    /**
     * Is this form in "read only" mode
     * @return {Boolean}
     */
    isReadOnly: function isReadOnly() {
      return !!this.getAttribute('readOnly');
    },

    /**
     * Does this form have a button bar
     * @return {Boolean}
     */
    hasButtonBar: function hasButtonBar() {
      return !(this.getAttribute('noButtonBar') || this.isReadOnly());
    },

    render: function render() {
      this.__readModeBar && this.__readModeBar.remove();
      if (this.hasReadMode() && !this.isReadOnly()) {
        var readModeBar = __WEBPACK_IMPORTED_MODULE_5__components_ReadModeBar__["a" /* default */].extend({
          formTitle: this.getAttribute('title', '')
        });

        this.__readModeBar = this.add(readModeBar, '.o-form-title-bar').last();
      }

      var html = __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__["default"].tpl(template)({
        layout: this.getAttribute('layout', ''),
        title: this.getAttribute('title', '', true),
        subtitle: this.getAttribute('subtitle', '', true),
        hasReadMode: this.hasReadMode()
      });

      this.$el.html(html);
      delete this.template;

      __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].prototype.render.apply(this, arguments);

      this.__applyMode();

      return this;
    },

    /**
     * Changes form UI to indicate saving.  Disables all inputs and buttons.  Use this function if you have set
     * hasSavingState to false on the the form
     * @private
     */
    __setSavingState: function __setSavingState() {
      this.model.trigger('form:set-saving-state');
      this.$el.addClass('o-form-saving');
    },

    /**
     * Changes form UI back to normal from the saving state.  Use this function if you are have set hasSavingState
     * to false on the form
     * @private
     */
    __clearSavingState: function __clearSavingState() {
      this.model.trigger('form:clear-saving-state');
      this.$el.removeClass('o-form-saving');
    },

    /**
     * Toggles the visibility of the bottom button bar
     * @private
     */
    __toggleToolbar: function __toggleToolbar() {
      this.__toolbar && this.__toolbar.remove();
      if (this.hasButtonBar() && this._editMode()) {
        this.__toolbar = this.__createToolbar();
        this.add(this.__toolbar, '');
      }
      this.trigger('resize');
    },

    /**
     * Cancels this form
     * - Reset the model to the previous state
     * - Clears all errors
     * - Triggers a `cancel` event
     * - Sets the model to read mode (if applicable)
     * @private
     * @fires cancel
     */
    __cancel: function __cancel() {
      var edit = this.model.get('__edit__');
      /* eslint max-statements: [2, 12] */

      this.model.clear({ silent: true });
      var data = void 0;

      if (this.model.sanitizeAttributes) {
        data = this.model.sanitizeAttributes(this.__originalModel);
      } else {
        data = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(this.__originalModel);
      }
      this.model.set(data, { silent: true });
      this.trigger('cancel', this.model);
      this.model.trigger('cache:clear');
      if (edit) {
        this.model.set('__edit__', false, { silent: true });
        this.model.trigger('change:__edit__', this.model, false);
      }
      this.clearErrors();
    },

    /**
     * Runs {@link module:Okta.Form#validate|validate} to check the model state.
     * Triggers an "invalid" event on the model if validation fails
     * @returns {Boolean}
     */
    isValid: function isValid() {
      var res = void 0;
      var self = this;

      function validateArray(arr) {
        return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].reduce(arr, function (memo, fieldName) {
          return __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend(memo, self.model.validateField(fieldName));
        }, {});
      }

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isUndefined(this.validate)) {
        return this.model.isValid();
      } else if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(this.validate)) {
        res = this.validate();
      } else if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isArray(this.validate)) {
        res = validateArray(this.validate);
      } else if (this.validate === 'local') {
        res = validateArray(this.getInputs().map(function (input) {
          return input.options.name;
        }));
      }

      if (!__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isEmpty(res)) {
        this.model.trigger('invalid', this.model, res);
        return false;
      } else {
        return true;
      }
    },

    /**
     * A throttled function that saves the form not more than once every 100 ms
     * Basically all this method does is trigger a `save` event
     * @fires save
     * @private
     */
    __save: function __save() {
      this.clearErrors();
      if (this.isValid()) {
        this.trigger('save', this.model);
      }
    },

    /**
     * In the context of a wizard, go to previous state
     * Technically all this method does is trigger a `previous` event
     * @param  {Event} e
     * @private
     */
    __previous: function __previous() {
      this.trigger('previous', this.model);
    },

    /**
     * Renders the form in the correct mode based on the model.
     * @private
     */
    __applyMode: function __applyMode() {
      this.clearErrors();
      this.__toggleToolbar();

      if (this._editMode()) {
        this.$el.addClass('o-form-edit-mode');
        this.$el.removeClass('o-form-read-mode');
        this.$('.o-form-content').removeClass('rounded-btm-4');
        this.focus();
      } else {
        this.$el.removeClass('o-form-edit-mode');
        this.$el.addClass('o-form-read-mode');
        this.$('.o-form-content').addClass('rounded-btm-4');
      }
    },

    /**
     * Is the form in edit mode
     * @return {Boolean}
     * @private
     */
    _editMode: function _editMode() {
      return this.model.get('__edit__') || !this.hasReadMode();
    },

    /**
     * Function can be overridden to alter top level error summary.
     * @param {Object} responseJSON
     *
     * @example
     * // responseJSON object
     * {
     *  errorCauses: [{errorSummary: "At least one of Proxy Status, Location, or ASN should be configured."}]
     *  errorSummary: "At least one of Proxy Status, Location, or ASN should be configured."
     *  errorCode: "E0000001"
     *  errorId: "oaepsrTCHrhT-eIi8XTm6KWWg"
     *  errorLink: "E0000001"
     *  errorSummary: "Api validation failed: networkZone"
     * }
     *
     * @method
     * @default _.identity
     */
    parseErrorMessage: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].identity,

    /**
     * Show an error message based on an XHR error
     * @param  {Okta.BaseModel} model the model
     * @param  {jqXHR} xhr The jQuery XmlHttpRequest Object
     * @private
     */
    __showErrors: function __showErrors(model, resp, showBanner) {
      this.trigger('error', model);

      /* eslint max-statements: 0 */
      if (this.getAttribute('showErrors')) {
        var errorSummary = void 0;
        var responseJSON = __WEBPACK_IMPORTED_MODULE_8__helpers_ErrorParser__["a" /* default */].getResponseJSON(resp);
        var validationErrors = __WEBPACK_IMPORTED_MODULE_8__helpers_ErrorParser__["a" /* default */].parseFieldErrors(resp);

        // trigger events for field validation errors
        if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].size(validationErrors)) {
          __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(validationErrors, function (errors, field) {
            this.model.trigger('form:field-error', this.__errorFields[field] || field, __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].map(errors, function (error) {
              return (/^model\.validation/.test(error) ? __WEBPACK_IMPORTED_MODULE_2__util_StringUtil__["default"].localize(error, 'courage') : error
              );
            }));
          }, this);
        } else {
          responseJSON = this.parseErrorMessage(responseJSON);
          errorSummary = getErrorSummary(responseJSON);
        }

        // show the error message
        if (showBanner) {
          this.$('.o-form-error-container').addClass('o-form-has-errors');
          this.add(__WEBPACK_IMPORTED_MODULE_7__helpers_ErrorBanner__["a" /* default */], '.o-form-error-container', { options: { errorSummary: errorSummary } });
        }

        // slide to and focus on the error message
        if (this.getAttribute('scrollOnError')) {
          var $el = Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])('#' + this.id + ' .o-form-error-container');

          $el.length && Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])('html, body').animate({ scrollTop: $el.offset().top }, 400);
        }

        this.model.trigger('form:resize');
      }
    },

    /**
     * Clears the error banner
     * @private
     */
    clearErrors: function clearErrors() {
      this.$('.o-form-error-container').removeClass('o-form-has-errors');
      this.model.trigger('form:clear-errors');
      this.model.trigger('form:resize');
    },

    /**
     * Toggles between edit and read mode
     */
    toggle: function toggle() {
      this.model.set('__edit__', !this.hasReadMode() || !this.model.get('__edit__'));
      return this;
    },

    __addLayoutItem: function __addLayoutItem(input) {
      if (__WEBPACK_IMPORTED_MODULE_11__helpers_InputFactory__["a" /* default */].supports(input)) {
        this.addInput(input);
      } else {
        this.__addNonInputLayoutItem(input);
      }
    },

    __addNonInputLayoutItem: function __addNonInputLayoutItem(item) {
      var itemOptions = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].omit(item, 'type');

      switch (item.type) {
        case 'sectionTitle':
          this.addSectionTitle(item.title, __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].omit(itemOptions, 'title'));
          break;
        case 'divider':
          this.addDivider(itemOptions);
          break;
        default:
          throw new Error('unknown input: ' + item.type);
      }
    },

    /**
     * Adds a view to the buttons tool bar
     * @param {Object} params parameterized button options
     * @param {Object} options options to send to {@link module:Okta.View#add|View.add}
     */
    addButton: function addButton(params, options) {
      this.__toolbar && this.__toolbar.addButton(params, options);
      this.__buttons.push([params, options]);
    },

    /**
     * Adds a divider
     */
    addDivider: function addDivider(options) {
      this.add('<div class="okta-form-divider form-divider"></div>');
      __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].applyShowWhen(this.last(), options && options.showWhen);
      __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].applyToggleWhen(this.last(), options && options.toggleWhen);
      return this;
    },

    /**
     * Adds section header
     * @param {String} title
     */
    addSectionTitle: function addSectionTitle(title, options) {
      this.add(__WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__["default"].tpl('<h2 class="o-form-head">{{title}}</h2>')({ title: title }));
      __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].applyShowWhen(this.last(), options && options.showWhen);
      __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].applyToggleWhen(this.last(), options && options.toggleWhen);
      return this;
    },

    /**
     * Add a form input
     * @param {Object} options Options to describe the input
     * @param {String} options.type The input type.
     * The options are: `text`, `textarea`, `select`, `checkbox`, `radio`, `switch`,
     * `password`, `number`, `textselect`, `date`, `grouppicker`, `su-orgspicker`
     * `file/image`, `file/cert`, `checkboxset`, `list`, `group`, `zonepicker`
     * @param {String} options.name The name of the model field this input mutates
     * @param {String|Function} [options.label]
     * The input label text.
     * When passed as a function, will invoke the function (in the context of the {@link InputLabel})
     * on render time, and use the returned value.
     * @param {String} [options.sublabel] The input sub label text
     * @param {String} [options.tooltip] A popover tooltip to be displayed next to the label
     * @param {String} [options.placeholder] Placeholder text.
     * @param {String} [options.explain] Explanation text to render below the input
     * @param {Okta.View} [options.customExplain] A custom view to render below the input (deprecated)
     * @param {Boolean} [options.disabled=false] Make this input disabled
     * @param {Boolean} [options.wide=false] Use a wide input layout
     * @param {Boolean} [options.label-top=false] position label on top of an input
     * @param {Boolean} [options.explain-top=false] position explain on top of an input (requires label-top=true)
     * @param {Number} [options.multi] have multiple in-line inputs. useful when `input` is passed as an array of inputs
     * @param {String} [options.errorField] The API error field here that maps to this input
     * @param {Boolean} [options.inlineValidation=true] Validate input on focusout
     * @param {String} [options.ariaLabel] Used to add aria-label attribute to the input when label is not present.
     * @param {Object} [options.options]
     * In the context of `radio` and `select`, a key/value set of options
     *
     * @param {Object} [options.params]
     * Widget specific parameters. Varies per input.
     *
     * @param {BaseInput|Object[]} [options.input]
     * - A custom input "class" or instance - preferably a **class**, so we can automagically assign the right
     * parameters when initializing it
     * - An array of input definition object literals (such as this one)
     *
     * @param {Object} [options.showWhen]
     * Setting to define when to show (or hide) the input. The input is visible by default.
     *
     * @param {Object} [options.bindings]
     * Bind a certain model attribute to a callback function, so the function is being called on render,
     * and any time this model field changes.
     * This is similar to `showWhen` but is not limited to toggling.
     *
     * @param {Function} [options.render]
     * A post-render hook that will run upon render on InputWrapper
     *
     * @param {String|Function} className   A className to apply on the {@link InputWrapper}
     *
     * @param {Function} [options.initialize]
     * An `initialize` function to run when initializing the {@link InputWrapper}
     * Useful for state mutation on start time, and complex state logic
     *
     * @example
     * // showhen: the field will be visible when `advanced` is set to `true`
     * // and `mode` is set to `"ON"`.
     * showWhen: {
     *   'advanced': true,
     *   'mode': function (value) {
     *     return value == 'ON'; // this is identical to this.model.get('mode') == 'ON'
     *   }
     * }
     *
     * @example
     * // bindings
     * bindings: {
     *   'status mode': function (status, mode) {
     *      var labelView = this.getLabel();
     *      if (status == 1) {
     *        labelView.options.label = 'Something';
     *      }
     *      else {
     *        labelView.options.label = mode;
     *      }
     *      labelView.render();
     *   }
     * }
     */
    addInput: function addInput(_options) {
      _options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].clone(_options);

      __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].validateInput(_options, this.model);

      var inputsOptions = __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].generateInputOptions(_options, this, this.__createInput).reverse();

      // We need a local variable here to keep track
      // as addInput can be called either directy or through the inputs array.
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isEmpty(this.getInputs().toArray())) {
        __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend(inputsOptions[0], { validateOnlyIfDirty: true });
      }

      var inputs = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].map(inputsOptions, this.__createInput, this);

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(inputsOptions, function (input) {
        if (input.errorField) {
          this.__errorFields[input.errorField] = input.name;
        }
      }, this);

      var options = {
        inputId: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].last(inputs).options.inputId,
        input: inputs,
        multi: inputsOptions.length > 1 ? inputsOptions.length : undefined
      };

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend(options, __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].omit(this.options, 'input'), __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].omit(_options, 'input'));

      var inputWrapper = this.__createWrapper(options);

      if (options.label !== false) {
        inputWrapper.add(this.__createLabel(options));
      }
      inputWrapper.add(this._createContainer(options));
      inputWrapper.type = options.type || options.input.type || 'custom';

      var args = [inputWrapper].concat(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].drop(arguments, 1));

      return this.add.apply(this, args);
    },

    /**
     * @private
     */
    __createInput: function __createInput(options) {
      options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].pick(options, __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].INPUT_OPTIONS);
      return __WEBPACK_IMPORTED_MODULE_11__helpers_InputFactory__["a" /* default */].create(options);
    },

    /**
     * @private
     */
    __createWrapper: function __createWrapper(options) {
      options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].pick(options, __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].WRAPPER_OPTIONS);
      return new __WEBPACK_IMPORTED_MODULE_13__helpers_InputWrapper__["a" /* default */](options);
    },

    /**
     * @private
     */
    __createLabel: function __createLabel(options) {
      options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].pick(options, __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].LABEL_OPTIONS);
      return new __WEBPACK_IMPORTED_MODULE_12__helpers_InputLabel__["a" /* default */](options);
    },

    /**
     * @private
     */
    _createContainer: function _createContainer(options) {
      options = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].pick(options, __WEBPACK_IMPORTED_MODULE_9__helpers_FormUtil__["default"].CONTAINER_OPTIONS);
      return new __WEBPACK_IMPORTED_MODULE_10__helpers_InputContainer__["a" /* default */](options);
    },

    /**
     * Stores the current attributes of the model to a private property
     * @param  {Okta.BaseModel} model The model
     * @private
     */
    __saveModelState: function __saveModelState(model) {
      this.__originalModel = __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"].extend(true, {}, model.attributes);
    },

    /**
     * @override
     * @ignore
     */
    add: function add() {
      var args = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].toArray(arguments);

      typeof args[1] === 'undefined' && (args[1] = '> div.o-form-content > .o-form-fieldset-container');
      return __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].prototype.add.apply(this, args);
    },

    /**
     * Set the focus on the first input in the form
     */
    focus: function focus() {
      var first = this.getInputs().first();

      if (first && first.focus) {
        first.focus();
      }
      return this;
    },

    /**
     * Disable all inputs in the form
     * @deprecated not currently in use
     */
    disable: function disable() {
      this.invoke('disable');
      return this;
    },

    /**
     * Enable all inputs in the form
     * @deprecated not currently in use
     */
    enable: function enable() {
      this.invoke('enable');
    },

    /**
     * Set the max-height for o-form-content class container within the form if a height is provided,
     * otherwise, get its computed inner height
     * @param {Number} the height in pixel to set for class o-form-content
     * @return {Number}
     */
    contentHeight: function contentHeight(height) {
      var content = this.$('.o-form-content');

      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isNumber(height)) {
        content.css('max-height', height);
      } else {
        return content.height();
      }
    },

    /**
     * Get only the input children
     * @return {InputWrapper[]} An underscore wrapped array of {@link InputWrapper} instances
     */
    getInputs: function getInputs() {
      return Object(__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"])(this.filter(function (view) {
        return view instanceof __WEBPACK_IMPORTED_MODULE_13__helpers_InputWrapper__["a" /* default */];
      }));
    }
  });

  /***/
},
/* 58 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__BaseView__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__helpers_FormUtil__ = __webpack_require__(9);

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__BaseView__["default"].extend({
    el: '<span class="o-form-toggle" data-type="header-btn"></span>',

    formTitle: '',

    modelEvents: {
      'change:__edit__': 'toggle'
    },

    initialize: function initialize() {
      this.addButton();
    },

    addButton: function addButton() {
      if (this.model.get('__edit__')) {
        this.add(__WEBPACK_IMPORTED_MODULE_1__helpers_FormUtil__["default"].createReadFormButton({ type: 'cancel' }));
      } else {
        this.add(__WEBPACK_IMPORTED_MODULE_1__helpers_FormUtil__["default"].createReadFormButton({
          type: 'edit',
          formTitle: this.formTitle
        }));
      }
    },

    toggle: function toggle() {
      this.removeChildren();
      this.addButton();
    }
  });

  /***/
},
/* 59 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__BaseView__ = __webpack_require__(1);

  var template = '\
    <div class="okta-form-infobox-error infobox infobox-error" role="alert">\
      <span class="icon error-16"></span>\
      {{#if errorSummary}}\
        <p>{{errorSummary}}</p>\
      {{else}}\
        <p>{{i18n code="oform.errorbanner.title" bundle="courage"}}</p>\
      {{/if}}\
    </div>\
  ';
  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__BaseView__["default"].extend({
    template: template,
    modelEvents: {
      'form:clear-errors': 'remove'
    }
  });

  /***/
},
/* 60 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_StringUtil__ = __webpack_require__(3);

  var FIELD_REGEX = /^([\S]+): (.+)$/;
  /* harmony default export */__webpack_exports__["a"] = {
    /**
     * Helper function that returns the json output of an xhr objext
     * @param  {jqXhr} xhr
     * @return {Object}
     */
    getResponseJSON: function getResponseJSON(xhr) {
      try {
        return xhr.responseJSON || JSON.parse(xhr.responseText);
      } catch (e) {
        return;
      }
    },

    /**
     * Parses an error summary to extract a field name and an error message
     * @param  {String} errorSummary The raw error summary
     * @return {String[]} An array with two members: [field name, error message]
     */
    parseErrorSummary: function parseErrorSummary(errorSummary) {
      var matches = errorSummary.match(FIELD_REGEX);
      // error format is: `fieldName: The field cannot be left blank`

      if (matches) {
        return [matches[1], matches[2]];
      }
    },

    /**
     * Parses an error cause object to extract a field name from property attribute
     * and an error message form errorSummary attribute. It looks to see if there is
     * a custom override/translation for the erorrCause.reason before using the errorSummary
     * @param  {Object} errorCause object
     * @return {String[]} An array with two members: [field name, error message]
     */
    parseErrorCauseObject: function parseErrorCauseObject(errorCause) {
      if (errorCause.property && errorCause.errorSummary) {
        var localizedMsg = __WEBPACK_IMPORTED_MODULE_1__util_StringUtil__["default"].localize(errorCause.reason);
        var apiMsg = errorCause.errorSummary;
        var field = errorCause.property;
        var errorMessage = localizedMsg.indexOf('L10N_ERROR[') === -1 ? localizedMsg : apiMsg;

        return [field, errorMessage];
      }
    },

    parseErrors: function parseErrors(resp) {
      var responseJSON = this.getResponseJSON(resp);

      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(responseJSON && responseJSON.errorCauses || [], function (errorCause) {
        return ('' + errorCause.errorSummary).replace(FIELD_REGEX, '$2');
      });
    },

    /**
     * Parses the response for errors
     * Returns a map of field names > array or error messages
     * Example:
     * ```javascript
     * {
     *   url: ['The field cannot be left blank', 'The field has to be a valid URI'],
     *   name: ['The field cannot be left blank']
     * }
     * ```
     * @param  {Object} resp
     * @return {Object}
     */
    parseFieldErrors: function parseFieldErrors(resp) {
      var responseJSON = this.getResponseJSON(resp);
      var errors = {};

      // xhr error object
      if (responseJSON) {
        /* eslint complexity: [2, 7] */
        __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(responseJSON.errorCauses || [], function (cause) {
          var res = [];

          if (cause.property && cause.errorSummary) {
            res = this.parseErrorCauseObject(cause);
          } else {
            res = this.parseErrorSummary(cause && cause.errorSummary || '');
          }
          if (res) {
            var fieldName = res[0];
            var message = res[1];

            errors[fieldName] || (errors[fieldName] = []);
            errors[fieldName].push(message);
          }
        }, this);
      }
      // validation key/value object
      else if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isObject(resp) && __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(resp)) {
          __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(resp, function (msg, field) {
            errors[field] = [msg];
          });
        }
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].size(errors) ? errors : undefined;
    }
  };

  /***/
},
/* 61 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_Logger__ = __webpack_require__(7);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_Util__ = __webpack_require__(16);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__util_StringUtil__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__BaseView__ = __webpack_require__(1);

  var isABaseView = __WEBPACK_IMPORTED_MODULE_3__util_Util__["default"].isABaseView;
  /**
   * @class InputContainer
   * @private
   *
   * TODO: OKTA-80796
   * Attention: Please change with caution since this is used in other places
   */

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_5__BaseView__["default"].extend({
    attributes: function attributes() {
      return {
        'data-se': 'o-form-input-container'
      };
    },

    className: function className() {
      var className = 'o-form-input';

      if (this.options.wide) {
        className += ' o-form-wide';
      }
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains([1, 2, 3, 4], this.options.multi)) {
        className += ' o-form-multi-input-' + this.options.multi;
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(this.options.input)) {
          var inputGroup = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].find(this.options.input, function (input) {
            return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains(['text+select', 'select+text'], input.options.type);
          });

          inputGroup && (className += ' o-form-multi-input-group-' + this.options.multi);
        }
      }
      return className;
    },

    _getNames: function _getNames() {
      var names = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(this.options.name) ? this.options.name : [this.options.name];
      /*eslint complexity: 0 */

      if (this.options.type === 'group') {
        names.push.apply(names, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].pluck(this.options.input[0].options.params.inputs, 'name'));
      } else if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(this.options.name)) {
        if (this.options.input && this.options.input.options && this.options.input.options.name) {
          names.push(this.options.input.options.name);
        }
      } else if (this.options.input) {
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(this.options.input)) {
          __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(this.options.input, function (inputItem) {
            names.push(inputItem.options.name);
          });
        } else {
          names.push(this.options.input.options.name);
        }
      }
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].uniq(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].compact(names));
    },

    constructor: function constructor() {
      /* eslint max-statements: [2, 18] */
      __WEBPACK_IMPORTED_MODULE_5__BaseView__["default"].apply(this, arguments);

      var explainTop = this.options['explain-top'] && this.options['label-top'];
      if (this.options.input) {
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(this.options.input)) {
          __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(this.options.input, function (inputItem) {
            this.add(inputItem, { prepend: !explainTop });
          }, this);
        } else {
          this.add(this.options.input, { prepend: !explainTop });
        }
      }

      this.__setExplain(this.options);

      var names = this._getNames();

      this.listenTo(this.model, 'form:field-error', function (name, errors) {
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains(names, name)) {
          this.__setError(errors, explainTop);
        }
      });

      this.listenTo(this.model, 'form:clear-errors change:' + names.join(' change:'), this.__clearError);
      this.listenTo(this.model, 'form:clear-error:' + names.join(' form:clear-error:'), this.__clearError);

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this.options, 'autoRender', this)) {
        this.listenTo(this.model, 'change:' + this.options.name, this.render);
      }

      this.__errorState = false;
    },

    /**
     * Populates the explain on the input container (if it exists). There are
     * two ways to use this:
     * 1. Raw text - wraps in the correct html template
     * 2. Custom html
     *    - pass in a View class (preferred)
     *    - pass in an instance of a View
     * Some additional notes:
     * - You can pass a function that returns any of the above
     * - This maintains support for the deprecated "customExplain" property
     *   that was used before. This pattern is superseded by explain, so use
     *   that instead.
     * @private
     */
    __setExplain: function __setExplain(options) {
      var explain = void 0;

      // Deprecated - if you need custom html, use explain instead
      if (options.customExplain) {
        __WEBPACK_IMPORTED_MODULE_1__util_Logger__["default"].warn('Deprecated - use explain instead of customExplain');
        this.add(this.options.customExplain);
        return;
      }

      explain = options.explain;
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(explain) && !isABaseView(explain)) {
        explain = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this.options, 'explain', this);
      }
      if (!explain) {
        return;
      }

      if (isABaseView(explain)) {
        this.template = '<p class="o-form-explain"></p>';
        this.add(explain, '.o-form-explain');
      } else {
        this.template = '<p class="o-form-explain">{{explain}}</p>';
      }
    },

    /**
     * Highlight the input as invalid (validation failed)
     * Adds an explaination message of the error
     * @private
     */
    __setError: function __setError(errors, explainTop) {
      this.__errorState = true;
      this.$el.addClass('o-form-has-errors');

      var errorId = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].uniqueId('input-container-error');
      var tmpl = ['<p id="{{errorId}}" class="okta-form-input-error o-form-input-error o-form-explain" role="alert">', '<span class="icon icon-16 error-16-small" role="img" aria-label="{{iconLabel}}"></span>', '{{text}}', '</p>'].join('');

      var iconLabel = __WEBPACK_IMPORTED_MODULE_4__util_StringUtil__["default"].localize('oform.error.icon.ariaLabel', 'courage'); // 'Error'
      var html = __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__["default"].tpl(tmpl)({
        errorId: errorId,
        iconLabel: iconLabel,
        text: errors.join(', ')
      });

      var $elExplain = this.$('.o-form-explain').not('.o-form-input-error').first();

      if ($elExplain.length && !explainTop) {
        $elExplain.before(html);
      } else {
        this.$el.append(html);
      }

      this.$el.attr('aria-describedby', errorId);
    },

    /**
     * Un-highlight the input and remove explaination text
     * @private
     */
    __clearError: function __clearError() {
      var _this5 = this;

      if (this.__errorState) {
        this.$('.o-form-input-error').remove();
        this.$el.attr('aria-describedby', null);
        this.$el.removeClass('o-form-has-errors');
        this.__errorState = false;
        __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defer(function () {
          _this5.model.trigger('form:resize');
        });
      }
    },

    focus: function focus() {
      this.each(function (view) {
        if (view.focus) {
          return view.focus();
        }
      });

      return this;
    }
  });

  /***/
},
/* 62 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__InputRegistry__ = __webpack_require__(26);
  /* eslint complexity: 0, max-statements: 0 */

  function createInput(Input, options) {
    if (__WEBPACK_IMPORTED_MODULE_1__InputRegistry__["default"].isBaseInput(Input)) {
      return Input.prototype ? new Input(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(options, 'input')) : Input;
    } else {
      return Input;
    }
  }

  function create(options) {
    options = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].clone(options);
    if (options.input) {
      return createInput(options.input, options);
    }
    var Input = __WEBPACK_IMPORTED_MODULE_1__InputRegistry__["default"].get(options);

    if (!Input) {
      throw new Error('unknown input: ' + options.type);
    }
    return createInput(Input, options);
  }

  function supports(options) {
    return !!options.input || !!__WEBPACK_IMPORTED_MODULE_1__InputRegistry__["default"].get(options);
  }

  /* harmony default export */__webpack_exports__["a"] = {
    create: create,
    supports: supports
  };

  /***/
},
/* 63 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_qtip__ = __webpack_require__(27);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_qtip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_qtip__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__BaseView__ = __webpack_require__(1);

  /**
   * @class InputLabel
   * @extends {Okta.View}
   * @private
   * The input's label.
   */
  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_3__BaseView__["default"].extend({
    className: 'okta-form-label o-form-label',

    attributes: {
      'data-se': 'o-form-label'
    },

    /**
     * @constructor
     * @param  {Object} options options hash
     * @param  {String} [options.type] Input type
     * @param  {String|Function} [options.label] Label text
     * @param  {String|Function} [options.sublabel] Sub label text
     * @param  {String|Function} [options.tooltip] Tooltip text
     * @param  {String|Function} [options.inputId] Id of the inputs
     * @param  {String|Function} [options.id] Id of the inputs
     */
    constructor: function constructor(options) {
      /* eslint max-statements: [2, 16] complexity: [2, 7]*/
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(options, { inputId: options.id });
      delete options.id;

      __WEBPACK_IMPORTED_MODULE_3__BaseView__["default"].apply(this, arguments);

      var template = void 0;

      if (this._isLabelView(options.label)) {
        template = '<label for="{{inputId}}"></label>';
      } else if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains(['radio', 'checkbox'], options.type) || !options.label) {
        template = '{{label}}';
      } else {
        //space added in the end of the label to avoid selecting label text with double click in read mode
        template = '<label for="{{inputId}}">{{label}}&nbsp;</label>';
      }
      if (options.sublabel) {
        template += '<span class="o-form-explain">{{sublabel}}</span>';
      }
      if (options.tooltip) {
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isString(options.tooltip)) {
          options.tooltip = {
            text: options.tooltip
          };
        }
        template += '<span class="o-form-tooltip icon-16 icon-only form-help-16" title="{{tooltip.text}}"></span>';
      }
      this.template = __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__["default"].tpl(template);
    },

    getTemplateData: function getTemplateData() {
      var options = { label: '' };

      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(['inputId', 'label', 'sublabel', 'tooltip'], function (option) {
        options[option] = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this.options, option, this);
      }, this);

      return options;
    },

    _isLabelView: function _isLabelView(label) {
      return !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isUndefined(label) && label instanceof __WEBPACK_IMPORTED_MODULE_3__BaseView__["default"];
    },

    postRender: function postRender() {
      var options = this.getTemplateData();

      if (this._isLabelView(options.label)) {
        this.removeChildren();
        this.add(options.label, 'label');
      }

      if (options.tooltip) {
        this.$('.o-form-tooltip').qtip(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({
          style: { classes: 'qtip-custom qtip-shadow' },
          position: {
            my: 'bottom left',
            at: 'top center'
          },
          hide: { fixed: true },
          show: { delay: 0 }
        }, options.tooltip.options));
      }
    }
  });

  /***/
},
/* 64 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__BaseView__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__FormUtil__ = __webpack_require__(9);

  function runCallback(callback, field) {
    callback.apply(this, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].map(field.split(/\s+/), function (field) {
      return this.model.get(field);
    }, this));
  }

  function runIf(fn, ctx) {
    if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isFunction(fn)) {
      fn.call(ctx);
    }
  }

  /**
   * @class InputWrapper
   * @extends Okta.View
   * @private
   * The outer wrapper that warps the label and the input container
   */
  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_1__BaseView__["default"].extend({
    className: function className() {
      var className = 'o-form-fieldset';

      if (this.options['label-top']) {
        className += ' o-form-label-top';
      }

      if (this.options.readOnly) {
        className += ' o-form-read-mode';
      }

      return className;
    },

    attributes: function attributes() {
      return {
        'data-se': this.options['data-se'] || 'o-form-fieldset'
      };
    },

    /**
     * @constructor
     * @param  {Object} options options hash
     * @param  {Object} [options.events]
     * @param  {Object} [options.bindings]
     * @param  {Object} [options.showWhen]
     * @param  {Function} [options.initialize] post initialize callback
     * @param  {Function} [options.render] post render callback
     */
    constructor: function constructor(options) {
      if (options.className) {
        this.inputWrapperClassName = this.className;
        this.optionsClassName = options.className;
        options.className = function () {
          return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'inputWrapperClassName', '') + ' ' + __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].result(this, 'optionsClassName');
        };
      }
      __WEBPACK_IMPORTED_MODULE_1__BaseView__["default"].apply(this, arguments);
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(options.events || {}, function (callback, event) {
        this.listenTo(this.model, event, callback);
      }, this);

      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(options.bindings || {}, function (callback, field) {
        this.listenTo(this.model, __WEBPACK_IMPORTED_MODULE_2__FormUtil__["default"].changeEventString(field.split(/\s+/)), __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].bind(runCallback, this, callback, field));
      }, this);

      __WEBPACK_IMPORTED_MODULE_2__FormUtil__["default"].applyShowWhen(this, options.showWhen);
      __WEBPACK_IMPORTED_MODULE_2__FormUtil__["default"].applyToggleWhen(this, options.toggleWhen);

      runIf(options.initialize, this);
    },

    postRender: function postRender() {
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(this.options.bindings || {}, runCallback, this);
      runIf(this.options.render, this);
    },

    /**
     * @return {InputLabel}
     */
    getLabel: function getLabel() {
      return this.size() > 1 ? this.at(0) : null;
    },
    /**
     * @deprecated ambiguous naming, use {@link #getInputContainer}
     */
    getInput: function getInput() {
      return this.getInputContainer();
    },

    /**
     * @return {InputContainer}
     */
    getInputContainer: function getInputContainer() {
      return this.at(this.size() > 1 ? 1 : 0);
    },

    /**
     * @return {BaseInput[]}
     */
    getInputs: function getInputs() {
      return this.getInputContainer().toArray();
    },

    focus: function focus() {
      return this.getInput().focus();
    }
  });

  /***/
},
/* 65 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_StringUtil__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__inputs_BooleanSelect__ = __webpack_require__(66);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__inputs_TextBoxSet__ = __webpack_require__(68);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__EnumTypeHelper__ = __webpack_require__(18);
  /* eslint max-statements: 0, max-params: 0 */

  // Maps each __displayType__ to a basic set of inputOptions.
  function defaultOptions(property) {
    var type = property.get('__displayType__');
    var values = property.get('__possibleValues__');
    var name = property.get('name');
    var title = property.get('title');
    /* eslint complexity: [2, 24] */

    var inputOptions = {
      type: 'text',
      name: name,
      label: title || name
    };

    // @see customOptions for enum complex "object" type,
    // a.k.a "object" or "arrayofobject" type has enum values defined.
    // Other cases (e.g., nested object type) are not support yet.

    switch (type) {
      case 'arrayofstring':
        inputOptions.input = __WEBPACK_IMPORTED_MODULE_3__inputs_TextBoxSet__["a" /* default */];
        inputOptions.params = { itemType: 'string' };
        break;
      case 'arrayofnumber':
        inputOptions.input = __WEBPACK_IMPORTED_MODULE_3__inputs_TextBoxSet__["a" /* default */];
        inputOptions.params = { itemType: 'number' };
        break;
      case 'arrayofinteger':
        inputOptions.input = __WEBPACK_IMPORTED_MODULE_3__inputs_TextBoxSet__["a" /* default */];
        inputOptions.params = { itemType: 'integer' };
        break;
      case 'arrayofobject':
        inputOptions.input = __WEBPACK_IMPORTED_MODULE_3__inputs_TextBoxSet__["a" /* default */];
        inputOptions.params = { itemType: property.get('items').type };
        break;
      case 'arrayofref-id':
        inputOptions.input = __WEBPACK_IMPORTED_MODULE_3__inputs_TextBoxSet__["a" /* default */];
        inputOptions.params = { itemType: property.get('items').format };
        break;
      case 'boolean':
        inputOptions.input = __WEBPACK_IMPORTED_MODULE_2__inputs_BooleanSelect__["a" /* default */];
        break;
      case 'integer':
      case 'number':
        inputOptions.to = convertStringToNumber;
        break;
      case 'reference':
        inputOptions.type = 'select';
        inputOptions.options = getChoices(values);
        break;
      case 'image':
        inputOptions.readOnly = true;
        inputOptions.from = function (value) {
          return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isEmpty(value) ? '' : __WEBPACK_IMPORTED_MODULE_1__util_StringUtil__["default"].localize('user.profile.image.image_set', 'courage'); //TODO
        };
        break;
      case 'password':
        inputOptions.type = 'password';
        break;
      case 'date':
        inputOptions.type = 'date';
        break;
      case 'uri':
      case 'country-code':
      case 'country_code':
      case 'language-code':
      case 'language_code':
      case 'email':
      case 'locale':
      case 'timezone':
      case 'string':
      case 'object':
        //default input options
        break;
      default:
        throw new Error('unknown type: ' + type);
    }
    return inputOptions;
  }

  // Sets nonbasic inputOptions, such as an array with possible values
  function customOptions(property) {
    var inputOptions = {};
    var name = property.get('name');
    var type = property.get('__displayType__');
    var values = property.get('__possibleValues__');
    var prefix = property.get('__fieldNamePrefix__');

    if (prefix) {
      inputOptions.name = prefix + name;
      inputOptions.errorField = name;
    }

    if (property.isEnumType()) {
      var configs = {
        displayType: type,
        title: property.get('title'),
        enumValues: property.getEnumValues()
      };

      inputOptions = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend({}, __WEBPACK_IMPORTED_MODULE_4__EnumTypeHelper__["a" /* default */].getEnumInputOptions(configs), inputOptions);
    } else if (isArray(type) && values) {
      inputOptions.type = 'checkboxset';
      inputOptions.input = null;
      inputOptions.options = getChoices(values);
    }

    return inputOptions;
  }

  function convertStringToNumber(string) {
    var number = __WEBPACK_IMPORTED_MODULE_1__util_StringUtil__["default"].parseFloat(string);

    return string === '' ? null : number;
  }

  function isArray(type) {
    return type && type.indexOf('array') >= 0;
  }

  // converts possibleValues to choices
  // [a, b, c] => {a: a, b: b, c: c}
  function getChoices(values) {
    return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].object(values, values);
  }

  // A schema property may have an objectName either
  // at the root level or nested in the items object
  function getObjectName(schemaProp) {
    var items = schemaProp.get('items');

    if (items) {
      return items.objectName;
    } else {
      return schemaProp.get('objectName');
    }
  }

  function augmentSchemaProp(schemaProp, possibleValues, profile) {
    var name = schemaProp.get('name');
    var prefix = profile['__nestedProperty__'];
    var defaultValues = possibleValues[name];
    var userValues = profile.get(name);
    var //TODO: Not implemented
    fixedValues = void 0;
    var values = void 0;

    // If API responds with a field name that differs from the form-field name
    // example: Model's 'profile.username' vs. server's 'username'
    if (prefix) {
      schemaProp.set('__fieldNamePrefix__', prefix);
    }

    // case 1: objectName - fixed list of values are set for the input
    fixedValues = possibleValues[getObjectName(schemaProp)];

    // case 2: name only - default list of values are provided, user can add more
    // TODO: this case does not yet exist, so it is not tested
    if (defaultValues && userValues) {
      defaultValues = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].union(defaultValues, userValues);
    }

    // If both fixed and default values exist,
    // take the fixed values unless they are empty
    if (fixedValues && fixedValues.length) {
      values = fixedValues;
    } else if (defaultValues && defaultValues.length) {
      values = defaultValues;
    }

    schemaProp.set('__possibleValues__', values);
  }

  function augmentSchemaProps(schemaProps, possibleValues, profile) {
    schemaProps.each(function (schemaProp) {
      augmentSchemaProp(schemaProp, possibleValues, profile);
    });

    return schemaProps;
  }

  /**
   * Remove invalid schema properties from a collection
   *
   * @param {SchemaProperties Collection} [properties] A collection of schema properties
   * @param {Object} [values] An object of the form { key: [value1, value2]}
   * @return {Array} An array of valid schema models, this can be used to reset
   * a schema properties collection for example.
   * @private
   */
  function cleanSchema(properties, values) {
    return properties.filter(function (schema) {
      return isValidSchemaProp(schema, values);
    });
  }

  /**
   * Checks the validity of a schema property.
   *
   * @param {SchemaProperty} [schemaProp] A schema property backbone model
   * @param {Object} [values] An object of the form { key: [value1, value2]}
   * @return {Boolean} true/false
   * @private
   */
  function isValidSchemaProp(schemaProp, values) {
    var objectName = getObjectName(schemaProp);
    var results = values[objectName];

    // a schema property that references an empty list of values
    // Im looking at you, google apps.
    if (objectName && Object(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"])(results).isEmpty()) {
      return false;
    }
    return true;
  }

  /* harmony default export */__webpack_exports__["default"] = {
    /**
     * Creates the options hash for BaseForm.addInput from a prepared schema
     * property.
     *
     * @param {Okta.Model} [preparedSchemaProp] A schema property backbone model
     * that has been standardized by the prepareSchema method.
     * @return {Object} An object containing all of the options needed by
     * BaseForm's addInput()
     */
    createInputOptions: function createInputOptions(preparedSchemaProp) {
      var custom = customOptions(preparedSchemaProp);
      var standard = defaultOptions(preparedSchemaProp);

      // underscore did not support nested extend
      // https://github.com/jashkenas/underscore/issues/162
      if (custom.params && standard.params) {
        custom.params = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(custom.params, standard.params);
      }
      return __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(custom, standard);
    },

    hasValidSchemaProps: function hasValidSchemaProps(schemaProps, possibleValues) {
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isEmpty(schemaProps)) {
        return false;
      } else {
        var validSchema = cleanSchema(schemaProps, possibleValues);

        return !!validSchema.length;
      }
    },

    /**
     * This method is responsible for preparing a collection for the form
     * factory to use by putting all of the information to create an input
     * into the schema property and removing invalid properties.
     * The typical UD form takes 3 models:
     * The data model has the input values.
     * The schema model describes which input to use, such as a textbox or a checkbox.
     * The possible values model provide a list of default options to display, for example in a drop down menu.
     *
     * @param {SchemaProperty Collection} [schemaProps] A schema property backbone model.
     * @param {Object} [possibleValues] An object of the form { key: [value1, value2]}
     * @param {Okta.Model} [profile] A backbone model containing the property described by the schema property.
     * @return {SchemaProperty Collection} A schema property collection with standardized models.
     * The standard schema model adds a couple of additional private properties to
     * allow the form factory to reference lookup values or name prefixes without going to a second model.
     */
    prepareSchema: function prepareSchema(schemaProps, possibleValues, profile) {
      schemaProps.reset(cleanSchema(schemaProps, possibleValues));
      return augmentSchemaProps(schemaProps, possibleValues, profile);
    },

    /**
     * `prepareSchema` will reset the property list which may not be necessary at some case.
     * like when setting default value for schema properties.
     * (more detail about such case @see wiki UX, App+Entitlements+for+Provisioning)
     *
     * @param { }
     * @return {String}
     */

    augmentSchemaProps: augmentSchemaProps,

    augmentSchemaProp: augmentSchemaProp
  };

  /***/
},
/* 66 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__Select__ = __webpack_require__(28);

  var options = {
    undefined: 'undefined',
    true: 'true',
    false: 'false'
  };

  var from = function from(val) {
    if (val) {
      return 'true';
    }
    if (val === false) {
      return 'false';
    }
    return 'undefined';
  };

  var to = function to(val) {
    switch (val) {
      case 'undefined':
        return null;
      case 'true':
        return true;
      case 'false':
        return false;
      default:
        return null;
    }
  };

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__Select__["default"].extend({
    initialize: function initialize() {
      this.options.options = options;
      this.options.from = from;
      this.options.to = to;
    }
  });

  /***/
},
/* 67 */
/***/function (module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; // Chosen, a Select Box Enhancer for jQuery and Prototype
  // by Patrick Filler for Harvest, http://getharvest.com
  //
  // Version 0.11.1
  // Full source at https://github.com/harvesthq/chosen
  // Copyright (c) 2011 Harvest http://getharvest.com

  // MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
  // This file is generated by `grunt build`, do not edit it by hand.

  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (jQuery) {
    (function () {
      var SelectParser;

      SelectParser = function () {
        function SelectParser() {
          this.options_index = 0;
          this.parsed = [];
        }

        SelectParser.prototype.add_node = function (child) {
          if (child.nodeName.toUpperCase() === "OPTGROUP") {
            return this.add_group(child);
          } else {
            return this.add_option(child);
          }
        };

        SelectParser.prototype.add_group = function (group) {
          var group_position, option, _i, _len, _ref, _results;

          group_position = this.parsed.length;
          this.parsed.push({
            array_index: group_position,
            group: true,
            label: group.label,
            children: 0,
            disabled: group.disabled
          });
          _ref = group.childNodes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            option = _ref[_i];
            _results.push(this.add_option(option, group_position, group.disabled));
          }
          return _results;
        };

        SelectParser.prototype.add_option = function (option, group_position, group_disabled) {
          if (option.nodeName.toUpperCase() === "OPTION") {
            if (option.text !== "") {
              if (group_position != null) {
                this.parsed[group_position].children += 1;
              }
              this.parsed.push({
                array_index: this.parsed.length,
                options_index: this.options_index,
                value: option.value,
                text: option.text,
                html: option.innerHTML,
                selected: option.selected,
                disabled: group_disabled === true ? group_disabled : option.disabled,
                group_array_index: group_position,
                classes: option.className,
                style: option.style.cssText
              });
            } else {
              this.parsed.push({
                array_index: this.parsed.length,
                options_index: this.options_index,
                empty: true
              });
            }
            return this.options_index += 1;
          }
        };

        return SelectParser;
      }();

      SelectParser.select_to_array = function (select) {
        var child, parser, _i, _len, _ref;

        parser = new SelectParser();
        _ref = select.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          parser.add_node(child);
        }
        return parser.parsed;
      };

      this.SelectParser = SelectParser;
    }).call(this);

    (function () {
      var AbstractChosen, root;

      root = this;

      AbstractChosen = function () {
        function AbstractChosen(form_field, options) {
          this.form_field = form_field;
          this.options = options != null ? options : {};
          if (!AbstractChosen.browser_is_supported()) {
            return;
          }
          this.is_multiple = this.form_field.multiple;
          this.set_default_text();
          this.set_default_values();
          this.setup();
          this.set_up_html();
          this.register_observers();
          this.finish_setup();
        }

        AbstractChosen.prototype.set_default_values = function () {
          var _this = this;

          this.click_test_action = function (evt) {
            return _this.test_active_click(evt);
          };
          this.activate_action = function (evt) {
            return _this.activate_field(evt);
          };
          this.active_field = false;
          this.mouse_on_container = false;
          this.results_showing = false;
          this.result_highlighted = null;
          this.result_single_selected = null;
          this.allow_single_deselect = this.options.allow_single_deselect != null && this.form_field.options[0] != null && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
          this.disable_search_threshold = this.options.disable_search_threshold || 0;
          this.disable_search = this.options.disable_search || false;
          this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
          this.search_contains = this.options.search_contains || false;
          this.single_backstroke_delete = this.options.single_backstroke_delete || false;
          this.max_selected_options = this.options.max_selected_options || Infinity;
          return this.inherit_select_classes = this.options.inherit_select_classes || false;
        };

        AbstractChosen.prototype.set_default_text = function () {
          if (this.form_field.getAttribute("data-placeholder")) {
            this.default_text = this.form_field.getAttribute("data-placeholder");
          } else if (this.is_multiple) {
            this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
          } else {
            this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
          }
          return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
        };

        AbstractChosen.prototype.mouse_enter = function () {
          return this.mouse_on_container = true;
        };

        AbstractChosen.prototype.mouse_leave = function () {
          return this.mouse_on_container = false;
        };

        AbstractChosen.prototype.input_focus = function (evt) {
          var _this = this;

          if (this.is_multiple) {
            if (!this.active_field) {
              return setTimeout(function () {
                return _this.container_mousedown();
              }, 50);
            }
          } else {
            if (!this.active_field) {
              return this.activate_field();
            }
          }
        };

        AbstractChosen.prototype.input_blur = function (evt) {
          var _this = this;

          if (!this.mouse_on_container) {
            this.active_field = false;
            return setTimeout(function () {
              return _this.blur_test();
            }, 100);
          }
        };

        AbstractChosen.prototype.result_add_option = function (option) {
          var classes, style;

          option.dom_id = this.container_id + "_o_" + option.array_index;
          classes = [];
          if (!option.disabled && !(option.selected && this.is_multiple)) {
            classes.push("active-result");
          }
          if (option.disabled && !(option.selected && this.is_multiple)) {
            classes.push("disabled-result");
          }
          if (option.selected) {
            classes.push("result-selected");
          }
          if (option.group_array_index != null) {
            classes.push("group-option");
          }
          if (option.classes !== "") {
            classes.push(option.classes);
          }
          style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
          return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
        };

        AbstractChosen.prototype.results_update_field = function () {
          this.set_default_text();
          if (!this.is_multiple) {
            this.results_reset_cleanup();
          }
          this.result_clear_highlight();
          this.result_single_selected = null;
          return this.results_build();
        };

        AbstractChosen.prototype.results_toggle = function () {
          if (this.results_showing) {
            return this.results_hide();
          } else {
            return this.results_show();
          }
        };

        AbstractChosen.prototype.results_search = function (evt) {
          if (this.results_showing) {
            return this.winnow_results();
          } else {
            return this.results_show();
          }
        };

        AbstractChosen.prototype.choices_count = function () {
          var option, _i, _len, _ref;

          if (this.selected_option_count != null) {
            return this.selected_option_count;
          }
          this.selected_option_count = 0;
          _ref = this.form_field.options;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            option = _ref[_i];
            if (option.selected) {
              this.selected_option_count += 1;
            }
          }
          return this.selected_option_count;
        };

        AbstractChosen.prototype.choices_click = function (evt) {
          evt.preventDefault();
          if (!(this.results_showing || this.is_disabled)) {
            return this.results_show();
          }
        };

        AbstractChosen.prototype.keyup_checker = function (evt) {
          var stroke, _ref;

          stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
          this.search_field_scale();
          switch (stroke) {
            case 8:
              if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
                return this.keydown_backstroke();
              } else if (!this.pending_backstroke) {
                this.result_clear_highlight();
                return this.results_search();
              }
              break;
            case 13:
              evt.preventDefault();
              if (this.results_showing) {
                return this.result_select(evt);
              }
              break;
            case 27:
              if (this.results_showing) {
                this.results_hide();
              }
              return true;
            case 9:
            case 38:
            case 40:
            case 16:
            case 91:
            case 17:
              break;
            default:
              return this.results_search();
          }
        };

        AbstractChosen.prototype.generate_field_id = function () {
          var new_id;

          new_id = this.generate_random_id();
          this.form_field.id = new_id;
          return new_id;
        };

        AbstractChosen.prototype.generate_random_char = function () {
          var chars, newchar, rand;

          chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
          rand = Math.floor(Math.random() * chars.length);
          return newchar = chars.substring(rand, rand + 1);
        };

        AbstractChosen.prototype.container_width = function () {
          if (this.options.width != null) {
            return this.options.width;
          } else {
            return "" + this.form_field.offsetWidth + "px";
          }
        };

        AbstractChosen.browser_is_supported = function () {
          var _ref;

          if (window.navigator.appName === "Microsoft Internet Explorer") {
            return null !== (_ref = document.documentMode) && _ref >= 8;
          }
          return true;
        };

        AbstractChosen.default_multiple_text = "Select Some Options";

        AbstractChosen.default_single_text = "Select an Option";

        AbstractChosen.default_no_result_text = "No results match";

        return AbstractChosen;
      }();

      root.AbstractChosen = AbstractChosen;
    }).call(this);

    (function () {
      var $,
          Chosen,
          root,
          _ref,
          __hasProp = {}.hasOwnProperty,
          __extends = function __extends(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key)) child[key] = parent[key];
        }function ctor() {
          this.constructor = child;
        }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
      };

      root = this;

      // OKTA-93521 - plugin assumes root is global scope
      var AbstractChosen = root.AbstractChosen;

      $ = jQuery;

      $.fn.extend({
        chosen: function chosen(options) {
          if (!AbstractChosen.browser_is_supported()) {
            return this;
          }
          return this.each(function (input_field) {
            var $this;

            $this = $(this);
            if (!$this.hasClass("chzn-done")) {
              return $this.data('chosen', new Chosen(this, options));
            }
          });
        }
      });

      Chosen = function (_super) {
        __extends(Chosen, _super);

        function Chosen() {
          _ref = Chosen.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        Chosen.prototype.setup = function () {
          this.form_field_jq = $(this.form_field);
          this.current_selectedIndex = this.form_field.selectedIndex;
          return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
        };

        Chosen.prototype.finish_setup = function () {
          return this.form_field_jq.addClass("chzn-done");
        };

        Chosen.prototype.set_up_html = function () {
          var container_classes, container_props;

          this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, '_') : this.generate_field_id();
          this.container_id += "_chzn";
          container_classes = ["chzn-container"];
          container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
          if (this.inherit_select_classes && this.form_field.className) {
            container_classes.push(this.form_field.className);
          }
          if (this.is_rtl) {
            container_classes.push("chzn-rtl");
          }
          container_props = {
            'id': this.container_id,
            'class': container_classes.join(' '),
            'style': "width: " + this.container_width() + ";",
            'title': this.form_field.title
          };
          this.container = $("<div />", container_props);
          if (this.is_multiple) {
            this.container.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop"><ul class="chzn-results"></ul></div>');
          } else {
            this.container.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
          }
          this.form_field_jq.hide().after(this.container);
          this.dropdown = this.container.find('div.chzn-drop').first();
          this.search_field = this.container.find('input').first();
          this.search_results = this.container.find('ul.chzn-results').first();
          this.search_field_scale();
          this.search_no_results = this.container.find('li.no-results').first();
          if (this.is_multiple) {
            this.search_choices = this.container.find('ul.chzn-choices').first();
            this.search_container = this.container.find('li.search-field').first();
          } else {
            this.search_container = this.container.find('div.chzn-search').first();
            this.selected_item = this.container.find('.chzn-single').first();
          }
          this.results_build();
          this.set_tab_index();
          this.set_label_behavior();
          return this.form_field_jq.trigger("liszt:ready", {
            chosen: this
          });
        };

        Chosen.prototype.register_observers = function () {
          var _this = this;

          this.container.mousedown(function (evt) {
            _this.container_mousedown(evt);
          });
          this.container.mouseup(function (evt) {
            _this.container_mouseup(evt);
          });
          this.container.mouseenter(function (evt) {
            _this.mouse_enter(evt);
          });
          this.container.mouseleave(function (evt) {
            _this.mouse_leave(evt);
          });
          this.search_results.mouseup(function (evt) {
            _this.search_results_mouseup(evt);
          });
          this.search_results.mouseover(function (evt) {
            _this.search_results_mouseover(evt);
          });
          this.search_results.mouseout(function (evt) {
            _this.search_results_mouseout(evt);
          });
          this.search_results.bind('mousewheel DOMMouseScroll', function (evt) {
            _this.search_results_mousewheel(evt);
          });
          this.form_field_jq.bind("liszt:updated", function (evt) {
            _this.results_update_field(evt);
          });
          this.form_field_jq.bind("liszt:activate", function (evt) {
            _this.activate_field(evt);
          });
          this.form_field_jq.bind("liszt:open", function (evt) {
            _this.container_mousedown(evt);
          });
          this.search_field.blur(function (evt) {
            _this.input_blur(evt);
          });
          this.search_field.keyup(function (evt) {
            _this.keyup_checker(evt);
          });
          this.search_field.keydown(function (evt) {
            _this.keydown_checker(evt);
          });
          this.search_field.focus(function (evt) {
            _this.input_focus(evt);
          });
          if (this.is_multiple) {
            return this.search_choices.click(function (evt) {
              _this.choices_click(evt);
            });
          } else {
            return this.container.click(function (evt) {
              evt.preventDefault();
            });
          }
        };

        Chosen.prototype.search_field_disabled = function () {
          this.is_disabled = this.form_field_jq[0].disabled;
          if (this.is_disabled) {
            this.container.addClass('chzn-disabled');
            this.search_field[0].disabled = true;
            if (!this.is_multiple) {
              this.selected_item.unbind("focus", this.activate_action);
            }
            return this.close_field();
          } else {
            this.container.removeClass('chzn-disabled');
            this.search_field[0].disabled = false;
            if (!this.is_multiple) {
              return this.selected_item.bind("focus", this.activate_action);
            }
          }
        };

        Chosen.prototype.container_mousedown = function (evt) {
          if (!this.is_disabled) {
            if (evt && evt.type === "mousedown" && !this.results_showing) {
              evt.preventDefault();
            }
            if (!(evt != null && $(evt.target).hasClass("search-choice-close"))) {
              if (!this.active_field) {
                if (this.is_multiple) {
                  this.search_field.val("");
                }
                $(document).click(this.click_test_action);
                this.results_show();
              } else if (!this.is_multiple && evt && ($(evt.target)[0] === this.selected_item[0] || $(evt.target).parents("a.chzn-single").length)) {
                evt.preventDefault();
                this.results_toggle();
              }
              return this.activate_field();
            }
          }
        };

        Chosen.prototype.container_mouseup = function (evt) {
          if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
            return this.results_reset(evt);
          }
        };

        Chosen.prototype.search_results_mousewheel = function (evt) {
          var delta, _ref1, _ref2;

          delta = -((_ref1 = evt.originalEvent) != null ? _ref1.wheelDelta : void 0) || ((_ref2 = evt.originialEvent) != null ? _ref2.detail : void 0);
          if (delta != null) {
            evt.preventDefault();
            if (evt.type === 'DOMMouseScroll') {
              delta = delta * 40;
            }
            return this.search_results.scrollTop(delta + this.search_results.scrollTop());
          }
        };

        Chosen.prototype.blur_test = function (evt) {
          if (!this.active_field && this.container.hasClass("chzn-container-active")) {
            return this.close_field();
          }
        };

        Chosen.prototype.close_field = function () {
          $(document).unbind("click", this.click_test_action);
          this.active_field = false;
          this.results_hide();
          this.container.removeClass("chzn-container-active");
          this.clear_backstroke();
          this.show_search_field_default();
          return this.search_field_scale();
        };

        Chosen.prototype.activate_field = function () {
          this.container.addClass("chzn-container-active");
          this.active_field = true;
          this.search_field.val(this.search_field.val());
          return this.search_field.focus();
        };

        Chosen.prototype.test_active_click = function (evt) {
          if ($(evt.target).parents('#' + this.container_id).length) {
            return this.active_field = true;
          } else {
            return this.close_field();
          }
        };

        Chosen.prototype.results_build = function () {
          var content, data, _i, _len, _ref1;

          this.parsing = true;
          this.selected_option_count = null;
          this.results_data = root.SelectParser.select_to_array(this.form_field);
          if (this.is_multiple) {
            this.search_choices.find("li.search-choice").remove();
          } else if (!this.is_multiple) {
            this.selected_item.addClass("chzn-default").find("span").text(this.default_text);
            if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
              this.search_field[0].readOnly = true;
              this.container.addClass("chzn-container-single-nosearch");
            } else {
              this.search_field[0].readOnly = false;
              this.container.removeClass("chzn-container-single-nosearch");
            }
          }
          content = '';
          _ref1 = this.results_data;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            data = _ref1[_i];
            if (data.group) {
              content += this.result_add_group(data);
            } else if (!data.empty) {
              content += this.result_add_option(data);
              if (data.selected && this.is_multiple) {
                this.choice_build(data);
              } else if (data.selected && !this.is_multiple) {
                this.selected_item.removeClass("chzn-default").find("span").text(data.text);
                if (this.allow_single_deselect) {
                  this.single_deselect_control_build();
                }
              }
            }
          }
          this.search_field_disabled();
          this.show_search_field_default();
          this.search_field_scale();
          this.search_results.html(content);
          return this.parsing = false;
        };

        Chosen.prototype.result_add_group = function (group) {
          group.dom_id = this.container_id + "_g_" + group.array_index;
          return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
        };

        Chosen.prototype.result_do_highlight = function (el) {
          var high_bottom, high_top, maxHeight, visible_bottom, visible_top;

          if (el.length) {
            this.result_clear_highlight();
            this.result_highlight = el;
            this.result_highlight.addClass("highlighted");
            maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
            visible_top = this.search_results.scrollTop();
            visible_bottom = maxHeight + visible_top;
            high_top = this.result_highlight.position().top + this.search_results.scrollTop();
            high_bottom = high_top + this.result_highlight.outerHeight();
            if (high_bottom >= visible_bottom) {
              return this.search_results.scrollTop(high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0);
            } else if (high_top < visible_top) {
              return this.search_results.scrollTop(high_top);
            }
          }
        };

        Chosen.prototype.result_clear_highlight = function () {
          if (this.result_highlight) {
            this.result_highlight.removeClass("highlighted");
          }
          return this.result_highlight = null;
        };

        Chosen.prototype.results_show = function () {
          if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
            this.form_field_jq.trigger("liszt:maxselected", {
              chosen: this
            });
            return false;
          }
          this.container.addClass("chzn-with-drop");
          this.form_field_jq.trigger("liszt:showing_dropdown", {
            chosen: this
          });
          this.results_showing = true;
          this.search_field.focus();
          this.search_field.val(this.search_field.val());
          return this.winnow_results();
        };

        Chosen.prototype.results_hide = function () {
          if (this.results_showing) {
            this.result_clear_highlight();
            this.container.removeClass("chzn-with-drop");
            this.form_field_jq.trigger("liszt:hiding_dropdown", {
              chosen: this
            });
          }
          return this.results_showing = false;
        };

        Chosen.prototype.set_tab_index = function (el) {
          var ti;

          if (this.form_field_jq.attr("tabindex")) {
            ti = this.form_field_jq.attr("tabindex");
            this.form_field_jq.attr("tabindex", -1);
            return this.search_field.attr("tabindex", ti);
          }
        };

        Chosen.prototype.set_label_behavior = function () {
          var _this = this;

          this.form_field_label = this.form_field_jq.parents("label");
          if (!this.form_field_label.length && this.form_field.id.length) {
            this.form_field_label = $("label[for='" + this.form_field.id + "']");
          }
          if (this.form_field_label.length > 0) {
            return this.form_field_label.click(function (evt) {
              if (_this.is_multiple) {
                return _this.container_mousedown(evt);
              } else {
                return _this.activate_field();
              }
            });
          }
        };

        Chosen.prototype.show_search_field_default = function () {
          if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
            this.search_field.val(this.default_text);
            return this.search_field.addClass("default");
          } else {
            this.search_field.val("");
            return this.search_field.removeClass("default");
          }
        };

        Chosen.prototype.search_results_mouseup = function (evt) {
          var target;

          target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
          if (target.length) {
            this.result_highlight = target;
            this.result_select(evt);
            return this.search_field.focus();
          }
        };

        Chosen.prototype.search_results_mouseover = function (evt) {
          var target;

          target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
          if (target) {
            return this.result_do_highlight(target);
          }
        };

        Chosen.prototype.search_results_mouseout = function (evt) {
          if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
            return this.result_clear_highlight();
          }
        };

        Chosen.prototype.choice_build = function (item) {
          var choice,
              close_link,
              _this = this;

          choice = $('<li />', {
            "class": "search-choice"
          }).html("<span>" + item.html + "</span>");
          if (item.disabled) {
            choice.addClass('search-choice-disabled');
          } else {
            close_link = $('<a />', {
              href: '#',
              "class": 'search-choice-close',
              rel: item.array_index
            });
            close_link.click(function (evt) {
              return _this.choice_destroy_link_click(evt);
            });
            choice.append(close_link);
          }
          return this.search_container.before(choice);
        };

        Chosen.prototype.choice_destroy_link_click = function (evt) {
          evt.preventDefault();
          evt.stopPropagation();
          if (!this.is_disabled) {
            return this.choice_destroy($(evt.target));
          }
        };

        Chosen.prototype.choice_destroy = function (link) {
          if (this.result_deselect(link.attr("rel"))) {
            this.show_search_field_default();
            if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
              this.results_hide();
            }
            link.parents('li').first().remove();
            return this.search_field_scale();
          }
        };

        Chosen.prototype.results_reset = function () {
          this.form_field.options[0].selected = true;
          this.selected_option_count = null;
          this.selected_item.find("span").text(this.default_text);
          if (!this.is_multiple) {
            this.selected_item.addClass("chzn-default");
          }
          this.show_search_field_default();
          this.results_reset_cleanup();
          this.form_field_jq.trigger("change");
          if (this.active_field) {
            return this.results_hide();
          }
        };

        Chosen.prototype.results_reset_cleanup = function () {
          this.current_selectedIndex = this.form_field.selectedIndex;
          return this.selected_item.find("abbr").remove();
        };

        Chosen.prototype.result_select = function (evt) {
          var high, high_id, item, position;

          if (this.result_highlight) {
            high = this.result_highlight;
            high_id = high.attr("id");
            this.result_clear_highlight();
            if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
              this.form_field_jq.trigger("liszt:maxselected", {
                chosen: this
              });
              return false;
            }
            if (this.is_multiple) {
              high.removeClass("active-result");
            } else {
              this.search_results.find(".result-selected").removeClass("result-selected");
              this.result_single_selected = high;
              this.selected_item.removeClass("chzn-default");
            }
            high.addClass("result-selected");
            position = high_id.substr(high_id.lastIndexOf("_") + 1);
            item = this.results_data[position];
            item.selected = true;
            this.form_field.options[item.options_index].selected = true;
            this.selected_option_count = null;
            if (this.is_multiple) {
              this.choice_build(item);
            } else {
              this.selected_item.find("span").first().text(item.text);
              if (this.allow_single_deselect) {
                this.single_deselect_control_build();
              }
            }
            if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
              this.results_hide();
            }
            this.search_field.val("");
            if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
              this.form_field_jq.trigger("change", {
                'selected': this.form_field.options[item.options_index].value
              });
            }
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.search_field_scale();
          }
        };

        Chosen.prototype.result_activate = function (el, option) {
          if (option.disabled) {
            return el.addClass("disabled-result");
          } else if (this.is_multiple && option.selected) {
            return el.addClass("result-selected");
          } else {
            return el.addClass("active-result");
          }
        };

        Chosen.prototype.result_deactivate = function (el) {
          return el.removeClass("active-result result-selected disabled-result");
        };

        Chosen.prototype.result_deselect = function (pos) {
          var result, result_data;

          result_data = this.results_data[pos];
          if (!this.form_field.options[result_data.options_index].disabled) {
            result_data.selected = false;
            this.form_field.options[result_data.options_index].selected = false;
            this.selected_option_count = null;
            result = $("#" + this.container_id + "_o_" + pos);
            result.removeClass("result-selected").addClass("active-result").show();
            this.result_clear_highlight();
            this.winnow_results();
            this.form_field_jq.trigger("change", {
              deselected: this.form_field.options[result_data.options_index].value
            });
            this.search_field_scale();
            return true;
          } else {
            return false;
          }
        };

        Chosen.prototype.single_deselect_control_build = function () {
          if (!this.allow_single_deselect) {
            return;
          }
          if (!this.selected_item.find("abbr").length) {
            this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
          }
          return this.selected_item.addClass("chzn-single-with-deselect");
        };

        Chosen.prototype.winnow_results = function () {
          var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len1, _ref1;

          this.no_results_clear();
          results = 0;
          searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
          regexAnchor = this.search_contains ? "" : "^";
          regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
          zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
          _ref1 = this.results_data;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            option = _ref1[_i];
            if (!option.empty) {
              if (option.group) {
                $('#' + option.dom_id).css('display', 'none');
              } else {
                found = false;
                result_id = option.dom_id;
                result = $("#" + result_id);
                if (regex.test(option.html)) {
                  found = true;
                  results += 1;
                } else if (this.enable_split_word_search && (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0)) {
                  parts = option.html.replace(/\[|\]/g, "").split(" ");
                  if (parts.length) {
                    for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
                      part = parts[_j];
                      if (regex.test(part)) {
                        found = true;
                        results += 1;
                      }
                    }
                  }
                }
                if (found) {
                  if (searchText.length) {
                    startpos = option.html.search(zregex);
                    text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                    text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
                  } else {
                    text = option.html;
                  }
                  result.html(text);
                  this.result_activate(result, option);
                  if (option.group_array_index != null) {
                    $("#" + this.results_data[option.group_array_index].dom_id).css('display', 'list-item');
                  }
                } else {
                  if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
                    this.result_clear_highlight();
                  }
                  this.result_deactivate(result);
                }
              }
            }
          }
          if (results < 1 && searchText.length) {
            return this.no_results(searchText);
          } else {
            return this.winnow_results_set_highlight();
          }
        };

        Chosen.prototype.winnow_results_set_highlight = function () {
          var do_high, selected_results;

          if (!this.result_highlight) {
            selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
            do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
            if (do_high != null) {
              return this.result_do_highlight(do_high);
            }
          }
        };

        Chosen.prototype.no_results = function (terms) {
          var no_results_html;

          no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
          no_results_html.find("span").first().html(terms);
          return this.search_results.append(no_results_html);
        };

        Chosen.prototype.no_results_clear = function () {
          return this.search_results.find(".no-results").remove();
        };

        Chosen.prototype.keydown_arrow = function () {
          var next_sib;

          if (this.results_showing && this.result_highlight) {
            next_sib = this.result_highlight.nextAll("li.active-result").first();
            if (next_sib) {
              return this.result_do_highlight(next_sib);
            }
          } else {
            return this.results_show();
          }
        };

        Chosen.prototype.keyup_arrow = function () {
          var prev_sibs;

          if (!this.results_showing && !this.is_multiple) {
            return this.results_show();
          } else if (this.result_highlight) {
            prev_sibs = this.result_highlight.prevAll("li.active-result");
            if (prev_sibs.length) {
              return this.result_do_highlight(prev_sibs.first());
            } else {
              if (this.choices_count() > 0) {
                this.results_hide();
              }
              return this.result_clear_highlight();
            }
          }
        };

        Chosen.prototype.keydown_backstroke = function () {
          var next_available_destroy;

          if (this.pending_backstroke) {
            this.choice_destroy(this.pending_backstroke.find("a").first());
            return this.clear_backstroke();
          } else {
            next_available_destroy = this.search_container.siblings("li.search-choice").last();
            if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
              this.pending_backstroke = next_available_destroy;
              if (this.single_backstroke_delete) {
                return this.keydown_backstroke();
              } else {
                return this.pending_backstroke.addClass("search-choice-focus");
              }
            }
          }
        };

        Chosen.prototype.clear_backstroke = function () {
          if (this.pending_backstroke) {
            this.pending_backstroke.removeClass("search-choice-focus");
          }
          return this.pending_backstroke = null;
        };

        Chosen.prototype.keydown_checker = function (evt) {
          var stroke, _ref1;

          stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
          this.search_field_scale();
          if (stroke !== 8 && this.pending_backstroke) {
            this.clear_backstroke();
          }
          switch (stroke) {
            case 8:
              this.backstroke_length = this.search_field.val().length;
              break;
            case 9:
              if (this.results_showing && !this.is_multiple) {
                this.result_select(evt);
              }
              this.mouse_on_container = false;
              break;
            case 13:
              evt.preventDefault();
              break;
            case 38:
              evt.preventDefault();
              this.keyup_arrow();
              break;
            case 40:
              evt.preventDefault();
              this.keydown_arrow();
              break;
          }
        };

        Chosen.prototype.search_field_scale = function () {
          var div, h, style, style_block, styles, w, _i, _len;

          if (this.is_multiple) {
            h = 0;
            w = 0;
            style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
            styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
            for (_i = 0, _len = styles.length; _i < _len; _i++) {
              style = styles[_i];
              style_block += style + ":" + this.search_field.css(style) + ";";
            }
            div = $('<div />', {
              'style': style_block
            });
            div.text(this.search_field.val());
            $('body').append(div);
            w = div.width() + 25;
            div.remove();
            if (!this.f_width) {
              this.f_width = this.container.outerWidth();
            }
            if (w > this.f_width - 10) {
              w = this.f_width - 10;
            }
            return this.search_field.css({
              'width': w + 'px'
            });
          }
        };

        Chosen.prototype.generate_random_id = function () {
          var string;

          string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
          while ($("#" + string).length > 0) {
            string += this.generate_random_char();
          }
          return string;
        };

        return Chosen;
      }(AbstractChosen);

      root.Chosen = Chosen;
    }).call(this);
  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  /***/
},
/* 68 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_SchemaUtil__ = __webpack_require__(13);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__BaseInput__ = __webpack_require__(10);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__DeletableBox__ = __webpack_require__(69);

  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_2__BaseInput__["a" /* default */].extend({
    className: 'array-input',

    template: '<a href="#" class="array-inputs-button link-button">Add Another</a>',

    params: {
      itemType: 'string'
    },

    events: {
      'click .array-inputs-button': function clickArrayInputsButton(e) {
        e.preventDefault();
        if (this.isEditMode()) {
          this.addNewElement();
        }
      }
    },

    initialize: function initialize(options) {
      options || (options = {});
      this.params = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].defaults(options.params || {}, this.params);
      this.uniqueIdPrefix = 'array';
    },

    // api returns null for an array that does not have value
    // convert it to an empty array
    from: function from(val) {
      if (!__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(val)) {
        return [];
      }
      return val;
    },

    // @Override
    editMode: function editMode() {
      this._setArrayObject();
      this.$el.html(this.template);
      __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].each(this.arrayObject, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].bind(this._addDeletableBox, this));

      return this;
    },

    // @Override
    readMode: function readMode() {
      this.editMode();
      this.$('.array-inputs-button').addClass('link-button-disabled');
    },

    // @Override
    // converts arrayObject to a plain array
    // for string type array, returns all values
    // for number/integer type array, returns values in number type
    val: function val() {
      var values = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].values(this.arrayObject);

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].contains([__WEBPACK_IMPORTED_MODULE_1__util_SchemaUtil__["a" /* default */].DATATYPE.number, __WEBPACK_IMPORTED_MODULE_1__util_SchemaUtil__["a" /* default */].DATATYPE.integer], this.params.itemType)) {
        values = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].filter(values, __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNumber);
      }
      return values;
    },

    focus: function focus() {},

    addNewElement: function addNewElement() {
      var value = '';

      var key = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].uniqueId(this.uniqueIdPrefix);

      this.arrayObject[key] = value;
      this._addDeletableBox(value, key);
      // update is called to make sure an empty string value is added for string type array
      this.update();
    },

    _addDeletableBox: function _addDeletableBox(value, key) {
      var deletableBox = new __WEBPACK_IMPORTED_MODULE_3__DeletableBox__["a" /* default */](__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].pick(this.options, 'read', 'readOnly', 'model'), {
        key: key,
        value: value,
        itemType: this.params.itemType
      }));

      this.listenTo(deletableBox, 'updateArray', function (updatedValue) {
        if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNull(updatedValue)) {
          delete this.arrayObject[key];
          this.stopListening(deletableBox);
        } else {
          this.arrayObject[key] = updatedValue;
        }
        this.update();
      });

      deletableBox.render().$el.hide();
      this.$('.array-inputs-button').before(deletableBox.el);
      deletableBox.$el.slideDown();

      return deletableBox;
    },

    _setArrayObject: function _setArrayObject() {
      var array = this.model.get(this.options.name);

      this.arrayObject = {};
      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isArray(array) && !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isEmpty(array)) {
        var keys = [];
        var self = this;

        Object(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"])(array.length).times(function () {
          keys.push(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].uniqueId(self.uniqueIdPrefix));
        });
        this.arrayObject = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].object(keys, array);
      }
    }
  });

  /***/
},
/* 69 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony import */
  var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_SchemaUtil__ = __webpack_require__(13);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_StringUtil__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__util_Time__ = __webpack_require__(30);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__BaseView__ = __webpack_require__(1);

  var isVowel = function isVowel(string) {
    return (/^[aeiou]/.test(string)
    );
  };

  var getArticle = function getArticle(string) {
    return isVowel(string) ? 'an' : 'a';
  };

  var template = __WEBPACK_IMPORTED_MODULE_3__util_TemplateUtil__["default"].tpl('\
    <div class="o-form-input-group-controls">\
      <span class="input-fix o-form-control">\
        <input type="text" class="o-form-text" name="{{key}}" id="{{key}}" value="{{value}}" \
        placeholder="{{placeholder}}"/>\
      </span>\
      <a href="#" class="link-button link-button-icon icon-only clear-input-16">\
        <span class="icon "></span>\
      </a>\
    </div>\
    <p class="o-form-input-error o-form-explain">\
      <span class="icon icon-16 error-16-small"></span> {{errorExplain}}\
    </p>\
  ');
  var errorClass = 'o-form-has-errors';
  var updateArrayEvent = 'updateArray';
  /* harmony default export */__webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_5__BaseView__["default"].extend({
    tagName: 'div',

    className: 'o-form-input-group',

    events: {
      'click a': function clickA(e) {
        e.preventDefault();
        this.remove();
      },
      'keyup input': function keyupInput() {
        this.update();
      }
    },

    isEditMode: function isEditMode() {
      return !this.options.readOnly && (this.options.read !== true || this.model.get('__edit__') === true);
    },

    initialize: function initialize() {
      this.template = template(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend(this.options, {
        placeholder: this.getPlaceholderText(),
        errorExplain: this.getErrorExplainText()
      }));
      this.update = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].debounce(this.update, this.options.debounceDelay || __WEBPACK_IMPORTED_MODULE_4__util_Time__["a" /* default */].DEBOUNCE_DELAY);
    },

    render: function render() {
      if (this.isEditMode()) {
        this.$el.html(this.template);
      } else {
        this.$el.text(this.options.value);
        this.$('a').hide();
      }
      return this;
    },

    remove: function remove() {
      var _this6 = this,
          _arguments = arguments;

      this.trigger(updateArrayEvent, null);
      this.$el.slideUp(function () {
        __WEBPACK_IMPORTED_MODULE_5__BaseView__["default"].prototype.remove.call(_this6, _arguments);
      });
    },

    update: function update() {
      var updatedValue = this.$('input').val();

      var parseFunc = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].object([__WEBPACK_IMPORTED_MODULE_1__util_SchemaUtil__["a" /* default */].DATATYPE.number, __WEBPACK_IMPORTED_MODULE_1__util_SchemaUtil__["a" /* default */].DATATYPE.integer], [__WEBPACK_IMPORTED_MODULE_2__util_StringUtil__["default"].parseFloat, this.parseInt]);

      if (__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].has(parseFunc, this.options.itemType)) {
        updatedValue = parseFunc[this.options.itemType](updatedValue);
        !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNumber(updatedValue) ? this.markInvalid() : this.clearInvalid();
      }
      this.trigger(updateArrayEvent, updatedValue);
    },

    markInvalid: function markInvalid() {
      this.$el.addClass(errorClass);
    },

    clearInvalid: function clearInvalid() {
      this.$el.removeClass(errorClass);
    },

    getPlaceholderText: function getPlaceholderText() {
      var text = ['Enter'];

      text.push(getArticle(this.options.itemType));
      text.push(this.options.itemType.toLowerCase());
      return text.join(' ');
    },

    getErrorExplainText: function getErrorExplainText() {
      var text = ['Value must be'];

      text.push(getArticle(this.options.itemType));
      text.push(this.options.itemType.toLowerCase());
      return text.join(' ');
    },

    parseInt: function (_parseInt2) {
      function parseInt(_x4) {
        return _parseInt2.apply(this, arguments);
      }

      parseInt.toString = function () {
        return _parseInt2.toString();
      };

      return parseInt;
    }(function (string) {
      // native javascript parseInt is aggressive
      // there're cases we don't want a string to be parsed even though it is convertable
      // so that we don't convert a string silently before warning a user the potential error
      // this is to make sure the string is in an integer format before we parse it
      if (/^-?\d+$/.test(string)) {
        var num = parseInt(string, 10);

        return !__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].isNaN(num) ? num : string;
      }
      return string;
    })
  });

  /***/
},
/* 70 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_Keys__ = __webpack_require__(8);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3_vendor_plugins_jquery_custominput__ = __webpack_require__(31);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3_vendor_plugins_jquery_custominput___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vendor_plugins_jquery_custominput__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__BaseInput__ = __webpack_require__(10);

  var template = __WEBPACK_IMPORTED_MODULE_2__util_TemplateUtil__["default"].tpl('\
    <input type="checkbox" name="{{name}}" id="{{inputId}}"/>\
    <label for="{{inputId}}" data-se-for-name="{{name}}">{{placeholder}}</label>\
  ');
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_4__BaseInput__["a" /* default */].extend({
    template: template,
    /**
     * @Override
     */
    events: {
      'change :checkbox': 'update',
      keyup: function keyup(e) {
        if (__WEBPACK_IMPORTED_MODULE_1__util_Keys__["default"].isSpaceBar(e)) {
          this.$(':checkbox').click();
        } else if (__WEBPACK_IMPORTED_MODULE_1__util_Keys__["default"].isEnter(e)) {
          this.model.trigger('form:save');
        }
      }
    },

    /**
     * @Override
     */
    editMode: function editMode() {
      var placeholder = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this.options, 'placeholder', this);

      if (placeholder === '') {
        placeholder = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].resultCtx(this.options, 'label', this);
      } else if (placeholder === false) {
        placeholder = '';
      }

      this.$el.html(this.template(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].extend(__WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].omit(this.options, 'placeholder'), { placeholder: placeholder })));
      var $input = this.$(':checkbox');

      $input.prop('checked', this.getModelValue() || false);

      this.$('input').customInput();
      this.model.trigger('form:resize');

      return this;
    },

    /**
     * @Override
     */
    readMode: function readMode() {
      this.editMode();
      this.$(':checkbox').prop('disabled', true);
      return this;
    },

    /**
     * @Override
     */
    val: function val() {
      return this.$(':checkbox').prop('checked');
    },

    /**
     * @Override
     */
    focus: function focus() {
      return this.$(':checkbox').focus();
    }
  });

  /***/
},
/* 71 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_TemplateUtil__ = __webpack_require__(4);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__TextBox__ = __webpack_require__(32);
  /*!
   * Copyright (c) 2015-2018, Okta, Inc. and/or its affiliates. All rights reserved.
   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
   *
   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   *
   * See the License for the specific language governing permissions and limitations under the License.
   */

  var toggleTemplate = __WEBPACK_IMPORTED_MODULE_1__util_TemplateUtil__["default"].tpl('\
      <span class="password-toggle">\
        <span class="eyeicon visibility-16 button-show"></span>\
        <span class="eyeicon visibility-off-16 button-hide"></span>\
      </span>\
  ');
  var toggleTimeout = 30000;
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_2__TextBox__["default"].extend({
    initialize: function initialize() {
      if (this.__showPasswordToggle()) {
        this.events['click .password-toggle .button-show'] = '__showPassword';
        this.events['click .password-toggle .button-hide'] = '__hidePassword';
      }
      this.delegateEvents();
    },

    postRender: function postRender() {
      if (this.isEditMode() && this.__showPasswordToggle()) {
        this.$el.append(toggleTemplate);
        this.$el.find('input[type="password"]').addClass('password-with-toggle');
      }
      __WEBPACK_IMPORTED_MODULE_2__TextBox__["default"].prototype.postRender.apply(this, arguments);
    },

    __showPasswordToggle: function __showPasswordToggle() {
      return this.options.params && this.options.params.showPasswordToggle;
    },

    __showPassword: function __showPassword() {
      var _this7 = this;

      __WEBPACK_IMPORTED_MODULE_2__TextBox__["default"].prototype.changeType.apply(this, ['text']);
      this.$('.password-toggle .button-show').hide();
      this.$('.password-toggle .button-hide').show();
      this.passwordToggleTimer = __WEBPACK_IMPORTED_MODULE_0__util_underscore_wrapper__["default"].delay(function () {
        _this7.__hidePassword();
      }, toggleTimeout);
    },

    __hidePassword: function __hidePassword() {
      __WEBPACK_IMPORTED_MODULE_2__TextBox__["default"].prototype.changeType.apply(this, ['password']);
      this.$('.password-toggle .button-show').show();
      this.$('.password-toggle .button-hide').hide();
      // clear timeout
      if (this.passwordToggleTimer) {
        clearTimeout(this.passwordToggleTimer);
      }
    }
  });

  /***/
},
/* 72 */
/***/function (module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*! http://mths.be/placeholder v2.0.7 by @mathias */
  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {

    var isInputSupported = 'placeholder' in document.createElement('input'),
        isTextareaSupported = 'placeholder' in document.createElement('textarea'),
        prototype = $.fn,
        valHooks = $.valHooks,
        hooks,
        placeholder;

    if (isInputSupported && isTextareaSupported) {

      placeholder = prototype.placeholder = function () {
        return this;
      };

      placeholder.input = placeholder.textarea = true;
    } else {

      placeholder = prototype.placeholder = function () {
        var $this = this;
        $this.filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]').not('.placeholder').bind({
          'focus.placeholder': clearPlaceholder,
          'blur.placeholder': setPlaceholder
        }).data('placeholder-enabled', true).trigger('blur.placeholder');
        return $this;
      };

      placeholder.input = isInputSupported;
      placeholder.textarea = isTextareaSupported;

      hooks = {
        'get': function get(element) {
          var $element = $(element);
          return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
        },
        'set': function set(element, value) {
          var $element = $(element);
          if (!$element.data('placeholder-enabled')) {
            return element.value = value;
          }
          if (value == '') {
            element.value = value;
            // Issue #56: Setting the placeholder causes problems if the element continues to have focus.
            if (element != document.activeElement) {
              // We can't use `triggerHandler` here because of dummy text/password inputs :(
              setPlaceholder.call(element);
            }
          } else if ($element.hasClass('placeholder')) {
            clearPlaceholder.call(element, true, value) || (element.value = value);
          } else {
            element.value = value;
          }
          // `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
          return $element;
        }
      };

      isInputSupported || (valHooks.input = hooks);
      isTextareaSupported || (valHooks.textarea = hooks);

      $(function () {
        // Look for forms
        $(document).delegate('form', 'submit.placeholder', function () {
          // Clear the placeholder values so they don't get submitted
          var $inputs = $('.placeholder', this).each(clearPlaceholder);
          setTimeout(function () {
            $inputs.each(setPlaceholder);
          }, 10);
        });
      });

      // Clear placeholder values upon page reload
      $(window).bind('beforeunload.placeholder', function () {
        $('.placeholder').each(function () {
          this.value = '';
        });
      });
    }

    function args(elem) {
      // Return an object of element attributes
      var newAttrs = {},
          rinlinejQuery = /^jQuery\d+$/;
      $.each(elem.attributes, function (i, attr) {
        if (attr.specified && !rinlinejQuery.test(attr.name)) {
          newAttrs[attr.name] = attr.value;
        }
      });
      return newAttrs;
    }

    function clearPlaceholder(event, value) {
      var input = this,
          $input = $(input);
      if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
        if ($input.data('placeholder-password')) {
          $input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
          // If `clearPlaceholder` was called from `$.valHooks.input.set`
          if (event === true) {
            return $input[0].value = value;
          }
          $input.focus();
        } else {
          input.value = '';
          $input.removeClass('placeholder');
          input == document.activeElement && input.select();
        }
      }
    }

    function setPlaceholder() {
      var $replacement,
          input = this,
          $input = $(input),
          $origInput = $input,
          id = this.id;
      if (input.value == '') {
        if (input.type == 'password') {
          if (!$input.data('placeholder-textinput')) {
            try {
              $replacement = $input.clone().attr({ 'type': 'text' });
            } catch (e) {
              $replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
            }
            $replacement.removeAttr('name').data({
              'placeholder-password': true,
              'placeholder-id': id
            }).bind('focus.placeholder', clearPlaceholder);
            $input.data({
              'placeholder-textinput': $replacement,
              'placeholder-id': id
            }).before($replacement);
          }
          $input = $input.removeAttr('id').hide().prev().attr('id', id).show();
          // Note: `$input[0] != input` now!
        }
        $input.addClass('placeholder');
        $input[0].value = $input.attr('placeholder');
      } else {
        $input.removeClass('placeholder');
      }
    }
  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  /***/
},
/* 73 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__ = __webpack_require__(2);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__util_Keys__ = __webpack_require__(8);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__util_Util__ = __webpack_require__(16);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__BaseView__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5_vendor_plugins_jquery_custominput__ = __webpack_require__(31);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_5_vendor_plugins_jquery_custominput___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_vendor_plugins_jquery_custominput__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__BaseInput__ = __webpack_require__(10);
  /* eslint max-statements: [2, 12], max-params: [2, 6] */

  var isABaseView = __WEBPACK_IMPORTED_MODULE_3__util_Util__["default"].isABaseView;
  var RadioRadioOption = __WEBPACK_IMPORTED_MODULE_4__BaseView__["default"].extend({
    template: '\
      <input type="radio" name="{{name}}" data-se-name="{{realName}}" value="{{value}}" id="{{optionId}}">\
      <label for="{{optionId}}" data-se-for-name="{{realName}}" class="radio-label">\
        {{label}}\
      </label>\
    ',
    initialize: function initialize(options) {
      var explain = void 0;

      explain = options.explain;
      if (__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isFunction(explain) && !isABaseView(explain)) {
        explain = __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].resultCtx(this.options, 'explain', this);
      }
      if (!explain) {
        return;
      }

      if (isABaseView(explain)) {
        this.add('<p class="o-form-explain"></p>', '.radio-label');
        this.add(explain, '.o-form-explain');
      } else {
        this.add('<p class="o-form-explain">{{explain}}</p>', '.radio-label');
      }
    }
  });
  /* harmony default export */__webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_6__BaseInput__["a" /* default */].extend({
    /**
     * @Override
     */
    events: {
      'change :radio': 'update',
      keyup: function keyup(e) {
        if (__WEBPACK_IMPORTED_MODULE_2__util_Keys__["default"].isSpaceBar(e)) {
          Object(__WEBPACK_IMPORTED_MODULE_0__util_jquery_wrapper__["default"])(e.target).click();
        } else if (__WEBPACK_IMPORTED_MODULE_2__util_Keys__["default"].isEnter(e)) {
          this.model.trigger('form:save');
        }
      }
    },

    /**
     * @Override
     */
    editMode: function editMode() {
      var templates = [];

      this.$el.empty();

      __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].each(this.options.options, function (value, key) {
        var options = {
          optionId: __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].uniqueId('option'),
          name: this.options.inputId,
          realName: this.options.name,
          value: key
        };

        if (!__WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].isObject(value)) {
          value = { label: value };
        }
        __WEBPACK_IMPORTED_MODULE_1__util_underscore_wrapper__["default"].extend(options, value);

        templates.push(new RadioRadioOption(options).render().el);
      }, this);
      this.$el.append(templates);
      var value = this.getModelValue();

      if (value) {
        this.$(':radio[value=' + value + ']').prop('checked', true);
      }

      this.$('input').customInput();
      this.model.trigger('form:resize');

      if (this.getParam('inline') === true) {
        this.$('div.custom-radio').addClass('inline');
      }

      return this;
    },

    /**
     * @Override
     */
    readMode: function readMode() {
      this.editMode();
      this.$(':radio').prop('disabled', true);
      return this;
    },

    /**
     * @Override
     */
    val: function val() {
      return this.$(':radio:checked').val();
    },

    /**
     * @Override
     */
    focus: function focus() {
      return this.$('label:eq(0)').focus();
    }
  });

  /***/
}]
/******/);
//# sourceMappingURL=okta.js.map

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(2), __webpack_require__(36), __webpack_require__(42)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormType, BaseLoginController, BaseLoginModel) {
  var Toolbar = Okta.internal.views.forms.components.Toolbar;
  var FormUtil = Okta.internal.views.forms.helpers.FormUtil;

  var _ = Okta._;

  var SimpleForm = Okta.Form.extend({
    layout: 'o-form-theme',
    noCancelButton: true,
    constructor: function constructor(options) {
      Okta.Form.call(this, options);
      _.each(_.result(this, 'formChildren') || [], function (child) {
        switch (child.type) {
          case FormType.INPUT:
            this.addInput(_.extend({
              label: false,
              'label-top': true
            }, child.viewOptions));
            break;
          case FormType.BUTTON:
            this.add(Okta.createButton(_.extend({ model: this.model }, child.viewOptions)), child.addOptions);
            FormUtil.applyShowWhen(this.last(), child.viewOptions && child.viewOptions.showWhen);
            break;
          case FormType.DIVIDER:
            this.addDivider(child.viewOptions);
            break;
          case FormType.TOOLBAR:
            this.add(Toolbar, { options: child.viewOptions });
            FormUtil.applyShowWhen(this.last(), child.viewOptions && child.viewOptions.showWhen);
            break;
          case FormType.VIEW:
            this.add(child.viewOptions.View, child.addOptions);
            FormUtil.applyShowWhen(this.last(), child.viewOptions.showWhen);
            break;
          default:
            throw new Error('Unrecognized child type: ' + child.type);
        }
      }, this);
    }
  });

  return BaseLoginController.extend({

    constructor: function constructor() {
      var initialize = this.initialize;
      this.initialize = function () {};

      BaseLoginController.apply(this, arguments);

      if (this.Model && this.Form) {
        var Model = BaseLoginModel.extend(_.extend({
          parse: function parse(attributes) {
            this.settings = attributes.settings;
            this.appState = attributes.appState;
            return _.omit(attributes, ['settings', 'appState']);
          }
        }, _.result(this, 'Model')));
        this.model = new Model({
          settings: this.settings,
          appState: this.options.appState
        }, { parse: true });
        var Form = SimpleForm.extend(_.result(this, 'Form', this));
        this.form = new Form(this.toJSON());
        this.add(this.form);
      }

      if (this.Footer) {
        this.addFooter(this.Footer);
      }

      this.addListeners();
      initialize.apply(this, arguments);
    },

    addFooter: function addFooter(Footer, args) {
      this.footer = new Footer(_.extend(this.toJSON(), args || {}));
      this.add(this.footer);
    },

    toJSON: function toJSON() {
      var data = BaseLoginController.prototype.toJSON.apply(this, arguments);
      return _.extend(_.pick(this.options, 'appState'), data);
    },

    back: function back() {
      if (this.footer && this.footer.back) {
        this.footer.back();
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {

  // Syntactic sugar to provide some structure to SimpleForm inputs - Just
  // wraps options with { type: type, viewOptions: viewOptions, addOptions: addOptions }

  var INPUT = 'INPUT';
  var BUTTON = 'BUTTON';
  var DIVIDER = 'DIVIDER';
  var TOOLBAR = 'TOOLBAR';
  var VIEW = 'VIEW';

  function wrap(type) {
    return function (viewOptions, addOptions) {
      return { type: type, viewOptions: viewOptions, addOptions: addOptions };
    };
  }

  return {
    Input: wrap(INPUT),
    Button: wrap(BUTTON),
    Divider: wrap(DIVIDER),
    Toolbar: wrap(TOOLBAR),
    View: wrap(VIEW),

    INPUT: INPUT,
    BUTTON: BUTTON,
    DIVIDER: DIVIDER,
    TOOLBAR: TOOLBAR,
    VIEW: VIEW
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(module.exports = {

  WIDGET_CONTAINER_ID: 'okta-sign-in',
  WIDGET_CONFIG_COLORS_ID: 'okta-sign-in-config-colors',

  DIRECTION_BACK: 'DIRECTION_BACK',

  RECOVERY_TYPE_PASSWORD: 'PASSWORD',
  RECOVERY_TYPE_UNLOCK: 'UNLOCK',
  RECOVERY_FACTOR_TYPE_SMS: 'SMS',
  RECOVERY_FACTOR_TYPE_EMAIL: 'EMAIL',
  RECOVERY_FACTOR_TYPE_CALL: 'CALL',

  // Global success messages
  SUCCESS: 'SUCCESS',
  FORGOT_PASSWORD_EMAIL_SENT: 'FORGOT_PASSWORD_EMAIL_SENT',
  UNLOCK_ACCOUNT_EMAIL_SENT: 'UNLOCK_ACCOUNT_EMAIL_SENT',

  // Global error messages
  CONFIG_ERROR: 'CONFIG_ERROR',
  UNSUPPORTED_BROWSER_ERROR: 'UNSUPPORTED_BROWSER_ERROR',
  OAUTH_ERROR: 'OAUTH_ERROR',
  AUTH_STOP_POLL_INITIATION_ERROR: 'AUTH_STOP_POLL_INITIATION_ERROR',
  U2F_ERROR: 'U2F_ERROR',
  WEB_AUTHN_ERROR: 'WEB_AUTHN_ERROR',
  WEBAUTHN_ABORT_ERROR: 'WEBAUTHN_ABORT_ERROR',

  // Enroll choice page types
  ALL_OPTIONAL_NONE_ENROLLED: 'ALL_OPTIONAL_NONE_ENROLLED',
  ALL_OPTIONAL_SOME_ENROLLED: 'ALL_OPTIONAL_SOME_ENROLLED',
  HAS_REQUIRED_NONE_ENROLLED: 'HAS_REQUIRED_NONE_ENROLLED',
  HAS_REQUIRED_SOME_REQUIRED_ENROLLED: 'HAS_REQUIRED_SOME_REQUIRED_ENROLLED',
  HAS_REQUIRED_ALL_REQUIRED_ENROLLED: 'HAS_REQUIRED_ALL_REQUIRED_ENROLLED',

  // Operations
  PRIMARY_AUTH: 'PRIMARY_AUTH',
  FORGOT_PASSWORD: 'FORGOT_PASSWORD',
  UNLOCK_ACCOUNT: 'UNLOCK_ACCOUNT',

  // Auth Types
  SESSION_SSO: 'SESSION_SSO',
  SESSION_STEP_UP: 'SESSION_STEP_UP',

  //Registration
  ACTIVATION_EMAIL_SENT: 'ACTIVATION_EMAIL_SENT',
  REGISTRATION_COMPLETE: 'REGISTRATION_COMPLETE',
  REGISTRATION_FAILED: 'REGISTRATION_FAILED',

  //IDP Discovery
  IDP_DISCOVERY: 'IDP_DISCOVERY'
});

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (true) {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        // Prefer window over self for add-on scripts. Use self for
        // non-windowed contexts.
        var global = typeof window !== "undefined" ? window : self;

        // Get the `window` object, save the previous Q global
        // and initialize Q as a global.
        var previousQ = global.Q;
        global.Q = definition();

        // Add a noConflict function so Q can be removed from the
        // global namespace.
        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.nextTick()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected() {
            pendingCount--;
            if (pendingCount === 0) {
                deferred.reject(new Error(
                    "Can't get fulfillment value from any promise, all " +
                    "promises were rejected."
                ));
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity: [2, 13], max-depth: [2, 3] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(0), __webpack_require__(25), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Q, Okta, Logger, Enums) {

  var Util = {};
  var _ = Okta._;

  var buildInputForParameter = function buildInputForParameter(name, value) {
    var input = document.createElement('input');
    input.name = name;
    input.value = decodeURIComponent(value);
    input.type = 'hidden';
    return input;
  };

  var buildDynamicForm = function buildDynamicForm() {
    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var method = arguments[1];

    var splitOnFragment = url.split('#');
    var fragment = splitOnFragment[1];

    var splitOnQuery = (splitOnFragment[0] || '').split('?');
    var query = splitOnQuery[1];
    var targetUrl = splitOnQuery[0];
    if (fragment) {
      targetUrl += '#' + fragment;
    }

    var form = document.createElement('form');
    form.method = method;
    form.setAttribute('style', 'display: none;');
    form.action = targetUrl;
    if (query && query.length) {
      var queryParts = query.split('&');
      queryParts.forEach(function (queryPart) {
        var parameterParts = queryPart.split('=');
        var input = buildInputForParameter(parameterParts[0], parameterParts[1]);
        form.appendChild(input);
      });
    }
    return form;
  };

  Util.hasTokensInHash = function (hash) {
    return (/((id|access)_token=)/i.test(hash)
    );
  };

  Util.transformErrorXHR = function (xhr) {
    // Handle network connection error
    if (xhr.status === 0 && _.isEmpty(xhr.responseJSON)) {
      xhr.responseJSON = { errorSummary: Okta.loc('error.network.connection', 'login') };
      return xhr;
    }
    if (!xhr.responseJSON) {
      if (!xhr.responseText) {
        xhr.responseJSON = { errorSummary: Okta.loc('oform.error.unexpected', 'login') };
        return xhr;
      }
      xhr.responseJSON = xhr.responseText;
    }
    // Temporary solution to display field errors
    // Assuming there is only one field error in a response
    if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {
      xhr.responseJSON.errorSummary = xhr.responseJSON.errorCauses[0].errorSummary;
    }
    // Replace error messages
    if (!_.isEmpty(xhr.responseJSON)) {
      var errorMsg = Okta.loc('errors.' + xhr.responseJSON.errorCode, 'login');
      if (errorMsg.indexOf('L10N_ERROR[') === -1) {
        xhr.responseJSON.errorSummary = errorMsg;
        if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {
          // BaseForm will consume errorCauses before errorSummary if it is an array,
          // so, we have to make sure to remove it when we have a valid error code
          delete xhr.responseJSON.errorCauses;
        }
      }
    }
    return xhr;
  };

  // Simple helper function to lowercase all strings in the given array
  Util.toLower = function (strings) {
    return _.map(strings, function (str) {
      return str.toLowerCase();
    });
  };

  // A languageCode can be composed of multiple parts, i.e:
  // {{langage}}-{{region}}-{{dialect}}
  //
  // In these cases, it's necessary to generate a list of other possible
  // combinations that we might support (in preferred order).
  //
  // For example:
  // en-US -> [en-US, en]
  // de-DE-bavarian -> [de-DE-bavarian, de-DE, de]
  function expandLanguage(language) {
    var expanded = [language],
        parts = language.split('-');
    while (parts.pop() && parts.length > 0) {
      expanded.push(parts.join('-'));
    }
    return expanded;
  }

  // Following the rules of expanding one language, this will generate
  // all potential languages in the given order (where higher priority is
  // given to expanded languages over other downstream languages).
  Util.expandLanguages = function (languages) {
    return _.chain(languages).map(expandLanguage).flatten().uniq().value();
  };

  //helper to call setTimeout
  Util.callAfterTimeout = function (callback, time) {
    return setTimeout(callback, time);
  };

  // Helper function to provide consistent formatting of template literals
  // that are logged when in development mode.
  Util.debugMessage = function (message) {
    Logger.warn('\n' + message.replace(/^(\s)+/gm, ''));
  };

  // Trigger an afterError event
  Util.triggerAfterError = function (controller) {
    var err = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!err.statusCode && err.xhr && err.xhr.status) {
      // Bring the statusCode to the top-level of the Error
      err.statusCode = err.xhr.status;
    }
    // Some controllers return the className as a function - process it here:
    var className = _.isFunction(controller.className) ? controller.className() : controller.className;
    var error = _.pick(err, 'name', 'message', 'statusCode', 'xhr');
    controller.trigger('afterError', { controller: className }, error);
    // Logs to console only in dev mode
    Logger.warn('controller: ' + className + ', error: ' + error);
  };

  /**
   * Why redirect via Form get rather using `window.location.href`?
   * At the time of writing, Chrome (<72) in Android would block window location change
   * at following case
   * 1. An AJAX is trigger because of user action.
   * 2. 5+ seconds passed without any further user interaction.
   * 3. User takes an action results in window location change.
   *
   * Luckily we discovered that uses Form submit would work around this problem
   * even though it changed window location.
   *
   * Check the commit history for more details.
   */
  Util.redirectWithFormGet = function (url) {
    Util.redirectWithForm(url, 'get');
  };

  Util.redirectWithForm = function (url) {
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'post';

    if (!url) {
      Logger.error('Cannot redirect to empty URL: (' + url + ')');
      return;
    }

    var mainContainer = document.getElementById(Enums.WIDGET_CONTAINER_ID);
    if (!mainContainer) {
      Logger.error('Cannot find okta-sign-in container append to which a form');
      return;
    }

    var form = buildDynamicForm(url, method);
    mainContainer.appendChild(form);
    form.submit();
  };

  /**
   * When we want to show an explain text, we need to check if this is different from
   * the label text, to not have an explain that look like a duplicated label.
   * okta-signin-widget gives the possibility to customize every i18n, so we cannot
   * know ahead if these two are equal or different, we need to call this function everytime.
   */
  Util.createInputExplain = function (explainKey, labelKey, bundleName, explainParams, labelParams) {
    var explain = explainParams ? Okta.loc(explainKey, bundleName, explainParams) : Okta.loc(explainKey, bundleName);
    var label = labelParams ? Okta.loc(labelKey, bundleName, labelParams) : Okta.loc(labelKey, bundleName);
    if (explain === label) {
      return false;
    }
    return explain;
  };

  Util.introspectToken = function (authClient, widgetOptions) {
    var deferred = Q.defer();
    var trans = authClient.tx.introspect({
      stateToken: widgetOptions.stateToken
    });
    if (Q.isPromiseAlike(trans)) {
      trans.then(function (trans) {
        deferred.resolve(trans);
      }).fail(function (err) {
        deferred.reject(err);
      });
    }
    return deferred.promise;
  };

  return Util;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

//note: not including Okta here and explicitly including jquery and Handlebars
//because we want to be explicit about which TextBox we are extending here
//and want to avoid the cirucular dependency that occurs if we
//include Okta
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(26), __webpack_require__(74)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, BrowserFeatures) {
  var TextBox = Okta.internal.views.forms.inputs.TextBox;


  return TextBox.extend({
    postRender: function postRender() {
      if (this.options.type === 'number') {
        var input = this.$('input');
        input.attr({
          pattern: '[0-9]*',
          inputmode: 'numeric'
        });
      }
      TextBox.prototype.postRender.apply(this, arguments);
    },
    // Override the focus() to ignore focus in IE. IE (8-11) has a known bug where
    // the placeholder text disappears when the input field is focused.
    focus: function focus() {
      if (BrowserFeatures.isIE()) {
        return;
      }
      return TextBox.prototype.focus.apply(this, arguments);
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 7 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.9' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity: [2, 38], max-statements: [2, 38] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(189)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, TimeUtil) {

  var _ = Okta._;

  var fn = {};

  var factorData = {
    'OKTA_VERIFY': {
      label: 'factor.totpSoft.oktaVerify',
      description: 'factor.totpSoft.description',
      iconClassName: 'mfa-okta-verify',
      sortOrder: 1
    },
    'OKTA_VERIFY_PUSH': {
      label: 'factor.oktaVerifyPush',
      description: 'factor.push.description',
      iconClassName: 'mfa-okta-verify',
      sortOrder: 1
    },
    'U2F': {
      label: 'factor.u2f',
      description: function description(brandName) {
        return brandName ? 'factor.u2f.description.specific' : 'factor.u2f.description.generic';
      },
      iconClassName: 'mfa-u2f',
      sortOrder: 2
    },
    'WEBAUTHN': {
      label: 'factor.webauthn.biometric',
      description: 'factor.webauthn.biometric.description',
      iconClassName: 'mfa-webauthn',
      sortOrder: 2
    },
    'WINDOWS_HELLO': {
      label: 'factor.windowsHello',
      description: function description(brandName) {
        return brandName ? 'factor.windowsHello.signin.description.specific' : 'factor.windowsHello.signin.description.generic';
      },
      iconClassName: 'mfa-windows-hello',
      sortOrder: 3
    },
    'YUBIKEY': {
      label: 'factor.totpHard.yubikey',
      description: 'factor.totpHard.yubikey.description',
      iconClassName: 'mfa-yubikey',
      sortOrder: 4
    },
    'GOOGLE_AUTH': {
      label: 'factor.totpSoft.googleAuthenticator',
      description: 'factor.totpSoft.description',
      iconClassName: 'mfa-google-auth',
      sortOrder: 5
    },
    'CUSTOM_HOTP': {
      label: '',
      description: 'factor.hotp.description',
      iconClassName: 'mfa-hotp',
      sortOrder: 6
    },
    'SMS': {
      label: 'factor.sms',
      description: 'factor.sms.description',
      iconClassName: 'mfa-okta-sms',
      sortOrder: 7
    },
    'CALL': {
      label: 'factor.call',
      description: 'factor.call.description',
      iconClassName: 'mfa-okta-call',
      sortOrder: 8
    },
    'EMAIL': {
      label: 'factor.email',
      description: '',
      iconClassName: 'mfa-okta-email',
      sortOrder: 9
    },
    'QUESTION': {
      label: 'factor.securityQuestion',
      description: 'factor.securityQuestion.description',
      iconClassName: 'mfa-okta-security-question',
      sortOrder: 10
    },
    'DUO': {
      label: 'factor.duo',
      description: 'factor.duo.description',
      iconClassName: 'mfa-duo',
      sortOrder: 11
    },
    'SYMANTEC_VIP': {
      label: 'factor.totpHard.symantecVip',
      description: 'factor.totpHard.description',
      iconClassName: 'mfa-symantec',
      sortOrder: 12
    },
    'RSA_SECURID': {
      label: 'factor.totpHard.rsaSecurId',
      description: 'factor.totpHard.description',
      iconClassName: 'mfa-rsa',
      sortOrder: 13
    },
    'ON_PREM': {
      label: '',
      description: 'factor.totpHard.description',
      iconClassName: 'mfa-onprem',
      sortOrder: 14
    },
    'PASSWORD': {
      label: 'factor.password',
      description: '',
      iconClassName: 'mfa-okta-password',
      sortOrder: 15
    },
    'CUSTOM_CLAIMS': {
      label: '',
      description: 'factor.customFactor.description',
      iconClassName: 'mfa-custom-factor',
      sortOrder: 16
    },
    'GENERIC_SAML': {
      label: '',
      description: function description(brandName) {
        return brandName ? 'factor.customFactor.description.specific' : 'factor.customFactor.description.generic';
      },
      iconClassName: 'mfa-custom-factor',
      sortOrder: 17
    },
    'GENERIC_OIDC': {
      label: '',
      description: function description(brandName) {
        return brandName ? 'factor.customFactor.description.specific' : 'factor.customFactor.description.generic';
      },
      iconClassName: 'mfa-custom-factor',
      sortOrder: 18
    }
  };

  fn.getFactorName = function (provider, factorType) {
    if (provider === 'OKTA' && factorType === 'token:software:totp') {
      return 'OKTA_VERIFY';
    }
    if (provider === 'OKTA' && factorType === 'push') {
      return 'OKTA_VERIFY_PUSH';
    }
    if (provider === 'GOOGLE') {
      return 'GOOGLE_AUTH';
    }
    if (provider === 'SYMANTEC' && factorType === 'token') {
      return 'SYMANTEC_VIP';
    }
    if (provider === 'RSA' && factorType === 'token') {
      return 'RSA_SECURID';
    }
    if (provider === 'DEL_OATH' && factorType === 'token') {
      return 'ON_PREM';
    }
    if (provider === 'DUO' && factorType === 'web') {
      return 'DUO';
    }
    if (provider === 'YUBICO' && factorType === 'token:hardware') {
      return 'YUBIKEY';
    }
    if (provider === 'OKTA' && factorType === 'sms') {
      return 'SMS';
    }
    if (provider === 'OKTA' && factorType === 'call') {
      return 'CALL';
    }
    if (provider === 'OKTA' && factorType === 'question') {
      return 'QUESTION';
    }
    if (provider === 'OKTA' && factorType === 'email') {
      return 'EMAIL';
    }
    if (provider === 'OKTA' && factorType === 'password') {
      return 'PASSWORD';
    }
    if (provider === 'GENERIC_SAML' && factorType === 'assertion:saml2') {
      return 'GENERIC_SAML';
    }
    if (provider === 'GENERIC_OIDC' && factorType === 'assertion:oidc') {
      return 'GENERIC_OIDC';
    }
    return fn.getFactorNameForFactorType.call(this, factorType);
  };

  fn.getFactorNameForFactorType = function (factorType) {
    if (factorType === 'u2f') {
      return 'U2F';
    }
    if (factorType === 'token:software:totp') {
      return 'OKTA_VERIFY';
    }
    if (factorType === 'webauthn') {
      if (this.settings.get('features.webauthn')) {
        return 'WEBAUTHN';
      } else {
        return 'WINDOWS_HELLO';
      }
    }
    if (factorType === 'token:hotp') {
      return 'CUSTOM_HOTP';
    }
    if (factorType === 'claims_provider') {
      return 'CUSTOM_CLAIMS';
    }
  };

  fn.isOktaVerify = function (provider, factorType) {
    return provider === 'OKTA' && (factorType === 'token:software:totp' || factorType === 'push');
  };

  fn.getFactorLabel = function (provider, factorType) {
    var key = factorData[fn.getFactorName.apply(this, [provider, factorType])].label;
    return Okta.loc(key, 'login');
  };

  fn.getFactorDescription = function (provider, factorType) {
    var descriptionKey = factorData[fn.getFactorName.apply(this, [provider, factorType])].description;
    if (_.isFunction(descriptionKey)) {
      var brandName = this.settings.get('brandName');
      var key = descriptionKey(brandName);
      return brandName ? Okta.loc(key, 'login', [brandName]) : Okta.loc(key, 'login');
    } else {
      return Okta.loc(descriptionKey, 'login');
    }
  };

  fn.getFactorIconClassName = function (provider, factorType) {
    return factorData[fn.getFactorName.apply(this, [provider, factorType])].iconClassName;
  };

  fn.getFactorSortOrder = function (provider, factorType) {
    return factorData[fn.getFactorName.apply(this, [provider, factorType])].sortOrder;
  };

  fn.getRememberDeviceValue = function (appState) {
    return appState && appState.get('rememberDeviceByDefault');
  };

  fn.getSecurityQuestionLabel = function (questionObj) {
    var localizedQuestion = Okta.loc('security.' + questionObj.question);
    return localizedQuestion.indexOf('L10N_ERROR') < 0 ? localizedQuestion : questionObj.questionText;
  };

  fn.getPasswordComplexityDescription = function (policy) {
    var result = [];

    var getPasswordAgeRequirement = function getPasswordAgeRequirement(displayableTime) {
      var propertiesString;
      switch (displayableTime.unit) {
        case 'DAY':
          propertiesString = 'password.complexity.minAgeDays';
          break;
        case 'HOUR':
          propertiesString = 'password.complexity.minAgeHours';
          break;
        case 'MINUTE':
          propertiesString = 'password.complexity.minAgeMinutes';
      }
      return Okta.loc(propertiesString, 'login', [displayableTime.time]);
    };

    var setExcludeAttributes = function setExcludeAttributes(policyComplexity) {
      var excludeAttributes = policyComplexity.excludeAttributes;
      policyComplexity.excludeFirstName = _.contains(excludeAttributes, 'firstName');
      policyComplexity.excludeLastName = _.contains(excludeAttributes, 'lastName');
      return _.omit(policyComplexity, 'excludeAttributes');
    };

    if (policy.complexity) {
      var complexityFields = {
        minLength: { i18n: 'password.complexity.length', args: true },
        minLowerCase: { i18n: 'password.complexity.lowercase' },
        minUpperCase: { i18n: 'password.complexity.uppercase' },
        minNumber: { i18n: 'password.complexity.number' },
        minSymbol: { i18n: 'password.complexity.symbol' },
        excludeUsername: { i18n: 'password.complexity.no_username' },
        excludeFirstName: { i18n: 'password.complexity.no_first_name' },
        excludeLastName: { i18n: 'password.complexity.no_last_name' }
      };

      var policyComplexity = setExcludeAttributes(policy.complexity);

      var requirements = _.map(policyComplexity, function (complexityValue, complexityType) {
        if (complexityValue <= 0) {
          // to skip 0 and -1
          return;
        }

        var params = complexityFields[complexityType];
        return params.args ? Okta.loc(params.i18n, 'login', [complexityValue]) : Okta.loc(params.i18n, 'login');
      });

      requirements = _.compact(requirements);

      if (requirements.length) {
        requirements = _.reduce(requirements, function (result, requirement) {
          return result ? result + Okta.loc('password.complexity.list.element', 'login', [requirement]) : requirement;
        });

        result.push(Okta.loc('password.complexity.requirements', 'login', [requirements]));
      }
    }

    if (policy.age && policy.age.historyCount > 0) {
      result.push(Okta.loc('password.complexity.history', 'login', [policy.age.historyCount]));
    }

    if (policy.age && policy.age.minAgeMinutes > 0) {
      var displayableTime = TimeUtil.getTimeInHighestRelevantUnit(policy.age.minAgeMinutes, 'MINUTE');
      var minAgeDescription = getPasswordAgeRequirement(displayableTime);
      result.push(minAgeDescription);
    }

    return result.join(' ');
  };

  fn.getCardinalityText = function (enrolled, required, cardinality) {
    if (cardinality) {
      if (enrolled) {
        return cardinality.enrolled === 1 ? '' : Okta.loc('enroll.choices.cardinality.setup', 'login', [cardinality.enrolled]);
      } else if (required && cardinality.maximum > 1) {
        return Okta.loc('enroll.choices.cardinality.setup.remaining', 'login', [cardinality.enrolled, cardinality.minimum]);
      }
    }
    return '';
  };

  fn.findFactorInFactorsArray = function (factors, provider, factorType) {
    var factor = factors.findWhere({ provider: provider, factorType: factorType });
    if (factor === undefined) {
      //for factors that support cardinality and only have factorType
      factor = factors.findWhere({ factorType: factorType });
    }
    return factor;
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums) {

  return Okta.View.extend({
    template: '\
      <a href="#" class="link help js-back" data-se="back-link">\
        {{i18n code="mfa.backToFactors" bundle="login"}}\
      </a>\
    ',
    className: 'auth-footer',
    events: {
      'click .js-back': function clickJsBack(e) {
        e.preventDefault();
        this.options.appState.trigger('backToFactors');
        this.back();
      }
    },

    back: function back() {
      this.state.set('navigateDir', Enums.DIRECTION_BACK);
      if (this.options.appState.get('prevLink')) {
        // Once we are in the MFA_ENROLL_ACTIVATE, we need to reset to the
        // correct state. Fortunately, this means that the router will
        // handle navigation once the request is finished.
        this.model.doTransaction(function (transaction) {
          return transaction.prev();
        });
      } else {
        this.options.appState.trigger('navigate', 'signin/enroll');
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 10 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(69)('wks');
var uid = __webpack_require__(50);
var Symbol = __webpack_require__(10).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity: [2, 45], max-statements: [2, 30] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(63), __webpack_require__(5), __webpack_require__(3), __webpack_require__(26), __webpack_require__(13), __webpack_require__(207)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, OAuth2Util, Util, Enums, BrowserFeatures, Errors, ErrorCodes) {
  var fn = {};

  var verifyUrlTpl = Okta.tpl('signin/verify/{{provider}}/{{factorType}}');
  var verifyUrlMultipleTpl = Okta.tpl('signin/verify/{{provider}}/{{factorType}}/{{factorIndex}}');
  var verifyUrlNoProviderTpl = Okta.tpl('signin/verify/{{factorType}}');
  var enrollFactorUrlTpl = Okta.tpl('signin/enroll/{{provider}}/{{factorType}}');
  var activateFactorUrlTpl = Okta.tpl('signin/enroll-activate/{{provider}}/{{factorType}}{{#if step}}/{{step}}{{/if}}');
  var recoveryUrlTpl = Okta.tpl('signin/recovery/{{recoveryToken}}');
  var refreshUrlTpl = Okta.tpl('signin/refresh-auth-state{{#if token}}/{{token}}{{/if}}');
  var sessionCookieRedirectTpl = Okta.tpl('{{baseUrl}}/login/sessionCookieRedirect?checkAccountSetupComplete=true' + '&token={{{token}}}&redirectUrl={{{redirectUrl}}}');

  fn.isHostBackgroundChromeTab = function () {
    // Checks if the SIW is loaded in a chrome webview and
    // it is in an app that is in background.
    if (navigator.userAgent.match(/Android/) && navigator.userAgent.match(/Chrome/) && document.hidden) {
      return true;
    } else {
      return false;
    }
  };

  fn.isDocumentVisible = function () {
    return document.visibilityState === 'visible';
  };

  fn.createVerifyUrl = function (provider, factorType, factorIndex) {
    if (provider && factorIndex) {
      return verifyUrlMultipleTpl({
        provider: encodeURIComponent(provider.toLowerCase()),
        factorType: encodeURIComponent(factorType),
        factorIndex: encodeURIComponent(factorIndex)
      });
    } else if (provider) {
      return verifyUrlTpl({
        provider: encodeURIComponent(provider.toLowerCase()),
        factorType: encodeURIComponent(factorType)
      });
    } else {
      return verifyUrlNoProviderTpl({
        factorType: encodeURIComponent(factorType)
      });
    }
  };

  fn.createEnrollFactorUrl = function (provider, factorType) {
    return enrollFactorUrlTpl({
      provider: encodeURIComponent(provider.toLowerCase()),
      factorType: encodeURIComponent(factorType)
    });
  };

  fn.createActivateFactorUrl = function (provider, factorType, step) {
    return activateFactorUrlTpl({
      provider: encodeURIComponent(provider.toLowerCase()),
      factorType: encodeURIComponent(factorType),
      step: step ? encodeURIComponent(step) : false
    });
  };

  fn.createRecoveryUrl = function (recoveryToken) {
    return recoveryUrlTpl({
      recoveryToken: encodeURIComponent(recoveryToken)
    });
  };

  fn.createRefreshUrl = function (stateToken) {
    var token = stateToken ? encodeURIComponent(stateToken) : null;
    return refreshUrlTpl({ token: token });
  };

  fn.routeAfterAuthStatusChangeError = function (router, err) {
    if (!err) {
      return;
    }

    // Global error handling for CORS enabled errors
    if (err.xhr && BrowserFeatures.corsIsNotEnabled(err.xhr)) {
      router.settings.callGlobalError(new Errors.UnsupportedBrowserError(Okta.loc('error.enabled.cors')));
      return;
    }

    // Token has expired - no longer valid. Navigate back to primary auth.
    if (err.errorCode === ErrorCodes.INVALID_TOKEN_EXCEPTION) {
      router.appState.set('flashError', err);
      router.controller.state.set('navigateDir', Enums.DIRECTION_BACK);
      router.navigate('', { trigger: true });
      return;
    }

    Util.triggerAfterError(router.controller, err);
  };

  fn.routeAfterAuthStatusChange = function (router, res) {
    // Other errors are handled by the function making the authClient request
    if (!res || !res.status) {
      router.appState.clearLastAuthResponse();
      return;
    }

    router.appState.setAuthResponse(res);

    if (router.controller && router.controller.trapAuthResponse(res)) {
      return;
    }

    fn.handleResponseStatus(router, res);
  };

  fn.handleResponseStatus = function (router, res) {
    switch (res.status) {
      case 'SUCCESS':
        if (res.recoveryType === Enums.RECOVERY_TYPE_UNLOCK) {
          router.navigate('signin/account-unlocked', { trigger: true });
          return;
        }

        // If the desired end result object needs to have idToken (and not sessionToken),
        // get the id token from session token before calling the global success function.
        if (router.settings.get('oauth2Enabled')) {
          OAuth2Util.getTokens(router.settings, { sessionToken: res.sessionToken }, router.controller);
          return;
        }

        var successData = {
          user: res._embedded.user,
          type: res.type || Enums.SESSION_SSO
        };

        if (res.relayState) {
          successData.relayState = res.relayState;
        }

        var redirectFn = router.settings.get('redirectUtilFn');

        var nextUrl = res._links && (res._links.original && res._links.original.href || res._links.next && res._links.next.href);
        if (res.type === Enums.SESSION_STEP_UP) {
          var targetUrl = res._links && res._links.next && res._links.next.href;
          successData.stepUp = {
            url: targetUrl,
            finish: function finish() {
              redirectFn(targetUrl);
            }
          };
        } else if (nextUrl) {
          successData.next = function () {
            redirectFn(nextUrl);
          };
        } else {
          // Add the type for now until the API returns it.
          successData.type = Enums.SESSION_SSO;
          successData.session = {
            token: res.sessionToken,
            setCookieAndRedirect: function setCookieAndRedirect(redirectUrl) {
              redirectFn(sessionCookieRedirectTpl({
                baseUrl: router.settings.get('baseUrl'),
                token: encodeURIComponent(res.sessionToken),
                redirectUrl: encodeURIComponent(redirectUrl)
              }));
            }
          };
        }

        // Check if we need to wait for redirect based on host.
        if (router.settings.get('features.restrictRedirectToForeground') && fn.isHostBackgroundChromeTab()) {
          document.addEventListener('visibilitychange', function checkVisibilityAndCallSuccess() {
            if (fn.isDocumentVisible()) {
              document.removeEventListener('visibilitychange', checkVisibilityAndCallSuccess);
              router.settings.callGlobalSuccess(Enums.SUCCESS, successData);
            }
          });
        } else {
          router.settings.callGlobalSuccess(Enums.SUCCESS, successData);
        }
        return;
      case 'CONSENT_REQUIRED':
        if (router.settings.get('features.consent')) {
          router.navigate('signin/consent', { trigger: true });
        }
        return;
      // We want the same view for FACTOR_REQUIRED & FACTOR_CHALLENGE
      // In the new idx pipeline FACTOR_CHALLENGE API response does not contain a prev link
      case 'FACTOR_REQUIRED':
      case 'FACTOR_CHALLENGE':
      case 'MFA_REQUIRED':
        // When the widget is bootstrapped with an error in MFA_CHALLENGE state, we pass the
        // lastFailedChallengeFactorData to MFA_REQUIRED, in order to show the error message
        // on the correct factor view
        var lastFailedChallengeFactorData = router.appState.get('lastFailedChallengeFactorData');
        if (lastFailedChallengeFactorData && lastFailedChallengeFactorData.factor) {
          router.appState.get('factors').lastUsedFactor = lastFailedChallengeFactorData.factor;
        }
        var factor = router.appState.get('factors').getDefaultFactor();
        var url = fn.createVerifyUrl(factor.get('provider'), factor.get('factorType'));
        router.navigate(url, { trigger: true });
        router.appState.clearLastFailedChallengeFactorData();
        return;
      case 'MFA_CHALLENGE':
        // Since we normally trap MFA_CHALLENGE, this will only get called on a
        // page refresh or when an error is returned on verification with an IdP.
        // We need to return to MFA_REQUIRED to initialize the
        // page correctly (i.e. factors dropdown, etc)
        if (router.appState.get('isFactorResultFailed')) {
          router.appState.setLastFailedChallengeFactorData();
        }
        router.appState.get('transaction').prev().then(function (trans) {
          router.appState.set('transaction', trans);
        }).done();
        return;
      case 'MFA_ENROLL':
      case 'FACTOR_ENROLL':
        router.navigate('signin/enroll', { trigger: true });
        return;
      case 'MFA_ENROLL_ACTIVATE':
      case 'FACTOR_ENROLL_ACTIVATE':
        var activateUrl = fn.createActivateFactorUrl(router.appState.get('activatedFactorProvider'), router.appState.get('activatedFactorType'));
        router.navigate(activateUrl, { trigger: true });
        return;
      case 'PASSWORD_WARN':
      case 'PASSWORD_EXPIRED':
        if (router.settings.get('features.customExpiredPassword') && !router.appState.get('isPwdManagedByOkta')) {
          router.navigate('signin/custom-password-expired', { trigger: true });
        } else {
          router.navigate('signin/password-expired', { trigger: true });
        }
        return;
      case 'RECOVERY_CHALLENGE':
        // Will use this workaround (lowercasing response) until OKTA-69083 is resolved
        var fromEmail = res.factorType.toLowerCase() === Enums.RECOVERY_FACTOR_TYPE_EMAIL.toLowerCase(),
            isForgotPassword = res.recoveryType === Enums.RECOVERY_TYPE_PASSWORD,
            isUnlock = res.recoveryType === Enums.RECOVERY_TYPE_UNLOCK;
        if (isForgotPassword && fromEmail) {
          router.navigate('signin/recovery-emailed', { trigger: true });
        } else if (isUnlock && fromEmail) {
          router.navigate('signin/unlock-emailed', { trigger: true });
        } else {
          router.navigate('signin/recovery-challenge', { trigger: true });
        }
        return;
      case 'RECOVERY':
        router.navigate('signin/recovery-question', { trigger: true });
        return;
      case 'PASSWORD_RESET':
        router.navigate('signin/password-reset', { trigger: true });
        return;
      case 'LOCKED_OUT':
        if (router.settings.get('features.selfServiceUnlock')) {
          router.navigate('signin/unlock', { trigger: true });
        } else {
          router.controller.model.trigger('error', router.controller.model, {
            responseJSON: {
              errorCauses: [],
              errorSummary: Okta.loc('error.auth.lockedOut', 'login')
            }
          });
        }
        return;
      case 'PROFILE_REQUIRED':
        router.navigate('signin/enroll-user', { trigger: true });
        return;
      case 'UNAUTHENTICATED':
        // Either we have factors and we are in passwordlessAuth mode
        if (router.appState.get('promptForFactorInUnauthenticated')) {
          var defaultFactor = router.appState.get('factors').getDefaultFactor();
          var factorURL = fn.createVerifyUrl(defaultFactor.get('provider'), defaultFactor.get('factorType'));
          router.navigate(factorURL, { trigger: true });
          return;
        }
        // Or we don't have anything and we need to show the login page
        router.navigate('', { trigger: true });
        return;
      default:
        throw new Error('Unknown status: ' + res.status);
    }
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums) {

  function ConfigError(message) {
    this.name = Enums.CONFIG_ERROR;
    this.message = message || Okta.loc('error.config');
  }
  ConfigError.prototype = new Error();

  function UnsupportedBrowserError(message) {
    this.name = Enums.UNSUPPORTED_BROWSER_ERROR;
    this.message = message || Okta.loc('error.unsupported.browser');
  }
  UnsupportedBrowserError.prototype = new Error();

  function OAuthError(message) {
    this.name = Enums.OAUTH_ERROR;
    this.message = message;
  }
  OAuthError.prototype = new Error();

  function RegistrationError(message) {
    this.name = Enums.REGISTRATION_FAILED;
    this.message = message;
  }
  RegistrationError.prototype = new Error();

  // Thrown when initiation of poll was cancelled.
  function AuthStopPollInitiationError() {
    this.name = Enums.AUTH_STOP_POLL_INITIATION_ERROR;
  }
  AuthStopPollInitiationError.prototype = new Error();

  function U2FError(err) {
    this.name = Enums.U2F_ERROR;
    this.message = err.xhr.responseJSON.errorSummary;
    this.xhr = err.xhr;
  }
  U2FError.prototype = new Error();

  function WebAuthnError(err) {
    this.name = Enums.WEB_AUTHN_ERROR;
    this.message = err.xhr.responseJSON.errorSummary;
    this.xhr = err.xhr;
  }
  WebAuthnError.prototype = new Error();

  // This is triggered only when code aborts webauthn browser prompt.
  function WebauthnAbortError() {
    this.name = Enums.WEBAUTHN_ABORT_ERROR;
  }
  WebauthnAbortError.prototype = new Error();

  return {
    ConfigError: ConfigError,
    UnsupportedBrowserError: UnsupportedBrowserError,
    OAuthError: OAuthError,
    RegistrationError: RegistrationError,
    AuthStopPollInitiationError: AuthStopPollInitiationError,
    U2FError: U2FError,
    WebAuthnError: WebAuthnError,
    WebauthnAbortError: WebauthnAbortError
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _FormInputFactory = __webpack_require__(295);

var _FormInputFactory2 = _interopRequireDefault(_FormInputFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _okta.Form.extend({

  layout: 'o-form-theme',
  className: 'ion-form',
  hasSavingState: true,
  autoSave: false,
  noCancelButton: true,
  title: 'Authenticate',
  save: (0, _okta.loc)('oform.next', 'login'),

  initialize: function initialize() {
    var _this = this;

    var uiSchemas = this.getUISchema();
    var inputOptions = uiSchemas.map(_FormInputFactory2.default.create);

    inputOptions.forEach(function (input) {
      _this.addInputOrView(input);
    });

    this.listenTo(this, 'save', this.saveForm);
  },

  saveForm: function saveForm(model) {
    this.options.appState.trigger('saveForm', model);
  },
  getUISchema: function getUISchema() {
    if (Array.isArray(this.options.currentViewState.uiSchema)) {
      return this.options.currentViewState.uiSchema;
    } else {
      return [];
    }
  },
  addInputOrView: function addInputOrView(input) {
    if (input.View) {
      this.add(input.View, {
        options: input.options
      });
    } else {
      this.addInput(input);
    }
  }
});

/***/ }),
/* 15 */
/***/ (function(module, exports) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint-env es6 */
var util = module.exports;

// converts a string to base64 (url/filename safe variant)
util.stringToBase64Url = function(str) {
  var b64 = btoa(str);
  return util.base64ToBase64Url(b64);
};

// converts a standard base64-encoded string to a "url/filename safe" variant
util.base64ToBase64Url = function(b64) {
  return b64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
};

// converts a "url/filename safe" base64 string to a "standard" base64 string
util.base64UrlToBase64 = function(b64u) {
  return b64u.replace(/-/g, '+').replace(/_/g, '/');
};

util.base64UrlToString = function(b64u) {
  var b64 = util.base64UrlToBase64(b64u);
  switch (b64.length % 4) {
    case 0:
      break;
    case 2:
      b64 += '==';
      break;
    case 3:
      b64 += '=';
      break;
    default:
      throw 'Not a valid Base64Url';
  }
  var utf8 = atob(b64);
  try {
    return decodeURIComponent(escape(utf8));
  } catch (e) {
    return utf8;
  }
};

util.stringToBuffer = function(str) {
  var buffer = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    buffer[i] = str.charCodeAt(i);
  }
  return buffer;
};

util.base64UrlDecode = function(str) {
  return atob(util.base64UrlToBase64(str));
};

util.bind = function(fn, ctx) {
  var additionalArgs = Array.prototype.slice.call(arguments, 2);
  return function() {
    var args = Array.prototype.slice.call(arguments);
    args = additionalArgs.concat(args);
    return fn.apply(ctx, args);
  };
};

util.isAbsoluteUrl = function(url) {
  return /^(?:[a-z]+:)?\/\//i.test(url);
};

util.isString = function(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
};

util.isObject = function(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
};

util.isNumber = function(obj) {
  return Object.prototype.toString.call(obj) === '[object Number]';
};

util.isArray = function(obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
};

util.isoToUTCString = function(str) {
  var parts = str.match(/\d+/g),
      isoTime = Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]),
      isoDate = new Date(isoTime);

  return isoDate.toUTCString();
};

util.toQueryParams = function(obj) {
  var str = [];
  if (obj !== null) {
    for (var key in obj) {
      if (obj.hasOwnProperty(key) &&
          obj[key] !== undefined &&
          obj[key] !== null) {
        str.push(key + '=' + encodeURIComponent(obj[key]));
      }
    }
  }
  if (str.length) {
    return '?' + str.join('&');
  } else {
    return '';
  }
};

util.genRandomString = function(length) {
  var randomCharset = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  var random = '';
  for (var c = 0, cl = randomCharset.length; c < length; ++c) {
    random += randomCharset[Math.floor(Math.random() * cl)];
  }
  return random;
};

util.extend = function() {
  // First object will be modified!
  var obj1 = arguments[0];
  // Properties from other objects will be copied over
  var objArray = [].slice.call(arguments, 1);
  objArray.forEach(function(obj) {
    for (var prop in obj) {
      // copy over all properties with defined values
      if (obj.hasOwnProperty(prop) && obj[prop] !== undefined) {
        obj1[prop] = obj[prop];
      }
    }
  });
  return obj1; // return the modified object
};

util.removeNils = function(obj) {
  var cleaned = {};
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      var value = obj[prop];
      if (value !== null && value !== undefined) {
        cleaned[prop] = value;
      }
    }
  }
  return cleaned;
};

util.clone = function(obj) {
  if (obj) {
    var str = JSON.stringify(obj);
    if (str) {
      return JSON.parse(str);
    }
  }
  return obj;
};

// Analogous to _.omit
util.omit = function(obj) {
  var props = Array.prototype.slice.call(arguments, 1);
  var newobj = {};
  for (var p in obj) {
    if (obj.hasOwnProperty(p) && props.indexOf(p) == -1) {
      newobj[p] = obj[p];
    }
  }
  return util.clone(newobj);
};

util.find = function(collection, searchParams) {
  var c = collection.length;
  while (c--) {
    var item = collection[c];
    var found = true;
    for (var prop in searchParams) {
      if (!searchParams.hasOwnProperty(prop)) {
        continue;
      }
      if (item[prop] !== searchParams[prop]) {
        found = false;
        break;
      }
    }
    if (found) {
      return item;
    }
  }
};

util.getLink = function(obj, linkName, altName) {
  if (!obj || !obj._links) {
    return;
  }

  var link = util.clone(obj._links[linkName]);

  // If a link has a name and we have an altName, return if they match
  if (link && link.name && altName) {
    if (link.name === altName) {
      return link;
    }
  } else {
    return link;
  }
};

util.getNativeConsole = function() {
  if (typeof window !== 'undefined') {
    return window.console;
  } else if (typeof console !== 'undefined') {
    return console;
  } else {
    return undefined;
  }
};

util.getConsole = function() {
  var nativeConsole = util.getNativeConsole();
  if (nativeConsole && nativeConsole.log) {
    return nativeConsole;
  }
  return {
    log: function() {}
  };
};

util.warn = function(text) {
  /* eslint-disable no-console */
  util.getConsole().log('[okta-auth-sdk] WARN: ' + text);
  /* eslint-enable */
};

util.deprecate = function(text) {
  /* eslint-disable no-console */
  util.getConsole().log('[okta-auth-sdk] DEPRECATION: ' + text);
  /* eslint-enable */
};

util.deprecateWrap = function(text, fn) {
  return function() {
    util.deprecate(text);
    return fn.apply(null, arguments);
  };
};

util.removeTrailingSlash = function(path) {
  if (!path) {
    return;
  }
  // Remove any whitespace before or after string
  var trimmed = path.replace(/^\s+|\s+$/gm,'');
  if (trimmed.slice(-1) === '/') {
    return trimmed.slice(0, -1);
  }
  return trimmed;
};

util.isIE11OrLess = function() {
  return !!document.documentMode && document.documentMode <= 11;
};

util.isFunction = function(fn) {
  return !!fn && {}.toString.call(fn) === '[object Function]';
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(10);
var core = __webpack_require__(7);
var ctx = __webpack_require__(47);
var hide = __webpack_require__(28);
var has = __webpack_require__(29);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(33)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseModel = __webpack_require__(297);

var _BaseModel2 = _interopRequireDefault(_BaseModel);

var _BaseHeader = __webpack_require__(130);

var _BaseHeader2 = _interopRequireDefault(_BaseHeader);

var _BaseFooter = __webpack_require__(31);

var _BaseFooter2 = _interopRequireDefault(_BaseFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _okta.View.extend({

  Header: _BaseHeader2.default,

  Body: _BaseForm2.default,

  Footer: _BaseFooter2.default,

  className: 'siw-main-view',

  template: '<div class="siw-main-header"></div>' + '<div class="siw-callout"></div>' + '<div class="siw-main-body"></div>' + '<div class="siw-main-footer"></div>',

  initialize: function initialize(options) {
    // Create Model
    var IonModel = this.createModelClass();
    var model = new IonModel({
      formName: this.options.currentViewState.name
    });

    // Add Views
    this.add(this.Header, { selector: '.siw-main-header' });
    this.add(this.Body, {
      selector: '.siw-main-body',
      options: {
        model: model
      }
    });
    this.add(this.Footer, { selector: '.siw-main-footer' });

    // add callout for messages
    if (options.messages && options.messages.value.length) {
      this.showMessageCallout(options.messages.value[0].message, 'warning');
    }
  },
  postRender: function postRender() {
    // If user enterted identifier is not found, API sends back a message with a link to sign up
    // This is the click handler for that link
    var appState = this.options.appState;
    this.$el.find('.js-sign-up').click(function () {
      appState.trigger('invokeAction', 'select-enroll-profile');
      return false;
    });
  },
  showMessageCallout: function showMessageCallout(message, type) {
    var messageCallout = (0, _okta.createCallout)({
      content: message,
      type: type
    });
    this.add(messageCallout, '.siw-callout');
  },
  createModelClass: function createModelClass() {
    return _BaseModel2.default.create(this.options.currentViewState);
  }
});

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(20);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(190), __esModule: true };

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums) {
  var Util = Okta.internal.util.Util;

  var _ = Okta._;

  return Okta.View.extend({
    template: '\
      <a href="#" class="link {{linkClassName}}" data-se="signout-link">\
        {{linkText}}\
      </a>\
    ',
    className: 'auth-footer clearfix',
    events: {
      'click a': function clickA(e) {
        e.preventDefault();
        this.options.appState.trigger('signOut');
        var self = this;
        this.model.doTransaction(function (transaction) {
          return transaction.cancel();
        }).then(function () {
          if (self.settings.get('signOutLink')) {
            Util.redirect(self.settings.get('signOutLink'));
          } else {
            self.state.set('navigateDir', Enums.DIRECTION_BACK);
            self.options.appState.trigger('navigate', '');
          }
        });
      }
    },
    getTemplateData: function getTemplateData() {
      return {
        linkClassName: _.isUndefined(this.options.linkClassName) ? 'goto' : this.options.linkClassName,
        linkText: this.options.linkText || Okta.loc('signout', 'login')
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  // Have to be unescaped for the html in enroll.windowsHello.error.notConfiguredHtml
  var template = '\
    <span class="icon error-24"></span>\
    <h4><strong>{{{message}}}</strong></h4>\
  ';

  return Okta.View.extend({
    template: template,
    className: 'okta-infobox-error infobox infobox-error infobox-md margin-btm-25',
    attributes: {
      'data-se': 'o-form-error-html'
    },

    message: '',

    initialize: function initialize(options) {
      if (options && options.message) {
        this.message = options.message;
      }
    },

    getTemplateData: function getTemplateData() {
      return {
        message: this.message
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(19);
var IE8_DOM_DEFINE = __webpack_require__(84);
var toPrimitive = __webpack_require__(67);
var dP = Object.defineProperty;

exports.f = __webpack_require__(17) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {

  function _log(level, args) {
    // Only log statements in development mode or if
    // throwing an error through console.error
    if (true) {
      window.console[level].apply(window.console, args);
    }
  }

  /**
   * Utility library of logging functions.
   */
  return {

    trace: function trace() {
      return _log('trace', arguments);
    },

    dir: function dir() {
      return _log('dir', arguments);
    },

    time: function time() {
      return _log('time', arguments);
    },

    timeEnd: function timeEnd() {
      return _log('timeEnd', arguments);
    },

    group: function group() {
      return _log('group', arguments);
    },

    groupEnd: function groupEnd() {
      return _log('groupEnd', arguments);
    },

    assert: function assert() {
      return _log('assert', arguments);
    },

    log: function log() {
      return _log('log', arguments);
    },

    info: function info() {
      return _log('info', arguments);
    },

    warn: function warn() {
      return _log('warn', arguments);
    },

    error: function error() {
      return _log('error', arguments);
    },

    deprecate: function deprecate(msg) {
      return _log('warn', ['[okta-signin-widget] DEPRECATED:', msg]);
    }
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {

  var fn = {},
      hasFullCorsSupport = 'withCredentials' in new window.XMLHttpRequest(),
      hasXDomainRequest = typeof XDomainRequest !== 'undefined';

  fn.corsIsNotSupported = function () {
    return !(hasFullCorsSupport || hasXDomainRequest);
  };

  fn.corsIsNotEnabled = function (jqXhr) {
    // Not a definitive check, but it's the best we've got.
    // Note: This will change when OktaAuth is updated
    return jqXhr.status === 0;
  };

  // This is currently not being used, but we'll keep it around for when we
  // want a fallback mechanism - i.e. use localStorage if it exists, else fall
  // back to cookies.
  fn.localStorageIsNotSupported = function () {
    var test = 'test';
    try {
      localStorage.setItem(test, test);
      localStorage.removeItem(test);
      return false;
    } catch (e) {
      return true;
    }
  };

  fn.supportsPushState = function (win) {
    win = win || window;
    return !!(win.history && win.history.pushState);
  };

  fn.isIE = function () {
    return (/(msie|trident)/i.test(navigator.userAgent)
    );
  };

  fn.isFirefox = function () {
    return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
  };

  fn.isEdge = function () {
    return navigator.userAgent.toLowerCase().indexOf('edge') > -1;
  };

  fn.isSafari = function () {
    // Chrome has safari in its useragent string so adding this extra check.
    return navigator.userAgent.toLowerCase().indexOf('safari') > -1 && navigator.userAgent.toLowerCase().indexOf('chrome') === -1;
  };

  fn.isMac = function () {
    return navigator.platform.toUpperCase().indexOf('MAC') >= 0;
  };

  // Returns a list of languages the user has configured for their browser, in
  // order of preference.
  fn.getUserLanguages = function () {
    var languages, properties;

    // Chrome, Firefox
    if (navigator.languages) {
      return navigator.languages;
    }

    languages = [];
    properties = ['language', // Safari, IE11
    'userLanguage', // IE
    'browserLanguage', // IE
    'systemLanguage' // IE
    ];

    properties.forEach(function (property) {
      if (navigator[property]) {
        languages.push(navigator[property]);
      }
    });

    return languages;
  };

  return fn;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 27 */
/***/ (function(module, exports) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

function AuthSdkError(msg, xhr) {
  this.name = 'AuthSdkError';
  this.message = msg;

  this.errorCode = 'INTERNAL';
  this.errorSummary = msg;
  this.errorLink = 'INTERNAL';
  this.errorId = 'INTERNAL';
  this.errorCauses = [];
  if (xhr) {
    this.xhr = xhr;
  }
}
AuthSdkError.prototype = new Error();

module.exports = AuthSdkError;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(24);
var createDesc = __webpack_require__(49);
module.exports = __webpack_require__(17) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(88);
var defined = __webpack_require__(65);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _Link = __webpack_require__(298);

var _Link2 = _interopRequireDefault(_Link);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * When `href` is present, the Link behaviors as normal web link.
 * When `actionPath` is present, the Link behaviors as link button
 *    upon click, will trigger the action `actionPath`.
 * @typedef {Object} Link
 * @property {string} label
 * @property {string} name
 * @property {string=} href
 * @property {string=} actionPath
 */

exports.default = _okta.View.extend({

  className: 'auth-footer',

  /**
   * {Link[]} links
   */
  links: [],

  initialize: function initialize() {
    var _this = this;

    var links = _okta._.resultCtx(this, 'links', this);
    if (this.options.appState.get('showSignoutLink')) {
      //add cancel/signout link
      links = links.concat([{
        'actionPath': 'cancel',
        'label': 'Sign out',
        'name': 'cancel',
        'type': 'link'
      }]);
    }

    links.forEach(function (link) {
      _this.add(_Link2.default, {
        options: link
      });
    });
  }
});

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(141), __esModule: true };

/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(87);
var enumBugKeys = __webpack_require__(70);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q) {
  var _ = Okta._;

  function getForm(controller) {
    return _.find(controller.getChildren(), function (item) {
      return item instanceof Okta.Form;
    });
  }

  return Okta.Controller.extend({

    // Custom code to add a new proprety representing the Primary Authentication
    // Controller class name. Read the login.json file and use
    // the value of the property: primaryauth.controller.classname
    primaryAuthControllerClassName: 'primary-auth',

    // Ideally we should be attaching the listeners in the constructor, but because of the way
    // we construct the FormController (this.model is generated after the BaseLoginController's
    // constructor is called), this.model is undefined in when try to attach the events and
    // therefore we don't listen to events for such forms. And changing the order in which we call
    // the constructor doesn't help either (JS errors etc.). This at least guarantees that we
    // are listening to the model events.
    // Note - Figure out a way to call the constructor in the right order.
    addListeners: function addListeners() {
      // Events to enable/disable the primary button on the forms
      this.listenTo(this.model, 'save', function () {
        //disable the submit button on forms while making the request
        //to prevent users from hitting rate limiting exceptions of
        //1 per second on the auth api
        var form = getForm(this);
        var disableSubmitButton = form.disableSubmitButton;
        if (disableSubmitButton && !form.disableSubmitButton()) {
          return;
        }
        this.toggleButtonState(true);
      });

      this.listenTo(this.model, 'error', function () {
        this.toggleButtonState(false);
      });

      this.addModelListeners(this.model);
    },

    addModelListeners: function addModelListeners(model) {
      var setTransactionHandler = _.bind(function (transaction) {
        this.options.appState.set('transaction', transaction);
      }, this);
      var transactionErrorHandler = _.bind(function (err) {
        this.options.appState.set('transactionError', err);
      }, this);

      // Events to set the transaction attributes on the app state.
      this.listenTo(model, 'setTransaction', setTransactionHandler);
      this.listenTo(model, 'setTransactionError', transactionErrorHandler);

      // For TOTP factor model
      // TOTP model is special, its model will not be attached to a controller, but will
      // tag along with the push factor model. We need to listen to the transaction
      // changes on this as well (in case of the push+totp form).
      var totpModel = model.get('backupFactor');
      if (totpModel) {
        this.listenTo(totpModel, 'setTransaction', setTransactionHandler);
        this.listenTo(totpModel, 'setTransactionError', transactionErrorHandler);
      }
    },

    // Override this method to delay switching to this screen until return
    // promise is resolved. This is useful for cases like enrolling a security
    // question, which requires an additional request to fetch the question
    // list.
    fetchInitialData: function fetchInitialData() {
      return Q();
    },

    // Override this method to prevent route navigation. This is useful for
    // intermediate status changes that do not trigger a full refresh of the
    // page, like MFA_ENROLL_ACTIVATE and MFA_CHALLENGE.
    trapAuthResponse: function trapAuthResponse() {
      return false;
    },

    toJSON: function toJSON() {
      var data = Okta.Controller.prototype.toJSON.apply(this, arguments);
      return _.extend(_.pick(this.options, 'appState'), data);
    },

    toggleButtonState: function toggleButtonState(state) {
      var button = this.$el.find('.button');
      button.toggleClass('link-button-disabled', state).prop('disabled', state);
    },

    postRenderAnimation: function postRenderAnimation() {
      // Custom code introduced so that the 'Sign In' button is
      // initially disabled on the Primary Authentication screen
      // when the Okta Sign In Widget is initially disabled.  This is
      // done to force the user to agree to the the Terms and Conditions.
      // This is only done to the Primary Authentication screen; thus,
      // the verify MFA screen 'Verify' button is enabled after the
      // user enters their username and password into the Primary
      // Authentication screen.
      if (this.primaryAuthControllerClassName == this.className) {
        this.toggleButtonState(true);
      }

      // Event triggered after a page is rendered along with the classname to identify the page
      // TODO: Deprecate this event in the next major version in favor of 'afterRender'
      this.trigger('pageRendered', { page: this.className });

      this.trigger('afterRender', { controller: this.className });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = {
  "STATE_TOKEN_KEY_NAME": "oktaStateToken",
  "DEFAULT_POLLING_DELAY": 500,
  "DEFAULT_MAX_CLOCK_SKEW": 300,
  "DEFAULT_CACHE_DURATION": 86400,
  "FRAME_ID": "okta-oauth-helper-frame",
  "REDIRECT_OAUTH_PARAMS_COOKIE_NAME": "okta-oauth-redirect-params",
  "REDIRECT_STATE_COOKIE_NAME": "okta-oauth-state",
  "REDIRECT_NONCE_COOKIE_NAME": "okta-oauth-nonce",
  "TOKEN_STORAGE_NAME": "okta-token-storage",
  "CACHE_STORAGE_NAME": "okta-cache-storage",
  "PKCE_STORAGE_NAME": "okta-pkce-storage",
  "SDK_VERSION": "2.9.0"
};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

/* eslint-disable complexity */
var util = __webpack_require__(15);
var Q = __webpack_require__(4);
var AuthApiError = __webpack_require__(325);
var config = __webpack_require__(37);

function httpRequest(sdk, options) {
  options = options || {};
  var url = options.url,
      method = options.method,
      args = options.args,
      saveAuthnState = options.saveAuthnState,
      accessToken = options.accessToken,
      withCredentials = options.withCredentials !== false, // default value is true
      storageUtil = sdk.options.storageUtil,
      storage = storageUtil.storage,
      httpCache = storageUtil.getHttpCache();

  if (options.cacheResponse) {
    var cacheContents = httpCache.getStorage();
    var cachedResponse = cacheContents[url];
    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {
      return Q.resolve(cachedResponse.response);
    }
  }

  var headers = {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'X-Okta-User-Agent-Extended': sdk.userAgent
  };
  util.extend(headers, sdk.options.headers, options.headers);

  if (accessToken && util.isString(accessToken)) {
    headers['Authorization'] = 'Bearer ' + accessToken;
  }

  var ajaxOptions = {
    headers: headers,
    data: args || undefined,
    withCredentials: withCredentials
  };

  var err, res;
  return new Q(sdk.options.httpRequestClient(method, url, ajaxOptions))
    .then(function(resp) {
      res = resp.responseText;
      if (res && util.isString(res)) {
        res = JSON.parse(res);
      }

      if (saveAuthnState) {
        if (!res.stateToken) {
          storage.delete(config.STATE_TOKEN_KEY_NAME);
        }
      }

      if (res && res.stateToken && res.expiresAt) {
        storage.set(config.STATE_TOKEN_KEY_NAME, res.stateToken, res.expiresAt);
      }

      if (res && options.cacheResponse) {
        httpCache.updateStorage(url, {
          expiresAt: Math.floor(Date.now()/1000) + config.DEFAULT_CACHE_DURATION,
          response: res
        });
      }

      return res;
    })
    .fail(function(resp) {
      var serverErr = resp.responseText || {};
      if (util.isString(serverErr)) {
        try {
          serverErr = JSON.parse(serverErr);
        } catch (e) {
          serverErr = {
            errorSummary: 'Unknown error'
          };
        }
      }

      if (resp.status >= 500) {
        serverErr.errorSummary = 'Unknown error';
      }

      if (sdk.options.transformErrorXHR) {
        resp = sdk.options.transformErrorXHR(util.clone(resp));
      }

      err = new AuthApiError(serverErr, resp);

      if (err.errorCode === 'E0000011') {
        storage.delete(config.STATE_TOKEN_KEY_NAME);
      }

      throw err;
    });
}

function get(sdk, url, options) {
  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;
  var getOptions = {
    url: url,
    method: 'GET'
  };
  util.extend(getOptions, options);
  return httpRequest(sdk, getOptions);
}

function post(sdk, url, args, options) {
  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;
  var postOptions = {
    url: url,
    method: 'POST',
    args: args,
    saveAuthnState: true
  };
  util.extend(postOptions, options);
  return httpRequest(sdk, postOptions);
}

module.exports = {
  get: get,
  post: post,
  httpRequest: httpRequest
};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q, Enums) {

  var _ = Okta._;
  var KNOWN_ERRORS = ['OAuthError', 'AuthSdkError', 'AuthPollStopError', 'AuthApiError'];

  return Okta.Model.extend({
    doTransaction: function doTransaction(fn, rethrow) {
      var self = this;
      return fn.call(this, this.appState.get('transaction')).then(function (trans) {
        self.trigger('setTransaction', trans);
        return trans;
      }).fail(function (err) {
        // Q may still consider AuthPollStopError to be unhandled
        if (err.name === 'AuthPollStopError' || err.name === Enums.AUTH_STOP_POLL_INITIATION_ERROR || err.name === Enums.WEBAUTHN_ABORT_ERROR) {
          return;
        }
        self.trigger('error', self, err.xhr);
        self.trigger('setTransactionError', err);
        if (rethrow || _.indexOf(KNOWN_ERRORS, err.name) === -1) {
          throw err;
        }
      });
    },

    manageTransaction: function manageTransaction(fn) {
      var self = this,
          res = fn.call(this, this.appState.get('transaction'), _.bind(this.setTransaction, this));

      // If it's a promise, listen for failures
      if (Q.isPromiseAlike(res)) {
        return res.fail(function (err) {
          if (err.name === 'AuthPollStopError' || err.name === Enums.AUTH_STOP_POLL_INITIATION_ERROR || err.name === Enums.WEBAUTHN_ABORT_ERROR) {
            return;
          }
          self.trigger('error', self, err.xhr);
          self.trigger('setTransactionError', err);
        });
      }

      return Q.resolve(res);
    },

    startTransaction: function startTransaction(fn) {
      var self = this,
          res = fn.call(this, this.settings.getAuthClient());

      // If it's a promise, then chain to it
      if (Q.isPromiseAlike(res)) {
        return res.then(function (trans) {
          self.trigger('setTransaction', trans);
          return trans;
        }).fail(function (err) {
          self.trigger('error', self, err.xhr);
          self.trigger('setTransactionError', err);
          throw err;
        });
      }

      return Q.resolve(res);
    },

    setTransaction: function setTransaction(trans) {
      this.appState.set('transaction', trans);
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  var fn = {};

  // Validate the 'username' field on the model.
  fn.validateUsername = function (model) {
    var username = model.get('username');
    if (username && username.length > 256) {
      return {
        username: Okta.loc('model.validation.field.username', 'login')
      };
    }
  };

  // Validate that the field1 and field2 fields on the model are a match.
  fn.validateFieldsMatch = function (model, field1, field2, message) {
    if (model.get(field1) !== model.get(field2)) {
      var ret = {};
      ret[field2] = message;
      return ret;
    }
  };

  // Validate that the 'newPassword' and 'confirmPassword' fields on the model are a match.
  fn.validatePasswordMatch = function (model) {
    return fn.validateFieldsMatch(model, 'newPassword', 'confirmPassword', Okta.loc('password.error.match', 'login'));
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

var Cookies = __webpack_require__(320);
var storageBuilder = __webpack_require__(136);
var config = __webpack_require__(37);

// Building this as an object allows us to mock the functions in our tests
var storageUtil = {};

// IE11 bug that Microsoft doesn't plan to fix
// https://connect.microsoft.com/IE/Feedback/Details/1496040
storageUtil.browserHasLocalStorage = function() {
  try {
    var storage = storageUtil.getLocalStorage();
    return storageUtil.testStorage(storage);
  } catch (e) {
    return false;
  }
};

storageUtil.browserHasSessionStorage = function() {
  try {
    var storage = storageUtil.getSessionStorage();
    return storageUtil.testStorage(storage);
  } catch (e) {
    return false;
  }
};

storageUtil.getPKCEStorage = function() {
  if (storageUtil.browserHasLocalStorage()) {
    return storageBuilder(storageUtil.getLocalStorage(), config.PKCE_STORAGE_NAME);
  } else if (storageUtil.browserHasSessionStorage()) {
    return storageBuilder(storageUtil.getSessionStorage(), config.PKCE_STORAGE_NAME);
  } else {
    return storageBuilder(storageUtil.getCookieStorage(), config.PKCE_STORAGE_NAME);
  }
};

storageUtil.getHttpCache = function() {
  if (storageUtil.browserHasLocalStorage()) {
    return storageBuilder(storageUtil.getLocalStorage(), config.CACHE_STORAGE_NAME);
  } else if (storageUtil.browserHasSessionStorage()) {
    return storageBuilder(storageUtil.getSessionStorage(), config.CACHE_STORAGE_NAME);
  } else {
    return storageBuilder(storageUtil.getCookieStorage(), config.CACHE_STORAGE_NAME);
  }
};

storageUtil.getLocalStorage = function() {
  return localStorage;
};

storageUtil.getSessionStorage = function() {
  return sessionStorage;
};

// Provides webStorage-like interface for cookies
storageUtil.getCookieStorage = function(options) {
  options = options || {};
  return {
    getItem: storageUtil.storage.get,
    setItem: function(key, value) {
      // Cookie shouldn't expire
      storageUtil.storage.set(key, value, '2200-01-01T00:00:00.000Z', options.secure);
    }
  };
};

storageUtil.testStorage = function(storage) {
  var key = 'okta-test-storage';
  try {
    storage.setItem(key, key);
    storage.removeItem(key);
    return true;
  } catch (e) {
    return false;
  }
};

storageUtil.storage = {
  set: function(name, value, expiresAt, secure) {
    var cookieOptions = {
      path: '/',
      secure: secure
    };

    // eslint-disable-next-line no-extra-boolean-cast
    if (!!(Date.parse(expiresAt))) {
      // Expires value can be converted to a Date object.
      //
      // If the 'expiresAt' value is not provided, or the value cannot be
      // parsed as a Date object, the cookie will set as a session cookie.
      cookieOptions.expires = new Date(expiresAt);
    }

    Cookies.set(name, value, cookieOptions);
    return storageUtil.storage.get(name);
  },

  get: function(name) {
    return Cookies.get(name);
  },

  delete: function(name) {
    return Cookies.remove(name, { path: '/' });
  }
};

module.exports = storageUtil;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(142);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(153);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(144)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(83)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(48);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 50 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(24).f;
var has = __webpack_require__(29);
var TAG = __webpack_require__(11)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(65);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(150);
var global = __webpack_require__(10);
var hide = __webpack_require__(28);
var Iterators = __webpack_require__(34);
var TO_STRING_TAG = __webpack_require__(11)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2017-10-25T15:48Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var deletedIds = [];

var document = window.document;

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.12.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type( obj ) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {

			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {

			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( !support.ownFirst ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {

			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {

				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[ j ] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// init accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {

						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[ 2 ] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof root.ready !== "undefined" ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter( function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[ 0 ], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.uniqueSort( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = true;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE6-10
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );

		// If IE event model is used
		} else {

			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch ( e ) {}

			if ( top && top.doScroll ) {
				( function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {

							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll( "left" );
						} catch ( e ) {
							return window.setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				} )();
			}
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownFirst = i === "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery( function() {

	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {

		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== "undefined" ) {

		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {

			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
} );


( function() {
	var div = document.createElement( "div" );

	// Support: IE<9
	support.deleteExpando = true;
	try {
		delete div.test;
	} catch ( e ) {
		support.deleteExpando = false;
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();
var acceptData = function( elem ) {
	var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
};




var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {

		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {

		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split( " " );
					}
				}
			} else {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[ i ] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, undefined
	} else {
		cache[ id ] = undefined;
	}
}

jQuery.extend( {
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,

		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				jQuery.data( this, key );
			} );
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each( function() {
				jQuery.data( this, key, value );
			} ) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each( function() {
			jQuery.removeData( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );


( function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== "undefined" ) {

			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

} )();
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn(
					elems[ i ],
					key,
					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[ 0 ], key ) : emptyGet;
};
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );

var rleadingWhitespace = ( /^\s+/ );

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}


( function() {
	var div = document.createElement( "div" ),
		fragment = document.createDocumentFragment(),
		input = document.createElement( "input" );

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input = document.createElement( "input" );
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent = !!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[ jQuery.expando ] = 1;
	support.attributes = !div.getAttribute( jQuery.expando );
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {
	option: [ 1, "<select multiple='multiple'>", "</select>" ],
	legend: [ 1, "<fieldset>", "</fieldset>" ],
	area: [ 1, "<map>", "</map>" ],

	// Support: IE8
	param: [ 1, "<object>", "</object>" ],
	thead: [ 1, "<table>", "</table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
};

// Support: IE8-IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
				undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context;
			( elem = elems[ i ] ) != null;
			i++
		) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; ( elem = elems[ i ] ) != null; i++ ) {
		jQuery._data(
			elem,
			"globalEval",
			!refElements || jQuery._data( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/,
	rtbody = /<tbody/i;

function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

function buildFragment( elems, context, scripts, selection, ignored ) {
	var j, elem, contains,
		tmp, tag, tbody, wrap,
		l = elems.length,

		// Ensure a safe fragment
		safe = createSafeFragment( context ),

		nodes = [],
		i = 0;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || safe.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;

				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Manually add leading whitespace removed by IE
				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					elem = tag === "table" && !rtbody.test( elem ) ?
						tmp.firstChild :

						// String was a bare <thead> or <tfoot>
						wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
							tmp :
							0;

					j = elem && elem.childNodes.length;
					while ( j-- ) {
						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

							elem.removeChild( tbody );
						}
					}
				}

				jQuery.merge( nodes, tmp.childNodes );

				// Fix #12392 for WebKit and IE > 9
				tmp.textContent = "";

				// Fix #12392 for oldIE
				while ( tmp.firstChild ) {
					tmp.removeChild( tmp.firstChild );
				}

				// Remember the top-level container for proper cleanup
				tmp = safe.lastChild;
			}
		}
	}

	// Fix #11356: Clear elements from fragment
	if ( tmp ) {
		safe.removeChild( tmp );
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if ( !support.appendChecked ) {
		jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
	}

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}

			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( safe.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	tmp = null;

	return safe;
}


( function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for ( i in { submit: true, change: true, focusin: true } ) {
		eventName = "on" + i;

		if ( !( support[ i ] = eventName in window ) ) {

			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};

			// Add elem as a property of the handle fn to prevent a memory leak
			// with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if (
				( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
				) && acceptData( elem )
			) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {

						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Safari 6-8+
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ?
					original.toElement :
					fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {

						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	// Piggyback on a donor event to simulate a different one
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true

				// Previously, `originalEvent: {}` was set here, so stopPropagation call
				// would not be triggered on donor event, since in our own
				// jQuery.event.stopPropagation function we had a check for existence of
				// originalEvent.stopPropagation method, so, consequently it would be a noop.
				//
				// Guard for simulated events was moved to jQuery.event.stopPropagation function
				// since `originalEvent` should point to the original event for the
				// constancy with other events and for more focused logic
			}
		);

		jQuery.event.trigger( e, null, elem );

		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event,
			// to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( !e || this.isSimulated ) {
			return;
		}

		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

// IE submit delegation
if ( !support.submit ) {

	jQuery.event.special.submit = {
		setup: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

						// Support: IE <=8
						// We use jQuery.prop instead of elem.form
						// to allow fixing the IE8 delegated submit issue (gh-2332)
						// by 3rd party polyfills/workarounds.
						jQuery.prop( elem, "form" ) :
						undefined;

				if ( form && !jQuery._data( form, "submit" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submitBubble = true;
					} );
					jQuery._data( form, "submit", true );
				}
			} );

			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {

			// If form was submitted by the user, bubble the event up the tree
			if ( event._submitBubble ) {
				delete event._submitBubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event );
				}
			}
		},

		teardown: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.change ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {

				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._justChanged = true;
						}
					} );
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._justChanged && !event.isTrigger ) {
							this._justChanged = false;
						}

						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event );
					} );
				}
				return false;
			}

			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event );
						}
					} );
					jQuery._data( elem, "change", true );
				}
			} );
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	} );
}

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	},

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}
	return elem;
}

function cloneCopyEvent( src, dest ) {
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var first, node, hasScripts,
		scripts, doc, fragment,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval(
								( node.text || node.textContent || node.innerHTML || "" )
									.replace( rcleanScript, "" )
							);
						}
					}
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		elems = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = elems[ i ] ) != null; i++ ) {

		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[ i ] ) {
					fixCloneNodeIssues( node, destElements[ i ] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
					cloneCopyEvent( node, destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems, /* internal */ forceAcceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			attributes = support.attributes,
			special = jQuery.event.special;

		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			if ( forceAcceptData || acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// Support: IE<9
						// IE does not allow us to delete expando properties from nodes
						// IE creates expando attributes along with the property
						// IE does not have a removeAttribute function on Document nodes
						if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
							elem.removeAttribute( internalKey );

						// Webkit & Blink performance suffers when deleting properties
						// from DOM nodes, so set to undefined instead
						// https://code.google.com/p/chromium/issues/detail?id=378607
						} else {
							elem[ internalKey ] = undefined;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append(
					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
				);
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {

			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {

						// Remove element nodes and prevent memory leaks
						elem = this[ i ] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	div.style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = div.style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!div.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	div.innerHTML = "";
	container.appendChild( div );

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

	jQuery.extend( support, {
		reliableHiddenOffsets: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {

			// We're checking for pixelPositionVal here instead of boxSizingReliableVal
			// since that compresses better and they're computed together anyway.
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {

			// Support: Android 2.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		},

		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		}
	} );

	function computeStyleTests() {
		var contents, divStyle,
			documentElement = document.documentElement;

		// Setup
		documentElement.appendChild( container );

		div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
		pixelMarginRightVal = reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			divStyle = window.getComputedStyle( div );
			pixelPositionVal = ( divStyle || {} ).top !== "1%";
			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
			boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

			// Support: Android 2.3 only
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE6-8
		// First check that getClientRects works as expected
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.style.display = "none";
		reliableHiddenOffsetsVal = div.getClientRects().length === 0;
		if ( reliableHiddenOffsetsVal ) {
			div.style.display = "";
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			div.childNodes[ 0 ].style.borderCollapse = "separate";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}
		}

		// Teardown
		documentElement.removeChild( container );
	}

} )();


var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value"
			// instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values,
			// but width seems to be reliably pixels
			// this is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are
		// proportional to the parent element instead
		// and we can't measure the parent instead because it
		// might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {

		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight
			// (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch ( e ) {}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
} );

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {

			// IE uses filters for opacity
			return ropacity.test( ( computed && elem.currentStyle ?
				elem.currentStyle.filter :
				elem.style.filter ) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist -
			// attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule
				// or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return (
				parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var a,
		input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "checkbox" );
	div.appendChild( input );

	a = div.getElementsByTagName( "a" )[ 0 ];

	// First batch of tests.
	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute( "style" ) );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute( "href" ) === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement( "form" ).enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
} )();


var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if (
					hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// handle most common string cases
					ret.replace( rreturn, "" ) :

					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

					// Setting the type on a radio button after the value resets the value in IE8-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;

					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		} else {

			// Support: IE<9
			// Use defaultChecked and defaultSelected for oldIE
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} else {
		attrHandle[ name ] = function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
	}
} );

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {

				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {

				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {

			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					( ret = elem.ownerDocument.createAttribute( name ) )
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each( [ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	} );
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {

			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case sensitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each( function() {

			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch ( e ) {}
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each( [ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	} );
}

// Support: Safari, IE9+
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return jQuery.attr( elem, "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// store className if set
					jQuery._data( this, "__className__", className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				jQuery.attr( this, "class",
					className || value === false ?
					"" :
					jQuery._data( this, "__className__" ) || ""
				);
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




// Return jQuery for attributes-only inclusion


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );


var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {

	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	} ) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new window.DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch ( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var

			// Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" )
			.replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


function getDisplay( elem ) {
	return elem.style && elem.style.display || jQuery.css( elem, "display" );
}

function filterHidden( elem ) {

	// Disconnected elements are considered hidden
	if ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {
		return true;
	}
	while ( elem && elem.nodeType === 1 ) {
		if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
			return true;
		}
		elem = elem.parentNode;
	}
	return false;
}

jQuery.expr.filters.hidden = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets() ?
		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
			filterHidden( elem );
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

	// Support: IE6-IE8
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		if ( this.isLocal ) {
			return createActiveXHR();
		}

		// Support: IE 9-11
		// IE seems to error on cross-domain PATCH requests when ActiveX XHR
		// is used. In IE 9+ always use the native XHR.
		// Note: this condition won't catch Edge as it doesn't define
		// document.documentMode but it also doesn't support ActiveX so it won't
		// reach this code.
		if ( document.documentMode > 8 ) {
			return createStandardXHR();
		}

		// Support: IE<9
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
	} :

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	} );
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport( function( options ) {

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {

						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch ( e ) {

									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;

								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					// Do send the request
					// `xhr.send` may raise an exception, but it will be
					// handled in jQuery.ajax (so no try/catch here)
					if ( !options.async ) {

						// If we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {

						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						window.setTimeout( callback );
					} else {

						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	} );
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch ( e ) {}
}




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
// https://oktainc.atlassian.net/browse/OKTA-131142
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};





/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left
		// is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== "undefined" ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? ( prop in win ) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
	function( defaultExtra, funcName ) {

		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only,
					// but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)

//9/10/2018 - OKTA-187649 - Expose jQuery in the global window object to externalize it
//OKTA-Core used to load separate jquery as part of the saasure.min.js file along with the one that is bundled in dll.common
if ( !noGlobal || window.__OKTA_EXPORT_JQUERY__ ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _stringify = __webpack_require__(32);

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(54), __webpack_require__(61), __webpack_require__(95), __webpack_require__(4), __webpack_require__(167), __webpack_require__(168), __webpack_require__(25), __webpack_require__(62), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, _, Handlebars, Q, login, country, Logger, config, BrowserFeatures) {

  var STORAGE_KEY = 'osw.languages';

  var bundlePathTpl = Handlebars.compile('/labels/jsonp/{{bundle}}_{{languageCode}}.jsonp');

  /**
   * Converts options to our internal format, which distinguishes between
   * login and country bundles.
   *
   * Example options.i18n passed in by the developer:
   * {
   *   'en': {
   *     'needhelp': 'need help override',
   *     'primaryauth.title': 'new sign in text',
   *     'country.JP' = 'Japan, Japan'
   *   }
   * }
   *
   * Parsed:
   * {
   *  'en': {
   *    'login': {
   *      'needhelp': 'need help override',
   *      'primaryauth.title': 'new sign in text',
   *    },
   *    'country': {
   *      'JP': 'Japan, Japan'
   *    }
   *  }
   * }
   */
  function parseOverrides(i18n) {
    if (!i18n) {
      return {};
    }

    var i18nWithLowerCaseKeys = {};

    _.each(_.keys(i18n), function (key) {
      i18nWithLowerCaseKeys[key.toLowerCase()] = i18n[key];
    });

    return _.mapObject(i18nWithLowerCaseKeys, function (props) {
      var mapped = { login: {}, country: {} };
      if (!_.isObject(props)) {
        throw new Error('Invalid format for "i18n"');
      }
      _.each(props, function (val, key) {
        var split = key.split(/^country\./);
        if (split.length > 1) {
          mapped.country[split[1]] = val;
        } else {
          mapped.login[split[0]] = val;
        }
      });
      return mapped;
    });
  }

  // Caching: We only bundle English by default in the Sign-In Widget. Other
  // languages are loaded on demand and cached in localStorage. These languages
  // are tied to the version of the widget - when it bumps, we reset the cache.

  function getCachedLanguages() {
    var storage = JSON.parse(localStorage.getItem(STORAGE_KEY));
    if (!storage || storage.version !== config.version) {
      storage = {
        version: config.version
      };
    }
    return storage;
  }

  function addLanguageToCache(language, loginJson, countryJson) {
    var current = getCachedLanguages();
    current[language] = {
      login: loginJson,
      country: countryJson
    };
    localStorage.setItem(STORAGE_KEY, (0, _stringify2.default)(current));
  }

  // We use jsonp to get around any CORS issues if the developer is using
  // the hosted version of the widget - by default, the assets.bundleUrl is
  // tied to the Okta CDN.
  //
  // There are two overrides available for modifying where we load the asset
  // bundles from:
  //
  // 1. assets.baseUrl
  //
  //    This is the base path the OSW pulls assets from, which in this case is
  //    the Okta CDN. Override this config option if you want to host the
  //    files on your own domain, or if you're using a new version of the
  //    widget whose language files haven't been published to the CDN yet.
  //
  // 2. assets.rewrite
  //
  //    This is a function that can be used to modify the path + fileName of
  //    the bundle we're loading, relative to the baseUrl. When called, it
  //    will pass the current path, and expect the new path to be returned.
  //    This is useful, for example, if your build process has an extra
  //    cachebusting step, i.e:
  //
  //    function rewrite(file) {
  //      // file: /labels/jsonp/login_ja.jsonp
  //      return file.replace('.jsonp', '.' + md5file(file) + '.jsonp');
  //    }
  //
  // Note: Most developers will not need to use these overrides - the default
  // is to use the Okta CDN and to use the same path + file structure the
  // widget module publishes by default.
  function fetchJsonp(bundle, language, assets) {
    var languageCode, path;

    // Our bundles use _ to separate country and region, i.e:
    // zh-CN -> zh_CN
    languageCode = language.replace('-', '_');

    path = assets.rewrite(bundlePathTpl({
      bundle: bundle,
      languageCode: languageCode
    }));

    return $.ajax({
      url: assets.baseUrl + path,
      dataType: 'jsonp',
      cache: true,
      // jQuery jsonp doesn't handle errors, so set a long timeout as a
      // fallback option
      timeout: 5000,
      jsonpCallback: 'jsonp_' + bundle
    });
  }

  function getBundles(language, assets) {
    // Two special cases:
    // 1. English is already bundled with the widget
    // 2. If the language is not in our config file, it means that they've
    //    probably defined it on their own.
    if (language === 'en' || !_.contains(config.supportedLanguages, language)) {
      return Q({});
    }

    //local storage does not work correctly with android web views (embeded browers)
    //so skip the caching and just make the request to get the local info
    var localStorageIsSupported = !BrowserFeatures.localStorageIsNotSupported();
    if (localStorageIsSupported) {
      var cached = getCachedLanguages();
      if (cached[language]) {
        return Q(cached[language]);
      }
    }

    return Q.all([fetchJsonp('login', language, assets), fetchJsonp('country', language, assets)]).spread(function (loginJson, countryJson) {
      if (localStorageIsSupported) {
        addLanguageToCache(language, loginJson, countryJson);
      }
      return { login: loginJson, country: countryJson };
    }).fail(function () {
      // If there is an error, this will default to the bundled language and
      // we will no longer try to load the language this session.
      Logger.warn('Unable to load language: ' + language);
      return {};
    });
  }

  return {
    login: login,
    country: country,
    // Courage components within the sign in widget point to courage bundle to look
    // up i18nkeys. Since we dont have courage.properties inside the sign in widget
    // we are pointing courage bundle to login.
    courage: login,

    currentLanguage: null,

    isLoaded: function isLoaded(language) {
      return this.currentLanguage === language;
    },

    remove: function remove() {
      this.currentLanguage = null;
    },

    loadLanguage: function loadLanguage(language, overrides, assets) {
      var parsedOverrides = parseOverrides(overrides);
      var lowerCaseLanguage = language.toLowerCase();
      return getBundles(language, assets).then(_.bind(function (bundles) {
        // Always extend from the built in defaults in the event that some
        // properties are not translated
        this.login = _.extend({}, login, bundles.login);
        this.country = _.extend({}, country, bundles.country);
        this.courage = _.extend({}, login, bundles.login);
        if (parsedOverrides[lowerCaseLanguage]) {
          _.extend(this.login, parsedOverrides[lowerCaseLanguage]['login']);
          _.extend(this.country, parsedOverrides[lowerCaseLanguage]['country']);
          _.extend(this.courage, parsedOverrides[lowerCaseLanguage]['login']);
        }
        this.currentLanguage = language;
      }, this));
    }

  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint max-statements: [2, 15] */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Q, Enums) {

  var SWAP_PAGE_TIME = 200;

  var fn = {};

  function zoom($el, start, finish) {
    var deferred = Q.defer();
    $el.animate({
      'text-indent': 1
    }, {
      duration: 200,
      easing: 'swing',
      step: function step(now, fx) {
        fx.start = start;
        fx.end = finish;
        $el.css('transform', 'scale(' + now + ', ' + now + ')');
      },
      always: function always() {
        deferred.resolve($el);
      }
    });
    return deferred.promise;
  }

  function rotate($el, start, finish) {
    var deferred = Q.defer();
    $el.animate({
      'text-indent': 1
    }, {
      duration: 150,
      easing: 'swing',
      step: function step(now, fx) {
        fx.start = start;
        fx.end = finish;
        $el.css('transform', 'rotate(' + now + 'deg)');
      },
      always: function always() {
        deferred.resolve($el);
      }
    });
    return deferred.promise;
  }

  // Note: It is necessary to pass in a success callback because we must
  // remove the old dom node (and controller) in the same tick of the event
  // loop. Waiting for "then" results in a glitchy animation.
  fn.swapPages = function (options) {
    var deferred = Q.defer();
    var $parent = options.$parent;
    var $oldRoot = options.$oldRoot;
    var $newRoot = options.$newRoot;
    var success = options.success;
    var ctx = options.ctx;
    var directionClassName = 'transition-from-right';

    if (options.dir && options.dir === Enums.DIRECTION_BACK) {
      directionClassName = 'transition-from-left';
    }

    $newRoot.addClass(directionClassName);
    $parent.append($newRoot);

    $parent.addClass('animation-container-overflow');
    $newRoot.animate({ left: '0px', top: '0px', opacity: 1 }, SWAP_PAGE_TIME, function () {
      $parent.removeClass('animation-container-overflow');
      $newRoot.removeClass(directionClassName);
      $newRoot.removeAttr('style');
      success.call(ctx);
      deferred.resolve();
    });

    $oldRoot.animate({ height: $newRoot.height(), opacity: 0 }, SWAP_PAGE_TIME * 0.8);

    return deferred.promise;
  };

  fn.swapBeacons = function (options) {
    var $el = options.$el,
        swap = options.swap,
        ctx = options.ctx;

    return this.implode($el).then(function () {
      swap.call(ctx);
      return $el;
    }).then(this.explode);
  };

  fn.explode = function ($el) {
    return zoom($el, 0, 1); //zoom in
  };

  fn.implode = function ($el) {
    return zoom($el, 1, 0); //zoom out
  };

  fn.radialProgressBar = function (options) {
    var radialProgressBar = options.$el,
        swap = options.swap,
        circles = radialProgressBar.children();

    return rotate(circles, 0, 180).then(function () {
      radialProgressBar.css({ 'clip': 'auto' });
    }).then(function () {
      var leftHalf = circles.eq(0);
      swap();
      return rotate(leftHalf, 180, 360);
    }).then(function () {
      //reset values to initial state
      radialProgressBar.css({ 'clip': 'rect(0px, 96px, 96px, 48px)' });
      circles.css({
        'transform': 'rotate(0deg)',
        'text-indent': '1px'
      });
    });
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint complexity: [2, 13] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4), __webpack_require__(8), __webpack_require__(5), __webpack_require__(13), __webpack_require__(42)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q, factorUtil, Util, Errors, BaseLoginModel) {
  var _ = Okta._;

  // Avoid setting interval to same value as keep-alive time (5 seconds) because it
  // caused an occasional issue with network connection lost errors in Safari and IE
  var PUSH_INTERVAL = 4000;

  var Factor = BaseLoginModel.extend({
    extraProperties: true,
    flat: false,

    props: {
      id: 'string',
      factorType: {
        type: 'string',
        values: ['sms', 'call', 'email', 'token', 'token:software:totp', 'token:hotp', 'token:hardware', 'question', 'push', 'u2f', 'password', 'assertion:saml2', 'assertion:oidc', 'claims_provider', 'webauthn']
      },
      provider: {
        type: 'string',
        values: ['OKTA', 'RSA', 'DEL_OATH', 'SYMANTEC', 'GOOGLE', 'YUBICO', 'FIDO', 'CUSTOM', 'GENERIC_SAML', 'GENERIC_OIDC']
      },
      enrollment: {
        type: 'string',
        values: ['OPTIONAL', 'REQUIRED']
      },
      status: {
        type: 'string',
        values: ['NOT_SETUP', 'ACTIVE']
      },
      profile: ['object'],
      vendorName: 'string',
      policy: ['object'],
      profiles: ['object']
    },

    local: {
      'answer': 'string',
      'password': 'string',
      'backupFactor': 'object',
      'showAnswer': 'boolean',
      'rememberDevice': 'boolean',
      'autoPush': ['boolean', true, false]
    },

    derived: {
      isOktaFactor: {
        deps: ['provider'],
        fn: function fn(provider) {
          return provider === 'OKTA';
        }
      },
      factorName: {
        deps: ['provider', 'factorType'],
        fn: factorUtil.getFactorName
      },
      factorLabel: {
        deps: ['provider', 'factorType', 'vendorName'],
        fn: function fn(provider, factorType, vendorName) {
          if (_.contains(['DEL_OATH', 'GENERIC_SAML', 'GENERIC_OIDC', 'CUSTOM'], provider)) {
            return vendorName;
          }
          return factorUtil.getFactorLabel.apply(this, [provider, factorType]);
        }
      },
      factorDescription: {
        deps: ['provider', 'factorType'],
        fn: factorUtil.getFactorDescription
      },
      sortOrder: {
        deps: ['provider', 'factorType'],
        fn: factorUtil.getFactorSortOrder
      },
      iconClassName: {
        deps: ['provider', 'factorType'],
        fn: factorUtil.getFactorIconClassName
      },
      securityQuestion: {
        deps: ['profile', 'factorType'],
        fn: function fn(profile, factorType) {
          if (factorType !== 'question') {
            return null;
          }
          return profile && factorUtil.getSecurityQuestionLabel(profile);
        }
      },
      phoneNumber: {
        deps: ['profile', 'factorType'],
        fn: function fn(profile, factorType) {
          if (_.contains(['sms', 'call'], factorType)) {
            return profile && profile.phoneNumber;
          }
          return null;
        }
      },
      email: {
        deps: ['profile', 'factorType'],
        fn: function fn(profile, factorType) {
          if (factorType === 'email') {
            return profile && profile.email;
          }
          return null;
        }
      },
      deviceName: {
        deps: ['profile', 'factorType'],
        fn: function fn(profile, factorType) {
          if (factorType !== 'push') {
            return null;
          }
          return profile && profile.name;
        }
      },
      enrolled: {
        deps: ['status'],
        fn: function fn(status) {
          return status === 'ACTIVE';
        }
      },
      cardinality: {
        deps: ['policy', 'profiles'],
        fn: function fn(policy, profiles) {
          if (profiles && profiles.length > 0) {
            //assume for now we only get one profile (multiple profiles are not supported yet)
            var profile = profiles[0];
            var enrolled = profile._embedded.enrolledFactors.length;
            var adoption = _.findWhere(profile._embedded.features, { type: 'adoption' });
            if (adoption && adoption.cardinality) {
              return {
                enrolled: enrolled,
                minimum: adoption.cardinality.min,
                maximum: adoption.cardinality.max
              };
            }
            return false;
          } else if (policy && policy.enrollment) {
            return policy.enrollment;
          } else {
            return false;
          }
        }
      },
      additionalEnrollment: {
        deps: ['cardinality'],
        fn: function fn(cardinality) {
          if (cardinality) {
            return cardinality.enrolled !== 0 && cardinality.enrolled < cardinality.maximum;
          } else {
            return false;
          }
        }
      },
      required: {
        deps: ['enrollment'],
        fn: function fn(enrollment) {
          return enrollment === 'REQUIRED';
        }
      },
      canUseResend: {
        deps: ['provider', 'factorType'],
        fn: function fn(provider, factorType) {
          // Only push, sms and call have resend links.
          return provider === 'OKTA' && _.contains(['push', 'sms', 'call', 'email'], factorType);
        }
      },
      isAnswerRequired: {
        deps: ['factorType'],
        fn: function fn(factorType) {
          return _.contains(['sms', 'call', 'email', 'token', 'token:software:totp', 'question'], factorType);
        }
      },
      isFactorTypeVerification: {
        deps: ['provider', 'id'],
        fn: function fn(provider, id) {
          return provider === undefined && id === undefined;
        }
      }
    },

    parse: function parse(attributes) {
      this.settings = attributes.settings;
      this.appState = attributes.appState;
      // set the initial value for remember device.
      attributes.rememberDevice = factorUtil.getRememberDeviceValue(this.appState);

      // Add vendorname for custom totp enroll
      this.setCustomHotpVendorName(attributes);
      return _.omit(attributes, ['settings', 'appState']);
    },

    validate: function validate() {
      if (this.get('isAnswerRequired') && !this.get('answer')) {
        return { 'answer': Okta.loc('model.validation.field.blank') };
      } else if (this.get('factorType') === 'password' && !this.get('password')) {
        return { 'password': Okta.loc('error.password.required') };
      }
    },
    needsPasscode: function needsPasscode() {
      // we don't need passcode for email with magic link flow
      return !(this.options.appState.get('isIdxStateToken') && this.get('factorType') === 'email');
    },
    save: function save() {
      var rememberDevice = !!this.get('rememberDevice');
      // Set/Remove the remember device cookie based on the remember device input.
      var self = this;

      return this.manageTransaction(function (transaction, setTransaction) {
        var data = {
          rememberDevice: rememberDevice
        };
        if (this.get('factorType') === 'question') {
          data.answer = this.get('answer');
        } else if (this.get('factorType') === 'password') {
          data.password = this.get('password');
        } else if (this.needsPasscode()) {
          data.passCode = this.get('answer');
        }

        if (this.pushFactorHasAutoPush()) {
          data.autoPush = this.get('autoPush');
        }

        var promise;
        // MFA_REQUIRED, FACTOR_REQUIRED or UNAUTHENTICATED with factors (passwordlessAuth)
        if (transaction.status === 'MFA_REQUIRED' || transaction.status === 'FACTOR_REQUIRED' || this.appState.get('promptForFactorInUnauthenticated')) {
          var factor = this._findFactor(transaction);
          promise = factor.verify(data);
        }

        // MFA_CHALLENGE/ FACTOR_CHALLENGE
        else if (this.get('canUseResend') && !this.get('answer') && transaction.resend) {
            var firstLink = transaction.data._links.resend[0];
            promise = transaction.resend(firstLink.name);
          } else {
            promise = transaction.verify(data);
          }
        //the 'save' event here is triggered and used in the BaseLoginController
        //to disable the primary button on the factor form
        this.trigger('save');

        return promise.then(function (trans) {
          var options = {
            'delay': PUSH_INTERVAL,
            'transactionCallBack': function transactionCallBack(transaction) {
              self.options.appState.set('lastAuthResponse', transaction);
            }
          };
          setTransaction(trans);
          // In Okta verify case we initiate poll.
          if (trans.status === 'MFA_CHALLENGE' && trans.poll || trans.status === 'FACTOR_CHALLENGE' && trans.poll) {
            var deferred = Q.defer();
            var initiatePollTimout = Util.callAfterTimeout(deferred.resolve, PUSH_INTERVAL);
            self.listenToOnce(self.options.appState, 'factorSwitched', function () {
              clearTimeout(initiatePollTimout);
              deferred.reject(new Errors.AuthStopPollInitiationError());
            });
            return deferred.promise.then(function () {
              // Stop listening if factor was not switched before poll.
              self.stopListening(self.options.appState, 'factorSwitched');
              if (self.pushFactorHasAutoPush()) {
                options.autoPush = function () {
                  return self.get('autoPush');
                };
                options.rememberDevice = function () {
                  return self.get('rememberDevice');
                };
              }
              return trans.poll(options).then(function (trans) {
                self.options.appState.set('lastAuthResponse', trans.data);
                setTransaction(trans);
              });
            });
          }
        });
      });
    },

    _findFactor: function _findFactor(transaction) {
      var factor;
      if (transaction.factorTypes) {
        factor = _.findWhere(transaction.factorTypes, {
          factorType: this.get('factorType')
        });
      }
      if (!factor) {
        factor = _.findWhere(transaction.factors, {
          id: this.get('id')
        });
      }
      return factor;
    },

    pushFactorHasAutoPush: function pushFactorHasAutoPush() {
      return this.settings.get('features.autoPush') && this.get('factorType') === 'push';
    },

    setCustomHotpVendorName: function setCustomHotpVendorName(attributes) {
      // If factor is token:hotp and not enrolled, we assume the first profile is the default.
      // If factor is enrolled, we only support one profile to be enrolled, so find that one
      // and display as enrolled profile. We do this by populating profile name in vendorName.
      if (attributes.factorType === 'token:hotp' && attributes.profiles) {
        if (attributes.status === 'NOT_SETUP') {
          attributes.vendorName = attributes.profiles[0].name;
        } else if (attributes.status === 'ACTIVE') {
          var enrolledProfiles = attributes.profiles.filter(function (profile) {
            return profile._embedded.enrolledFactors.length > 0;
          });
          attributes.vendorName = enrolledProfiles[0].name;
        }
      }
      return attributes;
    }
  });

  var Factors = Okta.Collection.extend({

    model: Factor,
    comparator: 'sortOrder',

    // One override necessary here - When Okta Verify OTP and Push are in the list,
    // they are presented in the view as one factor - in the beacon menu,
    // there's only one option (Okta Verify), and we show a form with Push
    // with an inline totp option. What we need to do is to add totp
    // as a "backupFactor" for push
    parse: function parse(factors) {
      // Keep a track of the last used factor, since
      // we need it to determine the default factor.
      this.lastUsedFactor = factors[0];

      var oktaPushFactor = _.findWhere(factors, { provider: 'OKTA', factorType: 'push' });
      var totpFactor;
      if (_.where(factors, { factorType: 'push' }).length > 1) {
        totpFactor = _.findWhere(factors, { factorType: 'token:software:totp' });
      } else {
        totpFactor = _.findWhere(factors, { provider: 'OKTA', factorType: 'token:software:totp' });
      }
      if (!oktaPushFactor || !totpFactor) {
        return factors;
      }

      var isTotpFirst = totpFactor === factors[0];

      var parsedFactors = _.reduce(factors, function (memo, factor) {
        var isOkta = factor.provider === 'OKTA';
        var isOktaTotp = isOkta && factor.factorType === 'token:software:totp';
        var isOktaPush = isOkta && factor.factorType === 'push';
        var notEnrolled = factor.status !== 'ACTIVE';

        var hideOktaTotp = isOktaTotp && (notEnrolled || oktaPushFactor.status === 'ACTIVE');
        var hideOktaPush = isOktaPush && notEnrolled && totpFactor.status === 'ACTIVE';

        if (hideOktaTotp || hideOktaPush) {
          return memo;
        }

        if (isOktaPush) {
          factor.backupFactor = new Factor(totpFactor, { parse: true });
        }
        memo.push(factor);
        return memo;
      }, []);

      // Use push factor instead of TOTP, if TOTP is first in the list
      // (since it is stored as backupFactor for push).
      if (isTotpFirst) {
        this.lastUsedFactor = oktaPushFactor;
      }

      return parsedFactors;
    },

    // Will need to update this to use HAL link to get last used factor:
    // https://oktainc.atlassian.net/browse/OKTA-58380
    // However, current code returns last used factor as first factor in list.
    // Also, will need to add priority - i.e. if they do not have a last used
    // factor, should try Okta Verify, then Okta SMS, etc.
    getDefaultFactor: function getDefaultFactor() {
      var factor = _.pick(this.lastUsedFactor, 'factorType', 'provider');
      return this.findWhere(factor);
    },

    getFirstUnenrolledRequiredFactor: function getFirstUnenrolledRequiredFactor() {
      return this.findWhere({ required: true, enrolled: false });
    },

    _getFactorsOfType: function _getFactorsOfType(factorType) {
      return this.where({ factorType: factorType });
    },

    getFactorIndex: function getFactorIndex(factorType, factorId) {
      return this._getFactorsOfType(factorType).findIndex(function (factor) {
        return factor.get('id') === factorId;
      });
    },

    hasMultipleFactorsOfSameType: function hasMultipleFactorsOfSameType(factorType) {
      return this._getFactorsOfType(factorType).length > 1;
    },

    getFactorByTypeAndIndex: function getFactorByTypeAndIndex(factorType, factorIndex) {
      return this._getFactorsOfType(factorType)[factorIndex];
    }

  });

  return {
    Model: Factor,
    Collection: Factors
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(94);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _freeze = __webpack_require__(227);

var _freeze2 = _interopRequireDefault(_freeze);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* globals JSON */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4), __webpack_require__(80)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q, FidoUtil) {

  function adaptToOkta(promise) {
    return new Q(promise);
  }

  function makeCredential(accountInfo, cryptoParams, challenge) {
    cryptoParams = cryptoParams.map(function (param) {
      return { type: 'FIDO_2_0', algorithm: param.algorithm };
    });

    var promise = window.msCredentials.makeCredential(accountInfo, cryptoParams, challenge).then(function (cred) {
      return (0, _freeze2.default)({
        credential: { id: cred.id },
        publicKey: JSON.parse(cred.publicKey),
        attestation: cred.attestation
      });
    });

    return adaptToOkta(promise);
  }

  function getAssertion(challenge, allowList) {
    var accept = allowList.map(function (item) {
      return { type: 'FIDO_2_0', id: item.id };
    });
    var filters = { accept: accept };

    var promise = window.msCredentials.getAssertion(challenge, filters).then(function (attestation) {
      var signature = attestation.signature;
      return (0, _freeze2.default)({
        credential: { id: attestation.id },
        clientData: signature.clientData,
        authenticatorData: signature.authnrData,
        signature: signature.signature
      });
    });

    return adaptToOkta(promise);
  }

  return {
    makeCredential: makeCredential,
    getAssertion: getAssertion,
    isAvailable: function isAvailable() {
      return window.hasOwnProperty('msCredentials');
    },
    isNewApiAvailable: function isNewApiAvailable() {
      return navigator && navigator.credentials && navigator.credentials.create;
    },
    isWebauthnOrU2fAvailable: function isWebauthnOrU2fAvailable() {
      return this.isNewApiAvailable() || FidoUtil.isU2fAvailable();
    }
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseHeader = __webpack_require__(130);

var _BaseHeader2 = _interopRequireDefault(_BaseHeader);

var _HeaderBeaconFactor = __webpack_require__(306);

var _HeaderBeaconFactor2 = _interopRequireDefault(_HeaderBeaconFactor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _BaseView2.default.extend({
  Header: _BaseHeader2.default.extend({
    HeaderBeacon: _HeaderBeaconFactor2.default
  })
});

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (true) {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}.call(this));


/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = {"version":"3.6.1","supportedLanguages":["en","cs","da","de","el","es","fi","fr","hu","id","in","it","ja","ko","ms","nb","nl-NL","pl","pt-BR","ro","ru","sv","th","tr","uk","vi","zh-CN","zh-TW"]}

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(13), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums, Errors, Util) {

  var util = {};
  var _ = Okta._;

  function hasResponseType(params, type) {
    if (_.isArray(params.responseType)) {
      return _.contains(params.responseType, type);
    } else {
      return type === params.responseType;
    }
  }

  /**
   * Get the tokens in the OIDC/OAUTH flows
   *
   * @param settings - settings model object
   * @param params - {idp: 'xxx'} for social auth
   *                 {sessionToken: 'xxx'} for okta idp
   */
  util.getTokens = function (settings, params, controller) {

    function success(result) {
      settings.callGlobalSuccess(Enums.SUCCESS, result);
    }

    function error(error) {
      // OKTA-104330- Handle error case where user is not assigned to OIDC client
      if (error.errorCode === 'access_denied') {
        controller.model.trigger('error', controller.model, { 'responseJSON': error });
        controller.model.appState.trigger('removeLoading');
      }
      Util.triggerAfterError(controller, new Errors.OAuthError(error.message), settings);
    }

    var authClient = settings.getAuthClient(),
        options = settings.toJSON({ verbose: true }),
        oauthParams = {},
        extraOptions = {};

    _.extend(oauthParams, _.pick(options, 'clientId', 'redirectUri'), _.pick(options.authParams, 'pkce', 'grantType', // deprecated
    'responseType', 'responseMode', 'display', 'scopes', 'state', 'nonce'), params);

    // Extra Options for Social Idp popup window title and id_token response timeout
    extraOptions.popupTitle = Okta.loc('socialauth.popup.title', 'login');
    extraOptions.timeout = options.oAuthTimeout;

    _.extend(extraOptions, _.pick(options.authParams, 'issuer', 'authorizeUrl'));

    // Redirect flow - this can be used when logging into an external IDP, or
    // converting the Okta sessionToken to an access_token, id_token, and/or
    // authorization code. Note: The authorization code flow will always redirect.
    if (oauthParams.display === 'page' || hasResponseType(oauthParams, 'code')) {
      authClient.token.getWithRedirect(oauthParams, extraOptions).fail(error);
    }

    // Default flow if logging in with Okta as the IDP - convert sessionToken to
    // tokens in a hidden iframe. Used in Single Page Apps where the app does
    // not want to redirect away from the page to convert the token.
    else if (oauthParams.sessionToken) {
        authClient.token.getWithoutPrompt(oauthParams, extraOptions).then(success).fail(error).done();
      }

      // Default flow if logging in with an external IDP - opens a popup and
      // gets the token from a postMessage response.
      else {
          authClient.token.getWithPopup(oauthParams, extraOptions).then(success).fail(error).done();
        }
  };

  // Parse through the OAuth 'authParams' object to ensure the 'openid' scope is
  // included (if required)
  util.addOrRemoveOpenIdScope = function (authParams) {
    if (!authParams.responseType) {
      return;
    }

    //  Convert scope into an Array
    var scope = Array.isArray(authParams.scopes) ? authParams.scopes : authParams.scopes.split(' ');

    // Remove the 'openid' scope, as it is only required if an 'id_token' is requested
    if (scope.includes('openid')) {
      scope.splice(scope.indexOf('openid'), 1);
    }

    // Add the 'openid' scope
    if (authParams.responseType.includes('id_token')) {
      scope.push('openid');
    }

    return scope;
  };

  // Utility handlers for mapping convenience keys to OAuth params
  util.getResponseType = function (options) {
    var responseType = [];
    if (options.getIdToken !== false) {
      responseType.push('id_token');
    }

    if (options.getAccessToken) {
      responseType.push('token');
    }

    return responseType;
  };

  util.transformShowSignInToGetTokensOptions = function (options) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // Override specific OAuth/OIDC values
    if (!options.clientId && !config.clientId) {
      throw new Errors.ConfigError('showSignInToGetTokens() requires a "clientId" property.');
    }

    var renderOptions = {
      clientId: options.clientId,
      redirectUri: options.redirectUri,
      authParams: {
        issuer: options.authorizationServerId || 'default',
        display: 'page',
        responseMode: 'fragment',
        responseType: util.getResponseType(options),
        scopes: options.scope || config.authParams && config.authParams.scopes || ['openid']
      }
    };

    // Ensure the 'openid' scope is provided when an 'id_token' is requested.
    // If the 'openid' scope is present and isn't needed, remove it.
    renderOptions.authParams.scopes = util.addOrRemoveOpenIdScope(renderOptions.authParams);

    return renderOptions;
  };

  return util;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 64 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 65 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(20);
var document = __webpack_require__(10).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(20);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(69)('keys');
var uid = __webpack_require__(50);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(7);
var global = __webpack_require__(10);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(39) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 70 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(11);


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(10);
var core = __webpack_require__(7);
var LIBRARY = __webpack_require__(39);
var wksExt = __webpack_require__(71);
var defineProperty = __webpack_require__(24).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 73 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* @okta/qtip2 v3.0.3-5-g | Plugins: tips modal viewport svg imagemap ie6 | Styles: core basic css3 | qtip2.com | Licensed MIT | Wed May 24 2017 01:22:57 */

!function(a,b,c){!function(a){"use strict"; true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(54)], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):jQuery&&!jQuery.fn.qtip&&a(jQuery)}(function(d){"use strict";function e(a,b,c,e){this.id=c,this.target=a,this.tooltip=F,this.elements={target:a},this._id=S+"-"+c,this.timers={img:{}},this.options=b,this.plugins={},this.cache={event:{},target:d(),disabled:E,attr:e,onTooltip:E,lastClass:""},this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=E}function f(a){return a===F||"object"!==d.type(a)}function g(a){return!(d.isFunction(a)||a&&a.attr||a.length||"object"===d.type(a)&&(a.jquery||a.then))}function h(a){var b,c,e,h;return f(a)?E:(f(a.metadata)&&(a.metadata={type:a.metadata}),"content"in a&&(b=a.content,f(b)||b.jquery||b.done?(c=g(b)?E:b,b=a.content={text:c}):c=b.text,"ajax"in b&&(e=b.ajax,h=e&&e.once!==E,delete b.ajax,b.text=function(a,b){var f=c||d(this).attr(b.options.content.attr)||"Loading...",g=d.ajax(d.extend({},e,{context:b})).then(e.success,F,e.error).then(function(a){return a&&h&&b.set("content.text",a),a},function(a,c,d){b.destroyed||0===a.status||b.set("content.text",c+": "+d)});return h?f:(b.set("content.text",f),g)}),"title"in b&&(d.isPlainObject(b.title)&&(b.button=b.title.button,b.title=b.title.text),g(b.title||E)&&(b.title=E))),"position"in a&&f(a.position)&&(a.position={my:a.position,at:a.position}),"show"in a&&f(a.show)&&(a.show=a.show.jquery?{target:a.show}:a.show===D?{ready:D}:{event:a.show}),"hide"in a&&f(a.hide)&&(a.hide=a.hide.jquery?{target:a.hide}:{event:a.hide}),"style"in a&&f(a.style)&&(a.style={classes:a.style}),d.each(R,function(){this.sanitize&&this.sanitize(a)}),a)}function i(a,b){for(var c,d=0,e=a,f=b.split(".");e=e[f[d++]];)d<f.length&&(c=e);return[c||a,f.pop()]}function j(a,b){var c,d,e;for(c in this.checks)if(this.checks.hasOwnProperty(c))for(d in this.checks[c])this.checks[c].hasOwnProperty(d)&&(e=new RegExp(d,"i").exec(a))&&(b.push(e),("builtin"===c||this.plugins[c])&&this.checks[c][d].apply(this.plugins[c]||this,b))}function k(a){return V.concat("").join(a?"-"+a+" ":" ")}function l(a,b){return b>0?setTimeout(d.proxy(a,this),b):void a.call(this)}function m(a){this.tooltip.hasClass(aa)||(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this.timers.show=l.call(this,function(){this.toggle(D,a)},this.options.show.delay))}function n(a){if(!this.tooltip.hasClass(aa)&&!this.destroyed){var b=d(a.relatedTarget),c=b.closest(W)[0]===this.tooltip[0],e=b[0]===this.options.show.target[0];if(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==b[0]&&"mouse"===this.options.position.target&&c||this.options.hide.fixed&&/mouse(out|leave|move)/.test(a.type)&&(c||e))try{a.preventDefault(),a.stopImmediatePropagation()}catch(f){}else this.timers.hide=l.call(this,function(){this.toggle(E,a)},this.options.hide.delay,this)}}function o(a){!this.tooltip.hasClass(aa)&&this.options.hide.inactive&&(clearTimeout(this.timers.inactive),this.timers.inactive=l.call(this,function(){this.hide(a)},this.options.hide.inactive))}function p(a){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(a)}function q(a,c,e){d(b.body).delegate(a,(c.split?c:c.join("."+S+" "))+"."+S,function(){var a=y.api[d.attr(this,U)];a&&!a.disabled&&e.apply(a,arguments)})}function r(a,c,f){var g,i,j,k,l,m=d(b.body),n=a[0]===b?m:a,o=a.metadata?a.metadata(f.metadata):F,p="html5"===f.metadata.type&&o?o[f.metadata.name]:F,q=a.data(f.metadata.name||"qtipopts");try{q="string"==typeof q?d.parseJSON(q):q}catch(r){}if(k=d.extend(D,{},y.defaults,f,"object"==typeof q?h(q):F,h(p||o)),i=k.position,k.id=c,"boolean"==typeof k.content.text){if(j=a.attr(k.content.attr),k.content.attr===E||!j)return E;k.content.text=j}if(i.container.length||(i.container=m),i.target===E&&(i.target=n),k.show.target===E&&(k.show.target=n),k.show.solo===D&&(k.show.solo=i.container.closest("body")),k.hide.target===E&&(k.hide.target=n),k.position.viewport===D&&(k.position.viewport=i.container),i.container=i.container.eq(0),i.at=new A(i.at,D),i.my=new A(i.my),a.data(S))if(k.overwrite)a.qtip("destroy",!0);else if(k.overwrite===E)return E;return a.attr(T,c),k.suppress&&(l=a.attr("title"))&&a.removeAttr("title").attr(ca,l).attr("title",""),g=new e(a,k,c,(!!j)),a.data(S,g),g}function s(a){return a.charAt(0).toUpperCase()+a.slice(1)}function t(a,b){var d,e,f=b.charAt(0).toUpperCase()+b.slice(1),g=(b+" "+va.join(f+" ")+f).split(" "),h=0;if(ua[b])return a.css(ua[b]);for(;d=g[h++];)if((e=a.css(d))!==c)return ua[b]=d,e}function u(a,b){return Math.ceil(parseFloat(t(a,b)))}function v(a,b){this._ns="tip",this.options=b,this.offset=b.offset,this.size=[b.width,b.height],this.qtip=a,this.init(a)}function w(a,b){this.options=b,this._ns="-modal",this.qtip=a,this.init(a)}function x(a){this._ns="ie6",this.qtip=a,this.init(a)}var y,z,A,B,C,D=!0,E=!1,F=null,G="x",H="y",I="width",J="height",K="top",L="left",M="bottom",N="right",O="center",P="flipinvert",Q="shift",R={},S="qtip",T="data-hasqtip",U="data-qtip-id",V=["ui-widget","ui-tooltip"],W="."+S,X="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),Y=S+"-fixed",Z=S+"-default",$=S+"-focus",_=S+"-hover",aa=S+"-disabled",ba="_replacedByqTip",ca="oldtitle",da={ie:function(){var a,c;for(a=4,c=b.createElement("div");(c.innerHTML="<!--[if gt IE "+a+"]><i></i><![endif]-->")&&c.getElementsByTagName("i")[0];a+=1);return a>4?a:NaN}(),iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||E};z=e.prototype,z._when=function(a){return d.when.apply(d,a)},z.render=function(a){if(this.rendered||this.destroyed)return this;var b=this,c=this.options,e=this.cache,f=this.elements,g=c.content.text,h=c.content.title,i=c.content.button,j=c.position,k=[];return d.attr(this.target[0],"aria-describedby",this._id),e.posClass=this._createPosClass((this.position={my:j.my,at:j.at}).my),this.tooltip=f.tooltip=d("<div/>",{id:this._id,"class":[S,Z,c.style.classes,e.posClass].join(" "),width:c.style.width||"",height:c.style.height||"",tracking:"mouse"===j.target&&j.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":E,"aria-describedby":this._id+"-content","aria-hidden":D}).toggleClass(aa,this.disabled).attr(U,this.id).data(S,this).appendTo(j.container).append(f.content=d("<div />",{"class":S+"-content",id:this._id+"-content","aria-atomic":D})),this.rendered=-1,this.positioning=D,h&&(this._createTitle(),d.isFunction(h)||k.push(this._updateTitle(h,E))),i&&this._createButton(),d.isFunction(g)||k.push(this._updateContent(g,E)),this.rendered=D,this._setWidget(),d.each(R,function(a){var c;"render"===this.initialize&&(c=this(b))&&(b.plugins[a]=c)}),this._unassignEvents(),this._assignEvents(),this._when(k).then(function(){b._trigger("render"),b.positioning=E,b.hiddenDuringWait||!c.show.ready&&!a||b.toggle(D,e.event,E),b.hiddenDuringWait=E}),y.api[this.id]=this,this},z.destroy=function(a){function b(){if(!this.destroyed){this.destroyed=D;var a,b=this.target,c=b.attr(ca);this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),d.each(this.plugins,function(){this.destroy&&this.destroy()});for(a in this.timers)this.timers.hasOwnProperty(a)&&clearTimeout(this.timers[a]);b.removeData(S).removeAttr(U).removeAttr(T).removeAttr("aria-describedby"),this.options.suppress&&c&&b.attr("title",c).removeAttr(ca),this._unassignEvents(),this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=F,delete y.api[this.id]}}return this.destroyed?this.target:(a===D&&"hide"!==this.triggering||!this.rendered?b.call(this):(this.tooltip.one("tooltiphidden",d.proxy(b,this)),!this.triggering&&this.hide()),this.target)},B=z.checks={builtin:{"^id$":function(a,b,c,e){var f=c===D?y.nextid:c,g=S+"-"+f;f!==E&&f.length>0&&!d("#"+g).length?(this._id=g,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):a[b]=e},"^prerender":function(a,b,c){c&&!this.rendered&&this.render(this.options.show.ready)},"^content.text$":function(a,b,c){this._updateContent(c)},"^content.attr$":function(a,b,c,d){this.options.content.text===this.target.attr(d)&&this._updateContent(this.target.attr(c))},"^content.title$":function(a,b,c){return c?(c&&!this.elements.title&&this._createTitle(),void this._updateTitle(c)):this._removeTitle()},"^content.button$":function(a,b,c){this._updateButton(c)},"^content.title.(text|button)$":function(a,b,c){this.set("content."+b,c)},"^position.(my|at)$":function(a,b,c){"string"==typeof c&&(this.position[b]=a[b]=new A(c,"at"===b))},"^position.container$":function(a,b,c){this.rendered&&this.tooltip.appendTo(c)},"^show.ready$":function(a,b,c){c&&(!this.rendered&&this.render(D)||this.toggle(D))},"^style.classes$":function(a,b,c,d){this.rendered&&this.tooltip.removeClass(d).addClass(c)},"^style.(width|height)":function(a,b,c){this.rendered&&this.tooltip.css(b,c)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(a,b,c){this.rendered&&this.tooltip.toggleClass(Z,!!c)},"^events.(render|show|move|hide|focus|blur)$":function(a,b,c){this.rendered&&this.tooltip[(d.isFunction(c)?"":"un")+"bind"]("tooltip"+b,c)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){var a=this.options.position;this.tooltip.attr("tracking","mouse"===a.target&&a.adjust.mouse),this._unassignEvents(),this._assignEvents()}}}},z.get=function(a){if(this.destroyed)return this;var b=i(this.options,a.toLowerCase()),c=b[0][b[1]];return c.precedance?c.string():c};var ea=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,fa=/^prerender|show\.ready/i;z.set=function(a,b){if(this.destroyed)return this;var c,e=this.rendered,f=E,g=this.options;return"string"==typeof a?(c=a,a={},a[c]=b):a=d.extend({},a),d.each(a,function(b,c){if(e&&fa.test(b))return void delete a[b];var h,j=i(g,b.toLowerCase());h=j[0][j[1]],j[0][j[1]]=c&&c.nodeType?d(c):c,f=ea.test(b)||f,a[b]=[j[0],j[1],c,h]}),h(g),this.positioning=D,d.each(a,d.proxy(j,this)),this.positioning=E,this.rendered&&this.tooltip[0].offsetWidth>0&&f&&this.reposition("mouse"===g.position.target?F:this.cache.event),this},z._update=function(a,b){var c=this,e=this.cache;return this.rendered&&a?(d.isFunction(a)&&(a=a.call(this.elements.target,e.event,this)||""),d.isFunction(a.then)?(e.waiting=D,a.then(function(a){return e.waiting=E,c._update(a,b)},F,function(a){return c._update(a,b)})):a===E||!a&&""!==a?E:(a.jquery&&a.length>0?b.empty().append(a.css({display:"block",visibility:"visible"})):b.html(a),this._waitForContent(b).then(function(a){c.rendered&&c.tooltip[0].offsetWidth>0&&c.reposition(e.event,!a.length)}))):E},z._waitForContent=function(a){var b=this.cache;return b.waiting=D,(d.fn.imagesLoaded?a.imagesLoaded():(new d.Deferred).resolve([])).done(function(){b.waiting=E}).promise()},z._updateContent=function(a,b){this._update(a,this.elements.content,b)},z._updateTitle=function(a,b){this._update(a,this.elements.title,b)===E&&this._removeTitle(E)},z._createTitle=function(){var a=this.elements,b=this._id+"-title";a.titlebar&&this._removeTitle(),a.titlebar=d("<div />",{"class":S+"-titlebar "+(this.options.style.widget?k("header"):"")}).append(a.title=d("<div />",{id:b,"class":S+"-title","aria-atomic":D})).insertBefore(a.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",function(a){d(this).toggleClass("ui-state-active ui-state-focus","down"===a.type.substr(-4))}).delegate(".qtip-close","mouseover mouseout",function(a){d(this).toggleClass("ui-state-hover","mouseover"===a.type)}),this.options.content.button&&this._createButton()},z._removeTitle=function(a){var b=this.elements;b.title&&(b.titlebar.remove(),b.titlebar=b.title=b.button=F,a!==E&&this.reposition())},z._createPosClass=function(a){return S+"-pos-"+(a||this.options.position.my).abbrev()},z.reposition=function(c,e){if(!this.rendered||this.positioning||this.destroyed)return this;this.positioning=D;var f,g,h,i,j=this.cache,k=this.tooltip,l=this.options.position,m=l.target,n=l.my,o=l.at,p=l.viewport,q=l.container,r=l.adjust,s=r.method.split(" "),t=k.outerWidth(E),u=k.outerHeight(E),v=0,w=0,x=k.css("position"),y={left:0,top:0},z=k[0].offsetWidth>0,A=c&&"scroll"===c.type,B=d(a),C=q[0].ownerDocument,F=this.mouse;if(d.isArray(m)&&2===m.length)o={x:L,y:K},y={left:m[0],top:m[1]};else if("mouse"===m)o={x:L,y:K},(!r.mouse||this.options.hide.distance)&&j.origin&&j.origin.pageX?c=j.origin:!c||c&&("resize"===c.type||"scroll"===c.type)?c=j.event:F&&F.pageX&&(c=F),"static"!==x&&(y=q.offset()),C.body.offsetWidth!==(a.innerWidth||C.documentElement.clientWidth)&&(g=d(b.body).offset()),y={left:c.pageX-y.left+(g&&g.left||0),top:c.pageY-y.top+(g&&g.top||0)},r.mouse&&A&&F&&(y.left-=(F.scrollX||0)-B.scrollLeft(),y.top-=(F.scrollY||0)-B.scrollTop());else{if("event"===m?c&&c.target&&"scroll"!==c.type&&"resize"!==c.type?j.target=d(c.target):c.target||(j.target=this.elements.target):"event"!==m&&(j.target=d(m.jquery?m:this.elements.target)),m=j.target,m=d(m).eq(0),0===m.length)return this;m[0]===b||m[0]===a?(v=da.iOS?a.innerWidth:m.width(),w=da.iOS?a.innerHeight:m.height(),m[0]===a&&(y={top:(p||m).scrollTop(),left:(p||m).scrollLeft()})):R.imagemap&&m.is("area")?f=R.imagemap(this,m,o,R.viewport?s:E):R.svg&&m&&m[0].ownerSVGElement?f=R.svg(this,m,o,R.viewport?s:E):(v=m.outerWidth(E),w=m.outerHeight(E),y=m.offset()),f&&(v=f.width,w=f.height,g=f.offset,y=f.position),y=this.reposition.offset(m,y,q),(da.iOS>3.1&&da.iOS<4.1||da.iOS>=4.3&&da.iOS<4.33||!da.iOS&&"fixed"===x)&&(y.left-=B.scrollLeft(),y.top-=B.scrollTop()),(!f||f&&f.adjustable!==E)&&(y.left+=o.x===N?v:o.x===O?v/2:0,y.top+=o.y===M?w:o.y===O?w/2:0)}return y.left+=r.x+(n.x===N?-t:n.x===O?-t/2:0),y.top+=r.y+(n.y===M?-u:n.y===O?-u/2:0),R.viewport?(h=y.adjusted=R.viewport(this,y,l,v,w,t,u),g&&h.left&&(y.left+=g.left),g&&h.top&&(y.top+=g.top),h.my&&(this.position.my=h.my)):y.adjusted={left:0,top:0},j.posClass!==(i=this._createPosClass(this.position.my))&&(j.posClass=i,k.removeClass(j.posClass).addClass(i)),this._trigger("move",[y,p.elem||p],c)?(delete y.adjusted,e===E||!z||isNaN(y.left)||isNaN(y.top)||"mouse"===m||!d.isFunction(l.effect)?k.css(y):d.isFunction(l.effect)&&(l.effect.call(k,this,d.extend({},y)),k.queue(function(a){d(this).css({opacity:"",height:""}),da.ie&&this.style.removeAttribute("filter"),a()})),this.positioning=E,this):this},z.reposition.offset=function(a,c,e){function f(a,b){c.left+=b*a.scrollLeft(),c.top+=b*a.scrollTop()}if(!e[0])return c;var g,h,i,j,k=d(a[0].ownerDocument),l=!!da.ie&&"CSS1Compat"!==b.compatMode,m=e[0];do"static"!==(h=d.css(m,"position"))&&("fixed"===h?(i=m.getBoundingClientRect(),f(k,-1)):(i=d(m).position(),i.left+=parseFloat(d.css(m,"borderLeftWidth"))||0,i.top+=parseFloat(d.css(m,"borderTopWidth"))||0),c.left-=i.left+(parseFloat(d.css(m,"marginLeft"))||0),c.top-=i.top+(parseFloat(d.css(m,"marginTop"))||0),g||"hidden"===(j=d.css(m,"overflow"))||"visible"===j||"BODY"===d.prop(m,"tagName")||(g=d(m)));while(m=m.offsetParent);return g&&(g[0]!==k[0]||l)&&f(g,1),c};var ga=(A=z.reposition.Corner=function(a,b){a=(""+a).replace(/([A-Z])/," $1").replace(/middle/gi,O).toLowerCase(),this.x=(a.match(/left|right/i)||a.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(a.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!b;var c=a.charAt(0);this.precedance="t"===c||"b"===c?H:G}).prototype;ga.invert=function(a,b){this[a]=this[a]===L?N:this[a]===N?L:b||this[a]},ga.string=function(a){var b=this.x,c=this.y,d=b!==c?"center"===b||"center"!==c&&(this.precedance===H||this.forceY)?[c,b]:[b,c]:[b];return a!==!1?d.join(" "):d},ga.abbrev=function(){var a=this.string(!1);return a[0].charAt(0)+(a[1]&&a[1].charAt(0)||"")},ga.clone=function(){return new A(this.string(),this.forceY)},z.toggle=function(a,c){var e=this.cache,f=this.options,g=this.tooltip;if(c){if(/over|enter/.test(c.type)&&e.event&&/out|leave/.test(e.event.type)&&f.show.target.add(c.target).length===f.show.target.length&&g.has(c.relatedTarget).length)return this;e.event=d.event.fix(c)}if(this.waiting&&!a&&(this.hiddenDuringWait=D),!this.rendered)return a?this.render(1):this;if(this.destroyed||this.disabled)return this;var h,i,j,k=a?"show":"hide",l=this.options[k],m=this.options.position,n=this.options.content,o=this.tooltip.css("width"),p=this.tooltip.is(":visible"),q=a||1===l.target.length,r=!c||l.target.length<2||e.target[0]===c.target;return(typeof a).search("boolean|number")&&(a=!p),h=!g.is(":animated")&&p===a&&r,i=h?F:!!this._trigger(k,[90]),this.destroyed?this:(i!==E&&a&&this.focus(c),!i||h?this:(d.attr(g[0],"aria-hidden",!a),a?(this.mouse&&(e.origin=d.event.fix(this.mouse)),d.isFunction(n.text)&&this._updateContent(n.text,E),d.isFunction(n.title)&&this._updateTitle(n.title,E),!C&&"mouse"===m.target&&m.adjust.mouse&&(d(b).bind("mousemove."+S,this._storeMouse),C=D),o||g.css("width",g.outerWidth(E)),this.reposition(c,arguments[2]),o||g.css("width",""),l.solo&&("string"==typeof l.solo?d(l.solo):d(W,l.solo)).not(g).not(l.target).qtip("hide",new d.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete e.origin,C&&!d(W+'[tracking="true"]:visible',l.solo).not(g).length&&(d(b).unbind("mousemove."+S),C=E),this.blur(c)),j=d.proxy(function(){a?(da.ie&&g[0].style.removeAttribute("filter"),g.css("overflow",""),"string"==typeof l.autofocus&&d(this.options.show.autofocus,g).focus(),this.options.show.target.trigger("qtip-"+this.id+"-inactive")):g.css({display:"",visibility:"",opacity:"",left:"",top:""}),this._trigger(a?"visible":"hidden")},this),l.effect===E||q===E?(g[k](),j()):d.isFunction(l.effect)?(g.stop(1,1),l.effect.call(g,this),g.queue("fx",function(a){j(),a()})):g.fadeTo(90,a?1:0,j),a&&l.target.trigger("qtip-"+this.id+"-inactive"),this))},z.show=function(a){return this.toggle(D,a)},z.hide=function(a){return this.toggle(E,a)},z.focus=function(a){if(!this.rendered||this.destroyed)return this;var b=d(W),c=this.tooltip,e=parseInt(c[0].style.zIndex,10),f=y.zindex+b.length;return c.hasClass($)||this._trigger("focus",[f],a)&&(e!==f&&(b.each(function(){this.style.zIndex>e&&(this.style.zIndex=this.style.zIndex-1)}),b.filter("."+$).qtip("blur",a)),c.addClass($)[0].style.zIndex=f),this},z.blur=function(a){return!this.rendered||this.destroyed?this:(this.tooltip.removeClass($),this._trigger("blur",[this.tooltip.css("zIndex")],a),this)},z.disable=function(a){return this.destroyed?this:("toggle"===a?a=!(this.rendered?this.tooltip.hasClass(aa):this.disabled):"boolean"!=typeof a&&(a=D),this.rendered&&this.tooltip.toggleClass(aa,a).attr("aria-disabled",a),this.disabled=!!a,this)},z.enable=function(){return this.disable(E)},z._createButton=function(){var a=this,b=this.elements,c=b.tooltip,e=this.options.content.button,f="string"==typeof e,g=f?e:"Close tooltip";b.button&&b.button.remove(),e.jquery?b.button=e:b.button=d("<a />",{"class":"qtip-close "+(this.options.style.widget?"":S+"-icon"),title:g,"aria-label":g}).prepend(d("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),b.button.appendTo(b.titlebar||c).attr("role","button").click(function(b){return c.hasClass(aa)||a.hide(b),E})},z._updateButton=function(a){if(!this.rendered)return E;var b=this.elements.button;a?this._createButton():b.remove()},z._setWidget=function(){var a=this.options.style.widget,b=this.elements,c=b.tooltip,d=c.hasClass(aa);c.removeClass(aa),aa=a?"ui-state-disabled":"qtip-disabled",c.toggleClass(aa,d),c.toggleClass("ui-helper-reset "+k(),a).toggleClass(Z,this.options.style.def&&!a),b.content&&b.content.toggleClass(k("content"),a),b.titlebar&&b.titlebar.toggleClass(k("header"),a),b.button&&b.button.toggleClass(S+"-icon",!a)},z._storeMouse=function(a){return(this.mouse=d.event.fix(a)).type="mousemove",this},z._bind=function(a,b,c,e,f){if(a&&c&&b.length){var g="."+this._id+(e?"-"+e:"");return d(a).bind((b.split?b:b.join(g+" "))+g,d.proxy(c,f||this)),this}},z._unbind=function(a,b){return a&&d(a).unbind("."+this._id+(b?"-"+b:"")),this},z._trigger=function(a,b,c){var e=new d.Event("tooltip"+a);return e.originalEvent=c&&d.extend({},c)||this.cache.event||F,this.triggering=a,this.tooltip.trigger(e,[this].concat(b||[])),this.triggering=E,!e.isDefaultPrevented()},z._bindEvents=function(a,b,c,e,f,g){var h=c.filter(e).add(e.filter(c)),i=[];h.length&&(d.each(b,function(b,c){var e=d.inArray(c,a);e>-1&&i.push(a.splice(e,1)[0])}),i.length&&(this._bind(h,i,function(a){var b=!!this.rendered&&this.tooltip[0].offsetWidth>0;(b?g:f).call(this,a)}),c=c.not(h),e=e.not(h))),this._bind(c,a,f),this._bind(e,b,g)},z._assignInitialEvents=function(a){function b(a){return this.disabled||this.destroyed?E:(this.cache.event=a&&d.event.fix(a),this.cache.target=a&&d(a.target),clearTimeout(this.timers.show),void(this.timers.show=l.call(this,function(){this.render("object"==typeof a||c.show.ready)},c.prerender?0:c.show.delay)))}var c=this.options,e=c.show.target,f=c.hide.target,g=c.show.event?d.trim(""+c.show.event).split(" "):[],h=c.hide.event?d.trim(""+c.hide.event).split(" "):[];this._bind(this.elements.target,["remove","removeqtip"],function(){this.destroy(!0)},"destroy"),/mouse(over|enter)/i.test(c.show.event)&&!/mouse(out|leave)/i.test(c.hide.event)&&h.push("mouseleave"),this._bind(e,"mousemove",function(a){this._storeMouse(a),this.cache.onTarget=D}),this._bindEvents(g,h,e,f,b,function(){return this.timers?void clearTimeout(this.timers.show):E}),(c.show.ready||c.prerender)&&b.call(this,a)},z._assignEvents=function(){var c=this,e=this.options,f=e.position,g=this.tooltip,h=e.show.target,i=e.hide.target,j=f.container,k=f.viewport,l=d(b),q=d(a),r=e.show.event?d.trim(""+e.show.event).split(" "):[],s=e.hide.event?d.trim(""+e.hide.event).split(" "):[];d.each(e.events,function(a,b){c._bind(g,"toggle"===a?["tooltipshow","tooltiphide"]:["tooltip"+a],b,null,g)}),/mouse(out|leave)/i.test(e.hide.event)&&"window"===e.hide.leave&&this._bind(l,["mouseout","blur"],function(a){/select|option/.test(a.target.nodeName)||a.relatedTarget||this.hide(a)}),e.hide.fixed?i=i.add(g.addClass(Y)):/mouse(over|enter)/i.test(e.show.event)&&this._bind(i,"mouseleave",function(){clearTimeout(this.timers.show)}),(""+e.hide.event).indexOf("unfocus")>-1&&this._bind(j.closest("html"),["mousedown","touchstart"],function(a){var b=d(a.target),c=this.rendered&&!this.tooltip.hasClass(aa)&&this.tooltip[0].offsetWidth>0,e=b.parents(W).filter(this.tooltip[0]).length>0;b[0]===this.target[0]||b[0]===this.tooltip[0]||e||this.target.has(b[0]).length||!c||this.hide(a)}),"number"==typeof e.hide.inactive&&(this._bind(h,"qtip-"+this.id+"-inactive",o,"inactive"),this._bind(i.add(g),y.inactiveEvents,o)),this._bindEvents(r,s,h,i,m,n),this._bind(h.add(g),"mousemove",function(a){if("number"==typeof e.hide.distance){var b=this.cache.origin||{},c=this.options.hide.distance,d=Math.abs;(d(a.pageX-b.pageX)>=c||d(a.pageY-b.pageY)>=c)&&this.hide(a)}this._storeMouse(a)}),"mouse"===f.target&&f.adjust.mouse&&(e.hide.event&&this._bind(h,["mouseenter","mouseleave"],function(a){return this.cache?void(this.cache.onTarget="mouseenter"===a.type):E}),this._bind(l,"mousemove",function(a){this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass(aa)&&this.tooltip[0].offsetWidth>0&&this.reposition(a)})),(f.adjust.resize||k.length)&&this._bind(d.event.special.resize?k:q,"resize",p),f.adjust.scroll&&this._bind(q.add(f.container),"scroll",p)},z._unassignEvents=function(){var c=this.options,e=c.show.target,f=c.hide.target,g=d.grep([this.elements.target[0],this.rendered&&this.tooltip[0],c.position.container[0],c.position.viewport[0],c.position.container.closest("html")[0],a,b],function(a){return"object"==typeof a});e&&e.toArray&&(g=g.concat(e.toArray())),f&&f.toArray&&(g=g.concat(f.toArray())),this._unbind(g)._unbind(g,"destroy")._unbind(g,"inactive")},d(function(){q(W,["mouseenter","mouseleave"],function(a){var b="mouseenter"===a.type,c=d(a.currentTarget),e=d(a.relatedTarget||a.target),f=this.options;b?(this.focus(a),c.hasClass(Y)&&!c.hasClass(aa)&&clearTimeout(this.timers.hide)):"mouse"===f.position.target&&f.position.adjust.mouse&&f.hide.event&&f.show.target&&!e.closest(f.show.target[0]).length&&this.hide(a),c.toggleClass(_,b)}),q("["+U+"]",X,o)}),y=d.fn.qtip=function(a,b,e){var f=(""+a).toLowerCase(),g=F,i=d.makeArray(arguments).slice(1),j=i[i.length-1],k=this[0]?d.data(this[0],S):F;return!arguments.length&&k||"api"===f?k:"string"==typeof a?(this.each(function(){var a=d.data(this,S);if(!a)return D;if(j&&j.timeStamp&&(a.cache.event=j),!b||"option"!==f&&"options"!==f)a[f]&&a[f].apply(a,i);else{if(e===c&&!d.isPlainObject(b))return g=a.get(b),E;a.set(b,e)}}),g!==F?g:this):"object"!=typeof a&&arguments.length?void 0:(k=h(d.extend(D,{},a)),this.each(function(a){var b,c;return c=d.isArray(k.id)?k.id[a]:k.id,c=!c||c===E||c.length<1||y.api[c]?y.nextid++:c,b=r(d(this),c,k),b===E?D:(y.api[c]=b,d.each(R,function(){"initialize"===this.initialize&&this(b)}),void b._assignInitialEvents(j))}))},d.qtip=e,y.api={},d.each({attr:function(a,b){if(this.length){var c=this[0],e="title",f=d.data(c,"qtip");if(a===e&&f&&f.options&&"object"==typeof f&&"object"==typeof f.options&&f.options.suppress)return arguments.length<2?d.attr(c,ca):(f&&f.options.content.attr===e&&f.cache.attr&&f.set("content.text",b),this.attr(ca,b))}return d.fn["attr"+ba].apply(this,arguments)},clone:function(a){var b=d.fn["clone"+ba].apply(this,arguments);return a||b.filter("["+ca+"]").attr("title",function(){return d.attr(this,ca)}).removeAttr(ca),b}},function(a,b){if(!b||d.fn[a+ba])return D;var c=d.fn[a+ba]=d.fn[a];d.fn[a]=function(){return b.apply(this,arguments)||c.apply(this,arguments)}}),d.ui||(d["cleanData"+ba]=d.cleanData,d.cleanData=function(a){for(var b,c=0;(b=d(a[c])).length;c++)if(b.attr(T))try{b.triggerHandler("removeqtip")}catch(e){}d["cleanData"+ba].apply(this,arguments)}),y.version="3.0.3-5-g",y.nextid=0,y.inactiveEvents=X,y.zindex=15e3,y.defaults={prerender:E,id:E,overwrite:D,suppress:D,content:{text:D,attr:"title",title:E,button:E},position:{my:"top left",at:"bottom right",target:E,container:E,viewport:E,adjust:{x:0,y:0,mouse:D,scroll:D,resize:D,method:"flipinvert flipinvert"},effect:function(a,b){d(this).animate(b,{duration:200,queue:E})}},show:{target:E,event:"mouseenter",effect:D,delay:90,solo:E,ready:E,autofocus:E},hide:{target:E,event:"mouseleave",effect:D,delay:0,fixed:E,inactive:E,leave:"window",distance:E},style:{classes:"",widget:E,width:E,height:E,def:D},events:{render:F,move:F,show:F,hide:F,toggle:F,visible:F,hidden:F,focus:F,blur:F}};var ha,ia,ja,ka,la,ma="margin",na="border",oa="color",pa="background-color",qa="transparent",ra=" !important",sa=!!b.createElement("canvas").getContext,ta=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,ua={},va=["Webkit","O","Moz","ms"];sa?(ka=a.devicePixelRatio||1,la=function(){var a=b.createElement("canvas").getContext("2d");return a.backingStorePixelRatio||a.webkitBackingStorePixelRatio||a.mozBackingStorePixelRatio||a.msBackingStorePixelRatio||a.oBackingStorePixelRatio||1}(),ja=ka/la):ia=function(a,b,c){return"<qtipvml:"+a+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(b||"")+' style="behavior: url(#default#VML); '+(c||"")+'" />'},d.extend(v.prototype,{init:function(a){var b,c;c=this.element=a.elements.tip=d("<div />",{"class":S+"-tip"}).prependTo(a.tooltip),sa?(b=d("<canvas />").appendTo(this.element)[0].getContext("2d"),b.lineJoin="miter",b.miterLimit=1e5,b.save()):(b=ia("shape",'coordorigin="0,0"',"position:absolute;"),this.element.html(b+b),a._bind(d("*",c).add(c),["click","mousedown"],function(a){a.stopPropagation()},this._ns)),a._bind(a.tooltip,"tooltipmove",this.reposition,this._ns,this),this.create()},_swapDimensions:function(){this.size[0]=this.options.height,this.size[1]=this.options.width},_resetDimensions:function(){this.size[0]=this.options.width,this.size[1]=this.options.height},_useTitle:function(a){var b=this.qtip.elements.titlebar;return b&&(a.y===K||a.y===O&&this.element.position().top+this.size[1]/2+this.options.offset<b.outerHeight(D))},_parseCorner:function(a){var b=this.qtip.options.position.my;return a===E||b===E?a=E:a===D?a=new A(b.string()):a.string||(a=new A(a),a.fixed=D),a},_parseWidth:function(a,b,c){var d=this.qtip.elements,e=na+s(b)+"Width";return(c?u(c,e):u(d.content,e)||u(this._useTitle(a)&&d.titlebar||d.content,e)||u(d.tooltip,e))||0},_parseRadius:function(a){var b=this.qtip.elements,c=na+s(a.y)+s(a.x)+"Radius";return da.ie<9?0:u(this._useTitle(a)&&b.titlebar||b.content,c)||u(b.tooltip,c)||0},_invalidColour:function(a,b,c){var d=a.css(b);return!d||c&&d===a.css(c)||ta.test(d)?E:d},_parseColours:function(a){var b=this.qtip.elements,c=this.element.css("cssText",""),e=na+s(a[a.precedance])+s(oa),f=this._useTitle(a)&&b.titlebar||b.content,g=this._invalidColour,h=[];return h[0]=g(c,pa)||g(f,pa)||g(b.content,pa)||g(b.tooltip,pa)||c.css(pa),h[1]=g(c,e,oa)||g(f,e,oa)||g(b.content,e,oa)||g(b.tooltip,e,oa)||b.tooltip.css(e),d("*",c).add(c).css("cssText",pa+":"+qa+ra+";"+na+":0"+ra+";"),h},_calculateSize:function(a){var b,c,d,e=a.precedance===H,f=this.options.width,g=this.options.height,h="c"===a.abbrev(),i=(e?f:g)*(h?.5:1),j=Math.pow,k=Math.round,l=Math.sqrt(j(i,2)+j(g,2)),m=[this.border/i*l,this.border/g*l];return m[2]=Math.sqrt(j(m[0],2)-j(this.border,2)),m[3]=Math.sqrt(j(m[1],2)-j(this.border,2)),b=l+m[2]+m[3]+(h?0:m[0]),c=b/l,d=[k(c*f),k(c*g)],e?d:d.reverse()},_calculateTip:function(a,b,c){c=c||1,b=b||this.size;var d=b[0]*c,e=b[1]*c,f=Math.ceil(d/2),g=Math.ceil(e/2),h={br:[0,0,d,e,d,0],bl:[0,0,d,0,0,e],tr:[0,e,d,0,d,e],tl:[0,0,0,e,d,e],tc:[0,e,f,0,d,e],bc:[0,0,d,0,f,e],rc:[0,0,d,g,0,e],lc:[d,0,d,e,0,g]};return h.lt=h.br,h.rt=h.bl,h.lb=h.tr,h.rb=h.tl,h[a.abbrev()]},_drawCoords:function(a,b){a.beginPath(),a.moveTo(b[0],b[1]),a.lineTo(b[2],b[3]),a.lineTo(b[4],b[5]),a.closePath()},create:function(){var a=this.corner=(sa||da.ie)&&this._parseCorner(this.options.corner);return this.enabled=!!this.corner&&"c"!==this.corner.abbrev(),this.enabled&&(this.qtip.cache.corner=a.clone(),this.update()),this.element.toggle(this.enabled),this.corner},update:function(b,c){if(!this.enabled)return this;var e,f,g,h,i,j,k,l,m=this.qtip.elements,n=this.element,o=n.children(),p=this.options,q=this.size,r=p.mimic,s=Math.round;b||(b=this.qtip.cache.corner||this.corner),r===E?r=b:(r=new A(r),r.precedance=b.precedance,"inherit"===r.x?r.x=b.x:"inherit"===r.y?r.y=b.y:r.x===r.y&&(r[b.precedance]=b[b.precedance])),f=r.precedance,b.precedance===G?this._swapDimensions():this._resetDimensions(),e=this.color=this._parseColours(b),e[1]!==qa?(l=this.border=this._parseWidth(b,b[b.precedance]),p.border&&l<1&&!ta.test(e[1])&&(e[0]=e[1]),this.border=l=p.border!==D?p.border:l):this.border=l=0,k=this.size=this._calculateSize(b),n.css({width:k[0],height:k[1],lineHeight:k[1]+"px"}),j=b.precedance===H?[s(r.x===L?l:r.x===N?k[0]-q[0]-l:(k[0]-q[0])/2),s(r.y===K?k[1]-q[1]:0)]:[s(r.x===L?k[0]-q[0]:0),s(r.y===K?l:r.y===M?k[1]-q[1]-l:(k[1]-q[1])/2)],sa?(g=o[0].getContext("2d"),g.restore(),g.save(),g.clearRect(0,0,6e3,6e3),h=this._calculateTip(r,q,ja),i=this._calculateTip(r,this.size,ja),o.attr(I,k[0]*ja).attr(J,k[1]*ja),o.css(I,k[0]).css(J,k[1]),this._drawCoords(g,i),g.fillStyle=e[1],g.fill(),g.translate(j[0]*ja,j[1]*ja),this._drawCoords(g,h),g.fillStyle=e[0],g.fill()):(h=this._calculateTip(r),h="m"+h[0]+","+h[1]+" l"+h[2]+","+h[3]+" "+h[4]+","+h[5]+" xe",j[2]=l&&/^(r|b)/i.test(b.string())?8===da.ie?2:1:0,o.css({coordsize:k[0]+l+" "+k[1]+l,antialias:""+(r.string().indexOf(O)>-1),left:j[0]-j[2]*Number(f===G),top:j[1]-j[2]*Number(f===H),width:k[0]+l,height:k[1]+l}).each(function(a){var b=d(this);b[b.prop?"prop":"attr"]({coordsize:k[0]+l+" "+k[1]+l,path:h,fillcolor:e[0],filled:!!a,stroked:!a}).toggle(!(!l&&!a)),!a&&b.html(ia("stroke",'weight="'+2*l+'px" color="'+e[1]+'" miterlimit="1000" joinstyle="miter"'))})),a.opera&&setTimeout(function(){m.tip.css({display:"inline-block",visibility:"visible"})},1),c!==E&&this.calculate(b,k)},calculate:function(a,b){if(!this.enabled)return E;
var c,e,f=this,g=this.qtip.elements,h=this.element,i=this.options.offset,j={};return a=a||this.corner,c=a.precedance,b=b||this._calculateSize(a),e=[a.x,a.y],c===G&&e.reverse(),d.each(e,function(d,e){var h,k,l;e===O?(h=c===H?L:K,j[h]="50%",j[ma+"-"+h]=-Math.round(b[c===H?0:1]/2)+i):(h=f._parseWidth(a,e,g.tooltip),k=f._parseWidth(a,e,g.content),l=f._parseRadius(a),j[e]=Math.max(-f.border,d?k:i+(l>h?l:-h)))}),j[a[c]]-=b[c===G?0:1],h.css({margin:"",top:"",bottom:"",left:"",right:""}).css(j),j},reposition:function(a,b,d){function e(a,b,c,d,e){a===Q&&j.precedance===b&&k[d]&&j[c]!==O?j.precedance=j.precedance===G?H:G:a!==Q&&k[d]&&(j[b]=j[b]===O?k[d]>0?d:e:j[b]===d?e:d)}function f(a,b,e){j[a]===O?p[ma+"-"+b]=o[a]=g[ma+"-"+b]-k[b]:(h=g[e]!==c?[k[b],-g[b]]:[-k[b],g[b]],(o[a]=Math.max(h[0],h[1]))>h[0]&&(d[b]-=k[b],o[b]=E),p[g[e]!==c?e:b]=o[a])}if(this.enabled){var g,h,i=b.cache,j=this.corner.clone(),k=d.adjusted,l=b.options.position.adjust.method.split(" "),m=l[0],n=l[1]||l[0],o={left:E,top:E,x:0,y:0},p={};this.corner.fixed!==D&&(e(m,G,H,L,N),e(n,H,G,K,M),j.string()===i.corner.string()&&i.cornerTop===k.top&&i.cornerLeft===k.left||this.update(j,E)),g=this.calculate(j),g.right!==c&&(g.left=-g.right),g.bottom!==c&&(g.top=-g.bottom),g.user=this.offset,o.left=m===Q&&!!k.left,o.left&&f(G,L,N),o.top=n===Q&&!!k.top,o.top&&f(H,K,M),this.element.css(p).toggle(!(o.x&&o.y||j.x===O&&o.y||j.y===O&&o.x)),d.left-=g.left.charAt?g.user:m!==Q||o.top||!o.left&&!o.top?g.left+this.border:0,d.top-=g.top.charAt?g.user:n!==Q||o.left||!o.left&&!o.top?g.top+this.border:0,i.cornerLeft=k.left,i.cornerTop=k.top,i.corner=j.clone()}},destroy:function(){this.qtip._unbind(this.qtip.tooltip,this._ns),this.qtip.elements.tip&&this.qtip.elements.tip.find("*").remove().end().remove()}}),ha=R.tip=function(a){return new v(a,a.options.style.tip)},ha.initialize="render",ha.sanitize=function(a){if(a.style&&"tip"in a.style){var b=a.style.tip;"object"!=typeof b&&(b=a.style.tip={corner:b}),/string|boolean/i.test(typeof b.corner)||(b.corner=D)}},B.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){this.create(),this.qtip.reposition()},"^style.tip.(height|width)$":function(a){this.size=[a.width,a.height],this.update(),this.qtip.reposition()},"^content.title|style.(classes|widget)$":function(){this.update()}},d.extend(D,y.defaults,{style:{tip:{corner:D,mimic:E,width:6,height:6,border:D,offset:0}}});var wa,xa,ya="qtip-modal",za="."+ya;xa=function(){function a(a){if(d.expr[":"].focusable)return d.expr[":"].focusable;var b,c,e,f=!isNaN(d.attr(a,"tabindex")),g=a.nodeName&&a.nodeName.toLowerCase();return"area"===g?(b=a.parentNode,c=b.name,!(!a.href||!c||"map"!==b.nodeName.toLowerCase())&&(e=d("img[usemap=#"+c+"]")[0],!!e&&e.is(":visible"))):/input|select|textarea|button|object/.test(g)?!a.disabled:"a"===g?a.href||f:f}function c(a){j.length<1&&a.length?a.not("body").blur():j.first().focus()}function e(a){if(h.is(":visible")){var b,e=d(a.target),g=f.tooltip,i=e.closest(W);b=i.length<1?E:parseInt(i[0].style.zIndex,10)>parseInt(g[0].style.zIndex,10),b||e.closest(W)[0]===g[0]||c(e)}}var f,g,h,i=this,j={};d.extend(i,{init:function(){return h=i.elem=d("<div />",{id:"qtip-overlay",html:"<div></div>",mousedown:function(){return E}}).hide(),d(b.body).bind("focusin"+za,e),d(b).bind("keydown"+za,function(a){f&&f.options.show.modal.escape&&27===a.keyCode&&f.hide(a)}),h.bind("click"+za,function(a){f&&f.options.show.modal.blur&&f.hide(a)}),i},update:function(b){f=b,j=b.options.show.modal.stealfocus!==E?b.tooltip.find("*").filter(function(){return a(this)}):[]},toggle:function(a,e,j){var k=a.tooltip,l=a.options.show.modal,m=l.effect,n=e?"show":"hide",o=h.is(":visible"),p=d(za).filter(":visible:not(:animated)").not(k);return i.update(a),e&&l.stealfocus!==E&&c(d(":focus")),h.toggleClass("blurs",l.blur),e&&h.appendTo(b.body),h.is(":animated")&&o===e&&g!==E||!e&&p.length?i:(h.stop(D,E),d.isFunction(m)?m.call(h,e):m===E?h[n]():h.fadeTo(parseInt(j,10)||90,e?1:0,function(){e||h.hide()}),e||h.queue(function(a){h.css({left:"",top:""}),d(za).length||h.detach(),a()}),g=e,f.destroyed&&(f=F),i)}}),i.init()},xa=new xa,d.extend(w.prototype,{init:function(a){var b=a.tooltip;return this.options.on?(a.elements.overlay=xa.elem,b.addClass(ya).css("z-index",y.modal_zindex+d(za).length),a._bind(b,["tooltipshow","tooltiphide"],function(a,c,e){var f=a.originalEvent;if(a.target===b[0])if(f&&"tooltiphide"===a.type&&/mouse(leave|enter)/.test(f.type)&&d(f.relatedTarget).closest(xa.elem[0]).length)try{a.preventDefault()}catch(g){}else(!f||f&&"tooltipsolo"!==f.type)&&this.toggle(a,"tooltipshow"===a.type,e)},this._ns,this),a._bind(b,"tooltipfocus",function(a,c){if(!a.isDefaultPrevented()&&a.target===b[0]){var e=d(za),f=y.modal_zindex+e.length,g=parseInt(b[0].style.zIndex,10);xa.elem[0].style.zIndex=f-1,e.each(function(){this.style.zIndex>g&&(this.style.zIndex-=1)}),e.filter("."+$).qtip("blur",a.originalEvent),b.addClass($)[0].style.zIndex=f,xa.update(c);try{a.preventDefault()}catch(h){}}},this._ns,this),void a._bind(b,"tooltiphide",function(a){a.target===b[0]&&d(za).filter(":visible").not(b).last().qtip("focus",a)},this._ns,this)):this},toggle:function(a,b,c){return a&&a.isDefaultPrevented()?this:void xa.toggle(this.qtip,!!b,c)},destroy:function(){this.qtip.tooltip.removeClass(ya),this.qtip._unbind(this.qtip.tooltip,this._ns),xa.toggle(this.qtip,E),delete this.qtip.elements.overlay}}),wa=R.modal=function(a){return new w(a,a.options.show.modal)},wa.sanitize=function(a){a.show&&("object"!=typeof a.show.modal?a.show.modal={on:!!a.show.modal}:"undefined"==typeof a.show.modal.on&&(a.show.modal.on=D))},y.modal_zindex=y.zindex-200,wa.initialize="render",B.modal={"^show.modal.(on|blur)$":function(){this.destroy(),this.init(),this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth>0)}},d.extend(D,y.defaults,{show:{modal:{on:E,effect:D,blur:D,stealfocus:D,escape:D}}}),R.viewport=function(c,d,e,f,g,h,i){function j(a,b,c,e,f,g,h,i,j){var k=d[f],s=u[a],t=v[a],w=c===Q,x=s===f?j:s===g?-j:-j/2,y=t===f?i:t===g?-i:-i/2,z=q[f]+r[f]-(n?0:m[f]),A=z-k,B=k+j-(h===I?o:p)-z,C=x-(u.precedance===a||s===u[b]?y:0)-(t===O?i/2:0);return w?(C=(s===f?1:-1)*x,d[f]+=A>0?A:B>0?-B:0,d[f]=Math.max(-m[f]+r[f],k-C,Math.min(Math.max(-m[f]+r[f]+(h===I?o:p),k+C),d[f],"center"===s?k-x:1e9))):(e*=c===P?2:0,A>0&&(s!==f||B>0)?(d[f]-=C+e,l.invert(a,f)):B>0&&(s!==g||A>0)&&(d[f]-=(s===O?-C:C)+e,l.invert(a,g)),d[f]<q[f]&&-d[f]>B&&(d[f]=k,l=u.clone())),d[f]-k}var k,l,m,n,o,p,q,r,s=e.target,t=c.elements.tooltip,u=e.my,v=e.at,w=e.adjust,x=w.method.split(" "),y=x[0],z=x[1]||x[0],A=e.viewport,B=e.container,C={left:0,top:0};return A.jquery&&s[0]!==a&&s[0]!==b.body&&"none"!==w.method?(m=B.offset()||C,n="static"===B.css("position"),k="fixed"===t.css("position"),o=A[0]===a?A.width():A.outerWidth(E),p=A[0]===a?A.height():A.outerHeight(E),q={left:k?0:A.scrollLeft(),top:k?0:A.scrollTop()},r=A.offset()||C,"shift"===y&&"shift"===z||(l=u.clone()),C={left:"none"!==y?j(G,H,y,w.x,L,N,I,f,h):0,top:"none"!==z?j(H,G,z,w.y,K,M,J,g,i):0,my:l}):C},R.polys={polygon:function(a,b){var c,d,e,f={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10},adjustable:E},g=0,h=[],i=1,j=1,k=0,l=0;for(g=a.length;g--;)c=[parseInt(a[--g],10),parseInt(a[g+1],10)],c[0]>f.position.right&&(f.position.right=c[0]),c[0]<f.position.left&&(f.position.left=c[0]),c[1]>f.position.bottom&&(f.position.bottom=c[1]),c[1]<f.position.top&&(f.position.top=c[1]),h.push(c);if(d=f.width=Math.abs(f.position.right-f.position.left),e=f.height=Math.abs(f.position.bottom-f.position.top),"c"===b.abbrev())f.position={left:f.position.left+f.width/2,top:f.position.top+f.height/2};else{for(;d>0&&e>0&&i>0&&j>0;)for(d=Math.floor(d/2),e=Math.floor(e/2),b.x===L?i=d:b.x===N?i=f.width-d:i+=Math.floor(d/2),b.y===K?j=e:b.y===M?j=f.height-e:j+=Math.floor(e/2),g=h.length;g--&&!(h.length<2);)k=h[g][0]-f.position.left,l=h[g][1]-f.position.top,(b.x===L&&k>=i||b.x===N&&k<=i||b.x===O&&(k<i||k>f.width-i)||b.y===K&&l>=j||b.y===M&&l<=j||b.y===O&&(l<j||l>f.height-j))&&h.splice(g,1);f.position={left:h[0][0],top:h[0][1]}}return f},rect:function(a,b,c,d){return{width:Math.abs(c-a),height:Math.abs(d-b),position:{left:Math.min(a,c),top:Math.min(b,d)}}},_angles:{tc:1.5,tr:7/4,tl:5/4,bc:.5,br:.25,bl:.75,rc:2,lc:1,c:0},ellipse:function(a,b,c,d,e){var f=R.polys._angles[e.abbrev()],g=0===f?0:c*Math.cos(f*Math.PI),h=d*Math.sin(f*Math.PI);return{width:2*c-Math.abs(g),height:2*d-Math.abs(h),position:{left:a+g,top:b+h},adjustable:E}},circle:function(a,b,c,d){return R.polys.ellipse(a,b,c,c,d)}},R.svg=function(a,c,e){for(var f,g,h,i,j,k,l,m,n,o=c[0],p=d(o.ownerSVGElement),q=o.ownerDocument,r=(parseInt(c.css("stroke-width"),10)||0)/2;!o.getBBox;)o=o.parentNode;if(!o.getBBox||!o.parentNode)return E;switch(o.nodeName){case"ellipse":case"circle":m=R.polys.ellipse(o.cx.baseVal.value,o.cy.baseVal.value,(o.rx||o.r).baseVal.value+r,(o.ry||o.r).baseVal.value+r,e);break;case"line":case"polygon":case"polyline":for(l=o.points||[{x:o.x1.baseVal.value,y:o.y1.baseVal.value},{x:o.x2.baseVal.value,y:o.y2.baseVal.value}],m=[],k=-1,i=l.numberOfItems||l.length;++k<i;)j=l.getItem?l.getItem(k):l[k],m.push.apply(m,[j.x,j.y]);m=R.polys.polygon(m,e);break;default:m=o.getBBox(),m={width:m.width,height:m.height,position:{left:m.x,top:m.y}}}return n=m.position,p=p[0],p.createSVGPoint&&(g=o.getScreenCTM(),l=p.createSVGPoint(),l.x=n.left,l.y=n.top,h=l.matrixTransform(g),n.left=h.x,n.top=h.y),q!==b&&"mouse"!==a.position.target&&(f=d((q.defaultView||q.parentWindow).frameElement).offset(),f&&(n.left+=f.left,n.top+=f.top)),q=d(q),n.left+=q.scrollLeft(),n.top+=q.scrollTop(),m},R.imagemap=function(a,b,c){b.jquery||(b=d(b));var e,f,g,h,i,j=(b.attr("shape")||"rect").toLowerCase().replace("poly","polygon"),k=d('img[usemap="#'+b.parent("map").attr("name")+'"]'),l=d.trim(b.attr("coords")),m=l.replace(/,$/,"").split(",");if(!k.length)return E;if("polygon"===j)h=R.polys.polygon(m,c);else{if(!R.polys[j])return E;for(g=-1,i=m.length,f=[];++g<i;)f.push(parseInt(m[g],10));h=R.polys[j].apply(this,f.concat(c))}return e=k.offset(),e.left+=Math.ceil((k.outerWidth(E)-k.width())/2),e.top+=Math.ceil((k.outerHeight(E)-k.height())/2),h.position.left+=e.left,h.position.top+=e.top,h};var Aa,Ba='<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>';d.extend(x.prototype,{_scroll:function(){var b=this.qtip.elements.overlay;b&&(b[0].style.top=d(a).scrollTop()+"px")},init:function(c){var e=c.tooltip;d("select, object").length<1&&(this.bgiframe=c.elements.bgiframe=d(Ba).appendTo(e),c._bind(e,"tooltipmove",this.adjustBGIFrame,this._ns,this)),this.redrawContainer=d("<div/>",{id:S+"-rcontainer"}).appendTo(b.body),c.elements.overlay&&c.elements.overlay.addClass("qtipmodal-ie6fix")&&(c._bind(a,["scroll","resize"],this._scroll,this._ns,this),c._bind(e,["tooltipshow"],this._scroll,this._ns,this)),this.redraw()},adjustBGIFrame:function(){var a,b,c=this.qtip.tooltip,d={height:c.outerHeight(E),width:c.outerWidth(E)},e=this.qtip.plugins.tip,f=this.qtip.elements.tip;b=parseInt(c.css("borderLeftWidth"),10)||0,b={left:-b,top:-b},e&&f&&(a="x"===e.corner.precedance?[I,L]:[J,K],b[a[1]]-=f[a[0]]()),this.bgiframe.css(b).css(d)},redraw:function(){if(this.qtip.rendered<1||this.drawing)return this;var a,b,c,d,e=this.qtip.tooltip,f=this.qtip.options.style,g=this.qtip.options.position.container;return this.qtip.drawing=1,f.height&&e.css(J,f.height),f.width?e.css(I,f.width):(e.css(I,"").appendTo(this.redrawContainer),b=e.width(),b%2<1&&(b+=1),c=e.css("maxWidth")||"",d=e.css("minWidth")||"",a=(c+d).indexOf("%")>-1?g.width()/100:0,c=(c.indexOf("%")>-1?a:1*parseInt(c,10))||b,d=(d.indexOf("%")>-1?a:1*parseInt(d,10))||0,b=c+d?Math.min(Math.max(b,d),c):b,e.css(I,Math.round(b)).appendTo(g)),this.drawing=0,this},destroy:function(){this.bgiframe&&this.bgiframe.remove(),this.qtip._unbind([a,this.qtip.tooltip],this._ns)}}),Aa=R.ie6=function(a){return 6===da.ie?new x(a):E},Aa.initialize="render",B.ie6={"^content|style$":function(){this.redraw()}}})}(window,document);
//# sourceMappingURL=jquery.qtip.min.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(40);
var TAG = __webpack_require__(11)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(48);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(42), __webpack_require__(78), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, BaseLoginModel, CookieUtil, Enums) {

  var _ = Okta._;

  return BaseLoginModel.extend({

    props: function props() {
      var cookieUsername = CookieUtil.getCookieUsername(),
          properties = this.getUsernameAndRemember(cookieUsername);

      var props = {
        username: {
          type: 'string',
          validate: function validate(value) {
            if (_.isEmpty(value)) {
              return Okta.loc('error.username.required', 'login');
            }
          },
          value: properties.username
        },
        lastUsername: ['string', false, cookieUsername],
        context: ['object', false],
        remember: ['boolean', true, properties.remember],
        multiOptionalFactorEnroll: ['boolean', true]
      };
      if (!(this.settings && this.settings.get('features.passwordlessAuth'))) {
        props.password = {
          type: 'string',
          validate: function validate(value) {
            if (_.isEmpty(value)) {
              return Okta.loc('error.password.required', 'login');
            }
          }
        };
      }
      return props;
    },

    getUsernameAndRemember: function getUsernameAndRemember(cookieUsername) {
      var settingsUsername = this.settings && this.settings.get('username'),
          rememberMeEnabled = this.settings && this.settings.get('features.rememberMe'),
          remember = false,
          username;

      if (settingsUsername) {
        username = settingsUsername;
        remember = rememberMeEnabled && username === cookieUsername;
      } else if (rememberMeEnabled && cookieUsername) {
        // Only respect the cookie if the feature is enabled.
        // Allows us to force prompting when necessary, e.g. SAML ForceAuthn
        username = cookieUsername;
        remember = true;
      }

      return {
        username: username,
        remember: remember
      };
    },

    constructor: function constructor(options) {
      this.settings = options && options.settings;
      this.appState = options && options.appState;
      Okta.Model.apply(this, arguments);
      this.listenTo(this, 'change:username', function (model, username) {
        this.set({ remember: username === this.get('lastUsername') });
      });
    },
    parse: function parse(options) {
      return _.omit(options, ['settings', 'appState']);
    },

    save: function save() {
      var username = this.settings.transformUsername(this.get('username'), Enums.PRIMARY_AUTH),
          remember = this.get('remember'),
          lastUsername = this.get('lastUsername');

      this.setUsernameCookie(username, remember, lastUsername);

      //the 'save' event here is triggered and used in the BaseLoginController
      //to disable the primary button on the primary auth form
      this.trigger('save');

      this.appState.trigger('loading', true);

      var signInArgs = this.getSignInArgs(username);

      var primaryAuthPromise;

      if (this.appState.get('isUnauthenticated')) {
        var authClient = this.appState.settings.authClient;
        // bootstrapped with stateToken
        if (this.appState.get('isIdxStateToken')) {
          // if its an idx stateToken, we send the parameter as identifier to login API
          primaryAuthPromise = this.doTransaction(function (transaction) {
            return this.doPrimaryAuth(authClient, signInArgs, transaction.login);
          });
        } else {
          primaryAuthPromise = this.doTransaction(function (transaction) {
            return this.doPrimaryAuth(authClient, signInArgs, transaction.authenticate);
          });
        }
      } else {
        //normal username/password flow without stateToken
        primaryAuthPromise = this.startTransaction(function (authClient) {
          return this.doPrimaryAuth(authClient, signInArgs, _.bind(authClient.signIn, authClient));
        });
      }

      return primaryAuthPromise.fail(_.bind(function () {
        // Specific event handled by the Header for the case where the security image is not
        // enabled and we want to show a spinner. (Triggered only here and handled only by Header).
        this.appState.trigger('removeLoading');
        CookieUtil.removeUsernameCookie();
      }, this)).fin(_.bind(function () {
        this.appState.trigger('loading', false);
      }, this));
    },

    getSignInArgs: function getSignInArgs(username) {
      var multiOptionalFactorEnroll = this.get('multiOptionalFactorEnroll');
      var signInArgs = {};

      if (!this.settings.get('features.passwordlessAuth')) {
        signInArgs.password = this.get('password');
      }

      // if its an idx stateToken, we send the parameter as identifier to login API
      if (this.appState.get('isIdxStateToken')) {
        signInArgs.identifier = username;
      } else {
        //only post options param for non-idx flows
        signInArgs.username = username;
        signInArgs.options = {
          warnBeforePasswordExpired: true,
          multiOptionalFactorEnroll: multiOptionalFactorEnroll
        };
      }
      return signInArgs;
    },

    setUsernameCookie: function setUsernameCookie(username, remember, lastUsername) {
      // Do not modify the cookie when feature is disabled, relevant for SAML ForceAuthn prompts
      if (this.settings.get('features.rememberMe')) {
        // Only delete the cookie if its owner says so. This allows other
        // users to log in on a one-off basis.
        if (!remember && lastUsername === username) {
          CookieUtil.removeUsernameCookie();
        } else if (remember) {
          CookieUtil.setUsernameCookie(username);
        }
      }
    },

    doPrimaryAuth: function doPrimaryAuth(authClient, signInArgs, func) {
      var deviceFingerprintEnabled = this.settings.get('features.deviceFingerprinting'),
          typingPatternEnabled = this.settings.get('features.trackTypingPattern');

      // Add the custom header for fingerprint, typing pattern if needed, and then remove it afterwards
      // Since we only need to send it for primary auth
      if (deviceFingerprintEnabled) {
        authClient.options.headers['X-Device-Fingerprint'] = this.appState.get('deviceFingerprint');
      }
      if (typingPatternEnabled) {
        authClient.options.headers['X-Typing-Pattern'] = this.appState.get('typingPattern');
      }
      var self = this;
      return func(signInArgs).fin(function () {
        if (deviceFingerprintEnabled) {
          delete authClient.options.headers['X-Device-Fingerprint'];
          self.appState.unset('deviceFingerprint'); //Fingerprint can only be used once
        }
        if (typingPatternEnabled) {
          delete authClient.options.headers['X-Typing-Pattern'];
          self.appState.unset('typingPattern');
        }
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {
  var Cookie = Okta.internal.util.Cookie;
  var LAST_USERNAME_COOKIE_NAME = 'ln';
  var DAYS_SAVE_REMEMBER = 365;

  var fn = {};

  fn.getCookieUsername = function () {
    return Cookie.getCookie(LAST_USERNAME_COOKIE_NAME);
  };

  fn.setUsernameCookie = function (username) {
    Cookie.setCookie(LAST_USERNAME_COOKIE_NAME, username, {
      expires: DAYS_SAVE_REMEMBER,
      path: '/'
    });
  };

  fn.removeUsernameCookie = function () {
    Cookie.removeCookie(LAST_USERNAME_COOKIE_NAME, { path: '/' });
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums) {
  return Okta.View.extend({
    template: '\
      <a href="#" class="link help" data-se="back-link">\
        {{i18n code="goback" bundle="login"}}\
      </a>\
    ',
    className: 'auth-footer',
    events: {
      'click .help': function clickHelp(e) {
        e.preventDefault();
        this.back();
      }
    },
    back: function back() {
      this.state.set('navigateDir', Enums.DIRECTION_BACK);
      this.options.appState.trigger('navigate', '');
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity:[2, 9] */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {
  var fn = {};

  fn.getU2fEnrollErrorMessageKeyByCode = function (errorCode) {
    switch (errorCode) {
      default:
      case 1:
        return 'u2f.error.other';
      case 2:
      case 3:
        return 'u2f.error.badRequest';
      case 4:
        return 'u2f.error.unsupported';
      case 5:
        return 'u2f.error.timeout';
    }
  };

  fn.getU2fVerifyErrorMessageKeyByCode = function (errorCode, isOneFactor) {
    switch (errorCode) {
      case 1:
        // OTHER_ERROR
        return isOneFactor ? 'u2f.error.other.oneFactor' : 'u2f.error.other';
      case 2: // BAD_REQUEST
      case 3:
        // CONFIGURATION_UNSUPPORTED
        return isOneFactor ? 'u2f.error.badRequest.oneFactor' : 'u2f.error.badRequest';
      case 4:
        // DEVICE_INELIGIBLE
        return isOneFactor ? 'u2f.error.unsupported.oneFactor' : 'u2f.error.unsupported';
      case 5:
        // TIMEOUT
        return 'u2f.error.timeout';
    }
  };

  fn.getU2fEnrollErrorMessageByCode = function (errorCode) {
    return Okta.loc(fn.getU2fEnrollErrorMessageKeyByCode(errorCode), 'login');
  };

  fn.getU2fVerifyErrorMessageByCode = function (errorCode, isOneFactor) {
    return Okta.loc(fn.getU2fVerifyErrorMessageKeyByCode(errorCode, isOneFactor), 'login');
  };

  fn.getU2fVersion = function () {
    return 'U2F_V2';
  };

  fn.isU2fAvailable = function () {
    return window.hasOwnProperty('u2f');
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(55), __webpack_require__(245)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, bundles, countryCallingCodes) {
  var _ = Okta._;
  var fn = {};

  // () => [{ countryCode: countryName }], sorted by countryName
  fn.getCountries = function () {
    // HM, BV, and TF do not have phone prefixes, so don't give the
    // user the option to choose these countries. FYI it appears that these
    // countries do not have calling codes because they are ~~uninhabited~~
    var countries = _.omit(bundles.country, 'HM', 'BV', 'TF');

    // Sort it; figure out if there is a better way to do this (best would
    // be to sort it in the properties file!!)
    var collection = _.map(countries, function (name, code) {
      return { name: name, code: code };
    });
    collection = _.sortBy(collection, 'name');
    var sorted = {};
    _.each(collection, function (country) {
      sorted[country.code] = country.name;
    });

    return sorted;
  };

  fn.getCallingCodeForCountry = function (countryCode) {
    return countryCallingCodes[countryCode];
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(8), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorUtil, RouterUtil) {

  var _ = Okta._;

  return Okta.View.extend({
    className: 'scan-instructions clearfix',
    template: '\
      <div class="scan-instructions-details-wrapper">\
          <div class="scan-instructions-details">\
              <p>{{instructions}}</p>\
          </div>\
      </div>\
      <div class="scan-instructions-qrcode-wrapper">\
          <div class="qrcode-wrap">\
              <img data-se="qrcode" class="qrcode-image" src="{{qrcode}}">\
              <div data-se="qrcode-success" class="qrcode-success"></div>\
              <div data-se="qrcode-error" class="qrcode-error"></div>\
          </div>\
          <a href="#" data-type="manual-setup" data-se="manual-setup" class="link manual-setup">\
            {{i18n code="enroll.totp.cannotScan" bundle="login"}}\
          </a>\
          <a href="#" data-type="refresh-qrcode" data-se="refresh-qrcode" class="link refresh-qrcode">\
            {{i18n code="enroll.totp.refreshBarcode" bundle="login"}}\
          </a>\
      </div>\
    ',

    events: {
      'click [data-type="manual-setup"]': function clickDataTypeManualSetup(e) {
        e.preventDefault();
        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'), this.model.get('__factorType__'), 'manual');
        this.options.appState.trigger('navigate', url);
      },
      'click [data-type="refresh-qrcode"]': function clickDataTypeRefreshQrcode(e) {
        e.preventDefault();
        this.model.trigger('errors:clear');

        var self = this;
        this.model.doTransaction(function (transaction) {
          if (this.appState.get('isWaitingForActivation')) {
            return transaction.poll();
          } else {
            return transaction.activate();
          }
        }).then(function (trans) {
          var res = trans.data;
          if ((res.status === 'MFA_ENROLL_ACTIVATE' || res.status === 'FACTOR_ENROLL_ACTIVATE') && res.factorResult === 'WAITING') {
            // defer the render here to have a lastResponse set in AppState
            // so that we get new QRcode rendered
            _.defer(_.bind(self.render, self));
          }
        });
      }
    },

    initialize: function initialize() {
      this.listenTo(this.options.appState, 'change:lastAuthResponse', function () {
        if (this.options.appState.get('isMfaEnrollActivate')) {
          this.$el.toggleClass('qrcode-expired', !this.options.appState.get('isWaitingForActivation'));
        } else if (this.options.appState.get('isSuccessResponse')) {
          this.$el.addClass('qrcode-success');
        }
      });
      this.listenTo(this.model, 'error', function () {
        if (this.options.appState.get('isMfaEnrollActivate')) {
          this.$el.toggleClass('qrcode-expired', true);
        }
      });
    },

    getTemplateData: function getTemplateData() {
      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
      var instructions;
      if (this.model.get('__provider__') === 'GOOGLE') {
        instructions = Okta.loc('enroll.totp.setupGoogleAuthApp', 'login', [factorName]);
      } else {
        instructions = Okta.loc('enroll.totp.setupApp', 'login', [factorName]);
      }
      return {
        instructions: instructions,
        qrcode: this.options.appState.get('qrcode')
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(39);
var $export = __webpack_require__(16);
var redefine = __webpack_require__(85);
var hide = __webpack_require__(28);
var Iterators = __webpack_require__(34);
var $iterCreate = __webpack_require__(145);
var setToStringTag = __webpack_require__(51);
var getPrototypeOf = __webpack_require__(149);
var ITERATOR = __webpack_require__(11)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(17) && !__webpack_require__(33)(function () {
  return Object.defineProperty(__webpack_require__(66)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(28);


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(19);
var dPs = __webpack_require__(146);
var enumBugKeys = __webpack_require__(70);
var IE_PROTO = __webpack_require__(68)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(66)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(90).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(29);
var toIObject = __webpack_require__(30);
var arrayIndexOf = __webpack_require__(147)(false);
var IE_PROTO = __webpack_require__(68)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(40);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(64);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(10).document;
module.exports = document && document.documentElement;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(50)('meta');
var isObject = __webpack_require__(20);
var has = __webpack_require__(29);
var setDesc = __webpack_require__(24).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(33)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(87);
var hiddenKeys = __webpack_require__(70).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 93 */
/***/ (function(module, exports) {



/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(162), __esModule: true };

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

/**!

 @license
 handlebars v4.5.1

Copyright (C) 2011-2017 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsRuntime = __webpack_require__(2);

	var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

	// Compiler imports

	var _handlebarsCompilerAst = __webpack_require__(35);

	var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

	var _handlebarsCompilerBase = __webpack_require__(36);

	var _handlebarsCompilerCompiler = __webpack_require__(41);

	var _handlebarsCompilerJavascriptCompiler = __webpack_require__(42);

	var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

	var _handlebarsCompilerVisitor = __webpack_require__(39);

	var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

	var _handlebarsNoConflict = __webpack_require__(34);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	var _create = _handlebarsRuntime2['default'].create;
	function create() {
	  var hb = _create();

	  hb.compile = function (input, options) {
	    return _handlebarsCompilerCompiler.compile(input, options, hb);
	  };
	  hb.precompile = function (input, options) {
	    return _handlebarsCompilerCompiler.precompile(input, options, hb);
	  };

	  hb.AST = _handlebarsCompilerAst2['default'];
	  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
	  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
	  hb.Parser = _handlebarsCompilerBase.parser;
	  hb.parse = _handlebarsCompilerBase.parse;
	  hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst.Visitor = _handlebarsCompilerVisitor2['default'];

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsBase = __webpack_require__(4);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(21);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(6);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(22);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(34);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(10);

	var _decorators = __webpack_require__(18);

	var _logger = __webpack_require__(20);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.5.1';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 8;
	exports.COMPILER_REVISION = COMPILER_REVISION;
	var LAST_COMPATIBLE_COMPILER_REVISION = 7;

	exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0 <4.3.0',
	  8: '>= 4.3.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;

	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$defineProperty = __webpack_require__(7)['default'];

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'endLineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      endLineNumber = undefined,
	      column = undefined,
	      endColumn = undefined;

	  if (loc) {
	    line = loc.start.line;
	    endLineNumber = loc.end.line;
	    column = loc.start.column;
	    endColumn = loc.end.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  try {
	    if (loc) {
	      this.lineNumber = line;
	      this.endLineNumber = endLineNumber;

	      // Work around issue under safari where we can't directly set the column value
	      /* istanbul ignore next */
	      if (_Object$defineProperty) {
	        Object.defineProperty(this, 'column', {
	          value: column,
	          enumerable: true
	        });
	        Object.defineProperty(this, 'endColumn', {
	          value: endColumn,
	          enumerable: true
	        });
	      } else {
	        this.column = column;
	        this.endColumn = endColumn;
	      }
	    }
	  } catch (nop) {
	    /* Ignore if the browser is very particular */
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(8), __esModule: true };

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(9);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;
	exports.moveHelperToHooks = moveHelperToHooks;

	var _helpersBlockHelperMissing = __webpack_require__(11);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(12);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(13);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(14);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(15);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(16);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(17);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}

	function moveHelperToHooks(instance, helperName, keepHelper) {
	  if (instance.helpers[helperName]) {
	    instance.hooks[helperName] = instance.helpers[helperName];
	    if (!keepHelper) {
	      delete instance.helpers[helperName];
	    }
	  }
	}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else if (global.Symbol && context[global.Symbol.iterator]) {
	        var newContext = [];
	        var iterator = context[global.Symbol.iterator]();
	        for (var it = iterator.next(); !it.done; it = iterator.next()) {
	          newContext.push(it.value);
	        }
	        context = newContext;
	        for (var j = context.length; i < j; i++) {
	          execIteration(i, i, i === context.length - 1);
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (arguments.length != 2) {
	      throw new _exception2['default']('#if requires exactly one argument');
	    }
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    if (arguments.length != 2) {
	      throw new _exception2['default']('#unless requires exactly one argument');
	    }
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    if (!obj) {
	      return obj;
	    }
	    if (field === 'constructor' && !obj.propertyIsEnumerable(field)) {
	      return undefined;
	    }
	    return obj[field];
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (arguments.length != 2) {
	      throw new _exception2['default']('#with requires exactly one argument');
	    }
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;

	var _decoratorsInline = __webpack_require__(19);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$seal = __webpack_require__(23)['default'];

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _utils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(4);

	var _helpers = __webpack_require__(10);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
	    return;
	  }

	  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
	    var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	        compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	    throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	  } else {
	    // Use the embedded version info since the runtime doesn't know about this revision yet
	    throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	  }
	}

	function template(templateSpec, env) {

	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as pseudo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)
	  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }
	    partial = env.VM.resolvePartial.call(this, partial, context, options);

	    var optionsWithHooks = Utils.extend({}, options, { hooks: this.hooks });

	    var result = env.VM.invokePartial.call(this, partial, context, optionsWithHooks);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, optionsWithHooks);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name, loc) {
	      if (!obj || !(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj, { loc: loc });
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    // An empty object to use as replacement for null-contexts
	    nullContext: _Object$seal({}),

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = Utils.extend({}, env.helpers, options.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = Utils.extend({}, env.partials, options.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = Utils.extend({}, env.decorators, options.decorators);
	      }

	      container.hooks = {};

	      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
	      _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);
	      _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	      container.hooks = options.hooks;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	/**
	 * This is currently part of the official API, therefore implementation details should not be changed.
	 */

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  // Use the current closure context to save the partial-block if this partial
	  var currentPartialBlock = options.data && options.data['partial-block'];
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    (function () {
	      options.data = _base.createFrame(options.data);
	      // Wrapper function to get access to currentPartialBlock from the closure
	      var fn = options.fn;
	      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        // Restore the partial-block from the closure for the execution of the block
	        // i.e. the part inside the block of the partial call.
	        options.data = _base.createFrame(options.data);
	        options.data['partial-block'] = currentPartialBlock;
	        return fn(context, options);
	      };
	      if (fn.partials) {
	        options.partials = Utils.extend({}, options.partials, fn.partials);
	      }
	    })();
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(24), __esModule: true };

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(25);
	module.exports = __webpack_require__(30).Object.seal;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(26);

	__webpack_require__(27)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(it) : it;
	  };
	});

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(28)
	  , core    = __webpack_require__(30)
	  , fails   = __webpack_require__(33);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(29)
	  , core      = __webpack_require__(30)
	  , ctx       = __webpack_require__(31)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(32);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var AST = {
	  // Public API used to evaluate derived attributes regarding AST nodes
	  helpers: {
	    // a mustache is definitely a helper if:
	    // * it is an eligible helper, and
	    // * it has at least one parameter or hash segment
	    helperExpression: function helperExpression(node) {
	      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
	    },

	    scopedId: function scopedId(path) {
	      return (/^\.|this\b/.test(path.original)
	      );
	    },

	    // an ID is simple if it only has one part, and that part is not
	    // `..` or `this`.
	    simpleId: function simpleId(path) {
	      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
	    }
	  }
	};

	// Must be exported as an object rather than the root of the module as the jison lexer
	// must modify the object to operate properly.
	exports['default'] = AST;
	module.exports = exports['default'];

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	exports.__esModule = true;
	exports.parseWithoutProcessing = parseWithoutProcessing;
	exports.parse = parse;

	var _parser = __webpack_require__(37);

	var _parser2 = _interopRequireDefault(_parser);

	var _whitespaceControl = __webpack_require__(38);

	var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

	var _helpers = __webpack_require__(40);

	var Helpers = _interopRequireWildcard(_helpers);

	var _utils = __webpack_require__(5);

	exports.parser = _parser2['default'];

	var yy = {};
	_utils.extend(yy, Helpers);

	function parseWithoutProcessing(input, options) {
	  // Just return if an already-compiled AST was passed in.
	  if (input.type === 'Program') {
	    return input;
	  }

	  _parser2['default'].yy = yy;

	  // Altering the shared object here, but this is ok as parser is a sync operation
	  yy.locInfo = function (locInfo) {
	    return new yy.SourceLocation(options && options.srcName, locInfo);
	  };

	  var ast = _parser2['default'].parse(input);

	  return ast;
	}

	function parse(input, options) {
	  var ast = parseWithoutProcessing(input, options);
	  var strip = new _whitespaceControl2['default'](options);

	  return strip.accept(ast);
	}

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	// File ignored in coverage tests via setting in .istanbul.yml
	/* Jison generated parser */
	"use strict";

	exports.__esModule = true;
	var handlebars = (function () {
	    var parser = { trace: function trace() {},
	        yy: {},
	        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
	        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
	        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
	        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {

	            var $0 = $$.length - 1;
	            switch (yystate) {
	                case 1:
	                    return $$[$0 - 1];
	                    break;
	                case 2:
	                    this.$ = yy.prepareProgram($$[$0]);
	                    break;
	                case 3:
	                    this.$ = $$[$0];
	                    break;
	                case 4:
	                    this.$ = $$[$0];
	                    break;
	                case 5:
	                    this.$ = $$[$0];
	                    break;
	                case 6:
	                    this.$ = $$[$0];
	                    break;
	                case 7:
	                    this.$ = $$[$0];
	                    break;
	                case 8:
	                    this.$ = $$[$0];
	                    break;
	                case 9:
	                    this.$ = {
	                        type: 'CommentStatement',
	                        value: yy.stripComment($$[$0]),
	                        strip: yy.stripFlags($$[$0], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 10:
	                    this.$ = {
	                        type: 'ContentStatement',
	                        original: $$[$0],
	                        value: $$[$0],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 11:
	                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 12:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
	                    break;
	                case 13:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
	                    break;
	                case 14:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
	                    break;
	                case 15:
	                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 16:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 17:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 18:
	                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
	                    break;
	                case 19:
	                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
	                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
	                    program.chained = true;

	                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

	                    break;
	                case 20:
	                    this.$ = $$[$0];
	                    break;
	                case 21:
	                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
	                    break;
	                case 22:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 23:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 24:
	                    this.$ = {
	                        type: 'PartialStatement',
	                        name: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        indent: '',
	                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 25:
	                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 26:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
	                    break;
	                case 27:
	                    this.$ = $$[$0];
	                    break;
	                case 28:
	                    this.$ = $$[$0];
	                    break;
	                case 29:
	                    this.$ = {
	                        type: 'SubExpression',
	                        path: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 30:
	                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 31:
	                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 32:
	                    this.$ = yy.id($$[$0 - 1]);
	                    break;
	                case 33:
	                    this.$ = $$[$0];
	                    break;
	                case 34:
	                    this.$ = $$[$0];
	                    break;
	                case 35:
	                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 36:
	                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
	                    break;
	                case 37:
	                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
	                    break;
	                case 38:
	                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
	                    break;
	                case 39:
	                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
	                    break;
	                case 40:
	                    this.$ = $$[$0];
	                    break;
	                case 41:
	                    this.$ = $$[$0];
	                    break;
	                case 42:
	                    this.$ = yy.preparePath(true, $$[$0], this._$);
	                    break;
	                case 43:
	                    this.$ = yy.preparePath(false, $$[$0], this._$);
	                    break;
	                case 44:
	                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
	                    break;
	                case 45:
	                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
	                    break;
	                case 46:
	                    this.$ = [];
	                    break;
	                case 47:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 48:
	                    this.$ = [];
	                    break;
	                case 49:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 50:
	                    this.$ = [];
	                    break;
	                case 51:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 58:
	                    this.$ = [];
	                    break;
	                case 59:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 64:
	                    this.$ = [];
	                    break;
	                case 65:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 70:
	                    this.$ = [];
	                    break;
	                case 71:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 78:
	                    this.$ = [];
	                    break;
	                case 79:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 82:
	                    this.$ = [];
	                    break;
	                case 83:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 86:
	                    this.$ = [];
	                    break;
	                case 87:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 90:
	                    this.$ = [];
	                    break;
	                case 91:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 94:
	                    this.$ = [];
	                    break;
	                case 95:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 98:
	                    this.$ = [$$[$0]];
	                    break;
	                case 99:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 100:
	                    this.$ = [$$[$0]];
	                    break;
	                case 101:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	            }
	        },
	        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 15: [2, 48], 17: 39, 18: [2, 48] }, { 20: 41, 56: 40, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 44, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 45, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 41, 56: 48, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 49, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 50] }, { 72: [1, 35], 86: 51 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 52, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 53, 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 54, 47: [2, 54] }, { 28: 59, 43: 60, 44: [1, 58], 47: [2, 56] }, { 13: 62, 15: [1, 20], 18: [1, 61] }, { 33: [2, 86], 57: 63, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 64, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 65, 47: [1, 66] }, { 30: 67, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 68, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 69, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 70, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 74, 33: [2, 80], 50: 71, 63: 72, 64: 75, 65: [1, 43], 69: 73, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 79] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 50] }, { 20: 74, 53: 80, 54: [2, 84], 63: 81, 64: 75, 65: [1, 43], 69: 82, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 83, 47: [1, 66] }, { 47: [2, 55] }, { 4: 84, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 85, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 86, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 87, 47: [1, 66] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 74, 33: [2, 88], 58: 88, 63: 89, 64: 75, 65: [1, 43], 69: 90, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 91, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 92, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 31: 93, 33: [2, 60], 63: 94, 64: 75, 65: [1, 43], 69: 95, 70: 76, 71: 77, 72: [1, 78], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 66], 36: 96, 63: 97, 64: 75, 65: [1, 43], 69: 98, 70: 76, 71: 77, 72: [1, 78], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 22: 99, 23: [2, 52], 63: 100, 64: 75, 65: [1, 43], 69: 101, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 92], 62: 102, 63: 103, 64: 75, 65: [1, 43], 69: 104, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 105] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 106, 72: [1, 107], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 108], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 109] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 111, 46: 110, 47: [2, 76] }, { 33: [2, 70], 40: 112, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 113] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 74, 63: 115, 64: 75, 65: [1, 43], 67: 114, 68: [2, 96], 69: 116, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 117] }, { 32: 118, 33: [2, 62], 74: 119, 75: [1, 120] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 121, 74: 122, 75: [1, 120] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 123] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 124] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 108] }, { 20: 74, 63: 125, 64: 75, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 74, 33: [2, 72], 41: 126, 63: 127, 64: 75, 65: [1, 43], 69: 128, 70: 76, 71: 77, 72: [1, 78], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 129] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 130] }, { 33: [2, 63] }, { 72: [1, 132], 76: 131 }, { 33: [1, 133] }, { 33: [2, 69] }, { 15: [2, 12], 18: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 134, 74: 135, 75: [1, 120] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 137], 77: [1, 136] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 138] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
	        defaultActions: { 4: [2, 1], 54: [2, 55], 56: [2, 20], 60: [2, 57], 73: [2, 81], 82: [2, 85], 86: [2, 18], 90: [2, 89], 101: [2, 53], 104: [2, 93], 110: [2, 19], 111: [2, 77], 116: [2, 97], 119: [2, 63], 122: [2, 69], 135: [2, 75], 136: [2, 32] },
	        parseError: function parseError(str, hash) {
	            throw new Error(str);
	        },
	        parse: function parse(input) {
	            var self = this,
	                stack = [0],
	                vstack = [null],
	                lstack = [],
	                table = this.table,
	                yytext = "",
	                yylineno = 0,
	                yyleng = 0,
	                recovering = 0,
	                TERROR = 2,
	                EOF = 1;
	            this.lexer.setInput(input);
	            this.lexer.yy = this.yy;
	            this.yy.lexer = this.lexer;
	            this.yy.parser = this;
	            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
	            var yyloc = this.lexer.yylloc;
	            lstack.push(yyloc);
	            var ranges = this.lexer.options && this.lexer.options.ranges;
	            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
	            function popStack(n) {
	                stack.length = stack.length - 2 * n;
	                vstack.length = vstack.length - n;
	                lstack.length = lstack.length - n;
	            }
	            function lex() {
	                var token;
	                token = self.lexer.lex() || 1;
	                if (typeof token !== "number") {
	                    token = self.symbols_[token] || token;
	                }
	                return token;
	            }
	            var symbol,
	                preErrorSymbol,
	                state,
	                action,
	                a,
	                r,
	                yyval = {},
	                p,
	                len,
	                newState,
	                expected;
	            while (true) {
	                state = stack[stack.length - 1];
	                if (this.defaultActions[state]) {
	                    action = this.defaultActions[state];
	                } else {
	                    if (symbol === null || typeof symbol == "undefined") {
	                        symbol = lex();
	                    }
	                    action = table[state] && table[state][symbol];
	                }
	                if (typeof action === "undefined" || !action.length || !action[0]) {
	                    var errStr = "";
	                    if (!recovering) {
	                        expected = [];
	                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
	                            expected.push("'" + this.terminals_[p] + "'");
	                        }
	                        if (this.lexer.showPosition) {
	                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
	                        } else {
	                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
	                        }
	                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
	                    }
	                }
	                if (action[0] instanceof Array && action.length > 1) {
	                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
	                }
	                switch (action[0]) {
	                    case 1:
	                        stack.push(symbol);
	                        vstack.push(this.lexer.yytext);
	                        lstack.push(this.lexer.yylloc);
	                        stack.push(action[1]);
	                        symbol = null;
	                        if (!preErrorSymbol) {
	                            yyleng = this.lexer.yyleng;
	                            yytext = this.lexer.yytext;
	                            yylineno = this.lexer.yylineno;
	                            yyloc = this.lexer.yylloc;
	                            if (recovering > 0) recovering--;
	                        } else {
	                            symbol = preErrorSymbol;
	                            preErrorSymbol = null;
	                        }
	                        break;
	                    case 2:
	                        len = this.productions_[action[1]][1];
	                        yyval.$ = vstack[vstack.length - len];
	                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
	                        if (ranges) {
	                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
	                        }
	                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
	                        if (typeof r !== "undefined") {
	                            return r;
	                        }
	                        if (len) {
	                            stack = stack.slice(0, -1 * len * 2);
	                            vstack = vstack.slice(0, -1 * len);
	                            lstack = lstack.slice(0, -1 * len);
	                        }
	                        stack.push(this.productions_[action[1]][0]);
	                        vstack.push(yyval.$);
	                        lstack.push(yyval._$);
	                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	                        stack.push(newState);
	                        break;
	                    case 3:
	                        return true;
	                }
	            }
	            return true;
	        }
	    };
	    /* Jison generated lexer */
	    var lexer = (function () {
	        var lexer = { EOF: 1,
	            parseError: function parseError(str, hash) {
	                if (this.yy.parser) {
	                    this.yy.parser.parseError(str, hash);
	                } else {
	                    throw new Error(str);
	                }
	            },
	            setInput: function setInput(input) {
	                this._input = input;
	                this._more = this._less = this.done = false;
	                this.yylineno = this.yyleng = 0;
	                this.yytext = this.matched = this.match = '';
	                this.conditionStack = ['INITIAL'];
	                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
	                if (this.options.ranges) this.yylloc.range = [0, 0];
	                this.offset = 0;
	                return this;
	            },
	            input: function input() {
	                var ch = this._input[0];
	                this.yytext += ch;
	                this.yyleng++;
	                this.offset++;
	                this.match += ch;
	                this.matched += ch;
	                var lines = ch.match(/(?:\r\n?|\n).*/g);
	                if (lines) {
	                    this.yylineno++;
	                    this.yylloc.last_line++;
	                } else {
	                    this.yylloc.last_column++;
	                }
	                if (this.options.ranges) this.yylloc.range[1]++;

	                this._input = this._input.slice(1);
	                return ch;
	            },
	            unput: function unput(ch) {
	                var len = ch.length;
	                var lines = ch.split(/(?:\r\n?|\n)/g);

	                this._input = ch + this._input;
	                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
	                //this.yyleng -= len;
	                this.offset -= len;
	                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	                this.match = this.match.substr(0, this.match.length - 1);
	                this.matched = this.matched.substr(0, this.matched.length - 1);

	                if (lines.length - 1) this.yylineno -= lines.length - 1;
	                var r = this.yylloc.range;

	                this.yylloc = { first_line: this.yylloc.first_line,
	                    last_line: this.yylineno + 1,
	                    first_column: this.yylloc.first_column,
	                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
	                };

	                if (this.options.ranges) {
	                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	                }
	                return this;
	            },
	            more: function more() {
	                this._more = true;
	                return this;
	            },
	            less: function less(n) {
	                this.unput(this.match.slice(n));
	            },
	            pastInput: function pastInput() {
	                var past = this.matched.substr(0, this.matched.length - this.match.length);
	                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
	            },
	            upcomingInput: function upcomingInput() {
	                var next = this.match;
	                if (next.length < 20) {
	                    next += this._input.substr(0, 20 - next.length);
	                }
	                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
	            },
	            showPosition: function showPosition() {
	                var pre = this.pastInput();
	                var c = new Array(pre.length + 1).join("-");
	                return pre + this.upcomingInput() + "\n" + c + "^";
	            },
	            next: function next() {
	                if (this.done) {
	                    return this.EOF;
	                }
	                if (!this._input) this.done = true;

	                var token, match, tempMatch, index, col, lines;
	                if (!this._more) {
	                    this.yytext = '';
	                    this.match = '';
	                }
	                var rules = this._currentRules();
	                for (var i = 0; i < rules.length; i++) {
	                    tempMatch = this._input.match(this.rules[rules[i]]);
	                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                        match = tempMatch;
	                        index = i;
	                        if (!this.options.flex) break;
	                    }
	                }
	                if (match) {
	                    lines = match[0].match(/(?:\r\n?|\n).*/g);
	                    if (lines) this.yylineno += lines.length;
	                    this.yylloc = { first_line: this.yylloc.last_line,
	                        last_line: this.yylineno + 1,
	                        first_column: this.yylloc.last_column,
	                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
	                    this.yytext += match[0];
	                    this.match += match[0];
	                    this.matches = match;
	                    this.yyleng = this.yytext.length;
	                    if (this.options.ranges) {
	                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
	                    }
	                    this._more = false;
	                    this._input = this._input.slice(match[0].length);
	                    this.matched += match[0];
	                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
	                    if (this.done && this._input) this.done = false;
	                    if (token) return token;else return;
	                }
	                if (this._input === "") {
	                    return this.EOF;
	                } else {
	                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
	                }
	            },
	            lex: function lex() {
	                var r = this.next();
	                if (typeof r !== 'undefined') {
	                    return r;
	                } else {
	                    return this.lex();
	                }
	            },
	            begin: function begin(condition) {
	                this.conditionStack.push(condition);
	            },
	            popState: function popState() {
	                return this.conditionStack.pop();
	            },
	            _currentRules: function _currentRules() {
	                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	            },
	            topState: function topState() {
	                return this.conditionStack[this.conditionStack.length - 2];
	            },
	            pushState: function begin(condition) {
	                this.begin(condition);
	            } };
	        lexer.options = {};
	        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

	            function strip(start, end) {
	                return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
	            }

	            var YYSTATE = YY_START;
	            switch ($avoiding_name_collisions) {
	                case 0:
	                    if (yy_.yytext.slice(-2) === "\\\\") {
	                        strip(0, 1);
	                        this.begin("mu");
	                    } else if (yy_.yytext.slice(-1) === "\\") {
	                        strip(0, 1);
	                        this.begin("emu");
	                    } else {
	                        this.begin("mu");
	                    }
	                    if (yy_.yytext) return 15;

	                    break;
	                case 1:
	                    return 15;
	                    break;
	                case 2:
	                    this.popState();
	                    return 15;

	                    break;
	                case 3:
	                    this.begin('raw');return 15;
	                    break;
	                case 4:
	                    this.popState();
	                    // Should be using `this.topState()` below, but it currently
	                    // returns the second top instead of the first top. Opened an
	                    // issue about it at https://github.com/zaach/jison/issues/291
	                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
	                        return 15;
	                    } else {
	                        strip(5, 9);
	                        return 'END_RAW_BLOCK';
	                    }

	                    break;
	                case 5:
	                    return 15;
	                    break;
	                case 6:
	                    this.popState();
	                    return 14;

	                    break;
	                case 7:
	                    return 65;
	                    break;
	                case 8:
	                    return 68;
	                    break;
	                case 9:
	                    return 19;
	                    break;
	                case 10:
	                    this.popState();
	                    this.begin('raw');
	                    return 23;

	                    break;
	                case 11:
	                    return 55;
	                    break;
	                case 12:
	                    return 60;
	                    break;
	                case 13:
	                    return 29;
	                    break;
	                case 14:
	                    return 47;
	                    break;
	                case 15:
	                    this.popState();return 44;
	                    break;
	                case 16:
	                    this.popState();return 44;
	                    break;
	                case 17:
	                    return 34;
	                    break;
	                case 18:
	                    return 39;
	                    break;
	                case 19:
	                    return 51;
	                    break;
	                case 20:
	                    return 48;
	                    break;
	                case 21:
	                    this.unput(yy_.yytext);
	                    this.popState();
	                    this.begin('com');

	                    break;
	                case 22:
	                    this.popState();
	                    return 14;

	                    break;
	                case 23:
	                    return 48;
	                    break;
	                case 24:
	                    return 73;
	                    break;
	                case 25:
	                    return 72;
	                    break;
	                case 26:
	                    return 72;
	                    break;
	                case 27:
	                    return 87;
	                    break;
	                case 28:
	                    // ignore whitespace
	                    break;
	                case 29:
	                    this.popState();return 54;
	                    break;
	                case 30:
	                    this.popState();return 33;
	                    break;
	                case 31:
	                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
	                    break;
	                case 32:
	                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
	                    break;
	                case 33:
	                    return 85;
	                    break;
	                case 34:
	                    return 82;
	                    break;
	                case 35:
	                    return 82;
	                    break;
	                case 36:
	                    return 83;
	                    break;
	                case 37:
	                    return 84;
	                    break;
	                case 38:
	                    return 81;
	                    break;
	                case 39:
	                    return 75;
	                    break;
	                case 40:
	                    return 77;
	                    break;
	                case 41:
	                    return 72;
	                    break;
	                case 42:
	                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
	                    break;
	                case 43:
	                    return 'INVALID';
	                    break;
	                case 44:
	                    return 5;
	                    break;
	            }
	        };
	        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
	        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
	        return lexer;
	    })();
	    parser.lexer = lexer;
	    function Parser() {
	        this.yy = {};
	    }Parser.prototype = parser;parser.Parser = Parser;
	    return new Parser();
	})();exports["default"] = handlebars;
	module.exports = exports["default"];

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _visitor = __webpack_require__(39);

	var _visitor2 = _interopRequireDefault(_visitor);

	function WhitespaceControl() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  this.options = options;
	}
	WhitespaceControl.prototype = new _visitor2['default']();

	WhitespaceControl.prototype.Program = function (program) {
	  var doStandalone = !this.options.ignoreStandalone;

	  var isRoot = !this.isRootSeen;
	  this.isRootSeen = true;

	  var body = program.body;
	  for (var i = 0, l = body.length; i < l; i++) {
	    var current = body[i],
	        strip = this.accept(current);

	    if (!strip) {
	      continue;
	    }

	    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
	        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
	        openStandalone = strip.openStandalone && _isPrevWhitespace,
	        closeStandalone = strip.closeStandalone && _isNextWhitespace,
	        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

	    if (strip.close) {
	      omitRight(body, i, true);
	    }
	    if (strip.open) {
	      omitLeft(body, i, true);
	    }

	    if (doStandalone && inlineStandalone) {
	      omitRight(body, i);

	      if (omitLeft(body, i)) {
	        // If we are on a standalone node, save the indent info for partials
	        if (current.type === 'PartialStatement') {
	          // Pull out the whitespace from the final line
	          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
	        }
	      }
	    }
	    if (doStandalone && openStandalone) {
	      omitRight((current.program || current.inverse).body);

	      // Strip out the previous content node if it's whitespace only
	      omitLeft(body, i);
	    }
	    if (doStandalone && closeStandalone) {
	      // Always strip the next node
	      omitRight(body, i);

	      omitLeft((current.inverse || current.program).body);
	    }
	  }

	  return program;
	};

	WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
	  this.accept(block.program);
	  this.accept(block.inverse);

	  // Find the inverse program that is involed with whitespace stripping.
	  var program = block.program || block.inverse,
	      inverse = block.program && block.inverse,
	      firstInverse = inverse,
	      lastInverse = inverse;

	  if (inverse && inverse.chained) {
	    firstInverse = inverse.body[0].program;

	    // Walk the inverse chain to find the last inverse that is actually in the chain.
	    while (lastInverse.chained) {
	      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
	    }
	  }

	  var strip = {
	    open: block.openStrip.open,
	    close: block.closeStrip.close,

	    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
	    // so our parent can determine if we actually are standalone
	    openStandalone: isNextWhitespace(program.body),
	    closeStandalone: isPrevWhitespace((firstInverse || program).body)
	  };

	  if (block.openStrip.close) {
	    omitRight(program.body, null, true);
	  }

	  if (inverse) {
	    var inverseStrip = block.inverseStrip;

	    if (inverseStrip.open) {
	      omitLeft(program.body, null, true);
	    }

	    if (inverseStrip.close) {
	      omitRight(firstInverse.body, null, true);
	    }
	    if (block.closeStrip.open) {
	      omitLeft(lastInverse.body, null, true);
	    }

	    // Find standalone else statments
	    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
	      omitLeft(program.body);
	      omitRight(firstInverse.body);
	    }
	  } else if (block.closeStrip.open) {
	    omitLeft(program.body, null, true);
	  }

	  return strip;
	};

	WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
	  return mustache.strip;
	};

	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
	  /* istanbul ignore next */
	  var strip = node.strip || {};
	  return {
	    inlineStandalone: true,
	    open: strip.open,
	    close: strip.close
	  };
	};

	function isPrevWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = body.length;
	  }

	  // Nodes that end with newlines are considered whitespace (but are special
	  // cased for strip operations)
	  var prev = body[i - 1],
	      sibling = body[i - 2];
	  if (!prev) {
	    return isRoot;
	  }

	  if (prev.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
	  }
	}
	function isNextWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = -1;
	  }

	  var next = body[i + 1],
	      sibling = body[i + 2];
	  if (!next) {
	    return isRoot;
	  }

	  if (next.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
	  }
	}

	// Marks the node to the right of the position as omitted.
	// I.e. {{foo}}' ' will mark the ' ' node as omitted.
	//
	// If i is undefined, then the first child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitRight(body, i, multiple) {
	  var current = body[i == null ? 0 : i + 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
	    return;
	  }

	  var original = current.value;
	  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
	  current.rightStripped = current.value !== original;
	}

	// Marks the node to the left of the position as omitted.
	// I.e. ' '{{foo}} will mark the ' ' node as omitted.
	//
	// If i is undefined then the last child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitLeft(body, i, multiple) {
	  var current = body[i == null ? body.length - 1 : i - 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
	    return;
	  }

	  // We omit the last node if it's whitespace only and not preceded by a non-content node.
	  var original = current.value;
	  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
	  current.leftStripped = current.value !== original;
	  return current.leftStripped;
	}

	exports['default'] = WhitespaceControl;
	module.exports = exports['default'];

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function Visitor() {
	  this.parents = [];
	}

	Visitor.prototype = {
	  constructor: Visitor,
	  mutating: false,

	  // Visits a given value. If mutating, will replace the value if necessary.
	  acceptKey: function acceptKey(node, name) {
	    var value = this.accept(node[name]);
	    if (this.mutating) {
	      // Hacky sanity check: This may have a few false positives for type for the helper
	      // methods but will generally do the right thing without a lot of overhead.
	      if (value && !Visitor.prototype[value.type]) {
	        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
	      }
	      node[name] = value;
	    }
	  },

	  // Performs an accept operation with added sanity check to ensure
	  // required keys are not removed.
	  acceptRequired: function acceptRequired(node, name) {
	    this.acceptKey(node, name);

	    if (!node[name]) {
	      throw new _exception2['default'](node.type + ' requires ' + name);
	    }
	  },

	  // Traverses a given array. If mutating, empty respnses will be removed
	  // for child elements.
	  acceptArray: function acceptArray(array) {
	    for (var i = 0, l = array.length; i < l; i++) {
	      this.acceptKey(array, i);

	      if (!array[i]) {
	        array.splice(i, 1);
	        i--;
	        l--;
	      }
	    }
	  },

	  accept: function accept(object) {
	    if (!object) {
	      return;
	    }

	    /* istanbul ignore next: Sanity code */
	    if (!this[object.type]) {
	      throw new _exception2['default']('Unknown type: ' + object.type, object);
	    }

	    if (this.current) {
	      this.parents.unshift(this.current);
	    }
	    this.current = object;

	    var ret = this[object.type](object);

	    this.current = this.parents.shift();

	    if (!this.mutating || ret) {
	      return ret;
	    } else if (ret !== false) {
	      return object;
	    }
	  },

	  Program: function Program(program) {
	    this.acceptArray(program.body);
	  },

	  MustacheStatement: visitSubExpression,
	  Decorator: visitSubExpression,

	  BlockStatement: visitBlock,
	  DecoratorBlock: visitBlock,

	  PartialStatement: visitPartial,
	  PartialBlockStatement: function PartialBlockStatement(partial) {
	    visitPartial.call(this, partial);

	    this.acceptKey(partial, 'program');
	  },

	  ContentStatement: function ContentStatement() /* content */{},
	  CommentStatement: function CommentStatement() /* comment */{},

	  SubExpression: visitSubExpression,

	  PathExpression: function PathExpression() /* path */{},

	  StringLiteral: function StringLiteral() /* string */{},
	  NumberLiteral: function NumberLiteral() /* number */{},
	  BooleanLiteral: function BooleanLiteral() /* bool */{},
	  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
	  NullLiteral: function NullLiteral() /* literal */{},

	  Hash: function Hash(hash) {
	    this.acceptArray(hash.pairs);
	  },
	  HashPair: function HashPair(pair) {
	    this.acceptRequired(pair, 'value');
	  }
	};

	function visitSubExpression(mustache) {
	  this.acceptRequired(mustache, 'path');
	  this.acceptArray(mustache.params);
	  this.acceptKey(mustache, 'hash');
	}
	function visitBlock(block) {
	  visitSubExpression.call(this, block);

	  this.acceptKey(block, 'program');
	  this.acceptKey(block, 'inverse');
	}
	function visitPartial(partial) {
	  this.acceptRequired(partial, 'name');
	  this.acceptArray(partial.params);
	  this.acceptKey(partial, 'hash');
	}

	exports['default'] = Visitor;
	module.exports = exports['default'];

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.SourceLocation = SourceLocation;
	exports.id = id;
	exports.stripFlags = stripFlags;
	exports.stripComment = stripComment;
	exports.preparePath = preparePath;
	exports.prepareMustache = prepareMustache;
	exports.prepareRawBlock = prepareRawBlock;
	exports.prepareBlock = prepareBlock;
	exports.prepareProgram = prepareProgram;
	exports.preparePartialBlock = preparePartialBlock;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function validateClose(open, close) {
	  close = close.path ? close.path.original : close;

	  if (open.path.original !== close) {
	    var errorNode = { loc: open.path.loc };

	    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
	  }
	}

	function SourceLocation(source, locInfo) {
	  this.source = source;
	  this.start = {
	    line: locInfo.first_line,
	    column: locInfo.first_column
	  };
	  this.end = {
	    line: locInfo.last_line,
	    column: locInfo.last_column
	  };
	}

	function id(token) {
	  if (/^\[.*\]$/.test(token)) {
	    return token.substring(1, token.length - 1);
	  } else {
	    return token;
	  }
	}

	function stripFlags(open, close) {
	  return {
	    open: open.charAt(2) === '~',
	    close: close.charAt(close.length - 3) === '~'
	  };
	}

	function stripComment(comment) {
	  return comment.replace(/^\{\{~?!-?-?/, '').replace(/-?-?~?\}\}$/, '');
	}

	function preparePath(data, parts, loc) {
	  loc = this.locInfo(loc);

	  var original = data ? '@' : '',
	      dig = [],
	      depth = 0;

	  for (var i = 0, l = parts.length; i < l; i++) {
	    var part = parts[i].part,

	    // If we have [] syntax then we do not treat path references as operators,
	    // i.e. foo.[this] resolves to approximately context.foo['this']
	    isLiteral = parts[i].original !== part;
	    original += (parts[i].separator || '') + part;

	    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
	      if (dig.length > 0) {
	        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
	      } else if (part === '..') {
	        depth++;
	      }
	    } else {
	      dig.push(part);
	    }
	  }

	  return {
	    type: 'PathExpression',
	    data: data,
	    depth: depth,
	    parts: dig,
	    original: original,
	    loc: loc
	  };
	}

	function prepareMustache(path, params, hash, open, strip, locInfo) {
	  // Must use charAt to support IE pre-10
	  var escapeFlag = open.charAt(3) || open.charAt(2),
	      escaped = escapeFlag !== '{' && escapeFlag !== '&';

	  var decorator = /\*/.test(open);
	  return {
	    type: decorator ? 'Decorator' : 'MustacheStatement',
	    path: path,
	    params: params,
	    hash: hash,
	    escaped: escaped,
	    strip: strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareRawBlock(openRawBlock, contents, close, locInfo) {
	  validateClose(openRawBlock, close);

	  locInfo = this.locInfo(locInfo);
	  var program = {
	    type: 'Program',
	    body: contents,
	    strip: {},
	    loc: locInfo
	  };

	  return {
	    type: 'BlockStatement',
	    path: openRawBlock.path,
	    params: openRawBlock.params,
	    hash: openRawBlock.hash,
	    program: program,
	    openStrip: {},
	    inverseStrip: {},
	    closeStrip: {},
	    loc: locInfo
	  };
	}

	function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
	  if (close && close.path) {
	    validateClose(openBlock, close);
	  }

	  var decorator = /\*/.test(openBlock.open);

	  program.blockParams = openBlock.blockParams;

	  var inverse = undefined,
	      inverseStrip = undefined;

	  if (inverseAndProgram) {
	    if (decorator) {
	      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
	    }

	    if (inverseAndProgram.chain) {
	      inverseAndProgram.program.body[0].closeStrip = close.strip;
	    }

	    inverseStrip = inverseAndProgram.strip;
	    inverse = inverseAndProgram.program;
	  }

	  if (inverted) {
	    inverted = inverse;
	    inverse = program;
	    program = inverted;
	  }

	  return {
	    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
	    path: openBlock.path,
	    params: openBlock.params,
	    hash: openBlock.hash,
	    program: program,
	    inverse: inverse,
	    openStrip: openBlock.strip,
	    inverseStrip: inverseStrip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareProgram(statements, loc) {
	  if (!loc && statements.length) {
	    var firstLoc = statements[0].loc,
	        lastLoc = statements[statements.length - 1].loc;

	    /* istanbul ignore else */
	    if (firstLoc && lastLoc) {
	      loc = {
	        source: firstLoc.source,
	        start: {
	          line: firstLoc.start.line,
	          column: firstLoc.start.column
	        },
	        end: {
	          line: lastLoc.end.line,
	          column: lastLoc.end.column
	        }
	      };
	    }
	  }

	  return {
	    type: 'Program',
	    body: statements,
	    strip: {},
	    loc: loc
	  };
	}

	function preparePartialBlock(open, program, close, locInfo) {
	  validateClose(open, close);

	  return {
	    type: 'PartialBlockStatement',
	    name: open.path,
	    params: open.params,
	    hash: open.hash,
	    program: program,
	    openStrip: open.strip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable new-cap */

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.Compiler = Compiler;
	exports.precompile = precompile;
	exports.compile = compile;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _ast = __webpack_require__(35);

	var _ast2 = _interopRequireDefault(_ast);

	var slice = [].slice;

	function Compiler() {}

	// the foundHelper register will disambiguate helper lookup from finding a
	// function in a context. This is necessary for mustache compatibility, which
	// requires that context functions in blocks are evaluated by blockHelperMissing,
	// and then proceed as if the resulting value was provided to blockHelperMissing.

	Compiler.prototype = {
	  compiler: Compiler,

	  equals: function equals(other) {
	    var len = this.opcodes.length;
	    if (other.opcodes.length !== len) {
	      return false;
	    }

	    for (var i = 0; i < len; i++) {
	      var opcode = this.opcodes[i],
	          otherOpcode = other.opcodes[i];
	      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
	        return false;
	      }
	    }

	    // We know that length is the same between the two arrays because they are directly tied
	    // to the opcode behavior above.
	    len = this.children.length;
	    for (var i = 0; i < len; i++) {
	      if (!this.children[i].equals(other.children[i])) {
	        return false;
	      }
	    }

	    return true;
	  },

	  guid: 0,

	  compile: function compile(program, options) {
	    this.sourceNode = [];
	    this.opcodes = [];
	    this.children = [];
	    this.options = options;
	    this.stringParams = options.stringParams;
	    this.trackIds = options.trackIds;

	    options.blockParams = options.blockParams || [];

	    // These changes will propagate to the other compiler components
	    var knownHelpers = options.knownHelpers;
	    options.knownHelpers = {
	      'helperMissing': true,
	      'blockHelperMissing': true,
	      'each': true,
	      'if': true,
	      'unless': true,
	      'with': true,
	      'log': true,
	      'lookup': true
	    };
	    if (knownHelpers) {
	      // the next line should use "Object.keys", but the code has been like this a long time and changing it, might
	      // cause backwards-compatibility issues... It's an old library...
	      // eslint-disable-next-line guard-for-in
	      for (var _name in knownHelpers) {
	        this.options.knownHelpers[_name] = knownHelpers[_name];
	      }
	    }

	    return this.accept(program);
	  },

	  compileProgram: function compileProgram(program) {
	    var childCompiler = new this.compiler(),
	        // eslint-disable-line new-cap
	    result = childCompiler.compile(program, this.options),
	        guid = this.guid++;

	    this.usePartial = this.usePartial || result.usePartial;

	    this.children[guid] = result;
	    this.useDepths = this.useDepths || result.useDepths;

	    return guid;
	  },

	  accept: function accept(node) {
	    /* istanbul ignore next: Sanity code */
	    if (!this[node.type]) {
	      throw new _exception2['default']('Unknown type: ' + node.type, node);
	    }

	    this.sourceNode.unshift(node);
	    var ret = this[node.type](node);
	    this.sourceNode.shift();
	    return ret;
	  },

	  Program: function Program(program) {
	    this.options.blockParams.unshift(program.blockParams);

	    var body = program.body,
	        bodyLength = body.length;
	    for (var i = 0; i < bodyLength; i++) {
	      this.accept(body[i]);
	    }

	    this.options.blockParams.shift();

	    this.isSimple = bodyLength === 1;
	    this.blockParams = program.blockParams ? program.blockParams.length : 0;

	    return this;
	  },

	  BlockStatement: function BlockStatement(block) {
	    transformLiteralToPath(block);

	    var program = block.program,
	        inverse = block.inverse;

	    program = program && this.compileProgram(program);
	    inverse = inverse && this.compileProgram(inverse);

	    var type = this.classifySexpr(block);

	    if (type === 'helper') {
	      this.helperSexpr(block, program, inverse);
	    } else if (type === 'simple') {
	      this.simpleSexpr(block);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('blockValue', block.path.original);
	    } else {
	      this.ambiguousSexpr(block, program, inverse);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('ambiguousBlockValue');
	    }

	    this.opcode('append');
	  },

	  DecoratorBlock: function DecoratorBlock(decorator) {
	    var program = decorator.program && this.compileProgram(decorator.program);
	    var params = this.setupFullMustacheParams(decorator, program, undefined),
	        path = decorator.path;

	    this.useDecorators = true;
	    this.opcode('registerDecorator', params.length, path.original);
	  },

	  PartialStatement: function PartialStatement(partial) {
	    this.usePartial = true;

	    var program = partial.program;
	    if (program) {
	      program = this.compileProgram(partial.program);
	    }

	    var params = partial.params;
	    if (params.length > 1) {
	      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
	    } else if (!params.length) {
	      if (this.options.explicitPartialContext) {
	        this.opcode('pushLiteral', 'undefined');
	      } else {
	        params.push({ type: 'PathExpression', parts: [], depth: 0 });
	      }
	    }

	    var partialName = partial.name.original,
	        isDynamic = partial.name.type === 'SubExpression';
	    if (isDynamic) {
	      this.accept(partial.name);
	    }

	    this.setupFullMustacheParams(partial, program, undefined, true);

	    var indent = partial.indent || '';
	    if (this.options.preventIndent && indent) {
	      this.opcode('appendContent', indent);
	      indent = '';
	    }

	    this.opcode('invokePartial', isDynamic, partialName, indent);
	    this.opcode('append');
	  },
	  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
	    this.PartialStatement(partialBlock);
	  },

	  MustacheStatement: function MustacheStatement(mustache) {
	    this.SubExpression(mustache);

	    if (mustache.escaped && !this.options.noEscape) {
	      this.opcode('appendEscaped');
	    } else {
	      this.opcode('append');
	    }
	  },
	  Decorator: function Decorator(decorator) {
	    this.DecoratorBlock(decorator);
	  },

	  ContentStatement: function ContentStatement(content) {
	    if (content.value) {
	      this.opcode('appendContent', content.value);
	    }
	  },

	  CommentStatement: function CommentStatement() {},

	  SubExpression: function SubExpression(sexpr) {
	    transformLiteralToPath(sexpr);
	    var type = this.classifySexpr(sexpr);

	    if (type === 'simple') {
	      this.simpleSexpr(sexpr);
	    } else if (type === 'helper') {
	      this.helperSexpr(sexpr);
	    } else {
	      this.ambiguousSexpr(sexpr);
	    }
	  },
	  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
	    var path = sexpr.path,
	        name = path.parts[0],
	        isBlock = program != null || inverse != null;

	    this.opcode('getContext', path.depth);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    path.strict = true;
	    this.accept(path);

	    this.opcode('invokeAmbiguous', name, isBlock);
	  },

	  simpleSexpr: function simpleSexpr(sexpr) {
	    var path = sexpr.path;
	    path.strict = true;
	    this.accept(path);
	    this.opcode('resolvePossibleLambda');
	  },

	  helperSexpr: function helperSexpr(sexpr, program, inverse) {
	    var params = this.setupFullMustacheParams(sexpr, program, inverse),
	        path = sexpr.path,
	        name = path.parts[0];

	    if (this.options.knownHelpers[name]) {
	      this.opcode('invokeKnownHelper', params.length, name);
	    } else if (this.options.knownHelpersOnly) {
	      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
	    } else {
	      path.strict = true;
	      path.falsy = true;

	      this.accept(path);
	      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
	    }
	  },

	  PathExpression: function PathExpression(path) {
	    this.addDepth(path.depth);
	    this.opcode('getContext', path.depth);

	    var name = path.parts[0],
	        scoped = _ast2['default'].helpers.scopedId(path),
	        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

	    if (blockParamId) {
	      this.opcode('lookupBlockParam', blockParamId, path.parts);
	    } else if (!name) {
	      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
	      this.opcode('pushContext');
	    } else if (path.data) {
	      this.options.data = true;
	      this.opcode('lookupData', path.depth, path.parts, path.strict);
	    } else {
	      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
	    }
	  },

	  StringLiteral: function StringLiteral(string) {
	    this.opcode('pushString', string.value);
	  },

	  NumberLiteral: function NumberLiteral(number) {
	    this.opcode('pushLiteral', number.value);
	  },

	  BooleanLiteral: function BooleanLiteral(bool) {
	    this.opcode('pushLiteral', bool.value);
	  },

	  UndefinedLiteral: function UndefinedLiteral() {
	    this.opcode('pushLiteral', 'undefined');
	  },

	  NullLiteral: function NullLiteral() {
	    this.opcode('pushLiteral', 'null');
	  },

	  Hash: function Hash(hash) {
	    var pairs = hash.pairs,
	        i = 0,
	        l = pairs.length;

	    this.opcode('pushHash');

	    for (; i < l; i++) {
	      this.pushParam(pairs[i].value);
	    }
	    while (i--) {
	      this.opcode('assignToHash', pairs[i].key);
	    }
	    this.opcode('popHash');
	  },

	  // HELPERS
	  opcode: function opcode(name) {
	    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
	  },

	  addDepth: function addDepth(depth) {
	    if (!depth) {
	      return;
	    }

	    this.useDepths = true;
	  },

	  classifySexpr: function classifySexpr(sexpr) {
	    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

	    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

	    // a mustache is an eligible helper if:
	    // * its id is simple (a single part, not `this` or `..`)
	    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

	    // if a mustache is an eligible helper but not a definite
	    // helper, it is ambiguous, and will be resolved in a later
	    // pass or at runtime.
	    var isEligible = !isBlockParam && (isHelper || isSimple);

	    // if ambiguous, we can possibly resolve the ambiguity now
	    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
	    if (isEligible && !isHelper) {
	      var _name2 = sexpr.path.parts[0],
	          options = this.options;

	      if (options.knownHelpers[_name2]) {
	        isHelper = true;
	      } else if (options.knownHelpersOnly) {
	        isEligible = false;
	      }
	    }

	    if (isHelper) {
	      return 'helper';
	    } else if (isEligible) {
	      return 'ambiguous';
	    } else {
	      return 'simple';
	    }
	  },

	  pushParams: function pushParams(params) {
	    for (var i = 0, l = params.length; i < l; i++) {
	      this.pushParam(params[i]);
	    }
	  },

	  pushParam: function pushParam(val) {
	    var value = val.value != null ? val.value : val.original || '';

	    if (this.stringParams) {
	      if (value.replace) {
	        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
	      }

	      if (val.depth) {
	        this.addDepth(val.depth);
	      }
	      this.opcode('getContext', val.depth || 0);
	      this.opcode('pushStringParam', value, val.type);

	      if (val.type === 'SubExpression') {
	        // SubExpressions get evaluated and passed in
	        // in string params mode.
	        this.accept(val);
	      }
	    } else {
	      if (this.trackIds) {
	        var blockParamIndex = undefined;
	        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
	          blockParamIndex = this.blockParamIndex(val.parts[0]);
	        }
	        if (blockParamIndex) {
	          var blockParamChild = val.parts.slice(1).join('.');
	          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
	        } else {
	          value = val.original || value;
	          if (value.replace) {
	            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
	          }

	          this.opcode('pushId', val.type, value);
	        }
	      }
	      this.accept(val);
	    }
	  },

	  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
	    var params = sexpr.params;
	    this.pushParams(params);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    if (sexpr.hash) {
	      this.accept(sexpr.hash);
	    } else {
	      this.opcode('emptyHash', omitEmpty);
	    }

	    return params;
	  },

	  blockParamIndex: function blockParamIndex(name) {
	    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
	      var blockParams = this.options.blockParams[depth],
	          param = blockParams && _utils.indexOf(blockParams, name);
	      if (blockParams && param >= 0) {
	        return [depth, param];
	      }
	    }
	  }
	};

	function precompile(input, options, env) {
	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
	  }

	  options = options || {};
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var ast = env.parse(input, options),
	      environment = new env.Compiler().compile(ast, options);
	  return new env.JavaScriptCompiler().compile(environment, options);
	}

	function compile(input, options, env) {
	  if (options === undefined) options = {};

	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
	  }

	  options = _utils.extend({}, options);
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var compiled = undefined;

	  function compileInput() {
	    var ast = env.parse(input, options),
	        environment = new env.Compiler().compile(ast, options),
	        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
	    return env.template(templateSpec);
	  }

	  // Template is only compiled on first use and cached after that point.
	  function ret(context, execOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled.call(this, context, execOptions);
	  }
	  ret._setup = function (setupOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._setup(setupOptions);
	  };
	  ret._child = function (i, data, blockParams, depths) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._child(i, data, blockParams, depths);
	  };
	  return ret;
	}

	function argEquals(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
	    for (var i = 0; i < a.length; i++) {
	      if (!argEquals(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	}

	function transformLiteralToPath(sexpr) {
	  if (!sexpr.path.parts) {
	    var literal = sexpr.path;
	    // Casting to string here to make false and 0 literal values play nicely with the rest
	    // of the system.
	    sexpr.path = {
	      type: 'PathExpression',
	      data: false,
	      depth: 0,
	      parts: [literal.original + ''],
	      original: literal.original + '',
	      loc: literal.loc
	    };
	  }
	}

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _base = __webpack_require__(4);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _codeGen = __webpack_require__(43);

	var _codeGen2 = _interopRequireDefault(_codeGen);

	function Literal(value) {
	  this.value = value;
	}

	function JavaScriptCompiler() {}

	JavaScriptCompiler.prototype = {
	  // PUBLIC API: You can override these methods in a subclass to provide
	  // alternative compiled forms for name lookup and buffering semantics
	  nameLookup: function nameLookup(parent, name /* , type*/) {
	    var isEnumerable = [this.aliasable('container.propertyIsEnumerable'), '.call(', parent, ',"constructor")'];

	    if (name === 'constructor') {
	      return ['(', isEnumerable, '?', _actualLookup(), ' : undefined)'];
	    }
	    return _actualLookup();

	    function _actualLookup() {
	      if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
	        return [parent, '.', name];
	      } else {
	        return [parent, '[', JSON.stringify(name), ']'];
	      }
	    }
	  },
	  depthedLookup: function depthedLookup(name) {
	    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
	  },

	  compilerInfo: function compilerInfo() {
	    var revision = _base.COMPILER_REVISION,
	        versions = _base.REVISION_CHANGES[revision];
	    return [revision, versions];
	  },

	  appendToBuffer: function appendToBuffer(source, location, explicit) {
	    // Force a source as this simplifies the merge logic.
	    if (!_utils.isArray(source)) {
	      source = [source];
	    }
	    source = this.source.wrap(source, location);

	    if (this.environment.isSimple) {
	      return ['return ', source, ';'];
	    } else if (explicit) {
	      // This is a case where the buffer operation occurs as a child of another
	      // construct, generally braces. We have to explicitly output these buffer
	      // operations to ensure that the emitted code goes in the correct location.
	      return ['buffer += ', source, ';'];
	    } else {
	      source.appendToBuffer = true;
	      return source;
	    }
	  },

	  initializeBuffer: function initializeBuffer() {
	    return this.quotedString('');
	  },
	  // END PUBLIC API

	  compile: function compile(environment, options, context, asObject) {
	    this.environment = environment;
	    this.options = options;
	    this.stringParams = this.options.stringParams;
	    this.trackIds = this.options.trackIds;
	    this.precompile = !asObject;

	    this.name = this.environment.name;
	    this.isChild = !!context;
	    this.context = context || {
	      decorators: [],
	      programs: [],
	      environments: []
	    };

	    this.preamble();

	    this.stackSlot = 0;
	    this.stackVars = [];
	    this.aliases = {};
	    this.registers = { list: [] };
	    this.hashes = [];
	    this.compileStack = [];
	    this.inlineStack = [];
	    this.blockParams = [];

	    this.compileChildren(environment, options);

	    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
	    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

	    var opcodes = environment.opcodes,
	        opcode = undefined,
	        firstLoc = undefined,
	        i = undefined,
	        l = undefined;

	    for (i = 0, l = opcodes.length; i < l; i++) {
	      opcode = opcodes[i];

	      this.source.currentLocation = opcode.loc;
	      firstLoc = firstLoc || opcode.loc;
	      this[opcode.opcode].apply(this, opcode.args);
	    }

	    // Flush any trailing content that might be pending.
	    this.source.currentLocation = firstLoc;
	    this.pushSource('');

	    /* istanbul ignore next */
	    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
	      throw new _exception2['default']('Compile completed with content left on stack');
	    }

	    if (!this.decorators.isEmpty()) {
	      this.useDecorators = true;

	      this.decorators.prepend('var decorators = container.decorators;\n');
	      this.decorators.push('return fn;');

	      if (asObject) {
	        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
	      } else {
	        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
	        this.decorators.push('}\n');
	        this.decorators = this.decorators.merge();
	      }
	    } else {
	      this.decorators = undefined;
	    }

	    var fn = this.createFunctionContext(asObject);
	    if (!this.isChild) {
	      var ret = {
	        compiler: this.compilerInfo(),
	        main: fn
	      };

	      if (this.decorators) {
	        ret.main_d = this.decorators; // eslint-disable-line camelcase
	        ret.useDecorators = true;
	      }

	      var _context = this.context;
	      var programs = _context.programs;
	      var decorators = _context.decorators;

	      for (i = 0, l = programs.length; i < l; i++) {
	        if (programs[i]) {
	          ret[i] = programs[i];
	          if (decorators[i]) {
	            ret[i + '_d'] = decorators[i];
	            ret.useDecorators = true;
	          }
	        }
	      }

	      if (this.environment.usePartial) {
	        ret.usePartial = true;
	      }
	      if (this.options.data) {
	        ret.useData = true;
	      }
	      if (this.useDepths) {
	        ret.useDepths = true;
	      }
	      if (this.useBlockParams) {
	        ret.useBlockParams = true;
	      }
	      if (this.options.compat) {
	        ret.compat = true;
	      }

	      if (!asObject) {
	        ret.compiler = JSON.stringify(ret.compiler);

	        this.source.currentLocation = { start: { line: 1, column: 0 } };
	        ret = this.objectLiteral(ret);

	        if (options.srcName) {
	          ret = ret.toStringWithSourceMap({ file: options.destName });
	          ret.map = ret.map && ret.map.toString();
	        } else {
	          ret = ret.toString();
	        }
	      } else {
	        ret.compilerOptions = this.options;
	      }

	      return ret;
	    } else {
	      return fn;
	    }
	  },

	  preamble: function preamble() {
	    // track the last context pushed into place to allow skipping the
	    // getContext opcode when it would be a noop
	    this.lastContext = 0;
	    this.source = new _codeGen2['default'](this.options.srcName);
	    this.decorators = new _codeGen2['default'](this.options.srcName);
	  },

	  createFunctionContext: function createFunctionContext(asObject) {
	    var varDeclarations = '';

	    var locals = this.stackVars.concat(this.registers.list);
	    if (locals.length > 0) {
	      varDeclarations += ', ' + locals.join(', ');
	    }

	    // Generate minimizer alias mappings
	    //
	    // When using true SourceNodes, this will update all references to the given alias
	    // as the source nodes are reused in situ. For the non-source node compilation mode,
	    // aliases will not be used, but this case is already being run on the client and
	    // we aren't concern about minimizing the template size.
	    var aliasCount = 0;
	    for (var alias in this.aliases) {
	      // eslint-disable-line guard-for-in
	      var node = this.aliases[alias];
	      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
	        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
	        node.children[0] = 'alias' + aliasCount;
	      }
	    }

	    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

	    if (this.useBlockParams || this.useDepths) {
	      params.push('blockParams');
	    }
	    if (this.useDepths) {
	      params.push('depths');
	    }

	    // Perform a second pass over the output to merge content when possible
	    var source = this.mergeSource(varDeclarations);

	    if (asObject) {
	      params.push(source);

	      return Function.apply(this, params);
	    } else {
	      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
	    }
	  },
	  mergeSource: function mergeSource(varDeclarations) {
	    var isSimple = this.environment.isSimple,
	        appendOnly = !this.forceBuffer,
	        appendFirst = undefined,
	        sourceSeen = undefined,
	        bufferStart = undefined,
	        bufferEnd = undefined;
	    this.source.each(function (line) {
	      if (line.appendToBuffer) {
	        if (bufferStart) {
	          line.prepend('  + ');
	        } else {
	          bufferStart = line;
	        }
	        bufferEnd = line;
	      } else {
	        if (bufferStart) {
	          if (!sourceSeen) {
	            appendFirst = true;
	          } else {
	            bufferStart.prepend('buffer += ');
	          }
	          bufferEnd.add(';');
	          bufferStart = bufferEnd = undefined;
	        }

	        sourceSeen = true;
	        if (!isSimple) {
	          appendOnly = false;
	        }
	      }
	    });

	    if (appendOnly) {
	      if (bufferStart) {
	        bufferStart.prepend('return ');
	        bufferEnd.add(';');
	      } else if (!sourceSeen) {
	        this.source.push('return "";');
	      }
	    } else {
	      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

	      if (bufferStart) {
	        bufferStart.prepend('return buffer + ');
	        bufferEnd.add(';');
	      } else {
	        this.source.push('return buffer;');
	      }
	    }

	    if (varDeclarations) {
	      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
	    }

	    return this.source.merge();
	  },

	  // [blockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // On stack, after: return value of blockHelperMissing
	  //
	  // The purpose of this opcode is to take a block of the form
	  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
	  // replace it on the stack with the result of properly
	  // invoking blockHelperMissing.
	  blockValue: function blockValue(name) {
	    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs(name, 0, params);

	    var blockName = this.popStack();
	    params.splice(1, 0, blockName);

	    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
	  },

	  // [ambiguousBlockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // Compiler value, before: lastHelper=value of last found helper, if any
	  // On stack, after, if no lastHelper: same as [blockValue]
	  // On stack, after, if lastHelper: value
	  ambiguousBlockValue: function ambiguousBlockValue() {
	    // We're being a bit cheeky and reusing the options value from the prior exec
	    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs('', 0, params, true);

	    this.flushInline();

	    var current = this.topStack();
	    params.splice(1, 0, current);

	    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
	  },

	  // [appendContent]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  //
	  // Appends the string value of `content` to the current buffer
	  appendContent: function appendContent(content) {
	    if (this.pendingContent) {
	      content = this.pendingContent + content;
	    } else {
	      this.pendingLocation = this.source.currentLocation;
	    }

	    this.pendingContent = content;
	  },

	  // [append]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Coerces `value` to a String and appends it to the current buffer.
	  //
	  // If `value` is truthy, or 0, it is coerced into a string and appended
	  // Otherwise, the empty string is appended
	  append: function append() {
	    if (this.isInline()) {
	      this.replaceStack(function (current) {
	        return [' != null ? ', current, ' : ""'];
	      });

	      this.pushSource(this.appendToBuffer(this.popStack()));
	    } else {
	      var local = this.popStack();
	      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
	      if (this.environment.isSimple) {
	        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
	      }
	    }
	  },

	  // [appendEscaped]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Escape `value` and append it to the buffer
	  appendEscaped: function appendEscaped() {
	    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
	  },

	  // [getContext]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  // Compiler value, after: lastContext=depth
	  //
	  // Set the value of the `lastContext` compiler value to the depth
	  getContext: function getContext(depth) {
	    this.lastContext = depth;
	  },

	  // [pushContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext, ...
	  //
	  // Pushes the value of the current context onto the stack.
	  pushContext: function pushContext() {
	    this.pushStackLiteral(this.contextName(this.lastContext));
	  },

	  // [lookupOnContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext[name], ...
	  //
	  // Looks up the value of `name` on the current context and pushes
	  // it onto the stack.
	  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
	    var i = 0;

	    if (!scoped && this.options.compat && !this.lastContext) {
	      // The depthed query is expected to handle the undefined logic for the root level that
	      // is implemented below, so we evaluate that directly in compat mode
	      this.push(this.depthedLookup(parts[i++]));
	    } else {
	      this.pushContext();
	    }

	    this.resolvePath('context', parts, i, falsy, strict);
	  },

	  // [lookupBlockParam]
	  //
	  // On stack, before: ...
	  // On stack, after: blockParam[name], ...
	  //
	  // Looks up the value of `parts` on the given block param and pushes
	  // it onto the stack.
	  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
	    this.useBlockParams = true;

	    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
	    this.resolvePath('context', parts, 1);
	  },

	  // [lookupData]
	  //
	  // On stack, before: ...
	  // On stack, after: data, ...
	  //
	  // Push the data lookup operator
	  lookupData: function lookupData(depth, parts, strict) {
	    if (!depth) {
	      this.pushStackLiteral('data');
	    } else {
	      this.pushStackLiteral('container.data(data, ' + depth + ')');
	    }

	    this.resolvePath('data', parts, 0, true, strict);
	  },

	  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
	    // istanbul ignore next

	    var _this = this;

	    if (this.options.strict || this.options.assumeObjects) {
	      this.push(strictLookup(this.options.strict && strict, this, parts, type));
	      return;
	    }

	    var len = parts.length;
	    for (; i < len; i++) {
	      /* eslint-disable no-loop-func */
	      this.replaceStack(function (current) {
	        var lookup = _this.nameLookup(current, parts[i], type);
	        // We want to ensure that zero and false are handled properly if the context (falsy flag)
	        // needs to have the special handling for these values.
	        if (!falsy) {
	          return [' != null ? ', lookup, ' : ', current];
	        } else {
	          // Otherwise we can use generic falsy handling
	          return [' && ', lookup];
	        }
	      });
	      /* eslint-enable no-loop-func */
	    }
	  },

	  // [resolvePossibleLambda]
	  //
	  // On stack, before: value, ...
	  // On stack, after: resolved value, ...
	  //
	  // If the `value` is a lambda, replace it on the stack by
	  // the return value of the lambda
	  resolvePossibleLambda: function resolvePossibleLambda() {
	    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
	  },

	  // [pushStringParam]
	  //
	  // On stack, before: ...
	  // On stack, after: string, currentContext, ...
	  //
	  // This opcode is designed for use in string mode, which
	  // provides the string value of a parameter along with its
	  // depth rather than resolving it immediately.
	  pushStringParam: function pushStringParam(string, type) {
	    this.pushContext();
	    this.pushString(type);

	    // If it's a subexpression, the string result
	    // will be pushed after this opcode.
	    if (type !== 'SubExpression') {
	      if (typeof string === 'string') {
	        this.pushString(string);
	      } else {
	        this.pushStackLiteral(string);
	      }
	    }
	  },

	  emptyHash: function emptyHash(omitEmpty) {
	    if (this.trackIds) {
	      this.push('{}'); // hashIds
	    }
	    if (this.stringParams) {
	      this.push('{}'); // hashContexts
	      this.push('{}'); // hashTypes
	    }
	    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
	  },
	  pushHash: function pushHash() {
	    if (this.hash) {
	      this.hashes.push(this.hash);
	    }
	    this.hash = { values: {}, types: [], contexts: [], ids: [] };
	  },
	  popHash: function popHash() {
	    var hash = this.hash;
	    this.hash = this.hashes.pop();

	    if (this.trackIds) {
	      this.push(this.objectLiteral(hash.ids));
	    }
	    if (this.stringParams) {
	      this.push(this.objectLiteral(hash.contexts));
	      this.push(this.objectLiteral(hash.types));
	    }

	    this.push(this.objectLiteral(hash.values));
	  },

	  // [pushString]
	  //
	  // On stack, before: ...
	  // On stack, after: quotedString(string), ...
	  //
	  // Push a quoted version of `string` onto the stack
	  pushString: function pushString(string) {
	    this.pushStackLiteral(this.quotedString(string));
	  },

	  // [pushLiteral]
	  //
	  // On stack, before: ...
	  // On stack, after: value, ...
	  //
	  // Pushes a value onto the stack. This operation prevents
	  // the compiler from creating a temporary variable to hold
	  // it.
	  pushLiteral: function pushLiteral(value) {
	    this.pushStackLiteral(value);
	  },

	  // [pushProgram]
	  //
	  // On stack, before: ...
	  // On stack, after: program(guid), ...
	  //
	  // Push a program expression onto the stack. This takes
	  // a compile-time guid and converts it into a runtime-accessible
	  // expression.
	  pushProgram: function pushProgram(guid) {
	    if (guid != null) {
	      this.pushStackLiteral(this.programExpression(guid));
	    } else {
	      this.pushStackLiteral(null);
	    }
	  },

	  // [registerDecorator]
	  //
	  // On stack, before: hash, program, params..., ...
	  // On stack, after: ...
	  //
	  // Pops off the decorator's parameters, invokes the decorator,
	  // and inserts the decorator into the decorators list.
	  registerDecorator: function registerDecorator(paramSize, name) {
	    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
	        options = this.setupHelperArgs(name, paramSize);

	    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
	  },

	  // [invokeHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // Pops off the helper's parameters, invokes the helper,
	  // and pushes the helper's return value onto the stack.
	  //
	  // If the helper is not found, `helperMissing` is called.
	  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
	    var nonHelper = this.popStack(),
	        helper = this.setupHelper(paramSize, name);

	    var possibleFunctionCalls = [];

	    if (isSimple) {
	      // direct call to helper
	      possibleFunctionCalls.push(helper.name);
	    }
	    // call a function from the input object
	    possibleFunctionCalls.push(nonHelper);
	    if (!this.options.strict) {
	      possibleFunctionCalls.push(this.aliasable('container.hooks.helperMissing'));
	    }

	    var functionLookupCode = ['(', this.itemsSeparatedBy(possibleFunctionCalls, '||'), ')'];
	    var functionCall = this.source.functionCall(functionLookupCode, 'call', helper.callParams);
	    this.push(functionCall);
	  },

	  itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
	    var result = [];
	    result.push(items[0]);
	    for (var i = 1; i < items.length; i++) {
	      result.push(separator, items[i]);
	    }
	    return result;
	  },
	  // [invokeKnownHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // This operation is used when the helper is known to exist,
	  // so a `helperMissing` fallback is not required.
	  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
	    var helper = this.setupHelper(paramSize, name);
	    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
	  },

	  // [invokeAmbiguous]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of disambiguation
	  //
	  // This operation is used when an expression like `{{foo}}`
	  // is provided, but we don't know at compile-time whether it
	  // is a helper or a path.
	  //
	  // This operation emits more code than the other options,
	  // and can be avoided by passing the `knownHelpers` and
	  // `knownHelpersOnly` flags at compile-time.
	  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
	    this.useRegister('helper');

	    var nonHelper = this.popStack();

	    this.emptyHash();
	    var helper = this.setupHelper(0, name, helperCall);

	    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

	    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
	    if (!this.options.strict) {
	      lookup[0] = '(helper = ';
	      lookup.push(' != null ? helper : ', this.aliasable('container.hooks.helperMissing'));
	    }

	    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
	  },

	  // [invokePartial]
	  //
	  // On stack, before: context, ...
	  // On stack after: result of partial invocation
	  //
	  // This operation pops off a context, invokes a partial with that context,
	  // and pushes the result of the invocation back.
	  invokePartial: function invokePartial(isDynamic, name, indent) {
	    var params = [],
	        options = this.setupParams(name, 1, params);

	    if (isDynamic) {
	      name = this.popStack();
	      delete options.name;
	    }

	    if (indent) {
	      options.indent = JSON.stringify(indent);
	    }
	    options.helpers = 'helpers';
	    options.partials = 'partials';
	    options.decorators = 'container.decorators';

	    if (!isDynamic) {
	      params.unshift(this.nameLookup('partials', name, 'partial'));
	    } else {
	      params.unshift(name);
	    }

	    if (this.options.compat) {
	      options.depths = 'depths';
	    }
	    options = this.objectLiteral(options);
	    params.push(options);

	    this.push(this.source.functionCall('container.invokePartial', '', params));
	  },

	  // [assignToHash]
	  //
	  // On stack, before: value, ..., hash, ...
	  // On stack, after: ..., hash, ...
	  //
	  // Pops a value off the stack and assigns it to the current hash
	  assignToHash: function assignToHash(key) {
	    var value = this.popStack(),
	        context = undefined,
	        type = undefined,
	        id = undefined;

	    if (this.trackIds) {
	      id = this.popStack();
	    }
	    if (this.stringParams) {
	      type = this.popStack();
	      context = this.popStack();
	    }

	    var hash = this.hash;
	    if (context) {
	      hash.contexts[key] = context;
	    }
	    if (type) {
	      hash.types[key] = type;
	    }
	    if (id) {
	      hash.ids[key] = id;
	    }
	    hash.values[key] = value;
	  },

	  pushId: function pushId(type, name, child) {
	    if (type === 'BlockParam') {
	      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
	    } else if (type === 'PathExpression') {
	      this.pushString(name);
	    } else if (type === 'SubExpression') {
	      this.pushStackLiteral('true');
	    } else {
	      this.pushStackLiteral('null');
	    }
	  },

	  // HELPERS

	  compiler: JavaScriptCompiler,

	  compileChildren: function compileChildren(environment, options) {
	    var children = environment.children,
	        child = undefined,
	        compiler = undefined;

	    for (var i = 0, l = children.length; i < l; i++) {
	      child = children[i];
	      compiler = new this.compiler(); // eslint-disable-line new-cap

	      var existing = this.matchExistingProgram(child);

	      if (existing == null) {
	        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
	        var index = this.context.programs.length;
	        child.index = index;
	        child.name = 'program' + index;
	        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
	        this.context.decorators[index] = compiler.decorators;
	        this.context.environments[index] = child;

	        this.useDepths = this.useDepths || compiler.useDepths;
	        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
	        child.useDepths = this.useDepths;
	        child.useBlockParams = this.useBlockParams;
	      } else {
	        child.index = existing.index;
	        child.name = 'program' + existing.index;

	        this.useDepths = this.useDepths || existing.useDepths;
	        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
	      }
	    }
	  },
	  matchExistingProgram: function matchExistingProgram(child) {
	    for (var i = 0, len = this.context.environments.length; i < len; i++) {
	      var environment = this.context.environments[i];
	      if (environment && environment.equals(child)) {
	        return environment;
	      }
	    }
	  },

	  programExpression: function programExpression(guid) {
	    var child = this.environment.children[guid],
	        programParams = [child.index, 'data', child.blockParams];

	    if (this.useBlockParams || this.useDepths) {
	      programParams.push('blockParams');
	    }
	    if (this.useDepths) {
	      programParams.push('depths');
	    }

	    return 'container.program(' + programParams.join(', ') + ')';
	  },

	  useRegister: function useRegister(name) {
	    if (!this.registers[name]) {
	      this.registers[name] = true;
	      this.registers.list.push(name);
	    }
	  },

	  push: function push(expr) {
	    if (!(expr instanceof Literal)) {
	      expr = this.source.wrap(expr);
	    }

	    this.inlineStack.push(expr);
	    return expr;
	  },

	  pushStackLiteral: function pushStackLiteral(item) {
	    this.push(new Literal(item));
	  },

	  pushSource: function pushSource(source) {
	    if (this.pendingContent) {
	      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
	      this.pendingContent = undefined;
	    }

	    if (source) {
	      this.source.push(source);
	    }
	  },

	  replaceStack: function replaceStack(callback) {
	    var prefix = ['('],
	        stack = undefined,
	        createdStack = undefined,
	        usedLiteral = undefined;

	    /* istanbul ignore next */
	    if (!this.isInline()) {
	      throw new _exception2['default']('replaceStack on non-inline');
	    }

	    // We want to merge the inline statement into the replacement statement via ','
	    var top = this.popStack(true);

	    if (top instanceof Literal) {
	      // Literals do not need to be inlined
	      stack = [top.value];
	      prefix = ['(', stack];
	      usedLiteral = true;
	    } else {
	      // Get or create the current stack name for use by the inline
	      createdStack = true;
	      var _name = this.incrStack();

	      prefix = ['((', this.push(_name), ' = ', top, ')'];
	      stack = this.topStack();
	    }

	    var item = callback.call(this, stack);

	    if (!usedLiteral) {
	      this.popStack();
	    }
	    if (createdStack) {
	      this.stackSlot--;
	    }
	    this.push(prefix.concat(item, ')'));
	  },

	  incrStack: function incrStack() {
	    this.stackSlot++;
	    if (this.stackSlot > this.stackVars.length) {
	      this.stackVars.push('stack' + this.stackSlot);
	    }
	    return this.topStackName();
	  },
	  topStackName: function topStackName() {
	    return 'stack' + this.stackSlot;
	  },
	  flushInline: function flushInline() {
	    var inlineStack = this.inlineStack;
	    this.inlineStack = [];
	    for (var i = 0, len = inlineStack.length; i < len; i++) {
	      var entry = inlineStack[i];
	      /* istanbul ignore if */
	      if (entry instanceof Literal) {
	        this.compileStack.push(entry);
	      } else {
	        var stack = this.incrStack();
	        this.pushSource([stack, ' = ', entry, ';']);
	        this.compileStack.push(stack);
	      }
	    }
	  },
	  isInline: function isInline() {
	    return this.inlineStack.length;
	  },

	  popStack: function popStack(wrapped) {
	    var inline = this.isInline(),
	        item = (inline ? this.inlineStack : this.compileStack).pop();

	    if (!wrapped && item instanceof Literal) {
	      return item.value;
	    } else {
	      if (!inline) {
	        /* istanbul ignore next */
	        if (!this.stackSlot) {
	          throw new _exception2['default']('Invalid stack pop');
	        }
	        this.stackSlot--;
	      }
	      return item;
	    }
	  },

	  topStack: function topStack() {
	    var stack = this.isInline() ? this.inlineStack : this.compileStack,
	        item = stack[stack.length - 1];

	    /* istanbul ignore if */
	    if (item instanceof Literal) {
	      return item.value;
	    } else {
	      return item;
	    }
	  },

	  contextName: function contextName(context) {
	    if (this.useDepths && context) {
	      return 'depths[' + context + ']';
	    } else {
	      return 'depth' + context;
	    }
	  },

	  quotedString: function quotedString(str) {
	    return this.source.quotedString(str);
	  },

	  objectLiteral: function objectLiteral(obj) {
	    return this.source.objectLiteral(obj);
	  },

	  aliasable: function aliasable(name) {
	    var ret = this.aliases[name];
	    if (ret) {
	      ret.referenceCount++;
	      return ret;
	    }

	    ret = this.aliases[name] = this.source.wrap(name);
	    ret.aliasable = true;
	    ret.referenceCount = 1;

	    return ret;
	  },

	  setupHelper: function setupHelper(paramSize, name, blockHelper) {
	    var params = [],
	        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
	    var foundHelper = this.nameLookup('helpers', name, 'helper'),
	        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');

	    return {
	      params: params,
	      paramsInit: paramsInit,
	      name: foundHelper,
	      callParams: [callContext].concat(params)
	    };
	  },

	  setupParams: function setupParams(helper, paramSize, params) {
	    var options = {},
	        contexts = [],
	        types = [],
	        ids = [],
	        objectArgs = !params,
	        param = undefined;

	    if (objectArgs) {
	      params = [];
	    }

	    options.name = this.quotedString(helper);
	    options.hash = this.popStack();

	    if (this.trackIds) {
	      options.hashIds = this.popStack();
	    }
	    if (this.stringParams) {
	      options.hashTypes = this.popStack();
	      options.hashContexts = this.popStack();
	    }

	    var inverse = this.popStack(),
	        program = this.popStack();

	    // Avoid setting fn and inverse if neither are set. This allows
	    // helpers to do a check for `if (options.fn)`
	    if (program || inverse) {
	      options.fn = program || 'container.noop';
	      options.inverse = inverse || 'container.noop';
	    }

	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
	    // so we need to pop them off the stack in reverse order
	    var i = paramSize;
	    while (i--) {
	      param = this.popStack();
	      params[i] = param;

	      if (this.trackIds) {
	        ids[i] = this.popStack();
	      }
	      if (this.stringParams) {
	        types[i] = this.popStack();
	        contexts[i] = this.popStack();
	      }
	    }

	    if (objectArgs) {
	      options.args = this.source.generateArray(params);
	    }

	    if (this.trackIds) {
	      options.ids = this.source.generateArray(ids);
	    }
	    if (this.stringParams) {
	      options.types = this.source.generateArray(types);
	      options.contexts = this.source.generateArray(contexts);
	    }

	    if (this.options.data) {
	      options.data = 'data';
	    }
	    if (this.useBlockParams) {
	      options.blockParams = 'blockParams';
	    }
	    return options;
	  },

	  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
	    var options = this.setupParams(helper, paramSize, params);
	    options.loc = JSON.stringify(this.source.currentLocation);
	    options = this.objectLiteral(options);
	    if (useRegister) {
	      this.useRegister('options');
	      params.push('options');
	      return ['options=', options];
	    } else if (params) {
	      params.push(options);
	      return '';
	    } else {
	      return options;
	    }
	  }
	};

	(function () {
	  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

	  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

	  for (var i = 0, l = reservedWords.length; i < l; i++) {
	    compilerWords[reservedWords[i]] = true;
	  }
	})();

	JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
	  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
	};

	function strictLookup(requireTerminal, compiler, parts, type) {
	  var stack = compiler.popStack(),
	      i = 0,
	      len = parts.length;
	  if (requireTerminal) {
	    len--;
	  }

	  for (; i < len; i++) {
	    stack = compiler.nameLookup(stack, parts[i], type);
	  }

	  if (requireTerminal) {
	    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ', ', JSON.stringify(compiler.source.currentLocation), ' )'];
	  } else {
	    return stack;
	  }
	}

	exports['default'] = JavaScriptCompiler;
	module.exports = exports['default'];

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* global define */
	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var SourceNode = undefined;

	try {
	  /* istanbul ignore next */
	  if (false) {
	    // We don't support this in AMD environments. For these environments, we asusme that
	    // they are running on the browser and thus have no need for the source-map library.
	    var SourceMap = require('source-map');
	    SourceNode = SourceMap.SourceNode;
	  }
	} catch (err) {}
	/* NOP */

	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
	if (!SourceNode) {
	  SourceNode = function (line, column, srcFile, chunks) {
	    this.src = '';
	    if (chunks) {
	      this.add(chunks);
	    }
	  };
	  /* istanbul ignore next */
	  SourceNode.prototype = {
	    add: function add(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src += chunks;
	    },
	    prepend: function prepend(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src = chunks + this.src;
	    },
	    toStringWithSourceMap: function toStringWithSourceMap() {
	      return { code: this.toString() };
	    },
	    toString: function toString() {
	      return this.src;
	    }
	  };
	}

	function castChunk(chunk, codeGen, loc) {
	  if (_utils.isArray(chunk)) {
	    var ret = [];

	    for (var i = 0, len = chunk.length; i < len; i++) {
	      ret.push(codeGen.wrap(chunk[i], loc));
	    }
	    return ret;
	  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
	    // Handle primitives that the SourceNode will throw up on
	    return chunk + '';
	  }
	  return chunk;
	}

	function CodeGen(srcFile) {
	  this.srcFile = srcFile;
	  this.source = [];
	}

	CodeGen.prototype = {
	  isEmpty: function isEmpty() {
	    return !this.source.length;
	  },
	  prepend: function prepend(source, loc) {
	    this.source.unshift(this.wrap(source, loc));
	  },
	  push: function push(source, loc) {
	    this.source.push(this.wrap(source, loc));
	  },

	  merge: function merge() {
	    var source = this.empty();
	    this.each(function (line) {
	      source.add(['  ', line, '\n']);
	    });
	    return source;
	  },

	  each: function each(iter) {
	    for (var i = 0, len = this.source.length; i < len; i++) {
	      iter(this.source[i]);
	    }
	  },

	  empty: function empty() {
	    var loc = this.currentLocation || { start: {} };
	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
	  },
	  wrap: function wrap(chunk) {
	    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

	    if (chunk instanceof SourceNode) {
	      return chunk;
	    }

	    chunk = castChunk(chunk, this, loc);

	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
	  },

	  functionCall: function functionCall(fn, type, params) {
	    params = this.generateList(params);
	    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
	  },

	  quotedString: function quotedString(str) {
	    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
	    .replace(/\u2029/g, '\\u2029') + '"';
	  },

	  objectLiteral: function objectLiteral(obj) {
	    var pairs = [];

	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        var value = castChunk(obj[key], this);
	        if (value !== 'undefined') {
	          pairs.push([this.quotedString(key), ':', value]);
	        }
	      }
	    }

	    var ret = this.generateList(pairs);
	    ret.prepend('{');
	    ret.add('}');
	    return ret;
	  },

	  generateList: function generateList(entries) {
	    var ret = this.empty();

	    for (var i = 0, len = entries.length; i < len; i++) {
	      if (i) {
	        ret.add(',');
	      }

	      ret.add(castChunk(entries[i], this));
	    }

	    return ret;
	  },

	  generateArray: function generateArray(entries) {
	    var ret = this.generateList(entries);
	    ret.prepend('[');
	    ret.add(']');

	    return ret;
	  }
	};

	exports['default'] = CodeGen;
	module.exports = exports['default'];

/***/ })
/******/ ])
});
;

/***/ }),
/* 96 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/* eslint max-statements: [2, 22],  complexity: [2, 12] */

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4), __webpack_require__(13), __webpack_require__(26), __webpack_require__(5), __webpack_require__(25), __webpack_require__(62)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q, Errors, BrowserFeatures, Util, Logger, config) {

  var SharedUtil = Okta.internal.util.Util;

  var DEFAULT_LANGUAGE = 'en';

  var supportedIdps = ['facebook', 'google', 'linkedin', 'microsoft'],
      supportedResponseTypes = ['token', 'id_token', 'code'],
      oauthRedirectTpl = Okta.tpl('{{origin}}');

  var _ = Okta._,
      ConfigError = Errors.ConfigError,
      UnsupportedBrowserError = Errors.UnsupportedBrowserError;

  var assetBaseUrlTpl = Okta.tpl('https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/{{version}}');

  return Okta.Model.extend({

    flat: true,
    authClient: undefined,

    local: {
      'baseUrl': ['string', true],
      'recoveryToken': ['string', false, undefined],
      'stateToken': ['string', false, undefined],
      'username': ['string', false],
      'signOutLink': ['string', false],
      'relayState': ['string', false],

      // Function to transform the username before passing it to the API
      // for Primary Auth, Forgot Password and Unlock Account.
      'transformUsername': ['function', false],

      // CALLBACKS
      'globalSuccessFn': 'function',
      'globalErrorFn': 'function',
      'processCreds': 'function',

      // IMAGES
      'logo': 'string',
      'logoText': ['string', false],
      'helpSupportNumber': 'string',

      // FEATURES
      'features.router': ['boolean', true, false],
      'features.securityImage': ['boolean', true, false],
      'features.rememberMe': ['boolean', true, true],
      'features.autoPush': ['boolean', true, false],
      'features.smsRecovery': ['boolean', true, false],
      'features.callRecovery': ['boolean', true, false],
      'features.emailRecovery': ['boolean', false, true],
      'features.webauthn': ['boolean', true, false],
      'features.selfServiceUnlock': ['boolean', true, false],
      'features.multiOptionalFactorEnroll': ['boolean', true, false],
      'features.preventBrowserFromSavingOktaPassword': ['boolean', true, true],
      'features.deviceFingerprinting': ['boolean', false, false],
      'features.hideSignOutLinkInMFA': ['boolean', false, false],
      'features.hideBackToSignInForReset': ['boolean', false, false],
      'features.customExpiredPassword': ['boolean', true, false],
      'features.registration': ['boolean', false, false],
      'features.consent': ['boolean', false, false],
      'features.idpDiscovery': ['boolean', false, false],
      'features.passwordlessAuth': ['boolean', false, false],
      'features.showPasswordToggleOnSignInPage': ['boolean', false, false],
      'features.trackTypingPattern': ['boolean', false, false],
      'features.redirectByFormSubmit': ['boolean', false, false],
      'features.useDeviceFingerprintForSecurityImage': ['boolean', false, true],
      'features.restrictRedirectToForeground': ['boolean', true, false],
      'features.hideDefaultTip': ['boolean', false, true],

      // I18N
      'language': ['any', false], // Can be a string or a function
      'i18n': ['object', false],

      // ASSETS
      'assets.baseUrl': ['string', false],
      'assets.rewrite': {
        type: 'function',
        value: _.identity
      },

      // OAUTH2
      'authScheme': ['string', false, 'OAUTH2'],
      'authParams.display': {
        type: 'string',
        values: ['none', 'popup', 'page']
      },

      // Note: It shouldn't be necessary to override/pass in this property -
      // it will be set correctly depending on what the value of display is
      // and whether we are using Okta or a social IDP.
      'authParams.responseMode': {
        type: 'string',
        values: ['query', 'fragment', 'form_post', 'okta_post_message']
      },

      // Can either be a string or an array, i.e.
      // - Single value: 'id_token', 'token', or 'code'
      // - Multiple values: ['id_token', 'token']
      'authParams.responseType': ['any', false, 'id_token'],
      'authParams.scopes': ['array', false],

      'authParams.issuer': ['string', false],
      'authParams.authorizeUrl': ['string', false],
      'authParams.state': ['string', false],
      'authParams.nonce': ['string', false],

      'policyId': 'string',
      'clientId': 'string',
      'redirectUri': 'string',
      'idps': ['array', false, []],
      'idpDisplay': {
        type: 'string',
        values: ['PRIMARY', 'SECONDARY'],
        value: 'SECONDARY'
      },
      'oAuthTimeout': ['number', false],

      // HELP LINKS
      'helpLinks.help': 'string',
      'helpLinks.forgotPassword': 'string',
      'helpLinks.unlock': 'string',
      'helpLinks.custom': 'array',

      //Custom Buttons
      'customButtons': ['array', false, []],

      //Registration
      'registration.click': 'function',
      'registration.parseSchema': 'function',
      'registration.preSubmit': 'function',
      'registration.postSubmit': 'function',

      //Consent
      'consent.cancel': 'function',

      //IDP Discovery
      'idpDiscovery.requestContext': 'string',

      //Colors
      'colors.brand': 'string',

      //Descriptions
      'brandName': 'string',

      //PIV
      'piv': ['object', false, {}]
    },

    derived: {
      redirectUtilFn: {
        deps: ['features.redirectByFormSubmit'],
        fn: function fn(redirectByFormSubmit) {
          return redirectByFormSubmit ? Util.redirectWithFormGet.bind(Util) : SharedUtil.redirect.bind(SharedUtil);
        },
        cache: true
      },
      supportedLanguages: {
        deps: ['i18n'],
        fn: function fn(i18n) {
          // Developers can pass in their own languages
          return _.union(config.supportedLanguages, _.keys(i18n));
        },
        cache: true
      },
      languageCode: {
        deps: ['language', 'supportedLanguages'],
        fn: function fn(language, supportedLanguages) {
          var userLanguages = BrowserFeatures.getUserLanguages(),
              preferred = _.clone(userLanguages),
              supportedLowerCase = Util.toLower(supportedLanguages),
              expanded;

          // Any developer defined "language" takes highest priority:
          // As a string, i.e. 'en', 'ja', 'zh-CN'
          if (_.isString(language)) {
            preferred.unshift(language);
          }
          // As a callback function, which is passed the list of supported
          // languages and detected user languages. This function must return
          // a languageCode, i.e. 'en', 'ja', 'zh-CN'
          else if (_.isFunction(language)) {
              preferred.unshift(language(supportedLanguages, userLanguages));
            }

          // Add english as the default, and expand to include any language
          // codes that do not include region, dialect, etc.
          preferred.push(DEFAULT_LANGUAGE);
          expanded = Util.toLower(Util.expandLanguages(preferred));

          // Perform a case insensitive search - this is necessary in the case
          // of browsers like Safari
          var i, supportedPos;
          for (i = 0; i < expanded.length; i++) {
            supportedPos = supportedLowerCase.indexOf(expanded[i]);
            if (supportedPos > -1) {
              return supportedLanguages[supportedPos];
            }
          }
        }
      },
      oauth2Enabled: {
        deps: ['clientId', 'authScheme', 'authParams.responseType'],
        fn: function fn(clientId, authScheme, responseType) {
          if (!clientId) {
            return false;
          }
          if (authScheme.toLowerCase() !== 'oauth2') {
            return false;
          }
          var responseTypes = _.isArray(responseType) ? responseType : [responseType];
          return _.intersection(responseTypes, supportedResponseTypes).length > 0;
        },
        cache: true
      },
      // Redirect Uri to provide in the oauth API
      oauthRedirectUri: {
        deps: ['redirectUri'],
        fn: function fn(redirectUri) {
          if (redirectUri) {
            return redirectUri;
          }

          var origin = window.location.origin;
          // IE8
          if (!origin) {
            var href = window.location.href;
            var path = window.location.pathname;
            if (path !== '') {
              origin = href.substring(0, href.lastIndexOf(path));
            }
          }

          return oauthRedirectTpl({
            origin: origin
          });
        }
      },
      // Adjusts the idps passed into the widget based on if they get explicit support
      configuredSocialIdps: {
        deps: ['idps'],
        fn: function fn(idps) {
          return _.map(idps, function (idp) {
            var type = idp.type && idp.type.toLowerCase();
            if (!(type && _.contains(supportedIdps, type))) {
              type = 'general-idp';
              idp.text = idp.text || '{ Please provide a text value }';
            }

            idp.className = ['social-auth-button', 'social-auth-' + type + '-button ', idp.className ? idp.className : ''].join(' ');
            idp.dataAttr = 'social-auth-' + type + '-button';
            idp.i18nKey = 'socialauth.' + type + '.label';
            return idp;
          });
        },
        cache: true
      },
      // Can support piv authentication
      hasPivCard: {
        deps: ['piv'],
        fn: function fn(piv) {
          return piv && piv.certAuthUrl;
        },
        cache: true
      },
      // social auth buttons order - 'above'/'below' the primary auth form (boolean)
      socialAuthPositionTop: {
        deps: ['configuredSocialIdps', 'hasPivCard', 'idpDisplay'],
        fn: function fn(configuredSocialIdps, hasPivCard, idpDisplay) {
          return (!_.isEmpty(configuredSocialIdps) || hasPivCard) && idpDisplay.toUpperCase() === 'PRIMARY';
        },
        cache: true
      },
      hasConfiguredButtons: {
        deps: ['configuredSocialIdps', 'customButtons', 'hasPivCard'],
        fn: function fn(configuredSocialIdps, customButtons, hasPivCard) {
          return !_.isEmpty(configuredSocialIdps) || !_.isEmpty(customButtons) || hasPivCard;
        },
        cache: true
      }
    },

    initialize: function initialize(options) {
      if (!options.baseUrl) {
        this.callGlobalError(new ConfigError(Okta.loc('error.required.baseUrl')));
      } else if (options.colors && _.isString(options.colors.brand) && !options.colors.brand.match(/^#[0-9A-Fa-f]{6}$/)) {
        this.callGlobalError(new ConfigError(Okta.loc('error.invalid.colors.brand')));
      } else if (BrowserFeatures.corsIsNotSupported()) {
        this.callGlobalError(new UnsupportedBrowserError(Okta.loc('error.unsupported.cors')));
      }
    },

    setAcceptLanguageHeader: function setAcceptLanguageHeader(authClient) {
      if (authClient && authClient.options && authClient.options.headers) {
        authClient.options.headers['Accept-Language'] = this.get('languageCode');
      }
    },

    setAuthClient: function setAuthClient(authClient) {
      this.setAcceptLanguageHeader(authClient);
      this.authClient = authClient;
    },

    getAuthClient: function getAuthClient() {
      return this.authClient;
    },

    set: function set() {
      try {
        return Okta.Model.prototype.set.apply(this, arguments);
      } catch (e) {
        var message = e.message ? e.message : e;
        this.callGlobalError(new ConfigError(message));
      }
    },

    // Invokes the global success function. This should only be called on a
    // terminal part of the code (i.e. authStatus SUCCESS or after sending
    // a recovery email)
    callGlobalSuccess: function callGlobalSuccess(status, data) {
      // Defer this to ensure that our functions have rendered completely
      // before invoking their function
      var res = _.extend(data, { status: status });
      _.defer(_.partial(this.get('globalSuccessFn'), res));
    },

    // Invokes the global error function. This should only be called on non
    // recoverable errors (i.e. configuration errors, browser unsupported
    // errors, etc)
    callGlobalError: function callGlobalError(err) {
      // Note: Must use "this.options.globalErrorFn" when they've passed invalid
      // arguments - globalErrorFn will not have been set yet
      var globalErrorFn = this.get('globalErrorFn') || this.options.globalErrorFn;
      if (globalErrorFn) {
        globalErrorFn(err);
      } else {
        // Only throw the error if they have not registered a globalErrorFn
        throw err;
      }
    },

    // Get the username by applying the transform function if it exists.
    transformUsername: function transformUsername(username, operation) {
      var transformFn = this.get('transformUsername');
      if (transformFn && _.isFunction(transformFn)) {
        return transformFn(username, operation);
      }
      return username;
    },

    processCreds: function processCreds(creds) {
      var processCreds = this.get('processCreds');
      return Q.Promise(function (resolve) {
        if (!_.isFunction(processCreds)) {
          resolve();
        } else if (processCreds.length === 2) {
          processCreds(creds, resolve);
        } else {
          processCreds(creds);
          resolve();
        }
      });
    },

    parseSchema: function parseSchema(schema, onSuccess, onFailure) {
      var parseSchema = this.get('registration.parseSchema');
      //check for parseSchema callback
      if (_.isFunction(parseSchema)) {
        parseSchema(schema, function (schema) {
          onSuccess(schema);
        }, function (error) {
          error = error || { 'errorSummary': Okta.loc('registration.default.callbackhook.error') };
          error['callback'] = 'parseSchema';
          onFailure(error);
        });
      } else {
        //no callback
        onSuccess(schema);
      }
    },

    preSubmit: function preSubmit(postData, onSuccess, onFailure) {
      var preSubmit = this.get('registration.preSubmit');
      //check for preSubmit callback
      if (_.isFunction(preSubmit)) {
        preSubmit(postData, function (postData) {
          onSuccess(postData);
        }, function (error) {
          error = error || { 'errorSummary': Okta.loc('registration.default.callbackhook.error') };
          error['callback'] = 'preSubmit';
          onFailure(error);
        });
      } else {
        //no callback
        onSuccess(postData);
      }
    },

    postSubmit: function postSubmit(response, onSuccess, onFailure) {
      var postSubmit = this.get('registration.postSubmit');
      //check for postSubmit callback
      if (_.isFunction(postSubmit)) {
        postSubmit(response, function (response) {
          onSuccess(response);
        }, function (error) {
          error = error || { 'errorSummary': Okta.loc('registration.default.callbackhook.error') };
          error['callback'] = 'postSubmit';
          onFailure(error);
        });
      } else {
        //no callback
        onSuccess(response);
      }
    },

    // Use the parse function to transform config options to the standard
    // settings we currently support. This is a good place to deprecate old
    // option formats.
    parse: function parse(options) {
      // PKCE flow: automatically set responseType to 'code'
      if (options.authParams && options.authParams.pkce) {
        options.authParams.responseType = 'code';
      }

      if (options.authParams && options.authParams.scope) {
        Logger.deprecate('Use "scopes" instead of "scope"');
        options.authParams.scopes = options.authParams.scope;
        delete options.authParams.scope;
      }

      if (options.labels || options.country) {
        Logger.deprecate('Use "i18n" instead of "labels" and "country"');
        var overrides = options.labels || {};
        _.each(options.country, function (val, key) {
          overrides['country.' + key] = val;
        });
        // Old behavior is to treat the override as a global override, so we
        // need to add these overrides to each language
        options.i18n = {};
        _.each(config.supportedLanguages, function (language) {
          options.i18n[language] = overrides;
        });
        delete options.labels;
        delete options.country;
      }

      // Default the assets.baseUrl to the cdn, or remove any trailing slashes
      if (!options.assets) {
        options.assets = {};
      }
      var abu = options.assets.baseUrl;
      if (!abu) {
        options.assets.baseUrl = assetBaseUrlTpl({ version: config.version });
      } else if (abu[abu.length - 1] === '/') {
        options.assets.baseUrl = abu.substring(0, abu.length - 1);
      }

      return options;
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(56), __webpack_require__(171)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Animations, LoadingBeacon) {

  var NO_BEACON_CLS = 'no-beacon';
  var LOADING_BEACON_CLS = 'beacon-small beacon-loading';

  function isLoadingBeacon(beacon) {
    return beacon && beacon.equals(LoadingBeacon);
  }

  function removeBeacon(view) {
    // There are some timing issues with removing beacons (i.e. the case of
    // transitioning from loadingBeacon -> loadingBeacon)
    if (!view.currentBeacon) {
      return;
    }
    view.currentBeacon.remove();
    view.currentBeacon = null;
  }

  function addBeacon(view, NextBeacon, selector, options) {
    view.add(NextBeacon, {
      selector: selector,
      options: options
    });
    view.currentBeacon = view.first();
  }

  function typeOfTransition(currentBeacon, NextBeacon, options) {
    if (!currentBeacon && !NextBeacon) {
      return 'none';
    }
    // Show Loading beacon
    if (!currentBeacon && options.loading) {
      return 'load';
    }
    // Swap/Hide Loading beacon
    if (currentBeacon && isLoadingBeacon(currentBeacon)) {
      return NextBeacon ? 'swap' : 'unload';
    }
    if (currentBeacon && currentBeacon.equals(NextBeacon, options)) {
      return 'same';
    }
    if (!currentBeacon && NextBeacon) {
      return 'add';
    }
    if (currentBeacon && !NextBeacon) {
      return 'remove';
    }
    if (currentBeacon instanceof NextBeacon) {
      return 'fade';
    }
    // If none of the above
    // then we are changing the type of beacon
    // ex. from SecurityBeacon to FactorBeacon
    return 'swap';
  }

  return Okta.View.extend({

    currentBeacon: null,

    template: '\
      <div class="okta-sign-in-header auth-header">\
        {{#if logo}}\
        <img src="{{logo}}" class="auth-org-logo" alt="{{logoText}}"/>\
        {{/if}}\
        <div data-type="beacon-container" class="beacon-container"></div>\
      </div>\
      <div class="auth-content"><div class="auth-content-inner"></div></div>\
    ',

    // Attach a 'no-beacon' class if the security image feature
    // is not passed in to prevent the beacon from jumping.
    initialize: function initialize(options) {
      if (!options.settings.get('features.securityImage')) {
        this.$el.addClass(NO_BEACON_CLS);
        // To show/hide the spinner when there is no security image,
        // listen to the appState's loading/removeLoading events.
        this.listenTo(options.appState, 'loading', this.setLoadingBeacon);
        this.listenTo(options.appState, 'removeLoading', this.removeLoadingBeacon);
      }
    },

    /* eslint complexity: 0 */
    setBeacon: function setBeacon(NextBeacon, options) {
      var selector = '[data-type="beacon-container"]',
          container = this.$(selector),
          transition = typeOfTransition(this.currentBeacon, NextBeacon, options),
          self = this;

      switch (transition) {
        case 'none':
          this.$el.addClass(NO_BEACON_CLS);
          return;
        case 'same':
          return;
        case 'add':
          this.$el.removeClass(NO_BEACON_CLS);
          addBeacon(this, NextBeacon, selector, options);
          return Animations.explode(container);
        case 'remove':
          this.$el.addClass(NO_BEACON_CLS);
          return Animations.implode(container).then(function () {
            removeBeacon(self);
          }).done();
        case 'fade':
          // Other transitions are performed on the beacon container,
          // but this transition is on the content inside the beacon.
          // For a SecurityBeacon the username change will update the
          // AppState and trigger an transition to a new Becon
          // Since there is no url change this method is not called.
          // For a FactorBeacon a page refresh has occurred
          // so we execute the beacon's own transition method.
          if (!this.currentBeacon.fadeOut) {
            throw new Error('The current beacon is missing the "fadeOut" method');
          }
          options.animate = true;
          return this.currentBeacon.fadeOut().then(function () {
            removeBeacon(self);
            addBeacon(self, NextBeacon, selector, options);
          }).done();
        case 'swap':
          return Animations.swapBeacons({
            $el: container,
            swap: function swap() {
              var isLoading = isLoadingBeacon(self.currentBeacon);
              // Order of these calls is important for -
              // loader --> security/factor beacon swap.
              removeBeacon(self);
              if (isLoading) {
                container.removeClass(LOADING_BEACON_CLS);
                self.$el.removeClass(NO_BEACON_CLS);
              }
              addBeacon(self, NextBeacon, selector, options);
            }
          }).done();
        case 'load':
          // Show the loading beacon. Add a couple of classes
          // before triggering the add beacon code.
          container.addClass(LOADING_BEACON_CLS);
          addBeacon(self, NextBeacon, selector, options);
          return Animations.explode(container);
        case 'unload':
          // Hide the loading beacon.
          return this.removeLoadingBeacon();
        default:
          throw new Error('the "' + transition + '" is not recognized');
      }
    },

    // Show the loading beacon when the security image feature is not enabled.
    setLoadingBeacon: function setLoadingBeacon(isLoading) {
      if (!isLoading || isLoadingBeacon(this.currentBeacon)) {
        return;
      }
      this.setBeacon(LoadingBeacon, { loading: true });
    },

    // Hide the beacon on primary auth failure. On primary auth success, setBeacon does this job.
    removeLoadingBeacon: function removeLoadingBeacon() {
      var self = this,
          container = this.$('[data-type="beacon-container"]');

      return Animations.implode(container).then(function () {
        removeBeacon(self);
        container.removeClass(LOADING_BEACON_CLS);
      }).done();
    },

    getTemplateData: function getTemplateData() {
      return this.settings.toJSON({ verbose: true });
    },

    getContentEl: function getContentEl() {
      return this.$('.auth-content-inner');
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _regenerator = __webpack_require__(100);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(101);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(56)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Animations) {
  var updateSecurityImage = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee($el, appState, animate) {
      var image, border, hasBorder, hasAntiPhishing, radialProgressBar, host, duration;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              image = $el.find('.auth-beacon-security'), border = $el.find('.js-auth-beacon-border'), hasBorder = !appState.get('isUndefinedUser'), hasAntiPhishing = appState.get('isNewUser'), radialProgressBar = $el.find('.radial-progress-bar'), host = appState.get('baseUrl').match(/https?:\/\/(.[^/]+)/)[1], duration = 200;

              if (animate) {
                _context.next = 5;
                break;
              }

              // Do not animate the security beacon
              // This occurs when initializing the form
              setBackgroundImage(image, appState);
              border.toggleClass('auth-beacon-border', hasBorder);
              return _context.abrupt('return');

            case 5:

              destroyAntiPhishingMessage(image);

              // Animate loading the security beacon

              if (hasBorder) {
                _context.next = 10;
                break;
              }

              // This occurrs when appState username is blank
              // we do not yet know if the user is recognized
              image.fadeOut(duration, function () {
                setBackgroundImage(image, appState);
                border.removeClass('auth-beacon-border');
                image.fadeIn(duration);
              });
              _context.next = 15;
              break;

            case 10:
              // Animate loading the security beacon with a loading bar for the border
              // This occurrs when the username has been checked against Okta.
              border.removeClass('auth-beacon-border');
              _context.next = 13;
              return Animations.radialProgressBar({
                $el: radialProgressBar,
                swap: function swap() {
                  image.fadeOut(duration, function () {
                    setBackgroundImage(image, appState);
                    image.fadeIn(duration);
                  });
                }
              });

            case 13:
              border.addClass('auth-beacon-border');
              if (hasAntiPhishing) {
                antiPhishingMessage(image, host);
              }

            case 15:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function updateSecurityImage(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  var _ = Okta._,
      $ = Okta.$;

  function setBackgroundImage(el, appState) {
    // NOTE: The imgSrc is returned by the server so that every
    // user has a unique image. However new and undefined user states
    // are hard coded into the css and the value returned by the server
    // is ignored.
    var imgSrc = appState.get('securityImage'),
        imgDescription = appState.get('securityImageDescription'),
        isUndefinedUser = appState.get('isUndefinedUser'),
        isNewUser = appState.get('isNewUser'),
        isSecurityImage = !isUndefinedUser && !isNewUser;

    el.css('background-image', '');
    el.removeClass('new-user undefined-user');
    if (isNewUser) {
      el.addClass('new-user');
      return;
    }
    if (isUndefinedUser) {
      el.addClass('undefined-user');
      return;
    }
    if (isSecurityImage) {
      // TODO: Newer versions of qtip will remove aria-describedby on their own when destroy() is called.
      el.removeAttr('aria-describedby');
      el.find('.accessibility-text').text(imgDescription);
      el.css('background-image', 'url(' + _.escape(imgSrc) + ')');
      return;
    }
  }

  function antiPhishingMessage(image, host) {
    $(window).on('resize.securityBeaconQtip', _.debounce(function () {
      if (image.is(':visible')) {
        image.qtip('show');
      }
    }, 300));

    // Show the message that the user has not logged in from this device before.
    image.qtip({
      prerender: true,
      content: {
        text: Okta.loc('primaryauth.newUser.tooltip', 'login', [_.escape(host)]),
        button: Okta.loc('primaryauth.newUser.tooltip.close', 'login')
      },
      style: {
        classes: 'okta-security-image-tooltip security-image-qtip qtip-custom qtip-shadow qtip-rounded',
        tip: { height: 12, width: 16 }
      },
      position: {
        my: 'top center',
        at: 'center',
        target: $('.auth-beacon-security'),
        adjust: { method: 'flip', scroll: false, resize: true },
        effect: false
      },
      hide: { event: false, fixed: true },
      show: { event: false, delay: 200 },
      events: {
        move: function move(event, api) {
          if (!api.elements.target.is(':visible')) {
            // Have to hide it immediately, with no effect
            api.set('hide.effect', false);
            api.hide();
            api.set('hide.effect', true);
          }
        }
      }
    });

    image.qtip('toggle', image.is(':visible'));
  }

  function destroyAntiPhishingMessage(image) {
    image.qtip('destroy');
    $(window).off('resize.securityBeaconQtip');
  }

  return Okta.View.extend({

    template: '\
    <div class="beacon-blank">\
      <div class="radial-progress-bar">\
        <div class="circle left"></div>\
        <div class="circle right"></div>\
      </div>\
    </div>\
    <div aria-live="polite" role="img" class="bg-helper auth-beacon auth-beacon-security" data-se="security-beacon">\
      <span class="accessibility-text"></span>\
      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border">\
      </div>\
    </div>\
    ',
    className: 'js-security-beacon',

    initialize: function initialize(options) {
      this.update = _.partial(updateSecurityImage, this.$el, options.appState);
      this.listenTo(options.appState, 'change:securityImage', this.update);
      this.listenTo(options.appState, 'loading', function (isLoading) {
        this.$el.toggleClass('beacon-loading', isLoading);
        this.removeAntiPhishingMessage();
      });
      this.options.appState.set('beaconType', 'security');

      this.listenTo(options.appState, 'navigate', this.removeAntiPhishingMessage);
    },

    postRender: function postRender() {
      this.update(false);
    },

    equals: function equals(Beacon) {
      return Beacon && this instanceof Beacon;
    },

    removeAntiPhishingMessage: function removeAntiPhishingMessage() {
      var image = this.$el.find('.auth-beacon-security');
      image.qtip('destroy');
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(172);


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(102);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(174), __esModule: true };

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(75);
var ITERATOR = __webpack_require__(11)('iterator');
var Iterators = __webpack_require__(34);
module.exports = __webpack_require__(7).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(19);
var aFunction = __webpack_require__(48);
var SPECIES = __webpack_require__(11)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(47);
var invoke = __webpack_require__(180);
var html = __webpack_require__(90);
var cel = __webpack_require__(66);
var global = __webpack_require__(10);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(40)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(19);
var isObject = __webpack_require__(20);
var newPromiseCapability = __webpack_require__(76);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums) {
  var CAN_REMOVE_BEACON_CLS = 'can-remove-beacon';
  return Okta.View.extend({
    className: 'auth-container main-container',
    id: Enums.WIDGET_CONTAINER_ID,
    attributes: { 'data-se': 'auth-container' },
    initialize: function initialize(options) {
      this.listenTo(options.appState, 'change:beaconType', function (model, type) {
        this.$el.toggleClass(CAN_REMOVE_BEACON_CLS, type === 'security');
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(193), __esModule: true };

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(16);
var core = __webpack_require__(7);
var fails = __webpack_require__(33);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _isIterable2 = __webpack_require__(197);

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = __webpack_require__(200);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2018-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Enums) {
  var fn = {};

  var template = function template(colors) {
    return '\n#okta-sign-in.auth-container .button-primary,\n#okta-sign-in.auth-container .button-primary:active,\n#okta-sign-in.auth-container .button-primary:focus { background: ' + colors.brand + '; }\n#okta-sign-in.auth-container .button-primary:hover { background: ' + fn.lighten(colors.brand, 0.05) + '; }\n#okta-sign-in.auth-container .button.button-primary.link-button-disabled {\n  background: ' + colors.brand + ';\n  opacity: 0.5;\n}\n    ';
  };

  // visible for testing
  fn.lighten = function (hex, lum) {
    lum = lum || 0;
    hex = hex.substr(1);
    var newHex = '#';
    for (var i = 0; i < 3; i++) {
      var c = parseInt(hex.substr(i * 2, 2), 16);
      c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
      newHex += ('00' + c).substr(c.length);
    }
    return newHex;
  };

  fn.addStyle = function (colors) {
    var css = template(colors);
    var main = document.getElementById(Enums.WIDGET_CONTAINER_ID);
    var style = document.createElement('style');

    style.id = Enums.WIDGET_CONFIG_COLORS_ID;
    style.type = 'text/css';
    style.appendChild(document.createTextNode(css));

    main.appendChild(style);
  };

  fn.isLoaded = function () {
    return !!document.getElementById(Enums.WIDGET_CONFIG_COLORS_ID);
  };

  return fn;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(114), __webpack_require__(116), __webpack_require__(211), __webpack_require__(77), __webpack_require__(117), __webpack_require__(36), __webpack_require__(115)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, PrimaryAuthForm, CustomButtons, FooterRegistration, PrimaryAuthModel, Footer, BaseLoginController, DeviceFingerprint) {

  var $ = Okta.$;

  return BaseLoginController.extend({
    className: 'primary-auth',

    state: { enabled: true },

    View: PrimaryAuthForm,

    constructor: function constructor(options) {
      options.appState.unset('username');

      this.model = new PrimaryAuthModel({
        multiOptionalFactorEnroll: options.settings.get('features.multiOptionalFactorEnroll'),
        settings: options.settings,
        appState: options.appState
      }, { parse: true });

      BaseLoginController.apply(this, arguments);

      this.addListeners();

      // If social auth is configured, 'socialAuthPositionTop' will determine
      // the order in which the social auth and primary auth are shown on the screen.
      if (options.settings.get('hasConfiguredButtons')) {
        this.add(CustomButtons, {
          prepend: options.settings.get('socialAuthPositionTop'),
          options: {
            // To trigger an afterError event, we require the current controller
            currentController: this
          }
        });
      }

      this.addFooter(options);

      this.setUsername();
    },

    addFooter: function addFooter(options) {
      this.add(new Footer(this.toJSON({ appState: options.appState })));

      if (options.settings.get('features.registration') || options.appState.get('isIdxStateToken')) {
        this.add(new FooterRegistration({
          settings: this.settings,
          appState: options.appState
        }));
      }
    },

    setUsername: function setUsername() {
      var username = this.model.get('username');
      if (username) {
        this.options.appState.set('username', username);
      }
    },

    events: {
      'focusout input[name=username]': function focusoutInputNameUsername() {
        if (this.shouldComputeDeviceFingerprint()) {
          var self = this;
          DeviceFingerprint.generateDeviceFingerprint(this.settings.get('baseUrl'), this.$el).then(function (fingerprint) {
            self.options.appState.set('deviceFingerprint', fingerprint);
            self.options.appState.set('username', self.model.get('username'));
          }).fail(function () {
            // Keep going even if device fingerprint fails
            self.options.appState.set('username', self.model.get('username'));
          });
        } else {
          this.options.appState.set('username', this.model.get('username'));
        }
      },
      'focusin input': function focusinInput(e) {
        $(e.target.parentElement).addClass('focused-input');
      },
      'focusout input': function focusoutInput(e) {
        $(e.target.parentElement).removeClass('focused-input');
      },
      'click .button-show': function clickButtonShow() {
        this.trigger('passwordRevealed');
      }
    },

    // This model and the AppState both have a username property.
    // The controller updates the AppState's username when the user is
    // done editing (on blur) or deletes the username (see below).
    initialize: function initialize() {
      this.options.appState.unset('deviceFingerprint');
      this.listenTo(this.model, 'change:username', function (model, value) {
        if (!value) {
          // reset AppState to an undefined user.
          this.options.appState.set('username', '');
        }
      });
      this.listenTo(this.model, 'save', function () {
        this.state.set('enabled', false);
      });
      this.listenTo(this.model, 'error', function () {
        this.state.set('enabled', true);
      });

      // Custom code to listen to the changing of the Terms and Conditions
      // checkbox and determine if the 'Sign In' button is to be 
      // disabled.  If the Terms and Conditions checkbox is checked then
      // the 'Sign In' button is enabled; otherwise, if the Terms and
      // Conditions Checkbox is unchecked then the 'Sign In' button
      // is disabled.      
      this.listenTo(this.model, 'change:termsconditions', function (model, val) {
        //console.log("calling PrimaryAuthController.listenTo(this.model, 'change:termsconditions', function) method....");

        // if val === true then we pass boolean false to enable 
        //   the Sign In button because the checkbox is checked,
        //   indicating the user accepts the Terms and Conditions
        // if val === false then we pass boolean true to disable
        //   the Sign In buton because the checkbox is not checked,
        //   indicating the user does not accept the Terms and Conditions
        this.toggleButtonState(!val);
      });
    },

    shouldComputeDeviceFingerprint: function shouldComputeDeviceFingerprint() {
      return this.settings.get('features.securityImage') && this.settings.get('features.deviceFingerprinting') && this.settings.get('features.useDeviceFingerprintForSecurityImage');
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6), __webpack_require__(115), __webpack_require__(209), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, TextBox, DeviceFingerprint, TypingUtil, Util) {

  var _ = Okta._;

  return Okta.Form.extend({
    className: 'primary-auth-form',
    noCancelButton: true,
    save: function save() {
      if (this.settings.get('features.passwordlessAuth')) {
        return Okta.loc('oform.next', 'login');
      }
      return Okta.loc('primaryauth.submit', 'login');
    },
    saveId: 'okta-signin-submit',
    layout: 'o-form-theme',

    // If socialAuth is configured, the title moves from the form to
    // the top of the container (and is rendered in socialAuth).
    title: function title() {
      var formTitle = Okta.loc('primaryauth.title', 'login');
      if (this.settings.get('socialAuthPositionTop')) {
        formTitle = '';
      }
      return formTitle;
    },

    initialize: function initialize() {
      var trackTypingPattern = this.settings.get('features.trackTypingPattern');
      this.listenTo(this, 'save', function () {
        if (trackTypingPattern) {
          var typingPattern = TypingUtil.getTypingPattern();
          this.options.appState.set('typingPattern', typingPattern);
        }
        var self = this;
        var creds = {
          username: this.model.get('username')
        };
        if (!this.settings.get('features.passwordlessAuth')) {
          creds.password = this.model.get('password');
        }
        this.settings.processCreds(creds).then(function () {
          if (!self.settings.get('features.deviceFingerprinting')) {
            return;
          }
          return DeviceFingerprint.generateDeviceFingerprint(self.settings.get('baseUrl'), self.$el).then(function (fingerprint) {
            self.options.appState.set('deviceFingerprint', fingerprint);
          }).fail(function () {
            // Keep going even if device fingerprint fails
          });
        }).then(_.bind(this.model.save, this.model));
      });

      this.stateEnableChange();
    },

    stateEnableChange: function stateEnableChange() {
      this.listenTo(this.state, 'change:enabled', function (model, enable) {
        if (enable) {
          this.enable();
        } else {
          this.disable();
        }
      });
    },

    inputs: function inputs() {
      var inputs = [];
      inputs.push(this.getUsernameField());
      if (!this.settings.get('features.passwordlessAuth')) {
        inputs.push(this.getPasswordField());
      }
      if (this.settings.get('features.rememberMe')) {
        inputs.push(this.getRemeberMeCheckbox());
      }

      // Custom code to add the 'Terms and Conditions' checkbox to the
      // Priamry Authentication Form
      inputs.push(this.getTermsAndConditionsCheckbox());
      return inputs;
    },

    getUsernameField: function getUsernameField() {
      var _this = this;

      var userNameFieldObject = {
        className: 'margin-btm-5',
        label: Okta.loc('primaryauth.username.placeholder', 'login'),
        'label-top': true,
        explain: function explain() {
          if (_this.settings.get('features.hideDefaultTip') && !_this.isCustomized('primaryauth.username.tooltip')) {
            return false;
          }

          return Util.createInputExplain('primaryauth.username.tooltip', 'primaryauth.username.placeholder', 'login');
        },
        'explain-top': true,
        name: 'username',
        input: TextBox,
        inputId: 'okta-signin-username',
        type: 'text',
        disabled: this.options.appState.get('disableUsername')
      };

      return userNameFieldObject;
    },

    getPasswordField: function getPasswordField() {
      var _this2 = this;

      var passwordFieldObject = {
        className: 'margin-btm-30',
        label: Okta.loc('primaryauth.password.placeholder', 'login'),
        'label-top': true,
        explain: function explain() {
          if (_this2.settings.get('features.hideDefaultTip') && !_this2.isCustomized('primaryauth.password.tooltip')) {
            return false;
          }

          return Util.createInputExplain('primaryauth.password.tooltip', 'primaryauth.password.placeholder', 'login');
        },
        'explain-top': true,
        name: 'password',
        inputId: 'okta-signin-password',
        validateOnlyIfDirty: true,
        type: 'password'
      };
      if (this.settings.get('features.showPasswordToggleOnSignInPage')) {
        passwordFieldObject.params = {};
        passwordFieldObject.params.showPasswordToggle = true;
      }
      return passwordFieldObject;
    },

    isCustomized: function isCustomized(property) {
      var language = this.settings.get('language');
      var i18n = this.settings.get('i18n');
      var customizedProperty = i18n && i18n[language] && i18n[language][property];
      return !!customizedProperty;
    },

    getRemeberMeCheckbox: function getRemeberMeCheckbox() {
      return {
        label: false,
        placeholder: Okta.loc('remember', 'login'),
        name: 'remember',
        type: 'checkbox',
        'label-top': true,
        className: 'margin-btm-0',
        initialize: function initialize() {
          this.listenTo(this.model, 'change:remember', function (model, val) {
            // OKTA-98946: We normally re-render on changes to model values,
            // but in this case we will manually update the checkbox due to
            // iOS Safari and how it handles autofill - it will autofill the
            // form anytime the dom elements are re-rendered, which prevents
            // the user from editing their username.
            this.$(':checkbox').prop('checked', val).trigger('updateState');
          });
        }
      };
    },

    // Custom code to include a new checkbox for the 'Terms and Conditions'.  
    // The user must check the 'Terms and Conditions' checkbox to enable the
    // 'Sign In' button on the Primary Authentication screen.
    getTermsAndConditionsCheckbox: function getTermsAndConditionsCheckbox() {
      // console.log("Calling PrimaryAuthForm.getTermsAndConditionsCheckbox() method....");

      return {
        label: false,
        placeholder: this.settings.get('oktaTermsConditionsContent'),
        name: 'termsconditions',
        type: 'checkbox',
        'label-top': true,
        className: 'margin-btm-0',
        initialize: function initialize() {
          this.listenTo(this.model, 'change:termsconditions', function (model, val) {
            // OKTA-98946: We normally re-render on changes to model values,
            // but in this case we will manually update the checkbox due to
            // iOS Safari and how it handles autofill - it will autofill the
            // form anytime the dom elements are re-rendered, which prevents
            // the user from editing their username.

            this.$(':checkbox').prop('checked', val).trigger('updateState');
          });
        }
      };
    },

    focus: function focus() {
      if (!this.model.get('username')) {
        this.getInputs().first().focus();
      } else if (!this.settings.get('features.passwordlessAuth')) {
        this.getInputs().toArray()[1].focus();
      }
      if (this.settings.get('features.trackTypingPattern')) {
        TypingUtil.track('okta-signin-username');
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _stringify = __webpack_require__(32);

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Q, Okta) {

  var $ = Okta.$;
  return {
    getUserAgent: function getUserAgent() {
      return navigator.userAgent;
    },
    isMessageFromCorrectSource: function isMessageFromCorrectSource($iframe, event) {
      return event.source === $iframe[0].contentWindow;
    },
    generateDeviceFingerprint: function generateDeviceFingerprint(oktaDomainUrl, element) {
      var userAgent = this.getUserAgent();
      if (!userAgent) {
        return Q.reject('user agent is not defined');
      } else if (isWindowsPhone(userAgent)) {
        return Q.reject('device fingerprint is not supported on Windows phones');
      }

      var deferred = Q.defer();
      var self = this;
      var $iframe;

      function isWindowsPhone(userAgent) {
        return userAgent.match(/windows phone|iemobile|wpdesktop/i);
      }

      function removeIframe() {
        $iframe.off();
        $iframe.remove();
        window.removeEventListener('message', onMessageReceivedFromOkta, false);
      }

      function handleError(reason) {
        removeIframe();
        deferred.reject(reason);
      }

      function onMessageReceivedFromOkta(event) {
        if (!self.isMessageFromCorrectSource($iframe, event)) {
          return;
        }
        if (!event || !event.data || event.origin !== oktaDomainUrl) {
          handleError('no data');
          return;
        }
        try {
          var message = JSON.parse(event.data);
          if (message && message.type === 'FingerprintServiceReady') {
            sendMessageToOkta({ type: 'GetFingerprint' });
          } else if (message && message.type === 'FingerprintAvailable') {
            removeIframe();
            deferred.resolve(message.fingerprint);
          } else {
            handleError('no data');
          }
        } catch (error) {
          //Ignore any errors since we could get other messages too
        }
      }

      function sendMessageToOkta(message) {
        var win = $iframe[0].contentWindow;
        if (win) {
          win.postMessage((0, _stringify2.default)(message), oktaDomainUrl);
        }
      }

      // Attach listener
      window.addEventListener('message', onMessageReceivedFromOkta, false);
      // Create and Load devicefingerprint page inside the iframe
      $iframe = $('<iframe>', {
        style: 'display: none;',
        src: oktaDomainUrl + '/auth/services/devicefingerprint'
      });
      element.append($iframe);

      return deferred.promise;
    }
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(63)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, OAuth2Util) {

  var _ = Okta._,
      $ = Okta.$,
      SharedUtil = Okta.internal.util.Util;

  var dividerTpl = Okta.tpl('<div class="auth-divider">\
      <span class="auth-divider-text">{{text}}</span>\
    </div>');
  var formTitleTpl = Okta.tpl('<h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>');

  return Okta.View.extend({

    className: 'primary-auth-container',

    children: function children() {
      var children = [],
          socialIdpButtons = this.settings.get('configuredSocialIdps'),
          pivButton = this.settings.get('piv'),
          customButtons = this.settings.get('customButtons'),
          divider = dividerTpl({ text: Okta.loc('socialauth.divider.text', 'login') });

      if (this.settings.get('hasPivCard')) {
        children.push(this._createPivButton(pivButton));
      }

      _.each(socialIdpButtons, function (button) {
        children.push(this._createSocialIdpButton(button));
      }, this);

      _.each(customButtons, function (button) {
        children.push(this._createCustomButton(button));
      }, this);

      // If the social auth buttons have to be above the Okta form, the title moves from
      // primary auth form to the social auth (above the buttons) and the divider goes below
      // the buttons (in between social auth and primary auth). If social auth needs to go below
      // Okta form, just add the divider at the top of the social auth container. The title still
      // lives in primary auth form.
      if (this.settings.get('socialAuthPositionTop')) {
        children.unshift(formTitleTpl({ title: Okta.loc('primaryauth.title', 'login') }));
        // Divider between Primary Auth and the Social Auth
        children.push(divider);
      } else {
        children.unshift(divider);
      }

      return children;
    },

    _createSocialIdpButton: function _createSocialIdpButton(options) {
      return Okta.createButton({
        attributes: {
          'data-se': options.dataAttr
        },
        className: options.className,
        title: function title() {
          return options.text || Okta.loc(options.i18nKey);
        },
        click: function click(e) {
          e.preventDefault();
          if (this.settings.get('oauth2Enabled')) {
            OAuth2Util.getTokens(this.settings, { idp: options.id }, this.options.currentController);
          } else {
            var baseUrl = this.settings.get('baseUrl');
            var params = $.param({
              fromURI: this.settings.get('relayState')
            });
            var targetUri = baseUrl + '/sso/idps/' + options.id + '?' + params;
            SharedUtil.redirect(targetUri);
          }
        }
      });
    },

    _createPivButton: function _createPivButton(options) {
      var className = options.className || '';
      return Okta.createButton({
        attributes: {
          'data-se': 'piv-card-button'
        },
        className: className + ' piv-button',
        title: options.text || Okta.loc('piv.cac.card', 'login'),
        click: function click(e) {
          e.preventDefault();
          this.options.appState.trigger('navigate', 'signin/verify/piv');
        }
      });
    },

    _createCustomButton: function _createCustomButton(options) {
      return Okta.createButton({
        attributes: {
          'data-se': options.dataAttr
        },
        className: options.className + ' default-custom-button',
        title: options.title,
        click: options.click
      });
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {
  var Util = Okta.internal.util.Util;

  var compile = Okta.Handlebars.compile;
  var _ = Okta._;

  // Custom code to include new HTML tags to render links in the Footer required
  // for the ESS Okta Sign In Widget.  The Footer removes the default toggable
  // link menu and repalces with the following links
  //  1) Terms and Conditions
  //  2) Don't have an account? Sign Up
  //  3) Having trouble logging in?
  //  4) MFT Help
  // All of the links will display in a new browser table by setting the
  // target attribute equal to '_blank'
  return Okta.View.extend({
    template: '\
    <ul>\
    <li>\
     <a href="{{oktaTermsConditionsUrl}}" class="links" target="_blank">{{oktaTermsConditionsLinkContent}}</a>\
    </li>\
    <li>\
    {{harpSignUpHeaderContent}}\
      <a href="{{harpSignUpUrl}}" class="mft-links" target="_blank">\
       {{harpSignUpLinkContent}}\
      </a>\
    </li>\
    <li>\
      <a href="{{harpRecorveryUrl}}" class=""mft-links" target="_blank">\
       {{harpRecoveryContent}}\
      </a>\
    </li>\
    {{#if isOktaHelpContentAvailable}} \
    <li>\
      <a href="{{helpLinkUrl}}" class="mft-links" target="_blank">\
        {{oktaHelpContent}}\
      </a>\
    </li>\
    {{/if}}\
  <ul>\
    ',
    className: 'auth-footer',

    initialize: function initialize() {
      this.listenTo(this.state, 'change:enabled', function (model, enable) {
        this.$(':link').toggleClass('o-form-disabled', !enable);
      });
    },

    getTemplateData: function getTemplateData() {

      var oktaSettings = this.settings;
      var oktaTermsConditionsUrl = oktaSettings.get('oktaSignInWidgetBaseUrl') + '/' + oktaSettings.get('oktaTermsConditionsEndPoint');
      var harpSignUpUrl = oktaSettings.get('oktaSignInWidgetBaseUrl') + '/' + oktaSettings.get('oktaRedirectEndPoint') + '?' + oktaSettings.get('oktaRedirectParamName') + '=' + oktaSettings.get('harpSignUpAppName');
      var harpRecorveryUrl = oktaSettings.get('oktaSignInWidgetBaseUrl') + '/' + oktaSettings.get('oktaRedirectEndPoint') + '?' + oktaSettings.get('oktaRedirectParamName') + '=' + oktaSettings.get('harpRecoveryAppName');
      var helpLinkUrl = oktaSettings.get('oktaSignInWidgetBaseUrl') + '/' + oktaSettings.get('oktaHelpEndPoint');

      var oktaTermsConditionsLinkContent = oktaSettings.get('oktaTermsConditionsLinkContent');
      var harpSignUpHeaderContent = oktaSettings.get('harpSignUpHeaderContent');
      var harpSignUpLinkContent = oktaSettings.get('harpSignUpLinkContent');
      var harpRecoveryContent = oktaSettings.get('harpRecoveryContent');
      var oktaHelpContent = oktaSettings.get('oktaHelpContent');

      var isOktaHelpContentAvailable = oktaSettings.get('isOktaHelpContentAvailable');

      /*
      var helpLinkUrl;
      var customHelpPage = this.settings.get('helpLinks.help');
      if (customHelpPage) {
        helpLinkUrl = customHelpPage;
      } else {
        helpLinkUrl = compile('{{baseUrl}}/help/login')({baseUrl: this.settings.get('baseUrl')});
      }
      return _.extend(this.settings.toJSON({verbose: true}), {helpLinkUrl: helpLinkUrl});
      */
      return _.extend(this.settings.toJSON({ verbose: true }), { oktaTermsConditionsUrl: oktaTermsConditionsUrl }, { harpSignUpUrl: harpSignUpUrl }, { harpRecorveryUrl: harpRecorveryUrl }, { helpLinkUrl: helpLinkUrl }, { oktaTermsConditionsLinkContent: oktaTermsConditionsLinkContent }, { harpSignUpHeaderContent: harpSignUpHeaderContent }, { harpSignUpLinkContent: harpSignUpLinkContent }, { harpRecoveryContent: harpRecoveryContent }, { oktaHelpContent: oktaHelpContent }, { isOktaHelpContentAvailable: isOktaHelpContentAvailable });
    },
    postRender: function postRender() {
      this.$('.js-help-links').hide();
    },
    toggleLinks: function toggleLinks(e) {
      e.preventDefault();

      this.$('.js-help-links').slideToggle(200, _.bind(function () {
        this.$('.js-help').attr('aria-expanded', this.$('.js-help-links').is(':visible'));
      }, this));
    },
    events: {
      // Custom code to comment out the default Footer links which was 
      // a me      
      /*  'click .js-help': function (e) {
          e.preventDefault();
          if(!this.state.get('enabled')) {
            return;
          }
           this.toggleLinks(e);
        },
        'click .js-forgot-password' : function (e) {
          e.preventDefault();
          if(!this.state.get('enabled')) {
            return;
          }
           var customResetPasswordPage = this.settings.get('helpLinks.forgotPassword');
          if (customResetPasswordPage) {
            Util.redirect(customResetPasswordPage);
          }
          else {
            this.options.appState.trigger('navigate', 'signin/forgot-password');
          }
        },
        'click .js-unlock' : function (e) {
          e.preventDefault();
          if(!this.state.get('enabled')) {
            return;
          }
           var customUnlockPage = this.settings.get('helpLinks.unlock');
          if (customUnlockPage) {
            Util.redirect(customUnlockPage);
          }
          else {
            this.options.appState.trigger('navigate', 'signin/unlock');
          }
        }
        */
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof2 = __webpack_require__(45);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Duo Web SDK v2
 * Copyright 2017, Duo Security
 */

(function (root, factory) {
    /*eslint-disable */
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        /*eslint-enable */
    } else if ((typeof module === 'undefined' ? 'undefined' : (0, _typeof3.default)(module)) === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        var Duo = factory();
        // If the Javascript was loaded via a script tag, attempt to autoload
        // the frame.
        Duo._onReady(Duo.init);

        // Attach Duo to the `window` object
        root.Duo = Duo;
    }
})(undefined, function () {
    var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\|[A-Za-z0-9\+\/=]+\|[A-Za-z0-9\+\/=]+$/;
    var DUO_ERROR_FORMAT = /^ERR\|[\w\s\.\(\)]+$/;
    var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\|/;
    var VALID_OPEN_WINDOW_DOMAINS = ['duo.com', 'duosecurity.com', 'duomobile.s3-us-west-1.amazonaws.com'];

    var iframeId = 'duo_iframe',
        postAction = '',
        postArgument = 'sig_response',
        host,
        sigRequest,
        duoSig,
        appSig,
        iframe,
        submitCallback;

    function throwError(message, url) {
        throw new Error('Duo Web SDK error: ' + message + (url ? '\n' + 'See ' + url + ' for more information' : ''));
    }

    function hyphenize(str) {
        return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();
    }

    // cross-browser data attributes
    function getDataAttribute(element, name) {
        if ('dataset' in element) {
            return element.dataset[name];
        } else {
            return element.getAttribute('data-' + hyphenize(name));
        }
    }

    // cross-browser event binding/unbinding
    function on(context, event, fallbackEvent, callback) {
        if ('addEventListener' in window) {
            context.addEventListener(event, callback, false);
        } else {
            context.attachEvent(fallbackEvent, callback);
        }
    }

    function off(context, event, fallbackEvent, callback) {
        if ('removeEventListener' in window) {
            context.removeEventListener(event, callback, false);
        } else {
            context.detachEvent(fallbackEvent, callback);
        }
    }

    function onReady(callback) {
        on(document, 'DOMContentLoaded', 'onreadystatechange', callback);
    }

    function offReady(callback) {
        off(document, 'DOMContentLoaded', 'onreadystatechange', callback);
    }

    function onMessage(callback) {
        on(window, 'message', 'onmessage', callback);
    }

    function offMessage(callback) {
        off(window, 'message', 'onmessage', callback);
    }

    /**
     * Parse the sig_request parameter, throwing errors if the token contains
     * a server error or if the token is invalid.
     *
     * @param {String} sig Request token
     */
    function parseSigRequest(sig) {
        if (!sig) {
            // nothing to do
            return;
        }

        // see if the token contains an error, throwing it if it does
        if (sig.indexOf('ERR|') === 0) {
            throwError(sig.split('|')[1]);
        }

        // validate the token
        if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {
            throwError('Duo was given a bad token.  This might indicate a configuration ' + 'problem with one of Duo\'s client libraries.', 'https://www.duosecurity.com/docs/duoweb#first-steps');
        }

        var sigParts = sig.split(':');

        // hang on to the token, and the parsed duo and app sigs
        sigRequest = sig;
        duoSig = sigParts[0];
        appSig = sigParts[1];

        return {
            sigRequest: sig,
            duoSig: sigParts[0],
            appSig: sigParts[1]
        };
    }

    /**
     * This function is set up to run when the DOM is ready, if the iframe was
     * not available during `init`.
     */
    function onDOMReady() {
        iframe = document.getElementById(iframeId);

        if (!iframe) {
            throw new Error('This page does not contain an iframe for Duo to use.' + 'Add an element like <iframe id="duo_iframe"></iframe> ' + 'to this page.  ' + 'See https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe ' + 'for more information.');
        }

        // we've got an iframe, away we go!
        ready();

        // always clean up after yourself
        offReady(onDOMReady);
    }

    /**
     * Validate that a MessageEvent came from the Duo service, and that it
     * is a properly formatted payload.
     *
     * The Google Chrome sign-in page injects some JS into pages that also
     * make use of postMessage, so we need to do additional validation above
     * and beyond the origin.
     *
     * @param {MessageEvent} event Message received via postMessage
     */
    function isDuoMessage(event) {
        return Boolean(event.origin === 'https://' + host && typeof event.data === 'string' && (event.data.match(DUO_MESSAGE_FORMAT) || event.data.match(DUO_ERROR_FORMAT) || event.data.match(DUO_OPEN_WINDOW_FORMAT)));
    }

    /**
     * Validate the request token and prepare for the iframe to become ready.
     *
     * All options below can be passed into an options hash to `Duo.init`, or
     * specified on the iframe using `data-` attributes.
     *
     * Options specified using the options hash will take precedence over
     * `data-` attributes.
     *
     * Example using options hash:
     * ```javascript
     * Duo.init({
     *     iframe: "some_other_id",
     *     host: "api-main.duo.test",
     *     sig_request: "...",
     *     post_action: "/auth",
     *     post_argument: "resp"
     * });
     * ```
     *
     * Example using `data-` attributes:
     * ```
     * <iframe id="duo_iframe"
     *         data-host="api-main.duo.test"
     *         data-sig-request="..."
     *         data-post-action="/auth"
     *         data-post-argument="resp"
     *         >
     * </iframe>
     * ```
     *
     * @param {Object} options
     * @param {String} options.iframe                         The iframe, or id of an iframe to set up
     * @param {String} options.host                           Hostname
     * @param {String} options.sig_request                    Request token
     * @param {String} [options.post_action='']               URL to POST back to after successful auth
     * @param {String} [options.post_argument='sig_response'] Parameter name to use for response token
     * @param {Function} [options.submit_callback]            If provided, duo will not submit the form instead execute
     *                                                        the callback function with reference to the "duo_form" form object
     *                                                        submit_callback can be used to prevent the webpage from reloading.
     */
    function init(options) {
        if (options) {
            if (options.host) {
                host = options.host;
            }

            if (options.sig_request) {
                parseSigRequest(options.sig_request);
            }

            if (options.post_action) {
                postAction = options.post_action;
            }

            if (options.post_argument) {
                postArgument = options.post_argument;
            }

            if (options.iframe) {
                if (options.iframe.tagName) {
                    iframe = options.iframe;
                } else if (typeof options.iframe === 'string') {
                    iframeId = options.iframe;
                }
            }

            if (typeof options.submit_callback === 'function') {
                submitCallback = options.submit_callback;
            }
        }

        // if we were given an iframe, no need to wait for the rest of the DOM
        if (iframe) {
            ready();
        } else {
            // try to find the iframe in the DOM
            iframe = document.getElementById(iframeId);

            // iframe is in the DOM, away we go!
            if (iframe) {
                ready();
            } else {
                // wait until the DOM is ready, then try again
                onReady(onDOMReady);
            }
        }

        // always clean up after yourself!
        offReady(init);
    }

    /**
     * This function is called when a message was received from another domain
     * using the `postMessage` API.  Check that the event came from the Duo
     * service domain, and that the message is a properly formatted payload,
     * then perform the post back to the primary service.
     *
     * @param event Event object (contains origin and data)
     */
    function onReceivedMessage(event) {
        if (isDuoMessage(event)) {
            if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {
                var url = event.data.substring("DUO_OPEN_WINDOW|".length);
                if (isValidUrlToOpen(url)) {
                    // Open the URL that comes after the DUO_WINDOW_OPEN token.
                    window.open(url, "_self");
                }
            } else {
                // the event came from duo, do the post back
                doPostBack(event.data);

                // always clean up after yourself!
                offMessage(onReceivedMessage);
            }
        }
    }

    /**
     * Validate that this passed in URL is one that we will actually allow to
     * be opened.
     * @param url String URL that the message poster wants to open
     * @returns {boolean} true if we allow this url to be opened in the window
     */
    function isValidUrlToOpen(url) {
        if (!url) {
            return false;
        }

        var parser = document.createElement('a');
        parser.href = url;

        if (parser.protocol === "duotrustedendpoints:") {
            return true;
        } else if (parser.protocol !== "https:") {
            return false;
        }

        for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {
            if (parser.hostname.endsWith("." + VALID_OPEN_WINDOW_DOMAINS[i]) || parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {
                return true;
            }
        }
        return false;
    }

    /**
     * Point the iframe at Duo, then wait for it to postMessage back to us.
     */
    function ready() {
        if (!host) {
            host = getDataAttribute(iframe, 'host');

            if (!host) {
                throwError('No API hostname is given for Duo to use.  Be sure to pass ' + 'a `host` parameter to Duo.init, or through the `data-host` ' + 'attribute on the iframe element.', 'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe');
            }
        }

        if (!duoSig || !appSig) {
            parseSigRequest(getDataAttribute(iframe, 'sigRequest'));

            if (!duoSig || !appSig) {
                throwError('No valid signed request is given.  Be sure to give the ' + '`sig_request` parameter to Duo.init, or use the ' + '`data-sig-request` attribute on the iframe element.', 'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe');
            }
        }

        // if postAction/Argument are defaults, see if they are specified
        // as data attributes on the iframe
        if (postAction === '') {
            postAction = getDataAttribute(iframe, 'postAction') || postAction;
        }

        if (postArgument === 'sig_response') {
            postArgument = getDataAttribute(iframe, 'postArgument') || postArgument;
        }

        // point the iframe at Duo
        iframe.src = ['https://', host, '/frame/web/v1/auth?tx=', duoSig, '&parent=', encodeURIComponent(document.location.href), '&v=2.6'].join('');

        // listen for the 'message' event
        onMessage(onReceivedMessage);
    }

    /**
     * We received a postMessage from Duo.  POST back to the primary service
     * with the response token, and any additional user-supplied parameters
     * given in form#duo_form.
     */
    // function doPostBack(response) {
    //     // create a hidden input to contain the response token
    //     var input = document.createElement('input');
    //     input.type = 'hidden';
    //     input.name = postArgument;
    //     input.value = response + ':' + appSig;
    // 
    //     // user may supply their own form with additional inputs
    //     var form = document.getElementById('duo_form');
    // 
    //     // if the form doesn't exist, create one
    //     if (!form) {
    //         form = document.createElement('form');
    // 
    //         // insert the new form after the iframe
    //         iframe.parentElement.insertBefore(form, iframe.nextSibling);
    //     }
    // 
    //     // make sure we are actually posting to the right place
    //     form.method = 'POST';
    //     form.action = postAction;
    // 
    //     // add the response token input to the form
    //     form.appendChild(input);
    // 
    //     // away we go!
    //     if (typeof submitCallback === "function") {
    //         submitCallback.call(null, form);
    //     } else {
    //         form.submit();
    //     }
    // }

    // OKTA: Overriding their doPostBack logic because we want to submit this
    // through ajax, not a postBack
    function doPostBack(response) {
        postAction(response + ':' + appSig);
    }

    return {
        init: init,
        _onReady: onReady,
        _parseSigRequest: parseSigRequest,
        _isDuoMessage: isDuoMessage,
        _doPostBack: doPostBack
    };
});

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({
    className: 'okta-waiting-spinner',
    attributes: {
      'data-se': 'o-form-okta-waiting-spinner'
    },
    modelEvents: {
      'spinner:show': 'show',
      'spinner:hide': 'hide'
    },

    initialize: function initialize(options) {
      if (options && options.visible === false) {
        this.hide();
      }
    },

    show: function show() {
      this.$el.removeClass('hide');
    },

    hide: function hide() {
      this.$el.addClass('hide');
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//Copyright 2014-2015 Google Inc. All rights reserved.

//Use of this source code is governed by a BSD-style
//license that can be found in the LICENSE file or at
//https://developers.google.com/open-source/licenses/bsd

/**
 * @fileoverview The U2F api.
 */


(function (){
  var isChrome = 'chrome' in window && window.navigator.userAgent.indexOf('Edge') < 0;
  if ('u2f' in window || !isChrome) {
    return;
  }

  /** Namespace for the U2F api.
   * @type {Object}
   */
  var u2f = window.u2f = {};

  /**
   * FIDO U2F Javascript API Version
   * @number
   */
  var js_api_version;

  /**
   * The U2F extension id
   * @const {string}
   */
  // The Chrome packaged app extension ID.
  // Uncomment this if you want to deploy a server instance that uses
  // the package Chrome app and does not require installing the U2F Chrome extension.
   u2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';
  // The U2F Chrome extension ID.
  // Uncomment this if you want to deploy a server instance that uses
  // the U2F Chrome extension to authenticate.
  // u2f.EXTENSION_ID = 'pfboblefjcgdjicmnffhdgionmgcdmne';


  /**
   * Message types for messsages to/from the extension
   * @const
   * @enum {string}
   */
  u2f.MessageTypes = {
      'U2F_REGISTER_REQUEST': 'u2f_register_request',
      'U2F_REGISTER_RESPONSE': 'u2f_register_response',
      'U2F_SIGN_REQUEST': 'u2f_sign_request',
      'U2F_SIGN_RESPONSE': 'u2f_sign_response',
      'U2F_GET_API_VERSION_REQUEST': 'u2f_get_api_version_request',
      'U2F_GET_API_VERSION_RESPONSE': 'u2f_get_api_version_response'
  };


  /**
   * Response status codes
   * @const
   * @enum {number}
   */
  u2f.ErrorCodes = {
      'OK': 0,
      'OTHER_ERROR': 1,
      'BAD_REQUEST': 2,
      'CONFIGURATION_UNSUPPORTED': 3,
      'DEVICE_INELIGIBLE': 4,
      'TIMEOUT': 5
  };


  /**
   * A message for registration requests
   * @typedef {{
   *   type: u2f.MessageTypes,
   *   appId: ?string,
   *   timeoutSeconds: ?number,
   *   requestId: ?number
   * }}
   */
  u2f.U2fRequest;


  /**
   * A message for registration responses
   * @typedef {{
   *   type: u2f.MessageTypes,
   *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),
   *   requestId: ?number
   * }}
   */
  u2f.U2fResponse;


  /**
   * An error object for responses
   * @typedef {{
   *   errorCode: u2f.ErrorCodes,
   *   errorMessage: ?string
   * }}
   */
  u2f.Error;

  /**
   * Data object for a single sign request.
   * @typedef {enum {BLUETOOTH_RADIO, BLUETOOTH_LOW_ENERGY, USB, NFC}}
   */
  u2f.Transport;


  /**
   * Data object for a single sign request.
   * @typedef {Array<u2f.Transport>}
   */
  u2f.Transports;

  /**
   * Data object for a single sign request.
   * @typedef {{
   *   version: string,
   *   challenge: string,
   *   keyHandle: string,
   *   appId: string
   * }}
   */
  u2f.SignRequest;


  /**
   * Data object for a sign response.
   * @typedef {{
   *   keyHandle: string,
   *   signatureData: string,
   *   clientData: string
   * }}
   */
  u2f.SignResponse;


  /**
   * Data object for a registration request.
   * @typedef {{
   *   version: string,
   *   challenge: string
   * }}
   */
  u2f.RegisterRequest;


  /**
   * Data object for a registration response.
   * @typedef {{
   *   version: string,
   *   keyHandle: string,
   *   transports: Transports,
   *   appId: string
   * }}
   */
  u2f.RegisterResponse;


  /**
   * Data object for a registered key.
   * @typedef {{
   *   version: string,
   *   keyHandle: string,
   *   transports: ?Transports,
   *   appId: ?string
   * }}
   */
  u2f.RegisteredKey;


  /**
   * Data object for a get API register response.
   * @typedef {{
   *   js_api_version: number
   * }}
   */
  u2f.GetJsApiVersionResponse;


  //Low level MessagePort API support

  /**
   * Sets up a MessagePort to the U2F extension using the
   * available mechanisms.
   * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
   */
  u2f.getMessagePort = function(callback) {
    if (typeof chrome != 'undefined' && chrome.runtime) {
      // The actual message here does not matter, but we need to get a reply
      // for the callback to run. Thus, send an empty signature request
      // in order to get a failure response.
      var msg = {
          type: u2f.MessageTypes.U2F_SIGN_REQUEST,
          signRequests: []
      };
      chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {
        if (!chrome.runtime.lastError) {
          // We are on a whitelisted origin and can talk directly
          // with the extension.
          u2f.getChromeRuntimePort_(callback);
        } else {
          // chrome.runtime was available, but we couldn't message
          // the extension directly, use iframe
          u2f.getIframePort_(callback);
        }
      });
    } else if (u2f.isAndroidChrome_()) {
      u2f.getAuthenticatorPort_(callback);
    } else if (u2f.isIosChrome_()) {
      u2f.getIosPort_(callback);
    } else {
      // chrome.runtime was not available at all, which is normal
      // when this origin doesn't have access to any extensions.
      u2f.getIframePort_(callback);
    }
  };

  /**
   * Detect chrome running on android based on the browser's useragent.
   * @private
   */
  u2f.isAndroidChrome_ = function() {
    var userAgent = navigator.userAgent;
    return userAgent.indexOf('Chrome') != -1 &&
    userAgent.indexOf('Android') != -1;
  };

  /**
   * Detect chrome running on iOS based on the browser's platform.
   * @private
   */
  u2f.isIosChrome_ = function() {
    return ["iPhone", "iPad", "iPod"].indexOf(navigator.platform) > -1;
  };

  /**
   * Connects directly to the extension via chrome.runtime.connect.
   * @param {function(u2f.WrappedChromeRuntimePort_)} callback
   * @private
   */
  u2f.getChromeRuntimePort_ = function(callback) {
    var port = chrome.runtime.connect(u2f.EXTENSION_ID,
        {'includeTlsChannelId': true});
    setTimeout(function() {
      callback(new u2f.WrappedChromeRuntimePort_(port));
    }, 0);
  };

  /**
   * Return a 'port' abstraction to the Authenticator app.
   * @param {function(u2f.WrappedAuthenticatorPort_)} callback
   * @private
   */
  u2f.getAuthenticatorPort_ = function(callback) {
    setTimeout(function() {
      callback(new u2f.WrappedAuthenticatorPort_());
    }, 0);
  };

  /**
   * Return a 'port' abstraction to the iOS client app.
   * @param {function(u2f.WrappedIosPort_)} callback
   * @private
   */
  u2f.getIosPort_ = function(callback) {
    setTimeout(function() {
      callback(new u2f.WrappedIosPort_());
    }, 0);
  };

  /**
   * A wrapper for chrome.runtime.Port that is compatible with MessagePort.
   * @param {Port} port
   * @constructor
   * @private
   */
  u2f.WrappedChromeRuntimePort_ = function(port) {
    this.port_ = port;
  };

  /**
   * Format and return a sign request compliant with the JS API version supported by the extension.
   * @param {Array<u2f.SignRequest>} signRequests
   * @param {number} timeoutSeconds
   * @param {number} reqId
   * @return {Object}
   */
  u2f.formatSignRequest_ =
    function(appId, challenge, registeredKeys, timeoutSeconds, reqId) {
    if (js_api_version === undefined || js_api_version < 1.1) {
      // Adapt request to the 1.0 JS API
      var signRequests = [];
      for (var i = 0; i < registeredKeys.length; i++) {
        signRequests[i] = {
            version: registeredKeys[i].version,
            challenge: challenge,
            keyHandle: registeredKeys[i].keyHandle,
            appId: appId
        };
      }
      return {
        type: u2f.MessageTypes.U2F_SIGN_REQUEST,
        signRequests: signRequests,
        timeoutSeconds: timeoutSeconds,
        requestId: reqId
      };
    }
    // JS 1.1 API
    return {
      type: u2f.MessageTypes.U2F_SIGN_REQUEST,
      appId: appId,
      challenge: challenge,
      registeredKeys: registeredKeys,
      timeoutSeconds: timeoutSeconds,
      requestId: reqId
    };
  };

  /**
   * Format and return a register request compliant with the JS API version supported by the extension..
   * @param {Array<u2f.SignRequest>} signRequests
   * @param {Array<u2f.RegisterRequest>} signRequests
   * @param {number} timeoutSeconds
   * @param {number} reqId
   * @return {Object}
   */
  u2f.formatRegisterRequest_ =
    function(appId, registeredKeys, registerRequests, timeoutSeconds, reqId) {
    if (js_api_version === undefined || js_api_version < 1.1) {
      // Adapt request to the 1.0 JS API
      for (var i = 0; i < registerRequests.length; i++) {
        registerRequests[i].appId = appId;
      }
      var signRequests = [];
      for (var i = 0; i < registeredKeys.length; i++) {
        signRequests[i] = {
            version: registeredKeys[i].version,
            challenge: registerRequests[0],
            keyHandle: registeredKeys[i].keyHandle,
            appId: appId
        };
      }
      return {
        type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
        signRequests: signRequests,
        registerRequests: registerRequests,
        timeoutSeconds: timeoutSeconds,
        requestId: reqId
      };
    }
    // JS 1.1 API
    return {
      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
      appId: appId,
      registerRequests: registerRequests,
      registeredKeys: registeredKeys,
      timeoutSeconds: timeoutSeconds,
      requestId: reqId
    };
  };


  /**
   * Posts a message on the underlying channel.
   * @param {Object} message
   */
  u2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {
    this.port_.postMessage(message);
  };


  /**
   * Emulates the HTML 5 addEventListener interface. Works only for the
   * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.
   * @param {string} eventName
   * @param {function({data: Object})} handler
   */
  u2f.WrappedChromeRuntimePort_.prototype.addEventListener =
      function(eventName, handler) {
    var name = eventName.toLowerCase();
    if (name == 'message' || name == 'onmessage') {
      this.port_.onMessage.addListener(function(message) {
        // Emulate a minimal MessageEvent object
        handler({'data': message});
      });
    } else {
      console.error('WrappedChromeRuntimePort only supports onMessage');
    }
  };

  /**
   * Wrap the Authenticator app with a MessagePort interface.
   * @constructor
   * @private
   */
  u2f.WrappedAuthenticatorPort_ = function() {
    this.requestId_ = -1;
    this.requestObject_ = null;
  }

  /**
   * Launch the Authenticator intent.
   * @param {Object} message
   */
  u2f.WrappedAuthenticatorPort_.prototype.postMessage = function(message) {
    var intentUrl =
      u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ +
      ';S.request=' + encodeURIComponent(JSON.stringify(message)) +
      ';end';
    document.location = intentUrl;
  };

  /**
   * Tells what type of port this is.
   * @return {String} port type
   */
  u2f.WrappedAuthenticatorPort_.prototype.getPortType = function() {
    return "WrappedAuthenticatorPort_";
  };


  /**
   * Emulates the HTML 5 addEventListener interface.
   * @param {string} eventName
   * @param {function({data: Object})} handler
   */
  u2f.WrappedAuthenticatorPort_.prototype.addEventListener = function(eventName, handler) {
    var name = eventName.toLowerCase();
    if (name == 'message') {
      var self = this;
      /* Register a callback to that executes when
       * chrome injects the response. */
      window.addEventListener(
          'message', self.onRequestUpdate_.bind(self, handler), false);
    } else {
      console.error('WrappedAuthenticatorPort only supports message');
    }
  };

  /**
   * Callback invoked  when a response is received from the Authenticator.
   * @param function({data: Object}) callback
   * @param {Object} message message Object
   */
  u2f.WrappedAuthenticatorPort_.prototype.onRequestUpdate_ =
      function(callback, message) {
    var messageObject = JSON.parse(message.data);
    var intentUrl = messageObject['intentURL'];

    var errorCode = messageObject['errorCode'];
    var responseObject = null;
    if (messageObject.hasOwnProperty('data')) {
      responseObject = /** @type {Object} */ (
          JSON.parse(messageObject['data']));
    }

    callback({'data': responseObject});
  };

  /**
   * Base URL for intents to Authenticator.
   * @const
   * @private
   */
  u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ =
    'intent:#Intent;action=com.google.android.apps.authenticator.AUTHENTICATE';

  /**
   * Wrap the iOS client app with a MessagePort interface.
   * @constructor
   * @private
   */
  u2f.WrappedIosPort_ = function() {};

  /**
   * Launch the iOS client app request
   * @param {Object} message
   */
  u2f.WrappedIosPort_.prototype.postMessage = function(message) {
    var str = JSON.stringify(message);
    var url = "u2f://auth?" + encodeURI(str);
    location.replace(url);
  };

  /**
   * Tells what type of port this is.
   * @return {String} port type
   */
  u2f.WrappedIosPort_.prototype.getPortType = function() {
    return "WrappedIosPort_";
  };

  /**
   * Emulates the HTML 5 addEventListener interface.
   * @param {string} eventName
   * @param {function({data: Object})} handler
   */
  u2f.WrappedIosPort_.prototype.addEventListener = function(eventName, handler) {
    var name = eventName.toLowerCase();
    if (name !== 'message') {
      console.error('WrappedIosPort only supports message');
    }
  };

  /**
   * Sets up an embedded trampoline iframe, sourced from the extension.
   * @param {function(MessagePort)} callback
   * @private
   */
  u2f.getIframePort_ = function(callback) {
    // Create the iframe
    var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;
    var iframe = document.createElement('iframe');
    iframe.src = iframeOrigin + '/u2f-comms.html';
    iframe.setAttribute('style', 'display:none');
    document.body.appendChild(iframe);

    var channel = new MessageChannel();
    var ready = function(message) {
      if (message.data == 'ready') {
        channel.port1.removeEventListener('message', ready);
        callback(channel.port1);
      } else {
        console.error('First event on iframe port was not "ready"');
      }
    };
    channel.port1.addEventListener('message', ready);
    channel.port1.start();

    iframe.addEventListener('load', function() {
      // Deliver the port to the iframe and initialize
      iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);
    });
  };


  //High-level JS API

  /**
   * Default extension response timeout in seconds.
   * @const
   */
  u2f.EXTENSION_TIMEOUT_SEC = 30;

  /**
   * A singleton instance for a MessagePort to the extension.
   * @type {MessagePort|u2f.WrappedChromeRuntimePort_}
   * @private
   */
  u2f.port_ = null;

  /**
   * Callbacks waiting for a port
   * @type {Array<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}
   * @private
   */
  u2f.waitingForPort_ = [];

  /**
   * A counter for requestIds.
   * @type {number}
   * @private
   */
  u2f.reqCounter_ = 0;

  /**
   * A map from requestIds to client callbacks
   * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))
   *                       |function((u2f.Error|u2f.SignResponse)))>}
   * @private
   */
  u2f.callbackMap_ = {};

  /**
   * Creates or retrieves the MessagePort singleton to use.
   * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
   * @private
   */
  u2f.getPortSingleton_ = function(callback) {
    if (u2f.port_) {
      callback(u2f.port_);
    } else {
      if (u2f.waitingForPort_.length == 0) {
        u2f.getMessagePort(function(port) {
          u2f.port_ = port;
          u2f.port_.addEventListener('message',
              /** @type {function(Event)} */ (u2f.responseHandler_));

          // Careful, here be async callbacks. Maybe.
          while (u2f.waitingForPort_.length)
            u2f.waitingForPort_.shift()(u2f.port_);
        });
      }
      u2f.waitingForPort_.push(callback);
    }
  };

  /**
   * Handles response messages from the extension.
   * @param {MessageEvent.<u2f.Response>} message
   * @private
   */
  u2f.responseHandler_ = function(message) {
    var response = message.data;
    var reqId = response['requestId'];
    if (!reqId || !u2f.callbackMap_[reqId]) {
      console.error('Unknown or missing requestId in response.');
      return;
    }
    var cb = u2f.callbackMap_[reqId];
    delete u2f.callbackMap_[reqId];
    cb(response['responseData']);
  };

  /**
   * Dispatches an array of sign requests to available U2F tokens.
   * If the JS API version supported by the extension is unknown, it first sends a
   * message to the extension to find out the supported API version and then it sends
   * the sign request.
   * @param {string=} appId
   * @param {string=} challenge
   * @param {Array<u2f.RegisteredKey>} registeredKeys
   * @param {function((u2f.Error|u2f.SignResponse))} callback
   * @param {number=} opt_timeoutSeconds
   */
  u2f.sign = function(appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
    if (js_api_version === undefined) {
      // Send a message to get the extension to JS API version, then send the actual sign request.
      u2f.getApiVersion(
          function (response) {
            js_api_version = response['js_api_version'] === undefined ? 0 : response['js_api_version'];
            console.log("Extension JS API Version: ", js_api_version);
            u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
          });
    } else {
      // We know the JS API version. Send the actual sign request in the supported API version.
      u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
    }
  };

  /**
   * Dispatches an array of sign requests to available U2F tokens.
   * @param {string=} appId
   * @param {string=} challenge
   * @param {Array<u2f.RegisteredKey>} registeredKeys
   * @param {function((u2f.Error|u2f.SignResponse))} callback
   * @param {number=} opt_timeoutSeconds
   */
  u2f.sendSignRequest = function(appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
    u2f.getPortSingleton_(function(port) {
      var reqId = ++u2f.reqCounter_;
      u2f.callbackMap_[reqId] = callback;
      var timeoutSeconds = (typeof opt_timeoutSeconds !== 'undefined' ?
          opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC);
      var req = u2f.formatSignRequest_(appId, challenge, registeredKeys, timeoutSeconds, reqId);
      port.postMessage(req);
    });
  };

  /**
   * Dispatches register requests to available U2F tokens. An array of sign
   * requests identifies already registered tokens.
   * If the JS API version supported by the extension is unknown, it first sends a
   * message to the extension to find out the supported API version and then it sends
   * the register request.
   * @param {string=} appId
   * @param {Array<u2f.RegisterRequest>} registerRequests
   * @param {Array<u2f.RegisteredKey>} registeredKeys
   * @param {function((u2f.Error|u2f.RegisterResponse))} callback
   * @param {number=} opt_timeoutSeconds
   */
  u2f.register = function(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
    if (js_api_version === undefined) {
      // Send a message to get the extension to JS API version, then send the actual register request.
      u2f.getApiVersion(
          function (response) {
            js_api_version = response['js_api_version'] === undefined ? 0: response['js_api_version'];
            console.log("Extension JS API Version: ", js_api_version);
            u2f.sendRegisterRequest(appId, registerRequests, registeredKeys,
                callback, opt_timeoutSeconds);
          });
    } else {
      // We know the JS API version. Send the actual register request in the supported API version.
      u2f.sendRegisterRequest(appId, registerRequests, registeredKeys,
          callback, opt_timeoutSeconds);
    }
  };

  /**
   * Dispatches register requests to available U2F tokens. An array of sign
   * requests identifies already registered tokens.
   * @param {string=} appId
   * @param {Array<u2f.RegisterRequest>} registerRequests
   * @param {Array<u2f.RegisteredKey>} registeredKeys
   * @param {function((u2f.Error|u2f.RegisterResponse))} callback
   * @param {number=} opt_timeoutSeconds
   */
  u2f.sendRegisterRequest = function(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
    u2f.getPortSingleton_(function(port) {
      var reqId = ++u2f.reqCounter_;
      u2f.callbackMap_[reqId] = callback;
      var timeoutSeconds = (typeof opt_timeoutSeconds !== 'undefined' ?
          opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC);
      var req = u2f.formatRegisterRequest_(
          appId, registeredKeys, registerRequests, timeoutSeconds, reqId);
      port.postMessage(req);
    });
  };


  /**
   * Dispatches a message to the extension to find out the supported
   * JS API version.
   * If the user is on a mobile phone and is thus using Google Authenticator instead
   * of the Chrome extension, don't send the request and simply return 0.
   * @param {function((u2f.Error|u2f.GetJsApiVersionResponse))} callback
   * @param {number=} opt_timeoutSeconds
   */
  u2f.getApiVersion = function(callback, opt_timeoutSeconds) {
   u2f.getPortSingleton_(function(port) {
     // If we are using Android Google Authenticator or iOS client app,
     // do not fire an intent to ask which JS API version to use.
     if (port.getPortType) {
       var apiVersion;
       switch (port.getPortType()) {
         case 'WrappedIosPort_':
         case 'WrappedAuthenticatorPort_':
           apiVersion = 1.1;
           break;

         default:
           apiVersion = 0;
           break;
       }
       callback({ 'js_api_version': apiVersion });
       return;
     }
      var reqId = ++u2f.reqCounter_;
      u2f.callbackMap_[reqId] = callback;
      var req = {
        type: u2f.MessageTypes.U2F_GET_API_VERSION_REQUEST,
        timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?
            opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),
        requestId: reqId
      };
      port.postMessage(req);
    });
  };
})();


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* global Uint8Array */

!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  var fn = {};

  /**
   * Light weight hashing algorithm that hashes string into an integer between 0 and 4294967295
   * Not recommended for data set of size greater than 10000
   * https://www.npmjs.com/package/string-hash
   *
   * @param str the string to be hashed
   * @returns string hash of integer type
   */
  fn.getStringHash = function (str) {
    var hash = 5381,
        i = str.length;
    while (i) {
      hash = hash * 33 ^ str.charCodeAt(--i);
    }
    return hash >>> 0;
  };

  /**
   * Converts any url safe characters in a base64 string to regular base64 characters
   * @param str base64 string that might contain url safe characters
   * @returns base64 formatted string
   */
  fn.base64UrlSafeToBase64 = function (str) {
    return str.replace(new RegExp('_', 'g'), '/').replace(new RegExp('-', 'g'), '+');
  };

  /**
   * Converts an ArrayBuffer object that contains binary data to base64 encoded string
   * @param bin ArrayBuffer object
   * @returns base64 encoded string
   */
  fn.binToStr = function (bin) {
    return btoa(new Uint8Array(bin).reduce(function (s, byte) {
      return s + String.fromCharCode(byte);
    }, ''));
  };

  /**
   * Converts base64 string to binary data view
   * @param str in base64 or base64UrlSafe format
   * @returns converted Uint8Array view of binary data
   */
  fn.strToBin = function (str) {
    return Uint8Array.from(atob(this.base64UrlSafeToBase64(str)), function (c) {
      return c.charCodeAt(0);
    });
  };

  return fn;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(12), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, RouterUtil, FactorUtil) {

  var _ = Okta._,
      cardinalityTextTpl = Okta.tpl('<span class="factor-cardinality">{{cardinalityText}}</span>');

  var FactorRow = Okta.View.extend({
    className: 'enroll-factor-row clearfix',

    template: '\
      <div class="enroll-factor-icon-container">\
        <div class="factor-icon enroll-factor-icon {{iconClassName}}">\
        </div>\
      </div>\
      <div class="enroll-factor-description">\
        <h3 class="enroll-factor-label">{{factorLabel}}</h3>\
        {{#if factorDescription}}\
          <p>{{factorDescription}}</p>\
        {{/if}}\
        <div class="enroll-factor-button"></div>\
      </div>\
    ',

    attributes: function attributes() {
      return { 'data-se': this.model.get('factorName') };
    },

    children: function children() {
      var children = [],
          enrolled = this.model.get('enrolled'),
          required = this.model.get('required'),
          cardinality = this.model.get('cardinality');

      if (this.options.showInlineSetupButton) {
        return [[Okta.createButton({
          className: 'button',
          title: this.getSetupButtonText(),
          click: function click() {
            this.options.appState.trigger('navigate', RouterUtil.createEnrollFactorUrl(this.model.get('provider'), this.model.get('factorType')));
          }
        }), '.enroll-factor-button']];
      } else if (enrolled) {
        children.push(['<span class="icon success-16-green"></span>', '.enroll-factor-label']);
      } else if (required) {
        children.push(['<span class="icon success-16-gray"></span>', '.enroll-factor-label']);
      }

      var cardinalityText = FactorUtil.getCardinalityText(enrolled, required, cardinality);
      if (cardinalityText) {
        children.push([cardinalityTextTpl({ cardinalityText: cardinalityText }), '.enroll-factor-description']);
      }
      return children;
    },

    minimize: function minimize() {
      this.$el.addClass('enroll-factor-row-min');
    },

    maximize: function maximize() {
      this.$el.removeClass('enroll-factor-row-min');
    },

    getSetupButtonText: function getSetupButtonText() {
      return this.model.get('additionalEnrollment') ? Okta.loc('enroll.choices.setup.another', 'login') : Okta.loc('enroll.choices.setup', 'login');
    }
  });

  return Okta.ListView.extend({

    className: 'enroll-factor-list',

    item: FactorRow,

    itemSelector: '.list-content',

    template: '\
      {{#if listTitle}}\
        <div class="list-title">{{listTitle}}</div>\
      {{/if}}\
      <div class="list-content"></div>\
    ',

    getTemplateData: function getTemplateData() {
      var json = Okta.ListView.prototype.getTemplateData.call(this);
      _.extend(json, this);
      return json;
    },

    postRender: function postRender() {
      if (this.options.minimize) {
        this.invoke('minimize');
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  var _ = Okta._;
  var TextBox = Okta.internal.views.forms.inputs.TextBox;


  return TextBox.extend({

    template: Okta.Handlebars.compile('\
      <span class="okta-form-label-inline o-form-label-inline">{{countryCallingCode}}</span>\
      <span class="okta-form-input-field input-fix o-form-control">\
        <input type="{{type}}" placeholder="{{placeholder}}" name="{{name}}" \
          id="{{inputId}}" value="{{value}}" autocomplete="off"/>\
      </span>\
    '),

    initialize: function initialize() {
      this.listenTo(this.model, 'change:countryCallingCode', function () {
        this.$('.o-form-label-inline').text(this.model.get('countryCallingCode'));
      });
    },

    preRender: function preRender() {
      this.options.countryCallingCode = this.model.get('countryCallingCode');
    },

    postRender: function postRender() {
      // This is a hack - once inputGroups are done, get rid of it!!
      this.$el.removeClass('input-fix o-form-control');
      _.defer(_.bind(function () {
        this.$el.parent().addClass('o-form-input-group');
      }, this));
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2018-2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, Footer) {

  var _ = Okta._;
  var Util = Okta.internal.util.Util;


  return FormController.extend({
    className: 'enroll-custom-factor',
    Model: {
      local: {
        provider: 'string',
        factorType: 'string'
      },
      save: function save() {
        var _this = this;

        return this.manageTransaction(function (transaction, setTransaction) {
          var factor = _.findWhere(transaction.factors, {
            provider: _this.get('provider'),
            factorType: _this.get('factorType')
          });
          return factor.enroll().then(function (trans) {
            setTransaction(trans);
            var url = _this.appState.get('enrollCustomFactorRedirectUrl');
            if (url !== null) {
              Util.redirect(url);
            }
          }).fail(function (err) {
            throw err;
          });
        });
      }
    },

    Form: function Form() {
      var factors = this.options.appState.get('factors');
      var factor = factors.findWhere({
        provider: this.options.provider,
        factorType: this.options.factorType
      });
      var vendorName = factor.get('vendorName');
      var subtitle = Okta.loc('enroll.customFactor.subtitle', 'login', [vendorName]);
      var saveText = Okta.loc('enroll.customFactor.save', 'login');
      return {
        autoSave: true,
        title: vendorName,
        subtitle: subtitle,
        save: saveText
      };
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate')) {
        return true;
      }
    },

    initialize: function initialize() {
      this.model.set('provider', this.options.provider);
      this.model.set('factorType', this.options.factorType);
    },

    Footer: Footer

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(8), __webpack_require__(2), __webpack_require__(5), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorUtil, FormType, Util, TextBox) {

  var _ = Okta._;

  var form = {
    title: function title() {
      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
      return Okta.loc('enroll.totp.title', 'login', [factorName]);
    },
    subtitle: _.partial(Okta.loc, 'enroll.totp.enterCode', 'login'),
    autoSave: true,
    noButtonBar: true,
    attributes: { 'data-se': 'step-sendcode' },

    formChildren: function formChildren() {
      return [FormType.Input({
        label: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
        'label-top': true,
        explain: Util.createInputExplain('mfa.challenge.enterCode.tooltip', 'mfa.challenge.enterCode.placeholder', 'login'),
        'explain-top': true,
        name: 'passCode',
        input: TextBox,
        type: 'tel'
      }), FormType.Toolbar({
        noCancelButton: true,
        save: Okta.loc('oform.verify', 'login')
      })];
    }
  };

  return form;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums) {
  var Util = Okta.internal.util.Util;


  return Okta.View.extend({
    template: '\
      {{#if passwordWarn}}\
        <a href="#" class="link help js-skip" data-se="skip-link">\
          {{i18n code="password.expiring.later" bundle="login"}}\
        </a>\
      {{/if}}\
      <a href="#" class="link help goto js-signout" data-se="signout-link">{{i18n code="signout" bundle="login"}}</a>\
    ',
    className: 'auth-footer clearfix',
    events: {
      'click .js-signout': function clickJsSignout(e) {
        e.preventDefault();
        var self = this;
        this.model.doTransaction(function (transaction) {
          return transaction.cancel();
        }).then(function () {
          if (self.settings.get('signOutLink')) {
            Util.redirect(self.settings.get('signOutLink'));
          } else {
            self.state.set('navigateDir', Enums.DIRECTION_BACK);
            self.options.appState.trigger('navigate', '');
          }
        });
      },
      'click .js-skip': function clickJsSkip(e) {
        e.preventDefault();
        this.model.doTransaction(function (transaction) {
          return transaction.skip();
        });
      }
    },
    getTemplateData: function getTemplateData() {
      return { passwordWarn: this.options.appState.get('isPwdExpiringSoon') };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({
    template: '\
      <div class="infobox">\
        <span class="icon info-16"></span>\
        <p>{{i18n code="contact.support" bundle="login" arguments="helpSupportNumber"}}</p>\
      </div>',
    className: 'contact-support',

    getTemplateData: function getTemplateData() {
      return this.settings.pick('helpSupportNumber');
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/* eslint max-statements: [2, 23],  max-depth: [2, 3], complexity: [2, 13] */
/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, TextBox) {

  var _ = Okta._;
  var SchemaFormFactory = Okta.internal.views.forms.helpers.SchemaFormFactory;


  var getParts = function getParts(username) {
    var usernameArr = username.split('');
    var minPartsLength = 3;
    var userNameParts = [];
    var delimiters = [',', '.', '-', '_', '#', '@'];
    var userNamePart = '';

    _.each(usernameArr, function (part) {
      if (delimiters.indexOf(part) === -1) {
        userNamePart += part;
      } else {
        if (userNamePart.length >= minPartsLength) {
          userNameParts.push(_.clone(userNamePart));
        }
        userNamePart = '';
      }
    });
    if (userNamePart.length >= minPartsLength) {
      userNameParts.push(_.clone(userNamePart));
    }
    return userNameParts.filter(Boolean);
  };

  var passwordContainsFormField = function passwordContainsFormField(formField, password) {
    if (!formField) {
      return false;
    }
    formField = formField.toLowerCase();
    password = password.toLowerCase();
    var formFieldArr = getParts(formField);
    //check if each formField part contains password
    for (var i = 0; i < formFieldArr.length; i++) {
      var formFieldPart = formFieldArr[i];
      if (password.indexOf(formFieldPart) !== -1) {
        return true;
      }
    }
    return false;
  };

  var checkSubSchema = function checkSubSchema(subSchema, value, model) {
    var minLength = subSchema.get('minLength');
    var maxLength = subSchema.get('maxLength');
    var regex = subSchema.get('format');

    if (_.isNumber(minLength)) {
      if (value.length < minLength) {
        return false;
      }
    }

    if (_.isNumber(maxLength)) {
      if (value.length > maxLength) {
        return false;
      }
    }
    var password = value;
    if (_.isString(regex)) {
      // call passwordContainsFormField if regex is userName, firstName, lastName
      if (regex === '^[#/userName]' || regex === '^[#/firstName]' || regex === '^[#/lastName]') {
        var fieldName = regex.split('^[#/')[1].split(']')[0];
        var fieldValue = model.get(fieldName);
        if (fieldName === 'userName') {
          // with email as login enabled, we only have email populated
          // Therefore we fallback and run validation with email attribute.
          fieldValue = model.has('userName') ? model.get('userName') : model.get('email');
        }
        return !passwordContainsFormField(fieldValue, password);
      } else {
        if (!new RegExp(regex).test(value)) {
          return false;
        }
      }
    }

    return true;
  };

  var checkSubSchemas = function checkSubSchemas(fieldName, model, subSchemas, showError) {
    var value = model.get(fieldName);
    if (!_.isString(value)) {
      return;
    }

    subSchemas.each(function (subSchema, index) {
      var ele = Okta.$('#subschemas-' + fieldName + ' .subschema-' + index);
      //hide password complexity if no password
      if (value) {
        ele.children('p').removeClass('default-schema');
      } else {
        ele.children('p').addClass('default-schema');
      }
      ele.removeClass('subschema-satisfied subschema-unsatisfied subschema-error');
      if (checkSubSchema(subSchema, value, model)) {
        ele.addClass('subschema-satisfied');
        ele.find('p span').removeClass('error error-16-small');
        ele.find('p span').addClass('confirm-16');
      } else {
        if (showError) {
          ele.find('p span').removeClass('confirm-16');
          ele.find('p span').addClass('error error-16-small');
          ele.addClass('subschema-error subschema-unsatisfied');
        }
      }
    });
  };

  var fnCreateInputOptions = function fnCreateInputOptions(schemaProperty) {
    var inputOptions = SchemaFormFactory.createInputOptions(schemaProperty);
    if (inputOptions.type === 'select') {
      inputOptions = _.extend(inputOptions, {
        label: schemaProperty.get('title')
      });
    } else {
      var placeholder = schemaProperty.get('title');
      if (schemaProperty.get('required')) {
        placeholder += ' *';
      }
      inputOptions = _.extend(inputOptions, {
        label: false,
        'label-top': true,
        placeholder: placeholder
      });
    }

    var fieldName = schemaProperty.get('name');
    switch (fieldName) {
      case 'userName':
        inputOptions.input = TextBox;
        inputOptions.params = {
          'icon': 'person-16-gray'
        };
        break;
      case 'password':
        inputOptions.type = 'password';
        inputOptions.input = TextBox;
        inputOptions.params = {
          'icon': 'remote-lock-16'
        };
    }

    var subSchemas = schemaProperty.get('subSchemas');
    if (subSchemas) {
      inputOptions.events = {
        'input': function input() {
          checkSubSchemas(fieldName, this.model, subSchemas, true);
        },
        'focusout': function focusout() {
          checkSubSchemas(fieldName, this.model, subSchemas, true);
        },
        'change:userName': function changeUserName() {
          checkSubSchemas(fieldName, this.model, subSchemas, true);
        },
        'change:firstName': function changeFirstName() {
          checkSubSchemas(fieldName, this.model, subSchemas, true);
        },
        'change:lastName': function changeLastName() {
          checkSubSchemas(fieldName, this.model, subSchemas, true);
        },
        'change:email': function changeEmail() {
          checkSubSchemas(fieldName, this.model, subSchemas, true);
        }
      };
    }

    return inputOptions;
  };

  return {
    createInputOptions: fnCreateInputOptions,
    getUsernameParts: getParts,
    passwordContainsFormField: passwordContainsFormField
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _okta = __webpack_require__(0);

var factorData = {
  'email': {
    label: (0, _okta.loc)('factor.email', 'login'),
    description: '',
    iconClassName: 'mfa-okta-email'
  },

  'password': {
    label: (0, _okta.loc)('factor.password', 'login'),
    description: '',
    iconClassName: 'mfa-okta-password'
  }
}; /*!
    * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
    * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
    *
    * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *
    * See the License for the specific language governing permissions and limitations under the License.
    */


var getFactorData = function getFactorData(factorName) {
  return factorData[factorName];
};

module.exports = {
  getFactorData: getFactorData
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _HeaderBeacon = __webpack_require__(131);

var _HeaderBeacon2 = _interopRequireDefault(_HeaderBeacon);

var _Animations = __webpack_require__(56);

var _Animations2 = _interopRequireDefault(_Animations);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _okta.View.extend({
  HeaderBeacon: _HeaderBeacon2.default,

  initialize: function initialize() {
    // add beacon
    this.add(this.HeaderBeacon);
  },
  postRender: function postRender() {
    (0, _okta.$)('#okta-sign-in').removeClass('no-beacon');

    // animate beacon
    var selector = '[data-type="beacon-container"]',
        container = this.$el.find(selector);
    _Animations2.default.explode(container);
  }
});

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _okta = __webpack_require__(0);

var BeaconView = _okta.View.extend({

  template: '\
    <div data-type="beacon-container" class="beacon-container">\
      <div class="beacon-blank auth-beacon">\
        <div class="beacon-blank js-blank-beacon-border auth-beacon-border"></div>\
      </div>\
      <div class="bg-helper auth-beacon auth-beacon-factor {{className}}" data-se="factor-beacon">\
        <div class="okta-sign-in-beacon-border auth-beacon-border"></div>\
      </div>\
      <div data-type="factor-types-dropdown" class="factors-dropdown-wrap"></div>\
    </div >\
    ',

  getTemplateData: function getTemplateData() {
    return { className: this.getBeaconClassName() || '' };
  },
  getBeaconClassName: function getBeaconClassName() {
    return 'undefined-user';
  }
}); /*!
     * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
     * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
     *
     * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     *
     * See the License for the specific language governing permissions and limitations under the License.
     */


module.exports = BeaconView;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseFooter = __webpack_require__(31);

var _BaseFooter2 = _interopRequireDefault(_BaseFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseForm2.default.extend({
  title: function title() {
    var msg = this.options.appState.get('terminal').message || {};
    return msg.message || 'You can close this window';
  },

  noButtonBar: true,
  postRender: function postRender() {
    _BaseForm2.default.prototype.postRender.apply(this, arguments);
    this.$el.addClass('terminal-state');
  }
});

var Footer = _BaseFooter2.default.extend({
  links: function links() {
    return [{
      'type': 'link',
      'label': 'Back to sign in',
      'name': 'back',
      'href': '/'
    }];
  }
});

exports.default = _BaseView2.default.extend({
  Body: Body,
  Footer: Footer
});

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  title: function title() {
    return 'Email link (' + this.options.appState.get('factorProfile').email + ')';
  }
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BaseFactorView = __webpack_require__(60);

var _BaseFactorView2 = _interopRequireDefault(_BaseFactorView);

var _TerminalView = __webpack_require__(132);

var _TerminalView2 = _interopRequireDefault(_TerminalView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _BaseFactorView2.default.extend({
  Body: _TerminalView2.default.prototype.Body,
  Footer: _TerminalView2.default.prototype.Footer
});

/***/ }),
/* 135 */
/***/ (function(module, exports) {

var __self__ = (function (root) {
function F() {
this.fetch = false;
this.DOMException = root.DOMException
}
F.prototype = root;
return new F();
})(typeof self !== 'undefined' ? self : this);
(function(self) {

var irrelevant = (function (exports) {
  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new exports.DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  return exports;

}({}));
})(__self__);
delete __self__.fetch.polyfill
exports = __self__.fetch // To enable: import fetch from 'cross-fetch'
exports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = __self__.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = __self__.Headers
exports.Request = __self__.Request
exports.Response = __self__.Response
module.exports = exports


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

var AuthSdkError = __webpack_require__(27);

// storage must have getItem and setItem
function storageBuilder(webstorage, storageName) {
  if (typeof storageName !== 'string' || !storageName.length) {
    throw new AuthSdkError('"storageName" is required');
  }

  function getStorage() {
    var storageString = webstorage.getItem(storageName);
    storageString = storageString || '{}';
    try {
      return JSON.parse(storageString);
    } catch(e) {
      throw new AuthSdkError('Unable to parse storage string: ' + storageName);
    }
  }

  function setStorage(storage) {
    try {
      var storageString = JSON.stringify(storage);
      webstorage.setItem(storageName, storageString);
    } catch(e) {
      throw new AuthSdkError('Unable to set storage: ' + storageName);
    }
  }

  function clearStorage(key) {
    if (!key) {
      setStorage({});
    }
    var storage = getStorage();
    delete storage[key];
    setStorage(storage);
  }

  function updateStorage(key, value) {
    var storage = getStorage();
    storage[key] = value;
    setStorage(storage);
  }

  return {
    getStorage: getStorage,
    setStorage: setStorage,
    clearStorage: clearStorage,
    updateStorage: updateStorage
  };
}

module.exports = storageBuilder;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

/* eslint-disable complexity, max-statements */
var http              = __webpack_require__(38);
var util              = __webpack_require__(15);
var Q                 = __webpack_require__(4);
var AuthSdkError      = __webpack_require__(27);
var AuthPollStopError = __webpack_require__(326);
var config            = __webpack_require__(37);

function addStateToken(res, options) {
  var builtArgs = {};
  util.extend(builtArgs, options);

  // Add the stateToken if one isn't passed and we have one
  if (!builtArgs.stateToken && res.stateToken) {
    builtArgs.stateToken = res.stateToken;
  }

  return builtArgs;
}

function getStateToken(res) {
  return addStateToken(res);
}

function transactionStatus(sdk, args) {
  args = addStateToken(sdk, args);
  return http.post(sdk, sdk.options.url + '/api/v1/authn', args);
}

function resumeTransaction(sdk, args) {
  if (!args || !args.stateToken) {
    var stateToken = sdk.tx.exists._get(config.STATE_TOKEN_KEY_NAME);
    if (stateToken) {
      args = {
        stateToken: stateToken
      };
    } else {
      return Q.reject(new AuthSdkError('No transaction to resume'));
    }
  }
  return sdk.tx.status(args)
    .then(function(res) {
      return new AuthTransaction(sdk, res);
    });
}

function introspect (sdk, args) {
  if (!args || !args.stateToken) {
    var stateToken = sdk.tx.exists._get(config.STATE_TOKEN_KEY_NAME);
    if (stateToken) {
      args = {
        stateToken: stateToken
      };
    } else {
      return Q.reject(new AuthSdkError('No transaction to evaluate'));
    }
  }
  return transactionStep(sdk, args)
    .then(function (res) {
      return new AuthTransaction(sdk, res);
    });
}

function transactionStep(sdk, args) {
  args = addStateToken(sdk, args);
  return http.post(sdk, sdk.options.url + '/idp/idx/introspect', args);
}

function transactionExists(sdk) {
  // We have a cookie state token
  return !!sdk.tx.exists._get(config.STATE_TOKEN_KEY_NAME);
}

function postToTransaction(sdk, url, args, options) {
  return http.post(sdk, url, args, options)
    .then(function(res) {
      return new AuthTransaction(sdk, res);
    });
}

function getPollFn(sdk, res, ref) {
  return function (options) {
    var delay;
    var rememberDevice;
    var autoPush;
    var transactionCallBack;

    if (util.isNumber(options)) {
      delay = options;
    } else if (util.isObject(options)) {
      delay = options.delay;
      rememberDevice = options.rememberDevice;
      autoPush = options.autoPush;
      transactionCallBack = options.transactionCallBack;
    }

    if (!delay && delay !== 0) {
      delay = config.DEFAULT_POLLING_DELAY;
    }

    // Get the poll function
    var pollLink = util.getLink(res, 'next', 'poll');
    function pollFn() {
      var opts = {};
      if (typeof autoPush === 'function') {
        try {
          opts.autoPush = !!autoPush();
        }
        catch (e) {
          return Q.reject(new AuthSdkError('AutoPush resulted in an error.'));
        }
      }
      else if (autoPush !== undefined && autoPush !== null) {
        opts.autoPush = !!autoPush;
      }
      if (typeof rememberDevice === 'function') {
        try {
          opts.rememberDevice = !!rememberDevice();
        }
        catch (e) {
          return Q.reject(new AuthSdkError('RememberDevice resulted in an error.'));
        }
      }
      else if (rememberDevice !== undefined && rememberDevice !== null) {
        opts.rememberDevice = !!rememberDevice;
      }

      var href = pollLink.href + util.toQueryParams(opts);
      return http.post(sdk, href, getStateToken(res), {
        saveAuthnState: false  
      });
    }

    ref.isPolling = true;

    var retryCount = 0;
    var recursivePoll = function () {
      // If the poll was manually stopped during the delay
      if (!ref.isPolling) {
        return Q.reject(new AuthPollStopError());
      }
      return pollFn()
        .then(function (pollRes) {
          // Reset our retry counter on success
          retryCount = 0;

          // If we're still waiting
          if (pollRes.factorResult && pollRes.factorResult === 'WAITING') {

            // If the poll was manually stopped while the pollFn was called
            if (!ref.isPolling) {
              throw new AuthPollStopError();
            }

            if (typeof transactionCallBack === 'function') {
              transactionCallBack(pollRes);
            }

            // Continue poll
            return Q.delay(delay)
              .then(recursivePoll);

          } else {
            // Any non-waiting result, even if polling was stopped
            // during a request, will return
            ref.isPolling = false;
            return new AuthTransaction(sdk, pollRes);
          }
        })
        .fail(function(err) {
          // Exponential backoff, up to 16 seconds
          if (err.xhr &&
              (err.xhr.status === 0 || err.xhr.status === 429) &&
              retryCount <= 4) {
            var delayLength = Math.pow(2, retryCount) * 1000;
            retryCount++;
            return Q.delay(delayLength)
              .then(recursivePoll);
          }
          throw err;
        });
    };
    return recursivePoll()
      .fail(function(err) {
        ref.isPolling = false;
        throw err;
      });
  };
}

function link2fn(sdk, res, obj, link, ref) {
  if (Array.isArray(link)) {
    return function(name, opts) {
      if (!name) {
        throw new AuthSdkError('Must provide a link name');
      }

      var lk = util.find(link, {name: name});
      if (!lk) {
        throw new AuthSdkError('No link found for that name');
      }

      return link2fn(sdk, res, obj, lk, ref)(opts);
    };

  } else if (link.hints &&
      link.hints.allow &&
      link.hints.allow.length === 1) {
    var method = link.hints.allow[0];
    switch (method) {

      case 'GET':
        return function() {
          return http.get(sdk, link.href);
        };

      case 'POST':
        return function(opts) {
          if (ref && ref.isPolling) {
            ref.isPolling = false;
          }

          var data = addStateToken(res, opts);

          if (res.status === 'MFA_ENROLL' || res.status === 'FACTOR_ENROLL') {
            // Add factorType and provider
            util.extend(data, {
              factorType: obj.factorType,
              provider: obj.provider
            });
          }

          var params = {};
          var autoPush = data.autoPush;
          if (autoPush !== undefined) {
            if (typeof autoPush === 'function') {
              try {
                params.autoPush = !!autoPush();
              }
              catch (e) {
                return Q.reject(new AuthSdkError('AutoPush resulted in an error.'));
              }
            }
            else if (autoPush !== null) {
              params.autoPush = !!autoPush;
            }
            data = util.omit(data, 'autoPush');
          }

          var rememberDevice = data.rememberDevice;
          if (rememberDevice !== undefined) {
            if (typeof rememberDevice === 'function') {
              try {
                params.rememberDevice = !!rememberDevice();
              }
              catch (e) {
                return Q.reject(new AuthSdkError('RememberDevice resulted in an error.'));
              }
            }
            else if (rememberDevice !== null) {
              params.rememberDevice = !!rememberDevice;
            }
            data = util.omit(data, 'rememberDevice');

          } else if (data.profile &&
                    data.profile.updatePhone !== undefined) {
            if (data.profile.updatePhone) {
              params.updatePhone = true;
            }
            data.profile = util.omit(data.profile, 'updatePhone');
          }
          var href = link.href + util.toQueryParams(params);
          return postToTransaction(sdk, href, data);
        };
    }
  }
}

function links2fns(sdk, res, obj, ref) {
  var fns = {};
  for (var linkName in obj._links) {
    if (!obj._links.hasOwnProperty(linkName)) {
      continue;
    }

    var link = obj._links[linkName];
    
    if (linkName === 'next') {
      linkName = link.name;
    }

    if (link.type) {
      fns[linkName] = link;
      continue;
    }

    switch (linkName) {
      // poll is only found at the transaction
      // level, so we don't need to pass the link
      case 'poll':
        fns.poll = getPollFn(sdk, res, ref);
        break;

      default:
        var fn = link2fn(sdk, res, obj, link, ref);
        if (fn) {
          fns[linkName] = fn;
        }
    }
  }
  return fns;
}

function flattenEmbedded(sdk, res, obj, ref) {
  obj = obj || res;
  obj = util.clone(obj);

  if (Array.isArray(obj)) {
    var objArr = [];
    for (var o = 0, ol = obj.length; o < ol; o++) {
      objArr.push(flattenEmbedded(sdk, res, obj[o], ref));
    }
    return objArr;
  }

  var embedded = obj._embedded || {};

  for (var key in embedded) {
    if (!embedded.hasOwnProperty(key)) {
      continue;
    }

    // Flatten any nested _embedded objects
    if (util.isObject(embedded[key]) || Array.isArray(embedded[key])) {
      embedded[key] = flattenEmbedded(sdk, res, embedded[key], ref);
    }
  }

  // Convert any links on the embedded object
  var fns = links2fns(sdk, res, obj, ref);
  util.extend(embedded, fns);

  obj = util.omit(obj, '_embedded', '_links');
  util.extend(obj, embedded);
  return obj;
}

function AuthTransaction(sdk, res) {
  if (res) {
    this.data = res;
    util.extend(this, flattenEmbedded(sdk, res, res, {}));
    delete this.stateToken;

    // RECOVERY_CHALLENGE has some responses without _links.
    // Without _links, we emulate cancel to make it intuitive
    // to return to the starting state. We may remove this
    // when OKTA-75434 is resolved
    if (res.status === 'RECOVERY_CHALLENGE' && !res._links) {
      this.cancel = function() {
        return new Q(new AuthTransaction(sdk));
      };
    }
  }
}

module.exports = {
  transactionStatus: transactionStatus,
  resumeTransaction: resumeTransaction,
  transactionExists: transactionExists,
  postToTransaction: postToTransaction,
  introspect: introspect,
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

/* eslint-disable complexity, max-statements */
var http = __webpack_require__(38);
var util = __webpack_require__(15);
var storageUtil = __webpack_require__(44);
var AuthSdkError = __webpack_require__(27);

var httpCache = storageUtil.getHttpCache();

function generateState() {
  return util.genRandomString(64);
}

function generateNonce() {
  return util.genRandomString(64);
}

function isToken(obj) {
  if (obj &&
      (obj.accessToken || obj.idToken) &&
      Array.isArray(obj.scopes)) {
    return true;
  }
  return false;
}

function addListener(eventTarget, name, fn) {
  if (eventTarget.addEventListener) {
    eventTarget.addEventListener(name, fn);
  } else {
    eventTarget.attachEvent('on' + name, fn);
  }
}

function removeListener(eventTarget, name, fn) {
  if (eventTarget.removeEventListener) {
    eventTarget.removeEventListener(name, fn);
  } else {
    eventTarget.detachEvent('on' + name, fn);
  }
}

function loadFrame(src) {
  var iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  iframe.src = src;

  return document.body.appendChild(iframe);
}

function loadPopup(src, options) {
  var title = options.popupTitle || 'External Identity Provider User Authentication';
  var appearance = 'toolbar=no, scrollbars=yes, resizable=yes, ' +
    'top=100, left=500, width=600, height=600';

  if (util.isIE11OrLess()) {
    // IE<=11 doesn't fully support postMessage at time of writting.
    // the following simple solution happened to solve the issue
    // without adding another proxy layer which makes flow more complecated.
    var winEl = window.open('/', title, appearance);
    winEl.location.href = src;
    return winEl;
  } else {
    return window.open(src, title, appearance);
  }
}

function getWellKnown(sdk, issuer) {
  return http.get(sdk, (issuer || sdk.options.url) + '/.well-known/openid-configuration', {
    cacheResponse: true
  });
}

function getKey(sdk, issuer, kid) {
  return getWellKnown(sdk, issuer)
  .then(function(wellKnown) {
    var jwksUri = wellKnown['jwks_uri'];

    // Check our kid against the cached version (if it exists and isn't expired)
    var cacheContents = httpCache.getStorage();
    var cachedResponse = cacheContents[jwksUri];
    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {
      var cachedKey = util.find(cachedResponse.response.keys, {
        kid: kid
      });

      if (cachedKey) {
        return cachedKey;
      }
    }

    // Remove cache for the key
    httpCache.clearStorage(jwksUri);

    // Pull the latest keys if the key wasn't in the cache
    return http.get(sdk, jwksUri, {
      cacheResponse: true
    })
    .then(function(res) {
      var key = util.find(res.keys, {
        kid: kid
      });

      if (key) {
        return key;
      }

      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\'s keys');
    });
  });
}

function validateClaims(sdk, claims, validationParams) {
  var aud = validationParams.clientId;
  var iss = validationParams.issuer;
  var nonce = validationParams.nonce;

  if (!claims || !iss || !aud) {
    throw new AuthSdkError('The jwt, iss, and aud arguments are all required');
  }

  if (nonce && claims.nonce !== nonce) {
    throw new AuthSdkError('OAuth flow response nonce doesn\'t match request nonce');
  }

  var now = Math.floor(Date.now()/1000);

  if (claims.iss !== iss) {
    throw new AuthSdkError('The issuer [' + claims.iss + '] ' +
      'does not match [' + iss + ']');
  }

  if (claims.aud !== aud) {
    throw new AuthSdkError('The audience [' + claims.aud + '] ' +
      'does not match [' + aud + ']');
  }

  if (claims.iat > claims.exp) {
    throw new AuthSdkError('The JWT expired before it was issued');
  }

  if ((now - sdk.options.maxClockSkew) > claims.exp) {
    throw new AuthSdkError('The JWT expired and is no longer valid');
  }

  if (claims.iat > (now + sdk.options.maxClockSkew)) {
    throw new AuthSdkError('The JWT was issued in the future');
  }
}

function getOAuthUrls(sdk, oauthParams, options) {
  options = options || {};

  // Get user-supplied arguments
  var authorizeUrl = util.removeTrailingSlash(options.authorizeUrl) || sdk.options.authorizeUrl;
  var issuer = util.removeTrailingSlash(options.issuer) || sdk.options.issuer;
  var userinfoUrl = util.removeTrailingSlash(options.userinfoUrl) || sdk.options.userinfoUrl;
  var tokenUrl = util.removeTrailingSlash(options.tokenUrl) || sdk.options.tokenUrl;

  // If an issuer exists but it's not a url, assume it's an authServerId
  if (issuer && !(/^https?:/.test(issuer))) {
    // Make it a url
    issuer = sdk.options.url + '/oauth2/' + issuer;
  }

  // If an authorizeUrl is supplied without an issuer, and an id_token is requested
  if (!issuer && authorizeUrl &&
      oauthParams.responseType.indexOf('id_token') !== -1) {
    // The issuer is ambiguous, so we won't be able to validate the id_token jwt
    throw new AuthSdkError('Cannot request idToken with an authorizeUrl without an issuer');
  }

  // If a token is requested without an issuer
  if (!issuer && oauthParams.responseType.indexOf('token') !== -1) {
    // If an authorizeUrl is supplied without a userinfoUrl
    if (authorizeUrl && !userinfoUrl) {
      // The userinfoUrl is ambiguous, so we won't be able to call getUserInfo
      throw new AuthSdkError('Cannot request accessToken with an authorizeUrl without an issuer or userinfoUrl');
    }

    // If a userinfoUrl is supplied without a authorizeUrl
    if (userinfoUrl && !authorizeUrl) {
      // The authorizeUrl is ambiguous, so we won't be able to call the authorize endpoint
      throw new AuthSdkError('Cannot request token with an userinfoUrl without an issuer or authorizeUrl');
    }
  }

  var sharedResourceServerRegex = new RegExp('^https?://.*?/oauth2/.+');

  // Default the issuer to our baseUrl
  issuer = issuer || sdk.options.url;

  // A shared resource server issuer looks like:
  // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7
  if (sharedResourceServerRegex.test(issuer)) {
    // A shared resource server authorizeUrl looks like:
    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/authorize
    authorizeUrl = authorizeUrl || issuer + '/v1/authorize';
    // Shared resource server userinfoUrls look like:
    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/userinfo
    userinfoUrl = userinfoUrl || issuer + '/v1/userinfo';
    // Shared resource server tokenUrls look like:
    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/token
    tokenUrl = tokenUrl || issuer + '/v1/token';
  // Normally looks like:
  // https://example.okta.com
  } else {
    // Normal authorizeUrls look like:
    // https://example.okta.com/oauth2/v1/authorize
    authorizeUrl = authorizeUrl || issuer + '/oauth2/v1/authorize';
    // Normal userinfoUrls look like:
    // https://example.okta.com/oauth2/v1/userinfo
    userinfoUrl = userinfoUrl || issuer + '/oauth2/v1/userinfo';
    // Normal tokenUrls look like:
    // https://example.okta.com/oauth2/v1/token
    tokenUrl = tokenUrl || issuer + '/oauth2/v1/token';
  }

  return {
    issuer: issuer,
    authorizeUrl: authorizeUrl,
    userinfoUrl: userinfoUrl,
    tokenUrl: tokenUrl
  };
}

function hashToObject(hash) {
  // Predefine regexs for parsing hash
  var plus2space = /\+/g;
  var paramSplit = /([^&=]+)=?([^&]*)/g;

  // Remove the leading hash
  var fragment = hash.substring(1);

  var obj = {};

  // Loop until we have no more params
  var param;
  while (true) { // eslint-disable-line no-constant-condition
    param = paramSplit.exec(fragment);
    if (!param) { break; }

    var key = param[1];
    var value = param[2];

    // id_token should remain base64url encoded
    if (key === 'id_token' || key === 'access_token' || key === 'code') {
      obj[key] = value;
    } else {
      obj[key] = decodeURIComponent(value.replace(plus2space, ' '));
    }
  }
  return obj;
}

module.exports = {
  generateState: generateState,
  generateNonce: generateNonce,
  getWellKnown: getWellKnown,
  getKey: getKey,
  validateClaims: validateClaims,
  getOAuthUrls: getOAuthUrls,
  loadFrame: loadFrame,
  loadPopup: loadPopup,
  hashToObject: hashToObject,
  isToken: isToken,
  addListener: addListener,
  removeListener: removeListener
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(140);


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*globals module */

var OktaSignIn = function () {

  var _ = __webpack_require__(61),
      config = __webpack_require__(62),
      OAuth2Util = __webpack_require__(63),
      router;
  var V1LoginRouter = __webpack_require__(169);

  function getProperties(authClient, Util) {
    var widgetOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


    function render(renderOptions, successFn, errorFn) {
      if (router) {
        throw new Error('An instance of the widget has already been rendered. Call remove() first.');
      }

      /**
       * -- Development Mode --
       * When the page loads, provide a helpful message to remind the developer that
       * tokens have not been removed from the hash fragment.
       */
      if (hasTokensInUrl()) {
        Util.debugMessage('\n            Looks like there are still tokens in the URL! Don\'t forget to parse and store them.\n            See: https://github.com/okta/okta-signin-widget/#oidc-tokenparsetokensfromurlsuccess-error.\n          ');
      }
      var Router = V1LoginRouter;
      if (widgetOptions.stateToken) {
        Util.introspectToken(authClient, widgetOptions).then(_.bind(function (response) {
          var isNewPipeline = checkResponseVersion(response);
          if (isNewPipeline) {
            Router = __webpack_require__(292);
          }
          router = bootstrapRouter.call(this, Router, authClient, widgetOptions, renderOptions, successFn, errorFn);
          router.appState.set('introspectSuccess', response);
          router.start();
        }, this)).fail(_.bind(function (err) {
          // Introspect API error.
          // Incase of an error we want to just load the LoginRouter
          router = bootstrapRouter.call(this, Router, authClient, widgetOptions, renderOptions, successFn, errorFn);
          router.appState.set('introspectError', err);
          router.start();
        }, this));
      } else {
        // If no stateToken bootstrap with LoginRouter
        router = bootstrapRouter.call(this, Router, authClient, widgetOptions, renderOptions, successFn, errorFn);
        router.start();
      }
    }

    function hide() {
      if (router) {
        router.hide();
      }
    }

    function show() {
      if (router) {
        router.show();
      }
    }

    function remove() {
      if (router) {
        router.remove();
        router = undefined;
      }
    }

    /**
     * Check if tokens have been passed back into the url, which happens in
     * the social auth IDP redirect flow.
     */
    function hasTokensInUrl() {
      return Util.hasTokensInHash(window.location.hash);
    }

    /**
     * Renders the Widget with opinionated defaults for the full-page
     * redirect flow.
     * @param options - options for the signin widget
     */
    function showSignInToGetTokens(options) {
      var renderOptions = OAuth2Util.transformShowSignInToGetTokensOptions(options, config);
      return render.call(this, renderOptions);
    }

    // Properties exposed on OktaSignIn object.
    return {
      renderEl: render,
      authClient: authClient,
      showSignInToGetTokens: showSignInToGetTokens,
      hasTokensInUrl: hasTokensInUrl,
      hide: hide,
      show: show,
      remove: remove
    };
  }

  function checkResponseVersion(response) {
    return !!(response.version && response.version >= '1.0.0');
  }

  function bootstrapRouter(Router, authClient, widgetOptions, renderOptions, successFn, errorFn) {
    var widgetRouter = new Router(_.extend({}, widgetOptions, renderOptions, {
      authClient: authClient,
      globalSuccessFn: successFn,
      globalErrorFn: errorFn
    }));

    _.extend(this, Router.prototype.Events);

    // Triggers the event up the chain so it is available to the consumers of the widget.
    this.listenTo(Router.prototype, 'all', this.trigger);

    // On the first afterRender event (usually when the Widget is ready) - emit a 'ready' event
    this.once('afterRender', function (context) {
      this.trigger('ready', context);
    });
    return widgetRouter;
  }

  function OktaSignIn(options) {
    __webpack_require__(0);
    var Util = __webpack_require__(5);
    /**
     * Render the sign in widget to an element.
     * @param options - options for the signin widget.
     *        Must have an el or $el property to render the widget to.
     * @param success - success callback function
     * @param error - error callback function
     */
    var OktaAuth = __webpack_require__(318);

    var authParams = _.extend({
      url: options.baseUrl,
      transformErrorXHR: Util.transformErrorXHR,
      headers: {
        'X-Okta-User-Agent-Extended': 'okta-signin-widget-' + config.version
      },
      clientId: options.clientId,
      redirectUri: options.redirectUri
    }, options.authParams);

    var authClient = new OktaAuth(authParams);

    Util.debugMessage('\n        The Okta Sign-In Widget is running in development mode.\n        When you are ready to publish your app, embed the minified version to turn on production mode.\n        See: https://developer.okta.com/code/javascript/okta_sign-in_widget#cdn\n      ');

    _.extend(this, V1LoginRouter.prototype.Events, getProperties(authClient, Util, options));
  }

  return OktaSignIn;
}();
module.exports = OktaSignIn;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(7);
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(143), __esModule: true };

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(46);
__webpack_require__(53);
module.exports = __webpack_require__(71).f('iterator');


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(64);
var defined = __webpack_require__(65);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(86);
var descriptor = __webpack_require__(49);
var setToStringTag = __webpack_require__(51);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(28)(IteratorPrototype, __webpack_require__(11)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(24);
var anObject = __webpack_require__(19);
var getKeys = __webpack_require__(35);

module.exports = __webpack_require__(17) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(30);
var toLength = __webpack_require__(89);
var toAbsoluteIndex = __webpack_require__(148);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(64);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(29);
var toObject = __webpack_require__(52);
var IE_PROTO = __webpack_require__(68)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(151);
var step = __webpack_require__(152);
var Iterators = __webpack_require__(34);
var toIObject = __webpack_require__(30);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(83)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(154), __esModule: true };

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(155);
__webpack_require__(93);
__webpack_require__(160);
__webpack_require__(161);
module.exports = __webpack_require__(7).Symbol;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(10);
var has = __webpack_require__(29);
var DESCRIPTORS = __webpack_require__(17);
var $export = __webpack_require__(16);
var redefine = __webpack_require__(85);
var META = __webpack_require__(91).KEY;
var $fails = __webpack_require__(33);
var shared = __webpack_require__(69);
var setToStringTag = __webpack_require__(51);
var uid = __webpack_require__(50);
var wks = __webpack_require__(11);
var wksExt = __webpack_require__(71);
var wksDefine = __webpack_require__(72);
var enumKeys = __webpack_require__(156);
var isArray = __webpack_require__(157);
var anObject = __webpack_require__(19);
var isObject = __webpack_require__(20);
var toObject = __webpack_require__(52);
var toIObject = __webpack_require__(30);
var toPrimitive = __webpack_require__(67);
var createDesc = __webpack_require__(49);
var _create = __webpack_require__(86);
var gOPNExt = __webpack_require__(158);
var $GOPD = __webpack_require__(159);
var $GOPS = __webpack_require__(73);
var $DP = __webpack_require__(24);
var $keys = __webpack_require__(35);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(92).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(41).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(39)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(28)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(35);
var gOPS = __webpack_require__(73);
var pIE = __webpack_require__(41);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(40);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(30);
var gOPN = __webpack_require__(92).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(41);
var createDesc = __webpack_require__(49);
var toIObject = __webpack_require__(30);
var toPrimitive = __webpack_require__(67);
var has = __webpack_require__(29);
var IE8_DOM_DEFINE = __webpack_require__(84);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(17) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(72)('asyncIterator');


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(72)('observable');


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(163);
var $Object = __webpack_require__(7).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(16);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(17), 'Object', { defineProperty: __webpack_require__(24).f });


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.2.1

//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(factory) {

  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
  // We use `self` instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self == self && self) ||
            (typeof global == 'object' && global.global == global && global);

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(165), __webpack_require__(54), exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore'), $;
    try { $ = require('jquery'); } catch(e) {}
    factory(root, exports, _, $);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create a local reference to a common array method we'll want to use later.
  var slice = [].slice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.2.1';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... this will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Proxy Underscore methods to a Backbone class' prototype using a
  // particular attribute as the data argument
  var addMethod = function(length, method, attribute) {
    switch (length) {
      case 1: return function() {
        return _[method](this[attribute]);
      };
      case 2: return function(value) {
        return _[method](this[attribute], value);
      };
      case 3: return function(iteratee, context) {
        return _[method](this[attribute], iteratee, context);
      };
      case 4: return function(iteratee, defaultVal, context) {
        return _[method](this[attribute], iteratee, defaultVal, context);
      };
      default: return function() {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
    }
  };
  var addUnderscoreMethods = function(Class, methods, attribute) {
    _.each(methods, function(length, method) {
      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
    });
  };

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {};

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Iterates over the standard `event, callback` (as well as the fancy multiple
  // space-separated events `"change blur", callback` and jQuery-style event
  // maps `{event: callback}`), reducing them by manipulating `memo`.
  // Passes a normalized single event name and callback, as well as any
  // optional `opts`.
  var eventsApi = function(iteratee, memo, name, callback, opts) {
    var i = 0, names;
    if (name && typeof name === 'object') {
      // Handle event maps.
      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
      for (names = _.keys(name); i < names.length ; i++) {
        memo = iteratee(memo, names[i], name[names[i]], opts);
      }
    } else if (name && eventSplitter.test(name)) {
      // Handle space separated event names.
      for (names = name.split(eventSplitter); i < names.length; i++) {
        memo = iteratee(memo, names[i], callback, opts);
      }
    } else {
      memo = iteratee(memo, name, callback, opts);
    }
    return memo;
  };

  // Bind an event to a `callback` function. Passing `"all"` will bind
  // the callback to all events fired.
  Events.on = function(name, callback, context) {
    return internalOn(this, name, callback, context);
  };

  // An internal use `on` function, used to guard the `listening` argument from
  // the public API.
  var internalOn = function(obj, name, callback, context, listening) {
    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
        context: context,
        ctx: obj,
        listening: listening
    });

    if (listening) {
      var listeners = obj._listeners || (obj._listeners = {});
      listeners[listening.id] = listening;
    }

    return obj;
  };

  // Inversion-of-control versions of `on`. Tell *this* object to listen to
  // an event in another object... keeping track of what it's listening to.
  Events.listenTo =  function(obj, name, callback) {
    if (!obj) return this;
    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
    var listeningTo = this._listeningTo || (this._listeningTo = {});
    var listening = listeningTo[id];

    // This object is not listening to any other events on `obj` yet.
    // Setup the necessary references to track the listening callbacks.
    if (!listening) {
      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
    }

    // Bind callbacks on obj, and keep track of them on listening.
    internalOn(obj, name, callback, this, listening);
    return this;
  };

  // The reducing API that adds a callback to the `events` object.
  var onApi = function(events, name, callback, options) {
    if (callback) {
      var handlers = events[name] || (events[name] = []);
      var context = options.context, ctx = options.ctx, listening = options.listening;
      if (listening) listening.count++;

      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });
    }
    return events;
  };

  // Remove one or many callbacks. If `context` is null, removes all
  // callbacks with that function. If `callback` is null, removes all
  // callbacks for the event. If `name` is null, removes all bound
  // callbacks for all events.
  Events.off =  function(name, callback, context) {
    if (!this._events) return this;
    this._events = eventsApi(offApi, this._events, name, callback, {
        context: context,
        listeners: this._listeners
    });
    return this;
  };

  // Tell this object to stop listening to either specific events ... or
  // to every object it's currently listening to.
  Events.stopListening =  function(obj, name, callback) {
    var listeningTo = this._listeningTo;
    if (!listeningTo) return this;

    var ids = obj ? [obj._listenId] : _.keys(listeningTo);

    for (var i = 0; i < ids.length; i++) {
      var listening = listeningTo[ids[i]];

      // If listening doesn't exist, this object is not currently
      // listening to obj. Break out early.
      if (!listening) break;

      listening.obj.off(name, callback, this);
    }
    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;

    return this;
  };

  // The reducing API that removes a callback from the `events` object.
  var offApi = function(events, name, callback, options) {
    // No events to consider.
    if (!events) return;

    var i = 0, listening;
    var context = options.context, listeners = options.listeners;

    // Delete all events listeners and "drop" events.
    if (!name && !callback && !context) {
      var ids = _.keys(listeners);
      for (; i < ids.length; i++) {
        listening = listeners[ids[i]];
        delete listeners[listening.id];
        delete listening.listeningTo[listening.objId];
      }
      return;
    }

    var names = name ? [name] : _.keys(events);
    for (; i < names.length; i++) {
      name = names[i];
      var handlers = events[name];

      // Bail out if there are no events stored.
      if (!handlers) break;

      // Replace events if there are any remaining.  Otherwise, clean up.
      var remaining = [];
      for (var j = 0; j < handlers.length; j++) {
        var handler = handlers[j];
        if (
          callback && callback !== handler.callback &&
            callback !== handler.callback._callback ||
              context && context !== handler.context
        ) {
          remaining.push(handler);
        } else {
          listening = handler.listening;
          if (listening && --listening.count === 0) {
            delete listeners[listening.id];
            delete listening.listeningTo[listening.objId];
          }
        }
      }

      // Update tail event if the list has any events.  Otherwise, clean up.
      if (remaining.length) {
        events[name] = remaining;
      } else {
        delete events[name];
      }
    }
    if (_.size(events)) return events;
  };

  // Bind an event to only be triggered a single time. After the first time
  // the callback is invoked, it will be removed. When multiple events are
  // passed in using the space-separated syntax, the event will fire once for every
  // event you passed in, not once for a combination of all events
  Events.once =  function(name, callback, context) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
    return this.on(events, void 0, context);
  };

  // Inversion-of-control versions of `once`.
  Events.listenToOnce =  function(obj, name, callback) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
    return this.listenTo(obj, events);
  };

  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
  // `offer` unbinds the `onceWrapper` after it has been called.
  var onceMap = function(map, name, callback, offer) {
    if (callback) {
      var once = map[name] = _.once(function() {
        offer(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
    }
    return map;
  };

  // Trigger one or many events, firing all bound callbacks. Callbacks are
  // passed the same arguments as `trigger` is, apart from the event name
  // (unless you're listening on `"all"`, which will cause your callback to
  // receive the true name of the event as the first argument).
  Events.trigger =  function(name) {
    if (!this._events) return this;

    var length = Math.max(0, arguments.length - 1);
    var args = Array(length);
    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];

    eventsApi(triggerApi, this._events, name, void 0, args);
    return this;
  };

  // Handles triggering the appropriate event callbacks.
  var triggerApi = function(objEvents, name, cb, args) {
    if (objEvents) {
      var events = objEvents[name];
      var allEvents = objEvents.all;
      if (events && allEvents) allEvents = allEvents.slice();
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, [name].concat(args));
    }
    return objEvents;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId(this.cidPrefix);
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // The prefix is used to create the client id which is used to identify models locally.
    // You may want to override this if you're experiencing name clashes with model ids.
    cidPrefix: 'c',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Special-cased proxy to underscore's `_.matches` method.
    matches: function(attrs) {
      return !!_.iteratee(attrs, this)(this.attributes);
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      var unset      = options.unset;
      var silent     = options.silent;
      var changes    = [];
      var changing   = this._changing;
      this._changing = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }

      var current = this.attributes;
      var changed = this.changed;
      var prev    = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (var attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          changed[attr] = val;
        } else {
          delete changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0; i < changes.length; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      var changed = {};
      for (var attr in diff) {
        var val = diff[attr];
        if (_.isEqual(old[attr], val)) continue;
        changed[attr] = val;
      }
      return _.size(changed) ? changed : false;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server, merging the response with the model's
    // local attributes. Any changed attributes will trigger a "change" event.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (!model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true, parse: true}, options);
      var wait = options.wait;

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      var model = this;
      var success = options.success;
      var attributes = this.attributes;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
        if (serverAttrs && !model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      // Set temporary attributes if `{wait: true}` to properly find new ids.
      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);

      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch' && !options.attrs) options.attrs = attrs;
      var xhr = this.sync(method, this, options);

      // Restore attributes.
      this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      var wait = options.wait;

      var destroy = function() {
        model.stopListening();
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (wait) destroy();
        if (success) success.call(options.context, model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      var xhr = false;
      if (this.isNew()) {
        _.defer(options.success);
      } else {
        wrapError(this, options);
        xhr = this.sync('delete', this, options);
      }
      if (!wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      var id = this.get(this.idAttribute);
      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.defaults({validate: true}, options));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
      omit: 0, chain: 1, isEmpty: 1 };

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  addUnderscoreMethods(Model, modelMethods, 'attributes');

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analogous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model) { return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      options = _.extend({}, options);
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      var removed = this._removeModels(models, options);
      if (!options.silent && removed) this.trigger('update', this, options);
      return singular ? removed[0] : removed;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse && !this._isModel(models)) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : models.slice();
      var id, model, attrs, existing, sort;
      var at = options.at;
      if (at != null) at = +at;
      if (at < 0) at += this.length + 1;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;
      var orderChanged = false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (var i = 0; i < models.length; i++) {
        attrs = models[i];

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(attrs)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge && attrs !== existing) {
            attrs = this._isModel(attrs) ? attrs.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (!model) continue;
        id = this.modelId(model.attributes);
        if (order && (model.isNew() || !modelMap[id])) {
          order.push(model);

          // Check to see if this is actually a new model at this index.
          orderChanged = orderChanged || !this.models[i] || model.cid !== this.models[i].cid;
        }

        modelMap[id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (var i = 0; i < this.length; i++) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this._removeModels(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || orderChanged) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (var i = 0; i < toAdd.length; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (var i = 0; i < orderedModels.length; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        var addOpts = at != null ? _.clone(options) : options;
        for (var i = 0; i < toAdd.length; i++) {
          if (at != null) addOpts.index = at + i;
          (model = toAdd[i]).trigger('add', model, this, addOpts);
        }
        if (sort || orderChanged) this.trigger('sort', this, options);
        if (toAdd.length || toRemove.length) this.trigger('update', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options = options ? _.clone(options) : {};
      for (var i = 0; i < this.models.length; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      return this.remove(model, options);
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      return this.remove(model, options);
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      if (index < 0) index += this.length;
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      var matches = _.matches(attrs);
      return this[first ? 'find' : 'filter'](function(model) {
        return matches(model.attributes);
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success.call(options.context, collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      var wait = options.wait;
      model = this._prepareModel(model, options);
      if (!model) return false;
      if (!wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp, callbackOpts) {
        if (wait) collection.add(model, callbackOpts);
        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models, {
        model: this.model,
        comparator: this.comparator
      });
    },

    // Define how to uniquely identify models in the collection.
    modelId: function (attrs) {
      return attrs[this.model.prototype.idAttribute || 'id'];
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (this._isModel(attrs)) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method called by both remove and set.
    // Returns removed models, or false if nothing is removed.
    _removeModels: function(models, options) {
      var removed = [];
      for (var i = 0; i < models.length; i++) {
        var model = this.get(models[i]);
        if (!model) continue;

        var index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;

        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }

        removed.push(model);
        this._removeReference(model, options);
      }
      return removed.length ? removed : false;
    },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function (model) {
      return model instanceof Model;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      var id = this.modelId(model.attributes);
      if (id != null) this._byId[id] = model;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      delete this._byId[model.cid];
      var id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (event === 'change') {
        var prevId = this.modelId(model.previousAttributes());
        var id = this.modelId(model.attributes);
        if (prevId !== id) {
          if (prevId != null) delete this._byId[prevId];
          if (id != null) this._byId[id] = model;
        }
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 2,
      contains: 2, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
      isEmpty: 1, chain: 1, sample: 3, partition: 3 };

  // Mix in each Underscore method as a proxy to `Collection#models`.
  addUnderscoreMethods(Collection, collectionMethods, 'models');

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    if (!_[method]) return;
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this._removeElement();
      this.stopListening();
      return this;
    },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
      this.$el.remove();
    },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
      this.undelegateEvents();
      this._setElement(element);
      this.delegateEvents();
      return this;
    },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
    _setElement: function(el) {
      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
      this.el = this.$el[0];
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
      events || (events = _.result(this, 'events'));
      if (!events) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[method];
        if (!method) continue;
        var match = key.match(delegateEventSplitter);
        this.delegate(match[1], match[2], _.bind(method, this));
      }
      return this;
    },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
      return document.createElement(tagName);
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        this.setElement(this._createElement(_.result(this, 'tagName')));
        this._setAttributes(attrs);
      } else {
        this.setElement(_.result(this, 'el'));
      }
    },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
      this.$el.attr(attributes);
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // Pass along `textStatus` and `errorThrown` from jQuery.
    var error = options.error;
    options.error = function(xhr, textStatus, errorThrown) {
      options.textStatus = textStatus;
      options.errorThrown = errorThrown;
      if (error) error.call(options.context, xhr, textStatus, errorThrown);
    };

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        if (router.execute(callback, args, name) !== false) {
          router.trigger.apply(router, ['route:' + name].concat(args));
          router.trigger('route', name, args);
          Backbone.history.trigger('route', router, name, args);
        }
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args, name) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
      return path === this.root && !this.getSearch();
    },

    // Does the pathname match the root?
    matchRoot: function() {
      var path = this.decodeFragment(this.location.pathname);
      var root = path.slice(0, this.root.length - 1) + '/';
      return root === this.root;
    },

    // Unicode characters in `location.pathname` are percent encoded so they're
    // decoded for comparison. `%25` should not be decoded since it may be part
    // of an encoded parameter.
    decodeFragment: function(fragment) {
      return decodeURI(fragment.replace(/%25/g, '%2525'));
    },

    // In IE6, the hash fragment and search params are incorrect if the
    // fragment contains `?`.
    getSearch: function() {
      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
      return match ? match[0] : '';
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the pathname and search params, without the root.
    getPath: function() {
      var path = this.decodeFragment(
        this.location.pathname + this.getSearch()
      ).slice(this.root.length - 1);
      return path.charAt(0) === '/' ? path.slice(1) : path;
    },

    // Get the cross-browser normalized URL fragment from the path or hash.
    getFragment: function(fragment) {
      if (fragment == null) {
        if (this._usePushState || !this._wantsHashChange) {
          fragment = this.getPath();
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error('Backbone.history has already been started');
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasHashChange   = 'onhashchange' in window;
      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.history && this.history.pushState);
      this._usePushState    = this._wantsPushState && this._hasPushState;
      this.fragment         = this.getFragment();

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          var root = this.root.slice(0, -1) || '/';
          this.location.replace(root + '#' + this.getPath());
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot()) {
          this.navigate(this.getHash(), {replace: true});
        }

      }

      // Proxy an iframe to handle location events if the browser doesn't
      // support the `hashchange` event, HTML5 history, or the user wants
      // `hashChange` but not `pushState`.
      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
        this.iframe = document.createElement('iframe');
        this.iframe.src = 'javascript:0';
        this.iframe.style.display = 'none';
        this.iframe.tabIndex = -1;
        var body = document.body;
        // Using `appendChild` will throw on IE < 9 if the document is not ready.
        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
        iWindow.document.open();
        iWindow.document.close();
        iWindow.location.hash = '#' + this.fragment;
      }

      // Add a cross-platform `addEventListener` shim for older browsers.
      var addEventListener = window.addEventListener || function (eventName, listener) {
        return attachEvent('on' + eventName, listener);
      };

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._usePushState) {
        addEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        addEventListener('hashchange', this.checkUrl, false);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      // Add a cross-platform `removeEventListener` shim for older browsers.
      var removeEventListener = window.removeEventListener || function (eventName, listener) {
        return detachEvent('on' + eventName, listener);
      };

      // Remove window listeners.
      if (this._usePushState) {
        removeEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        removeEventListener('hashchange', this.checkUrl, false);
      }

      // Clean up the iframe if necessary.
      if (this.iframe) {
        document.body.removeChild(this.iframe);
        this.iframe = null;
      }

      // Some environments will throw when clearing an undefined interval.
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();

      // If the user pressed the back button, the iframe's hash will have
      // changed and we should use that for comparison.
      if (current === this.fragment && this.iframe) {
        current = this.getHash(this.iframe.contentWindow);
      }

      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      // If the root doesn't match, no routes can match either.
      if (!this.matchRoot()) return false;
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      // Normalize the fragment.
      fragment = this.getFragment(fragment || '');

      // Don't include a trailing slash on the root.
      var root = this.root;
      if (fragment === '' || fragment.charAt(0) === '?') {
        root = root.slice(0, -1) || '/';
      }
      var url = root + fragment;

      // Strip the hash and decode for matching.
      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._usePushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {
          var iWindow = this.iframe.contentWindow;

          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace) {
            iWindow.document.open();
            iWindow.document.close();
          }

          this._updateHash(iWindow.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent` constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error.call(options.context, model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(96)))

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}());

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(96), __webpack_require__(166)(module)))

/***/ }),
/* 166 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = {"signout":"Sign Out","signin":"Sign In","remember":"Remember me","rememberDevice":"Trust this device","rememberDevice.timebased":"Do not challenge me on this device for the next {0}","rememberDevice.devicebased":"Do not challenge me on this device again","autoPush":"Send push automatically","unlockaccount":"Unlock account?","needhelp":"Need help signing in?","goback":"Back to Sign In","forgotpassword":"Forgot password?","help":"Help","retry":"Retry","iphone":"iPhone","android":"Android","minutes.oneMinute":"minute","minutes":"{0} minutes","hours":"{0} hours","days":"{0} days","error.config":"There was a configuration error","error.required.authParams":"Missing parameters for the configured authentication scheme - \"OAUTH2\"","error.required.baseUrl":"\"baseUrl\" is a required widget parameter","error.required.success":"A success handler is required","error.required.el":"\"el\" is a required widget parameter","error.invalid.colors.brand":"\"colors.brand\" must be in six-digit hex format","error.unsupported.browser":"Unsupported browser","error.unsupported.cors":"Unsupported browser - missing CORS support","error.unsupported.localStorage":"Unsupported browser - missing localStorage support","error.enabled.cors":"There was an error sending the request - have you enabled CORS?","error.expired.session":"Your session has expired. Please try to log in again.","error.auth.lockedOut":"Your account is locked. Please contact your administrator.","error.oauth.idToken":"There was a problem generating the id_token for the user. Please try again.","error.network.connection":"Unable to connect to the server. Please check your network connection.","error.username.required":"Please enter a username","error.password.required":"Please enter a password","errors.E0000004":"Sign in failed!","errors.E0000069":"Your account was locked due to excessive MFA attempts.","errors.E0000047":"You exceeded the maximum number of requests. Try again in a while.","errors.E0000001":"Api validation failed: {0}","errors.E0000002":"The request was not valid: {0}","errors.E0000003":"The request body was not well-formed.","errors.E0000005":"Invalid session","errors.E0000006":"You do not have permission to perform the requested action","errors.E0000007":"Not found: {0}","errors.E0000008":"The requested path was not found","errors.E0000009":"Internal Server Error","errors.E0000010":"Service is in read only mode","errors.E0000011":"Invalid token provided","errors.E0000012":"Unsupported media type","errors.E0000013":"Invalid client app id","errors.E0000015":"You do not have permission to access the feature you are requesting","errors.E0000016":"Activation failed because the user is already active","errors.E0000017":"Password reset failed","errors.E0000018":"Bad request.  Accept and/or Content-Type headers are likely not set.","errors.E0000019":"Bad request.  Accept and/or Content-Type headers likely do not match supported values.","errors.E0000020":"Bad request.","errors.E0000021":"Bad request.  Accept and/or Content-Type headers likely do not match supported values.","errors.E0000022":"The endpoint does not support the provided HTTP method","errors.E0000023":"Operation failed because user profile is mastered under another system","errors.E0000024":"Bad request.  This operation on app metadata is not yet supported.","errors.E0000025":"App version assignment failed.","errors.E0000026":"This endpoint has been deprecated.","errors.E0000027":"Group push bad request : {0}","errors.E0000028":"The request is missing a required parameter.","errors.E0000029":"Invalid paging request.","errors.E0000030":"Bad request. Invalid date. Dates must be of the form yyyy-MM-dd''T''HH:mm:ss.SSSZZ, e.g. 2013-01-01T12:00:00.000-07:00.","errors.E0000031":"Invalid search criteria.","errors.E0000032":"Unlock is not allowed for this user.","errors.E0000033":"Bad request. Can't specify a search query and filter in the same request.","errors.E0000034":"Forgot password not allowed on specified user.","errors.E0000035":"Change password not allowed on specified user.","errors.E0000036":"Change recovery question not allowed on specified user.","errors.E0000037":"Type mismatch exception.","errors.E0000038":"This operation is not allowed in the user''s current status.","errors.E0000039":"Operation on application settings failed.","errors.E0000040":"Application label must not be the same as an existing application label.","errors.E0000041":"Credentials should not be set on this resource based on the scheme.","errors.E0000042":"Setting the error page redirect URL failed.","errors.E0000043":"Self service application assignment is not enabled.","errors.E0000044":"Self service application assignment is not supported.","errors.E0000045":"Field mapping bad request.","errors.E0000046":"Deactivate application for user forbidden.","errors.E0000048":"Entity not found exception.","errors.E0000049":"Invalid SCIM data from SCIM implementation.","errors.E0000050":"Invalid SCIM data from client.","errors.E0000051":"No response from SCIM implementation.","errors.E0000052":"Endpoint not implemented.","errors.E0000053":"Invalid SCIM filter.","errors.E0000054":"Invalid pagination properties.","errors.E0000055":"Duplicate group.","errors.E0000056":"Delete application forbidden.","errors.E0000057":"Access to this application is denied due to a policy.","errors.E0000058":"Access to this application requires MFA: {0}","errors.E0000059":"The connector configuration could not be tested. Make sure that the URL, Authentication Parameters are correct and that there is an implementation available at the URL provided.","errors.E0000060":"Unsupported operation.","errors.E0000061":"Tab error: {0}","errors.E0000062":"The specified user is already assigned to the application.","errors.E0000063":"Invalid combination of parameters specified.","errors.E0000064":"Password is expired and must be changed.","errors.E0000065":"Internal error processing app metadata.","errors.E0000066":"APNS is not configured, contact your admin","errors.E0000067":"Factors Service Error.","errors.E0000070":"Waiting for ACK","errors.E0000071":"Unsupported OS Version: {0}","errors.E0000072":"MIM policy settings have disallowed enrollment for this user","errors.E0000073":"User rejected authentication","errors.E0000074":"Factor Service Error","errors.E0000075":"Cannot modify the {0} attribute because it has a field mapping and profile push is enabled.","errors.E0000076":"Cannot modify the app user because it is mastered by an external app.","errors.E0000077":"Cannot modify the {0} attribute because it is read-only.","errors.E0000078":"Cannot modify the {0} attribute because it is immutable.","errors.E0000079":"This operation is not allowed in the current authentication state.","errors.E0000081":"Cannot modify the {0} attribute because it is a reserved attribute for this application.","errors.E0000082":"Each code can only be used once. Please wait for a new code and try again.","errors.E0000083":"PassCode is valid but exceeded time window.","errors.E0000084":"App evaluation error.","errors.E0000085":"You do not have permission to access your account at this time.","errors.E0000086":"This policy cannot be activated at this time.","errors.E0000087":"The recovery question answer did not match our records.","errors.E0000090":"The role specified is already assigned to the user.","errors.E0000091":"The provided role type was not the same as required role type.","errors.E0000092":"Access to this application requires re-authentication: {0}","errors.E0000093":"Target count limit exceeded","errors.E0000094":"The provided filter is unsupported.","errors.E0000095":"Recovery not allowed for unknown user.","errors.E0000096":"This certificate has already been uploaded with kid={0}.","errors.E0000097":"There is no verified phone number on file.","errors.E0000098":"This phone number is invalid.","errors.E0000099":"Only numbers located in US and Canada are allowed.  Contact your administrator if this is a problem.","errors.E0000100":"Unable to perform search query.","errors.E0000101":"Upload failed because of a problem with your ipa file, {0}","errors.E0000102":"YubiKey cannot be deleted while assigned to an user. Please deactivate YubiKey using reset MFA and try again","errors.E0000103":"Action on device already in queue or in progress","errors.E0000104":"Device is already locked and cannot be locked again","errors.E0000105":"You have accessed an account recovery link that has expired or been previously used.","errors.E0000106":"Wait for token to change, then enter the new tokencode.","errors.E0000107":"The entity is not in the expected state for the requested transition.","errors.E0000109":"An SMS message was recently sent. Please wait 30 seconds before trying again.","errors.E0000110":"You have accessed a link that has expired or has been previously used.","errors.E0000111":"Cannot modify the {0} object because it is read-only.","errors.E0000112":"Cannot update this user because they are still being activated. Please try again in a few minutes.","errors.E0000113":"{0}.","errors.E0000114":"A user with this login already exists in the current organization.","errors.E0000115":"Upload failed, {0}","errors.E0000116":"{0}","errors.E0000119":"Your account is locked. Please contact your administrator.","errors.E0000124":"Could not create user. To create a user and expire their password immediately, a password must be specified","errors.E0000125":"Could not create user. To create a user and expire their password immediately, \"activate\" must be true","errors.E0000133":"A phone call was recently made. Please wait 30 seconds before trying again.","oform.next":"Next","oform.verify":"Verify","oform.send":"Send","oform.back":"Back","oform.save":"Save","oform.cancel":"Cancel","oform.edit":"Edit","oform.previous":"Previous","oform.error.icon.ariaLabel":"Error","oform.errorbanner.title":"We found some errors. Please review the form and make corrections.","oform.errormsg.title":"Please review the form to correct the following errors:","oform.error.unexpected":"There was an unexpected internal error. Please try again.","model.validation.field.blank":"This field cannot be left blank","model.validation.field.wrong.type":"This field is of the wrong type","model.validation.field.invalid":"This field has an invalid value","model.validation.field.value.not.allowed":"This field value is not allowed","model.validation.field.array.minItems":"This array does not have enough items","model.validation.field.array.maxItems":"This array contains too many items","model.validation.field.array.unique":"This array can only have unique values","model.validation.field.string.minLength":"This field cannot be less than the minimum required characters","model.validation.field.string.maxLength":"This field cannot exceed the maximum allowed characters","model.validation.field.invalid.format.email":"This value is not a valid email address","model.validation.field.invalid.format.uri":"This value is not a valid URI","model.validation.field.invalid.format.ipv4":"This value is not a valid IPv4 address","model.validation.field.invalid.format.hostname":"This value is not a valid hostname","model.validation.field.username":"Please check your username","factor.totpSoft.oktaVerify":"Okta Verify","factor.totpSoft.googleAuthenticator":"Google Authenticator","factor.totpSoft.description":"Enter single-use code from the mobile app.","factor.totpHard.rsaSecurId":"RSA SecurID","factor.totpHard.symantecVip":"Symantec VIP","factor.totpHard.description":"Enter a single-use code from a hardware token.","factor.totpHard.yubikey":"YubiKey","factor.totpHard.yubikey.description":"Insert your YubiKey and tap it to get a verification code.","factor.totpHard.yubikey.placeholder":"Click here, then tap your YubiKey","factor.oktaVerifyPush":"Okta Verify","factor.push.description":"Use a push notification sent to the mobile app.","factor.duo":"Duo Security","factor.duo.description":"Use Push Notification, SMS, or Voice call to authenticate.","factor.sms":"SMS Authentication","factor.sms.description":"Enter a single-use code sent to your mobile phone.","factor.sms.time.warning":"Haven't received an SMS? To try again, click <span style=\"font-weight:bold\">Re-send code</span>.","factor.call":"Voice Call Authentication","factor.call.description":"Use a phone to authenticate by following voice instructions.","factor.call.time.warning":"Haven't received a voice call? To try again, click <span style=\"font-weight:bold\">Redial</span>.","factor.securityQuestion":"Security Question","factor.securityQuestion.description":"Use the answer to a security question to authenticate.","factor.windowsHello":"Windows Hello","factor.windowsHello.signin.description":"Sign in to Okta using Windows Hello.","factor.windowsHello.signin.description.generic":"Sign in using Windows Hello.","factor.windowsHello.signin.description.specific":"Sign in to {0} using Windows Hello.","factor.u2f":"Security Key (U2F)","factor.u2f.description":"Use a Universal 2nd Factor (U2F) security key to sign on to Okta.","factor.u2f.description.generic":"Use a Universal 2nd Factor (U2F) security key to sign in.","factor.u2f.description.specific":"Use a Universal 2nd Factor (U2F) security key to sign in to {0}.","factor.email":"Email Authentication","factor.password":"Password","factor.customFactor.description":"Redirect to a third party MFA provider to sign in to Okta.","factor.customFactor.description.generic":"Redirect to a third party MFA provider to sign in.","factor.customFactor.description.specific":"Redirect to a third party MFA provider to sign in to {0}.","factor.webauthn.biometric":"Security Key or Biometric Authenticator","factor.webauthn.biometric.description":"Use a security key (USB or bluetooth) or a biometric authenticator (Windows Hello, Touch ID, etc.)","factor.hotp.description":"Enter a single-use code from an authenticator.","mfa.challenge.verify":"Verify","mfa.challenge.answer.placeholder":"Answer","mfa.challenge.answer.tooltip":"Answer","mfa.challenge.answer.showAnswer":"Show","mfa.challenge.answer.hideAnswer":"Hide","mfa.challenge.enterCode.placeholder":"Enter Code","mfa.challenge.enterCode.tooltip":"Enter Code","mfa.challenge.password.placeholder":"Password","mfa.backToFactors":"Back to factor list","mfa.phoneNumber.placeholder":"Phone number","mfa.phoneNumber.ext.placeholder":"Extension","mfa.sendCode":"Send code","mfa.sent":"Sent","mfa.resendCode":"Re-send code","mfa.call":"Call","mfa.calling":"Calling","mfa.redial":"Redial","mfa.sendEmail":"Send email","mfa.resendEmail":"Re-send email","mfa.scanBarcode":"Scan barcode","mfa.noAccessToEmail":"Can't access email","password.reset":"Reset Password","password.oldPassword.placeholder":"Old password","password.oldPassword.tooltip":"Old password","password.newPassword.placeholder":"New password","password.newPassword.tooltip":"New password","password.confirmPassword.placeholder":"Repeat password","password.confirmPassword.tooltip":"Repeat password","password.error.match":"New passwords must match","password.enroll.error.match":"Passwords must match","recovery.sms.hint":"SMS can only be used if a mobile phone number has been configured.","recovery.mobile.hint":"{0} can only be used if a mobile phone number has been configured.","recovery.sms":"SMS","recovery.call":"Voice Call","recovery.smsOrCall":"SMS or Voice Call","enroll.choices.title":"Set up multifactor authentication","enroll.choices.description":"Your company requires multifactor authentication to add an additional layer of security when signing in to your Okta account","enroll.choices.description.generic":"Your company requires multifactor authentication to add an additional layer of security when signing in to your account","enroll.choices.description.specific":"Your company requires multifactor authentication to add an additional layer of security when signing in to your {0} account","enroll.choices.description.gracePeriod.bold":"Your company recommends setting up additional factors for authentication. Set up will be required in: <b>{0} day(s)</b>.","enroll.choices.description.gracePeriod.oneDay.bold":"Your company recommends setting up additional factors for authentication. Set up will be required in: <b>less than 1 day</b>.","enroll.choices.optional":"You can configure any additional optional factor or click finish","enroll.choices.list.setup":"Setup required","enroll.choices.list.enrolled":"Enrolled factors","enroll.choices.list.optional":"Additional optional factors","enroll.choices.setup":"Setup","enroll.choices.setup.another":"Set up another","enroll.choices.submit.finish":"Finish","enroll.choices.submit.configure":"Configure factor","enroll.choices.submit.next":"Configure next factor","enroll.choices.cardinality.setup":"({0} set up)","enroll.choices.cardinality.setup.remaining":"({0} of {1} set up)","enroll.choices.setup.skip":"Skip set up","enroll.securityQuestion.setup":"Setup secret question authentication","security.disliked_food":"What is the food you least liked as a child?","security.name_of_first_plush_toy":"What is the name of your first stuffed animal?","security.first_award":"What did you earn your first medal or award for?","security.favorite_security_question":"What is your favorite security question?","security.favorite_toy":"What is the toy/stuffed animal you liked the most as a kid?","security.first_computer_game":"What was the first computer game you played?","security.favorite_movie_quote":"What is your favorite movie quote?","security.first_sports_team_mascot":"What was the mascot of the first sports team you played on?","security.first_music_purchase":"What music album or song did you first purchase?","security.favorite_art_piece":"What is your favorite piece of art?","security.grandmother_favorite_desert":"What was your grandmother's favorite dessert?","security.first_thing_cooked":"What was the first thing you learned to cook?","security.childhood_dream_job":"What was your dream job as a child?","security.first_kiss_location":"Where did you have your first kiss?","security.place_where_significant_other_was_met":"Where did you meet your spouse/significant other?","security.favorite_vacation_location":"Where did you go for your favorite vacation?","security.new_years_two_thousand":"Where were you on New Year's Eve in the year 2000?","security.favorite_speaker_actor":"Who is your favorite speaker/orator?","security.favorite_book_movie_character":"Who is your favorite book/movie character?","security.favorite_sports_player":"Who is your favorite sports player?","enroll.password.setup":"Select a password","enroll.sms.setup":"Receive a code via SMS to authenticate","enroll.sms.try_again":"The number you entered seems invalid. If the number is correct, please try again.","enroll.call.setup":"Follow phone call instructions to authenticate","enroll.onprem.username.placeholder":"Enter {0} username","enroll.onprem.username.tooltip":"Enter {0} username","enroll.onprem.passcode.placeholder":"Enter {0} passcode","enroll.onprem.passcode.tooltip":"Enter {0} passcode","enroll.symantecVip.subtitle":"Enter Credential ID and two consecutive generated codes","enroll.symantecVip.credentialId.placeholder":"Enter credential ID","enroll.symantecVip.credentialId.tooltip":"Enter credential ID","enroll.symantecVip.passcode1.placeholder":"Security code 1","enroll.symantecVip.passcode1.tooltip":"Security code 1","enroll.symantecVip.passcode2.placeholder":"Security code 2","enroll.symantecVip.passcode2.tooltip":"Security code 2","enroll.yubikey.title":"Setup YubiKey","enroll.yubikey.subtitle":"Insert your YubiKey into a USB port and tap it to generate a verification code","enroll.totp.title":"Setup {0}","enroll.totp.selectDevice":"Select your device type","enroll.totp.downloadApp":"Download <a href=\"{0}\" class=\"inline-link\">{1} from the {2}</a> onto your mobile device.","enroll.hotp.restricted":"Contact your administrator to continue enrollment.","enroll.duo.title":"Setup Duo Security","enroll.windowsHello.title":"Enroll Windows Hello","enroll.windowsHello.subtitle":"Click below to enroll Windows Hello as a second form of authentication","enroll.windowsHello.subtitle.loading":"Please wait while Windows Hello is loading...","enroll.windowsHello.save":"Enroll Windows Hello","enroll.windowsHello.error.notWindows":"Windows Hello can only be used on Windows Edge with Windows 10. Contact your admin for assistance.","enroll.windowsHello.error.notConfiguredHtml":"Windows Hello is not configured. Select the <b>Start</b> button, then select <b>Settings</b> - <b>Accounts</b> - <b>Sign-in</b> to configure Windows Hello.","verify.windowsHello.subtitle":"Verify your identity with Windows Hello","verify.windowsHello.subtitle.loading":"Please wait while Windows Hello is loading...","verify.windowsHello.subtitle.signingIn":"Signing in to Okta...","verify.windowsHello.subtitle.signingIn.generic":"Signing in...","verify.windowsHello.subtitle.signingIn.specific":"Signing in to {0}...","verify.windowsHello.save":"Verify with Windows Hello","verify.windowsHello.error.notFound":"Your Windows Hello enrollment does not match our records. Contact your administrator for assistance.","verify.windowsHello.error.notFound.selectAnother":"Your Windows Hello enrollment does not match our records. Select another factor or contact your administrator for assistance.","enroll.u2f.title":"Setup Security Key (U2F)","enroll.u2f.save":"Register Security Key","enroll.u2f.general2":"Make sure you have a Security Key. If already inserted, remove it now.<br>If you have a Bluetooth Security Key, turn on your computer's Bluetooth.","enroll.u2f.general3":"Click the button below to register","enroll.u2f.instructions":"Insert your Security Key into a USB port on this computer. If it has a button or gold disk, tap it.","enroll.u2f.instructionsBluetooth":"If you are using a Bluetooth Security Key, press the button.","u2f.error.factorNotSupported":"Security Key (U2F) is not supported on this browser. Select another factor or contact your admin for assistance.","u2f.error.factorNotSupported.oneFactor":"Security Key (U2F) is not supported on this browser. Contact your admin for assistance.","u2f.error.other":"An unknown error has occured. Try again or select another factor.","u2f.error.other.oneFactor":"An unknown error has occured. Try again or contact your admin for assistance.","u2f.error.badRequest":"There was an error with the U2F request. Try again or select another factor.","u2f.error.badRequest.oneFactor":"There was an error with the U2F request. Try again or contact your admin for assistance.","u2f.error.unsupported":"The security key is unsupported. Select another factor.","u2f.error.unsupported.oneFactor":"The security key is unsupported. Contact your admin for assistance.","u2f.error.timeout":"You have timed out of the authentication period. Please try again.","verify.u2f.instructions":"Insert your Security Key. If it has a button or gold disk, tap it.","verify.u2f.instructionsBluetooth":"If you are using a Bluetooth Security Key, turn on your computer's Bluetooth and press the button.","verify.u2f.retry":"Retry","enroll.customFactor.subtitle":"Clicking below will redirect to MFA enrollment with {0}","enroll.customFactor.save":"Enroll","verify.customFactor.subtitle":"Clicking below will redirect to verification with {0}","enroll.webauthn.biometric.title":"Set up security key or biometric authenticator","enroll.webauthn.save":"Enroll","enroll.webauthn.biometric.instructions":"Your browser will prompt to register a security key or biometric authenticator (Windows Hello, Touch ID, etc.). Follow the instructions to complete enrollment.","enroll.webauthn.biometric.instructions.edge":"Note: If you are enrolling a security key and Windows Hello or PIN is enabled, you will need to select '<b>Cancel</b>' in the prompt before continuing.","verify.webauthn.biometric.instructions":"Your browser or device will prompt you to verify with a security key or biometric authenticator. Follow the instructions to complete authentication.","webauthn.biometric.error.factorNotSupported":"Security key or biometric authenticator is not supported on this browser. Select another factor or contact your admin for assistance.","webauthn.biometric.error.factorNotSupported.oneFactor":"Security key or biometric authenticator is not supported on this browser. Contact your admin for assistance.","enroll.webauthn.instructions.noSupportForBiometric":"Note: Some browsers may not support biometric authenticators.","enroll.totp.enterCode":"Enter code displayed from the application","enroll.totp.setupApp":"Launch {0} application on your mobile device and select Add an account.","enroll.totp.setupGoogleAuthApp":"Launch {0}, tap the \"+\" icon, then select \"Scan barcode\".","enroll.totp.cannotScan":"Can't scan?","enroll.totp.refreshBarcode":"Refresh code","enroll.totp.cannotScanBarcode":"Can't scan barcode?","enroll.totp.manualSetupInstructions":"To set up manually enter your Okta Account username and then input the following in the Secret Key Field","enroll.totp.manualSetupInstructions.generic":"To set up manually enter your Account username and then input the following in the Secret Key Field","enroll.totp.manualSetupInstructions.specific":"To set up manually enter your {0} Account username and then input the following in the Secret Key Field","enroll.totp.sharedSecretInstructions":"Enter your Okta Account username and enter the following in the Secret Key Field","enroll.totp.sharedSecretInstructions.generic":"Enter your Account username and enter the following in the Secret Key Field","enroll.totp.sharedSecretInstructions.specific":"Enter your {0} Account username and enter the following in the Secret Key Field","enroll.totp.sendSms":"Send activation link via SMS","enroll.totp.sendEmail":"Send activation link via email","enroll.totp.setupManually":"Setup manually without push notification","enroll.totp.enrollViaEmail.title":"Activation email sent!","enroll.totp.enrollViaEmail.msg":"Open the email from your mobile device.","enroll.totp.enrollViaSms.title":"SMS sent!","enroll.totp.enrollViaSms.msg":"View the SMS on your mobile device.","recoveryChallenge.sms.title":"Enter verification code sent via SMS","recoveryChallenge.call.title":"Enter verification code received via Voice Call","mfa.factors.dropdown.title":"Select an authentication factor","mfa.factors.dropdown.sr.text":"Select Authentication Factor - {0} Factor Selected","mfa.duoSecurity.push":"Push — {0}","mfa.duoSecurity.sms":"SMS — {0}","mfa.duoSecurity.call":"Call — {0}","mfa.challenge.title":"Enter your {0} passcode","mfa.challenge.orEnterCode":"Or enter code","mfa.challenge.totp.subtitle.multiple":"Enter code from any registered {0} device.","mfa.emailVerification.checkEmail":"To finish signing in, click the link in your email.","mfa.emailVerification.title":"Sign in using a link sent to your email.","mfa.emailVerification.subtitle":"Emails will be sent to {0}","mfa.emailVerification.otc.finish":"To finish signing in, enter the code which was emailed to you.","oktaverify.send":"Send Push","oktaverify.resend":"Re-send Push","oktaverify.sent":"Push sent!","oktaverify.rejected":"You have chosen to reject this login.","oktaverify.timeout":"Your push notification has expired.","oktaverify.warning":"Haven't received a push notification yet? Try opening the Okta Verify App on your phone.","oktaverify.numberchallenge.instruction":"On your phone, tap <span class=\"challenge-number\">{0}</span> on Okta Verify prompt to continue.","oktaverify.numberchallenge.explain":"This extra step helps us make sure it's really you signing in.","primaryauth.title":"Sign In","primaryauth.username.placeholder":"Username","primaryauth.username.tooltip":"Username","primaryauth.password.placeholder":"Password","primaryauth.password.tooltip":"Password","primaryauth.submit":"Sign In","primaryauth.newUser.tooltip":"This is the first time you are connecting to {0} from this browser","primaryauth.newUser.tooltip.close":"Close","idpDiscovery.email.placeholder":"Email","password.forgot.email.or.username.placeholder":"Email or Username","password.forgot.email.or.username.tooltip":"Email or Username","password.forgot.sendText":"Reset via SMS","password.forgot.sendEmail":"Reset via Email","password.forgot.call":"Reset via Voice Call","password.forgot.emailSent.title":"Email sent!","password.forgot.emailSent.desc":"Email has been sent to {0} with instructions on resetting your password.","password.forgot.question.title":"Answer Forgotten Password Challenge","password.forgot.question.submit":"Reset Password","password.forgot.code.notReceived":"Didn't receive a code? Reset via email","password.forgot.noFactorsEnabled":"No password reset options available. Please contact your administrator.","password.reset.title":"Reset your Okta password","password.reset.title.generic":"Reset your password","password.reset.title.specific":"Reset your {0} password","password.complexity.requirements":"Password requirements: {0}.","password.complexity.history":"Your password cannot be any of your last {0} passwords.","password.complexity.minAgeMinutes":"At least {0} minute(s) must have elapsed since you last changed your password.","password.complexity.minAgeHours":"At least {0} hour(s) must have elapsed since you last changed your password.","password.complexity.minAgeDays":"At least {0} day(s) must have elapsed since you last changed your password.","password.complexity.length":"at least {0} characters","password.complexity.list.element":", {0}","password.complexity.lowercase":"a lowercase letter","password.complexity.uppercase":"an uppercase letter","password.complexity.number":"a number","password.complexity.symbol":"a symbol","password.complexity.no_username":"no parts of your username","password.complexity.no_first_name":"does not include your first name","password.complexity.no_last_name":"does not include your last name","password.expired.submit":"Change Password","password.expired.title":"Your Okta password has expired","password.expired.title.generic":"Your password has expired","password.expired.title.specific":"Your {0} password has expired","password.expiring.later":"Remind me later","password.expiring.title":"Your password will expire in {0} days","password.expiring.today":"Your password will expire later today","password.expiring.soon":"Your password is expiring soon","password.expiring.subtitle":"When password expires you may be locked out of Okta Mobile, mobile email, and other services.","password.expiring.subtitle.generic":"When password expires you will be locked out of your account.","password.expiring.subtitle.specific":"When password expires you will be locked out of your {0} account.","password.expired.custom.submit":"Go to {0}","password.expired.custom.subtitle":"This password is set on another website. Click the button below to go there and set a new password.","account.unlock.title":"Unlock account","account.unlock.email.or.username.placeholder":"Email or username","account.unlock.email.or.username.tooltip":"Email or username","account.unlock.sendText":"Send SMS","account.unlock.voiceCall":"Voice Call","account.unlock.sendEmail":"Send Email","account.unlock.emailSent.title":"Email sent!","account.unlock.emailSent.desc":"Email has been sent to {0} with instructions on unlocking your account.","account.unlock.question.title":"Answer Unlock Account Challenge","account.unlock.question.submit":"Unlock Account","account.unlock.unlocked.title":"Account successfully unlocked!","account.unlock.unlocked.desc":"You can log in using your existing username and password.","account.unlock.code.notReceived":"Didn't receive a code? Unlock via email","account.unlock.noFactorsEnabled":"No unlock options available. Please contact your administrator.","contact.support":"If you didn't provide a secondary email address or don't have access to email, please contact your administrator at {0}","socialauth.divider.text":"OR","socialauth.facebook.label":"Sign in with Facebook","socialauth.google.label":"Sign in with Google","socialauth.linkedin.label":"Sign in with LinkedIn","socialauth.microsoft.label":"Sign in with Microsoft","socialauth.popup.title":"External Identity Provider User Authentication","authbutton.divider.text":"or","registration.signup.label":"Don't have an account?","registration.signup.text":"Sign up","registration.complete.title":"Verification email sent","registration.complete.desc":"We just sent a verification email to {0}. Please check your email and verify your account to continue.","registration.form.title":"Create Account","registration.form.submit":"Register","registration.passwordComplexity.minLength":"At least {0} character(s)","registration.passwordComplexity.minLower":"At least {0} lowercase letter(s)","registration.passwordComplexity.minUpper":"At least {0} uppercase letter(s)","registration.passwordComplexity.minNumber":"At least {0} number(s)","registration.passwordComplexity.minSymbol":"At least {0} symbol(s)","registration.passwordComplexity.excludeUsername":"Does not contain part of username","registration.passwordComplexity.excludeAttribute":"Does not contain '{0}'","registration.required.fields.label":"* indicates required field","registration.default.callbackhook.error":"We could not process your registration at this time. Please try again later.","registration.error.userName.invalidEmail":"Invalid email address","registration.error.password.passwordRequirementsNotMet":"Password requirements were not met","registration.error.userName.notUniqueWithinOrg":"An account with that email already exists","piv.card":"PIV Card","piv.card.insert":"Please insert your PIV card and select the user certificate.","piv.card.error":"Certificate authentication failed. Contact your admin.","piv.card.error.empty":"No certificate selected. Choose a certificate and try again.","piv.card.error.invalid":"Certificate validation failed. Choose another certificate and try again.","piv.cac.card":"Sign in with PIV / CAC card","piv.cac.title":"PIV / CAC card","piv.cac.card.insert":"Please insert your PIV / CAC card and select the user certificate.","unsupported.oneDrive.title":"Your OneDrive version is not supported","unsupported.oneDrive.desc":"Upgrade now by installing the OneDrive for Business Next Generation Sync Client to login to Okta","unsupported.oneDrive.action":"Learn how to upgrade","unsupported.cookies.title":"Cookies are required","unsupported.cookies.desc":"Cookies are disabled on your browser. Please enable Cookies and refresh this page.","unsupported.cookies.action":"Refresh","deviceTrust.sso.text":"Sign in to access company resources","deviceTrust.sso.subtitle.2":"Your company uses Okta Mobile to get you approved to access this app.","deviceTrust.sso.button":"Sign in with Okta Mobile","deviceTrust.sso.expire.title":"Oops let's get you back on track","deviceTrust.sso.expire.subtitle":"Unfortunately the steps required to sign in took longer than expected and your attempt timed out.","deviceTrust.sso.expire.button":"Sign in using Okta Mobile","deviceTrust.universalLink.fallback.getOktaMobile.title":"Get Okta Mobile","deviceTrust.universalLink.fallback.getOktaMobile.subtitle":"Go to the {0}AppStore{1}, {0}search{1} for {0}Okta Mobile{1} and tap on {0}GET{1} Okta Mobile. Once installed, sign in to Okta Mobile and follow the instructions to secure your device.","consent.required.text":"<b>{0}</b> would like to:","consent.required.description":"By clicking Allow Access, you allow the actions listed above.","consent.required.termsOfService":"Terms of Service","consent.required.privacyPolicy":"Privacy Policy","consent.required.consentButton":"Allow Access","consent.required.cancelButton":"Don't Allow","cert.authentication.title":"Certificate authentication"}

/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = {"AF":"Afghanistan","AX":"Åland Islands","AL":"Albania","DZ":"Algeria","AS":"American Samoa","AD":"Andorra","AO":"Angola","AI":"Anguilla","AQ":"Antarctica","AG":"Antigua and Barbuda","AR":"Argentina","AM":"Armenia","AW":"Aruba","AU":"Australia","AT":"Austria","AZ":"Azerbaijan","BS":"Bahamas","BH":"Bahrain","BD":"Bangladesh","BB":"Barbados","BY":"Belarus","BE":"Belgium","BZ":"Belize","BJ":"Benin","BM":"Bermuda","BT":"Bhutan","BO":"Bolivia, Plurinational State of","BA":"Bosnia and Herzegovina","BW":"Botswana","BV":"Bouvet Island","BR":"Brazil","IO":"British Indian Ocean Territory","VG":"Virgin Islands, British","BN":"Brunei Darussalam","BG":"Bulgaria","BF":"Burkina Faso","BI":"Burundi","KH":"Cambodia","CM":"Cameroon","CA":"Canada","CV":"Cape Verde","KY":"Cayman Islands","CF":"Central African Republic","TD":"Chad","CL":"Chile","CN":"China","CX":"Christmas Island","CO":"Colombia","KM":"Comoros","CG":"Congo","CK":"Cook Islands","CR":"Costa Rica","CI":"Côte d'Ivoire","HR":"Croatia","CU":"Cuba","CY":"Cyprus","CZ":"Czech Republic","CD":"Congo, the Democratic Republic of the","DK":"Denmark","DJ":"Djibouti","DM":"Dominica","DO":"Dominican Republic","TL":"Timor-Leste","EC":"Ecuador","EG":"Egypt","SV":"El Salvador","GQ":"Equatorial Guinea","ER":"Eritrea","EE":"Estonia","ET":"Ethiopia","FK":"Falkland Islands (Malvinas)","FO":"Faroe Islands","FJ":"Fiji","FI":"Finland","FR":"France","GF":"French Guiana","PF":"French Polynesia","TF":"French Southern Territories","GA":"Gabon","GM":"Gambia","GE":"Georgia","DE":"Germany","GH":"Ghana","GI":"Gibraltar","GR":"Greece","GL":"Greenland","GD":"Grenada","GP":"Guadeloupe","GU":"Guam","GT":"Guatemala","GG":"Guernsey","GN":"Guinea","GW":"Guinea-Bissau","GY":"Guyana","HT":"Haiti","HM":"Heard Island and McDonald Islands","HN":"Honduras","HK":"Hong Kong","HU":"Hungary","IS":"Iceland","IN":"India","ID":"Indonesia","IR":"Iran, Islamic Republic of","IQ":"Iraq","IE":"Ireland","IL":"Israel","IT":"Italy","JM":"Jamaica","JP":"Japan","JE":"Jersey","JO":"Jordan","KZ":"Kazakhstan","KE":"Kenya","KI":"Kiribati","KR":"Korea, Republic of","XK":"Kosovo, Republic of","KW":"Kuwait","KG":"Kyrgyzstan","LA":"Lao People's Democratic Republic","LV":"Latvia","LB":"Lebanon","LS":"Lesotho","LR":"Liberia","LY":"Libya","LI":"Liechtenstein","LT":"Lithuania","LU":"Luxembourg","MO":"Macao","MK":"Macedonia, the former Yugoslav Republic of","MG":"Madagascar","MW":"Malawi","MY":"Malaysia","MV":"Maldives","ML":"Mali","MT":"Malta","MH":"Marshall Islands","MQ":"Martinique","MR":"Mauritania","MU":"Mauritius","YT":"Mayotte","MX":"Mexico","FM":"Micronesia, Federated States of","MD":"Moldova, Republic of","MC":"Monaco","MN":"Mongolia","ME":"Montenegro","MS":"Montserrat","MA":"Morocco","MZ":"Mozambique","MM":"Myanmar","NA":"Namibia","NR":"Nauru","NP":"Nepal","NL":"Netherlands","AN":"Netherlands Antilles","NC":"New Caledonia","NZ":"New Zealand","NI":"Nicaragua","NE":"Niger","NG":"Nigeria","NU":"Niue","NF":"Norfolk Island","KP":"Korea, Democratic People's Republic of","MP":"Northern Mariana Islands","NO":"Norway","OM":"Oman","PK":"Pakistan","PW":"Palau","PS":"Palestine, State of","PA":"Panama","PG":"Papua New Guinea","PY":"Paraguay","PE":"Peru","PH":"Philippines","PN":"Pitcairn","PL":"Poland","PT":"Portugal","PR":"Puerto Rico","QA":"Qatar","RE":"Réunion","RO":"Romania","RU":"Russian Federation","RW":"Rwanda","SH":"Saint Helena, Ascension and Tristan da Cunha","KN":"Saint Kitts and Nevis","LC":"Saint Lucia","PM":"Saint Pierre and Miquelon","VC":"Saint Vincent and the Grenadines","WS":"Samoa","SM":"San Marino","ST":"São Tomé and Príncipe","SA":"Saudi Arabia","SN":"Senegal","RS":"Serbia","SC":"Seychelles","SL":"Sierra Leone","SG":"Singapore","SK":"Slovakia","SI":"Slovenia","SB":"Solomon Islands","SO":"Somalia","ZA":"South Africa","GS":"South Georgia and the South Sandwich Islands","SS":"South Sudan","ES":"Spain","LK":"Sri Lanka","SD":"Sudan","SR":"Suriname","SJ":"Svalbard and Jan Mayen","SZ":"Swaziland","SE":"Sweden","CH":"Switzerland","SY":"Syrian Arab Republic","TW":"Taiwan","TJ":"Tajikistan","TZ":"Tanzania, United Republic of","TH":"Thailand","TG":"Togo","TK":"Tokelau","TO":"Tonga","TT":"Trinidad and Tobago","TN":"Tunisia","TR":"Turkey","TM":"Turkmenistan","TC":"Turks and Caicos Islands","TV":"Tuvalu","VI":"Virgin Islands, U.S.","UG":"Uganda","UA":"Ukraine","AE":"United Arab Emirates","GB":"United Kingdom","US":"United States","UM":"United States Minor Outlying Islands","UY":"Uruguay","UZ":"Uzbekistan","VU":"Vanuatu","VA":"Holy See (Vatican City State)","VE":"Venezuela, Bolivarian Republic of","VN":"Viet Nam","WF":"Wallis and Futuna","EH":"Western Sahara","YE":"Yemen","ZM":"Zambia","ZW":"Zimbabwe"}

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint max-params: [2, 52] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(170), __webpack_require__(208), __webpack_require__(113), __webpack_require__(214), __webpack_require__(215), __webpack_require__(216), __webpack_require__(226), __webpack_require__(230), __webpack_require__(231), __webpack_require__(232), __webpack_require__(233), __webpack_require__(240), __webpack_require__(241), __webpack_require__(242), __webpack_require__(243), __webpack_require__(244), __webpack_require__(246), __webpack_require__(247), __webpack_require__(248), __webpack_require__(249), __webpack_require__(251), __webpack_require__(252), __webpack_require__(124), __webpack_require__(253), __webpack_require__(254), __webpack_require__(255), __webpack_require__(256), __webpack_require__(257), __webpack_require__(258), __webpack_require__(260), __webpack_require__(262), __webpack_require__(263), __webpack_require__(264), __webpack_require__(265), __webpack_require__(266), __webpack_require__(267), __webpack_require__(268), __webpack_require__(269), __webpack_require__(270), __webpack_require__(271), __webpack_require__(272), __webpack_require__(273), __webpack_require__(274), __webpack_require__(275), __webpack_require__(276), __webpack_require__(280), __webpack_require__(281), __webpack_require__(284), __webpack_require__(99), __webpack_require__(288), __webpack_require__(291)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (BaseLoginRouter, IDPDiscoveryController, PrimaryAuthController, VerifyDuoController, VerifyPIVController, MfaVerifyController, VerifyWindowsHelloController, VerifyU2FController, VerifyWebauthnController, VerifyCustomFactorController, EnrollChoicesController, EnrollDuoController, EnrollQuestionController, EnrollPasswordController, EnrollWindowsHelloController, EnrollCallAndSmsController, EnrollOnPremController, EnrollSymantecVipController, EnrollYubikeyController, EnrollTotpController, EnrollU2FController, EnrollWebauthnController, EnrollCustomFactorController, EnrollActivateCustomFactorController, EnrollHotpController, BarcodeTotpController, BarcodePushController, ActivateTotpController, ManualSetupTotpController, ManualSetupPushController, EnrollmentLinkSentController, EnterPasscodePushFlowController, PasswordExpiredController, CustomPasswordExpiredController, ForgotPasswordController, RecoveryChallengeController, PwdResetEmailSentController, RecoveryQuestionController, PasswordResetController, RecoveryLoadingController, UnlockAccountController, AccountUnlockedController, UnlockEmailSentController, RefreshAuthStateController, RegistrationController, RegistrationCompleteController, ConsentRequiredController, EnrollUserController, SecurityBeacon, FactorBeacon, PIVBeacon) {
  return BaseLoginRouter.extend({

    routes: {
      '': 'defaultAuth',
      'signin': 'primaryAuth',
      'signin/verify/duo/web': 'verifyDuo',
      'signin/verify/piv': 'verifyPIV',
      'signin/verify/fido/webauthn': 'verifyWebauthn',
      'signin/verify/webauthn': 'verifyWebauthn',
      'signin/verify/fido/u2f': 'verifyU2F',
      'signin/verify/u2f': 'verifyU2F',
      'signin/verify/generic_saml/assertion:saml2': 'verifySAMLFactor',
      'signin/verify/generic_oidc/assertion:oidc': 'verifyOIDCFactor',
      'signin/verify/custom/claims_provider': 'verifyClaimsFactor',
      'signin/verify/:factorType': 'verifyNoProvider',
      'signin/verify/:provider/:factorType(/:factorIndex)': 'verify',
      'signin/enroll': 'enrollChoices',
      'signin/enroll/duo/web': 'enrollDuo',
      'signin/enroll/okta/question': 'enrollQuestion',
      'signin/enroll/okta/password': 'enrollPassword',
      'signin/enroll/okta/sms': 'enrollSms',
      'signin/enroll/okta/call': 'enrollCall',
      'signin/enroll-activate/okta/sms': 'enrollSms',
      'signin/enroll/rsa/token': 'enrollRsa',
      'signin/enroll/del_oath/token': 'enrollOnPrem',
      'signin/enroll/symantec/token': 'enrollSymantecVip',
      'signin/enroll/yubico/token:hardware': 'enrollYubikey',
      'signin/enroll/fido/webauthn': 'enrollWebauthn',
      'signin/enroll/fido/u2f': 'enrollU2F',
      'signin/enroll/generic_saml/assertion:saml2': 'enrollSAMLFactor',
      'signin/enroll/generic_oidc/assertion:oidc': 'enrollOIDCFactor',
      'signin/enroll/custom/claims_provider': 'enrollClaimsFactor',
      'signin/enroll/custom/token:hotp': 'enrollHotpFactor',
      'signin/enroll/:provider/:factorType': 'enrollTotpFactor',
      'signin/enroll-activate/okta/push': 'scanBarcodePushFactor',
      'signin/enroll-activate/okta/push/manual': 'manualSetupPushFactor',
      'signin/enroll-activate/okta/push/sent': 'activationLinkSent',
      'signin/enroll-activate/okta/token:software:totp/passcode': 'enterPasscodeInPushEnrollmentFlow',
      'signin/enroll-activate/custom/claims_provider': 'enrollActivateClaimsFactor',
      'signin/enroll-activate/:provider/:factorType': 'scanBarcodeTotpFactor',
      'signin/enroll-activate/:provider/:factorType/activate': 'activateTotpFactor',
      'signin/enroll-activate/:provider/:factorType/manual': 'manualSetupTotpFactor',
      'signin/password-expired': 'passwordExpired',
      'signin/custom-password-expired': 'customPasswordExpired',
      'signin/forgot-password': 'forgotPassword',
      'signin/recovery-challenge': 'recoveryChallenge',
      'signin/recovery-emailed': 'recoveryEmailSent',
      'signin/recovery-question': 'recoveryQuestion',
      'signin/password-reset': 'passwordReset',
      'signin/reset-password/:token': 'recoveryLoading',
      'signin/user-unlock/:token': 'recoveryLoading',
      'signin/recovery/:token': 'recoveryLoading',
      'signin/unlock-emailed': 'unlockEmailSent',
      'signin/unlock': 'unlockAccount',
      'signin/account-unlocked': 'accountUnlocked',
      'signin/refresh-auth-state(/:token)': 'refreshAuthState',
      'signin/register': 'register',
      'signin/register-complete': 'registerComplete',
      'signin/consent': 'consentRequired',
      'signin/enroll-user': 'enrollUser',
      '*wildcard': 'defaultAuth'
    },

    // Route handlers that do not require a stateToken. If the page is refreshed,
    // these functions will not require a status call to refresh the stateToken.
    stateLessRouteHandlers: ['defaultAuth', 'idpDiscovery', 'primaryAuth', 'forgotPassword', 'recoveryLoading', 'unlockAccount', 'refreshAuthState', 'register', 'registerComplete', 'verifyPIV'],

    defaultAuth: function defaultAuth() {
      if (this.settings.get('features.idpDiscovery')) {
        this.idpDiscovery();
      } else {
        this.primaryAuth();
      }
    },

    idpDiscovery: function idpDiscovery() {
      this.render(IDPDiscoveryController, { Beacon: SecurityBeacon });
    },

    primaryAuth: function primaryAuth() {
      this.render(PrimaryAuthController, { Beacon: SecurityBeacon });
    },

    verifyDuo: function verifyDuo() {
      this.render(VerifyDuoController, {
        provider: 'DUO',
        factorType: 'web',
        Beacon: FactorBeacon
      });
    },

    verifyPIV: function verifyPIV() {
      this.render(VerifyPIVController, { Beacon: PIVBeacon });
    },

    verifyWebauthn: function verifyWebauthn() {
      if (this.settings.get('features.webauthn')) {
        this.render(VerifyWebauthnController, {
          provider: 'FIDO',
          factorType: 'webauthn',
          Beacon: FactorBeacon
        });
      } else {
        this.render(VerifyWindowsHelloController, {
          provider: 'FIDO',
          factorType: 'webauthn',
          Beacon: FactorBeacon
        });
      }
    },

    verifyU2F: function verifyU2F() {
      this.render(VerifyU2FController, {
        provider: 'FIDO',
        factorType: 'u2f',
        Beacon: FactorBeacon
      });
    },

    verifySAMLFactor: function verifySAMLFactor() {
      this.render(VerifyCustomFactorController, {
        provider: 'GENERIC_SAML',
        factorType: 'assertion:saml2',
        Beacon: FactorBeacon
      });
    },

    verifyOIDCFactor: function verifyOIDCFactor() {
      this.render(VerifyCustomFactorController, {
        provider: 'GENERIC_OIDC',
        factorType: 'assertion:oidc',
        Beacon: FactorBeacon
      });
    },

    verifyClaimsFactor: function verifyClaimsFactor() {
      this.render(VerifyCustomFactorController, {
        provider: 'CUSTOM',
        factorType: 'claims_provider',
        Beacon: FactorBeacon
      });
    },

    verify: function verify(provider, factorType, factorIndex) {
      this.render(MfaVerifyController, {
        provider: provider.toUpperCase(),
        factorType: factorType,
        factorIndex: factorIndex,
        Beacon: FactorBeacon
      });
    },

    verifyNoProvider: function verifyNoProvider(factorType) {
      this.render(MfaVerifyController, {
        factorType: factorType,
        Beacon: FactorBeacon
      });
    },

    enrollChoices: function enrollChoices() {
      this.render(EnrollChoicesController, { Beacon: SecurityBeacon });
    },

    enrollDuo: function enrollDuo() {
      this.render(EnrollDuoController, {
        provider: 'DUO',
        factorType: 'web',
        Beacon: FactorBeacon
      });
    },

    enrollQuestion: function enrollQuestion() {
      this.render(EnrollQuestionController, {
        provider: 'OKTA',
        factorType: 'question',
        Beacon: FactorBeacon
      });
    },

    enrollPassword: function enrollPassword() {
      this.render(EnrollPasswordController, {
        provider: 'OKTA',
        factorType: 'password',
        Beacon: FactorBeacon
      });
    },

    enrollSms: function enrollSms() {
      this.render(EnrollCallAndSmsController, {
        provider: 'OKTA',
        factorType: 'sms',
        Beacon: FactorBeacon
      });
    },

    enrollCall: function enrollCall() {
      this.render(EnrollCallAndSmsController, {
        provider: 'OKTA',
        factorType: 'call',
        Beacon: FactorBeacon
      });
    },

    enrollRsa: function enrollRsa() {
      this.render(EnrollOnPremController, {
        provider: 'RSA',
        factorType: 'token',
        Beacon: FactorBeacon
      });
    },

    enrollOnPrem: function enrollOnPrem() {
      this.render(EnrollOnPremController, {
        provider: 'DEL_OATH',
        factorType: 'token',
        Beacon: FactorBeacon
      });
    },

    enrollSymantecVip: function enrollSymantecVip() {
      this.render(EnrollSymantecVipController, {
        provider: 'SYMANTEC',
        factorType: 'token',
        Beacon: FactorBeacon
      });
    },

    enrollYubikey: function enrollYubikey() {
      this.render(EnrollYubikeyController, {
        provider: 'YUBICO',
        factorType: 'token:hardware',
        Beacon: FactorBeacon
      });
    },

    enrollSAMLFactor: function enrollSAMLFactor() {
      this.render(EnrollCustomFactorController, {
        provider: 'GENERIC_SAML',
        factorType: 'assertion:saml2',
        Beacon: FactorBeacon
      });
    },

    enrollOIDCFactor: function enrollOIDCFactor() {
      this.render(EnrollCustomFactorController, {
        provider: 'GENERIC_OIDC',
        factorType: 'assertion:oidc',
        Beacon: FactorBeacon
      });
    },

    enrollClaimsFactor: function enrollClaimsFactor() {
      this.render(EnrollCustomFactorController, {
        provider: 'CUSTOM',
        factorType: 'claims_provider',
        Beacon: FactorBeacon
      });
    },

    enrollActivateClaimsFactor: function enrollActivateClaimsFactor() {
      this.render(EnrollActivateCustomFactorController, {
        provider: 'CUSTOM',
        factorType: 'claims_provider',
        Beacon: FactorBeacon
      });
    },

    enrollTotpFactor: function enrollTotpFactor(provider, factorType) {
      this.render(EnrollTotpController, {
        provider: provider.toUpperCase(),
        factorType: factorType,
        Beacon: FactorBeacon
      });
    },

    enrollHotpFactor: function enrollHotpFactor() {
      this.render(EnrollHotpController, {
        provider: 'CUSTOM',
        factorType: 'token:hotp',
        Beacon: FactorBeacon
      });
    },

    enrollWebauthn: function enrollWebauthn() {
      if (this.settings.get('features.webauthn')) {
        this.render(EnrollWebauthnController, {
          provider: 'FIDO',
          factorType: 'webauthn',
          Beacon: FactorBeacon
        });
      } else {
        this.render(EnrollWindowsHelloController, {
          provider: 'FIDO',
          factorType: 'webauthn',
          Beacon: FactorBeacon
        });
      }
    },

    enrollU2F: function enrollU2F() {
      this.render(EnrollU2FController, {
        provider: 'FIDO',
        factorType: 'u2f',
        Beacon: FactorBeacon
      });
    },

    scanBarcodeTotpFactor: function scanBarcodeTotpFactor(provider, factorType) {
      this.render(BarcodeTotpController, {
        provider: provider.toUpperCase(),
        factorType: factorType,
        Beacon: FactorBeacon
      });
    },

    scanBarcodePushFactor: function scanBarcodePushFactor() {
      this.render(BarcodePushController, {
        provider: 'OKTA',
        factorType: 'push',
        Beacon: FactorBeacon
      });
    },

    activateTotpFactor: function activateTotpFactor(provider, factorType) {
      this.render(ActivateTotpController, {
        provider: provider.toUpperCase(),
        factorType: factorType,
        Beacon: FactorBeacon
      });
    },

    manualSetupTotpFactor: function manualSetupTotpFactor(provider, factorType) {
      this.render(ManualSetupTotpController, {
        provider: provider.toUpperCase(),
        factorType: factorType,
        Beacon: FactorBeacon
      });
    },

    manualSetupPushFactor: function manualSetupPushFactor() {
      this.render(ManualSetupPushController, {
        provider: 'OKTA',
        factorType: 'push',
        Beacon: FactorBeacon
      });
    },

    activationLinkSent: function activationLinkSent() {
      this.render(EnrollmentLinkSentController, {
        provider: 'OKTA',
        factorType: 'push',
        Beacon: FactorBeacon
      });
    },

    enterPasscodeInPushEnrollmentFlow: function enterPasscodeInPushEnrollmentFlow() {
      this.render(EnterPasscodePushFlowController, {
        provider: 'OKTA',
        factorType: 'token:software:totp',
        Beacon: FactorBeacon
      });
    },

    passwordExpired: function passwordExpired() {
      this.render(PasswordExpiredController, { Beacon: SecurityBeacon });
    },

    customPasswordExpired: function customPasswordExpired() {
      this.render(CustomPasswordExpiredController, { Beacon: SecurityBeacon });
    },

    forgotPassword: function forgotPassword() {
      this.render(ForgotPasswordController);
    },

    recoveryChallenge: function recoveryChallenge() {
      this.render(RecoveryChallengeController, { Beacon: SecurityBeacon });
    },

    recoveryEmailSent: function recoveryEmailSent() {
      this.render(PwdResetEmailSentController, { Beacon: SecurityBeacon });
    },

    unlockEmailSent: function unlockEmailSent() {
      this.render(UnlockEmailSentController, { Beacon: SecurityBeacon });
    },

    recoveryQuestion: function recoveryQuestion() {
      this.render(RecoveryQuestionController, { Beacon: SecurityBeacon });
    },

    passwordReset: function passwordReset() {
      this.render(PasswordResetController, { Beacon: SecurityBeacon });
    },

    recoveryLoading: function recoveryLoading(token) {
      this.render(RecoveryLoadingController, {
        token: token,
        Beacon: SecurityBeacon
      });
    },

    unlockAccount: function unlockAccount() {
      this.render(UnlockAccountController);
    },

    accountUnlocked: function accountUnlocked() {
      this.render(AccountUnlockedController, { Beacon: SecurityBeacon });
    },

    refreshAuthState: function refreshAuthState(token) {
      this.render(RefreshAuthStateController, {
        token: token,
        Beacon: SecurityBeacon
      });
    },

    register: function register() {
      this.render(RegistrationController);
    },

    registerComplete: function registerComplete() {
      this.render(RegistrationCompleteController);
    },

    consentRequired: function consentRequired() {
      this.render(ConsentRequiredController);
    },

    enrollUser: function enrollUser() {
      this.render(EnrollUserController);
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint max-params: [2, 15], max-statements: [2, 18] */
// BaseLoginRouter contains the more complicated router logic - rendering/
// transition, etc. Most router changes should happen in LoginRouter (which is
// responsible for adding new routes)
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(26), __webpack_require__(97), __webpack_require__(98), __webpack_require__(99), __webpack_require__(108), __webpack_require__(188), __webpack_require__(112), __webpack_require__(12), __webpack_require__(56), __webpack_require__(13), __webpack_require__(5), __webpack_require__(3), __webpack_require__(55), __webpack_require__(25)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, BrowserFeatures, Settings, Header, SecurityBeacon, AuthContainer, AppState, ColorsUtil, RouterUtil, Animations, Errors, Util, Enums, Bundles, Logger) {
  var _ = Okta._,
      $ = Okta.$,
      Backbone = Okta.Backbone;


  function isStateLessRouteHandler(router, fn) {
    return _.find(router.stateLessRouteHandlers, function (routeName) {
      return fn === router[routeName];
    });
  }

  function beaconIsAvailable(Beacon, settings) {
    if (!Beacon) {
      return false;
    }
    if (Beacon === SecurityBeacon) {
      return settings.get('features.securityImage');
    }
    return true;
  }

  function loadLanguage(appState, i18n, assetBaseUrl, assetRewrite) {
    var timeout = setTimeout(function () {
      // Trigger a spinner if we're waiting on a request for a new language.
      appState.trigger('loading', true);
    }, 200);
    return Bundles.loadLanguage(appState.get('languageCode'), i18n, {
      baseUrl: assetBaseUrl,
      rewrite: assetRewrite
    }).then(function () {
      clearTimeout(timeout);
      appState.trigger('loading', false);
    });
  }

  return Okta.Router.extend({
    Events: Backbone.Events,

    initialize: function initialize(options) {
      // Create a default success and/or error handler if
      // one is not provided.
      if (!options.globalSuccessFn) {
        options.globalSuccessFn = function () {};
      }
      if (!options.globalErrorFn) {
        options.globalErrorFn = function (err) {
          Logger.error(err);
        };
      }
      this.settings = new Settings(_.omit(options, 'el', 'authClient'), { parse: true });
      this.settings.setAuthClient(options.authClient);

      if (!options.el) {
        this.settings.callGlobalError(new Errors.ConfigError(Okta.loc('error.required.el')));
      }

      $('body > div').on('click', function () {
        // OKTA-69769 Tooltip wont close on iPhone/iPad
        // Registering a click handler on the first div
        // allows a tap that falls outside the tooltip
        // to be registered as a tap by iOS
        // and then the open tooltip will lose focus and close.
      });

      this.appState = new AppState({
        baseUrl: this.settings.get('baseUrl'),
        settings: this.settings
      }, { parse: true });

      var wrapper = new AuthContainer({ appState: this.appState });
      Okta.$(options.el).append(wrapper.render().$el);
      this.el = '#' + Enums.WIDGET_CONTAINER_ID;

      this.header = new Header({
        el: this.el,
        appState: this.appState,
        settings: this.settings
      });

      this.listenTo(this.appState, 'change:transactionError', function (appState, err) {
        RouterUtil.routeAfterAuthStatusChangeError(this, err);
      });

      this.listenTo(this.appState, 'change:transaction', function (appState, trans) {
        RouterUtil.routeAfterAuthStatusChange(this, trans.data);
      });

      this.listenTo(this.appState, 'navigate', function (url) {
        this.navigate(url, { trigger: true });
      });
    },

    execute: function execute(cb, args) {
      // Recovery flow with a token passed through widget settings
      var recoveryToken = this.settings.get('recoveryToken');
      if (recoveryToken) {
        this.settings.unset('recoveryToken');
        this.navigate(RouterUtil.createRecoveryUrl(recoveryToken), { trigger: true });
        return;
      }

      // Refresh flow with a stateToken passed through widget settings
      var stateToken = this.settings.get('stateToken');
      if (stateToken) {
        this.settings.unset('stateToken');
        this.navigate(RouterUtil.createRefreshUrl(stateToken), { trigger: true });
        return;
      }

      // Normal flow - we've either navigated to a stateless page, or are
      // in the middle of an auth flow
      var trans = this.appState.get('transaction');
      if (trans && trans.data || isStateLessRouteHandler(this, cb)) {
        cb.apply(this, args);
        return;
      }

      // StateToken cookie exists on page load, and we are on a stateful url
      if (this.settings.getAuthClient().tx.exists()) {
        this.navigate(RouterUtil.createRefreshUrl(), { trigger: true });
        return;
      }

      // We've hit a page that requires state, but have no stateToken - redirect
      // back to primary auth
      this.navigate('', { trigger: true });
    },

    // Overriding the default navigate method to allow the widget consumer
    // to "turn off" routing - if features.router is false, the browser
    // location bar will not update when the router navigates
    navigate: function navigate(fragment, options) {
      if (this.settings.get('features.router')) {
        return Okta.Router.prototype.navigate.apply(this, arguments);
      }
      if (options && options.trigger) {
        return Backbone.history.loadUrl(fragment);
      }
    },

    render: function render(Controller, options) {
      options || (options = {});

      var Beacon = options.Beacon;
      var controllerOptions = _.extend({ settings: this.settings, appState: this.appState }, _.omit(options, 'Beacon'));

      // Since we have a wrapper view, render our wrapper and use its content
      // element as our new el.
      // Note: Render it here because we know dom is ready at this point
      if (!this.header.rendered()) {
        this.el = this.header.render().getContentEl();
      }

      // If we need to load a language (or apply custom i18n overrides), do
      // this now and re-run render after it's finished.
      if (!Bundles.isLoaded(this.appState.get('languageCode'))) {
        return loadLanguage(this.appState, this.settings.get('i18n'), this.settings.get('assets.baseUrl'), this.settings.get('assets.rewrite')).then(_.bind(this.render, this, Controller, options)).done();
      }

      // Load the custom colors only on the first render
      if (this.settings.get('colors.brand') && !ColorsUtil.isLoaded()) {
        var colors = {
          brand: this.settings.get('colors.brand')
        };
        ColorsUtil.addStyle(colors);
      }

      var oldController = this.controller;
      this.controller = new Controller(controllerOptions);

      // Bubble up all controller events
      this.listenTo(this.controller, 'all', this.trigger);

      // First run fetchInitialData, in case the next controller needs data
      // before it's initial render. This will leave the current page in a
      // loading state.
      this.controller.fetchInitialData().then(_.bind(function () {

        // Beacon transition occurs in parallel to page swap
        if (!beaconIsAvailable(Beacon, this.settings)) {
          Beacon = null;
        }
        this.header.setBeacon(Beacon, controllerOptions);

        this.controller.render();

        if (!oldController) {
          this.el.append(this.controller.el);
          this.controller.postRenderAnimation();
          return;
        }

        return Animations.swapPages({
          $parent: this.el,
          $oldRoot: oldController.$el,
          $newRoot: this.controller.$el,
          dir: oldController.state.get('navigateDir'),
          ctx: this,
          success: function success() {
            var flashError = this.appState.get('flashError'),
                model = this.controller.model;
            oldController.remove();
            oldController.$el.remove();
            this.controller.postRenderAnimation();
            if (flashError) {
              model.trigger('error', model, {
                responseJSON: {
                  errorSummary: Okta.loc('error.expired.session')
                }
              });
              this.appState.unset('flashError');
              Util.triggerAfterError(this.controller, flashError);
            }
          }
        });
      }, this)).fail(function () {
        // OKTA-69665 - if an error occurs in fetchInitialData, we're left in
        // a state with two active controllers. Therefore, we clean up the
        // old one. Note: This explicitly handles the invalid token case -
        // if we get some other type of error which doesn't force a redirect,
        // we will probably be left in a bad state. I.e. old controller is
        // dropped and new controller is not rendered.
        if (oldController) {
          oldController.remove();
          oldController.$el.remove();
        }
      }).done();
    },

    start: function start() {
      var pushState = false;
      // Support for browser's back button.
      if (window.addEventListener && this.settings.get('features.router')) {
        window.addEventListener('popstate', _.bind(function (e) {
          if (this.controller.back) {
            e.preventDefault();
            e.stopImmediatePropagation();
            this.controller.back();
          }
        }, this));
        pushState = BrowserFeatures.supportsPushState();
      }
      Okta.Router.prototype.start.call(this, { pushState: pushState });
    },

    hide: function hide() {
      this.header.$el.hide();
    },

    show: function show() {
      this.header.$el.show();
    },

    remove: function remove() {
      this.controller.remove();
      this.header.$el.remove();
      Bundles.remove();
      Backbone.history.stop();
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({

    template: '\
      <div class="beacon-blank"/>\
      <div class="bg-helper auth-beacon auth-beacon-security" data-se="loading-beacon">\
      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border"/>\
      </div>\
    ',

    equals: function equals(Beacon) {
      return Beacon && this instanceof Beacon;
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(173);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 173 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(93);
__webpack_require__(46);
__webpack_require__(53);
__webpack_require__(175);
__webpack_require__(186);
__webpack_require__(187);
module.exports = __webpack_require__(7).Promise;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(39);
var global = __webpack_require__(10);
var ctx = __webpack_require__(47);
var classof = __webpack_require__(75);
var $export = __webpack_require__(16);
var isObject = __webpack_require__(20);
var aFunction = __webpack_require__(48);
var anInstance = __webpack_require__(176);
var forOf = __webpack_require__(177);
var speciesConstructor = __webpack_require__(104);
var task = __webpack_require__(105).set;
var microtask = __webpack_require__(181)();
var newPromiseCapabilityModule = __webpack_require__(76);
var perform = __webpack_require__(106);
var userAgent = __webpack_require__(182);
var promiseResolve = __webpack_require__(107);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(11)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(183)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(51)($Promise, PROMISE);
__webpack_require__(184)(PROMISE);
Wrapper = __webpack_require__(7)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(185)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 176 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(47);
var call = __webpack_require__(178);
var isArrayIter = __webpack_require__(179);
var anObject = __webpack_require__(19);
var toLength = __webpack_require__(89);
var getIterFn = __webpack_require__(103);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(19);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(34);
var ITERATOR = __webpack_require__(11)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 180 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(10);
var macrotask = __webpack_require__(105).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(40)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(10);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(28);
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(10);
var core = __webpack_require__(7);
var dP = __webpack_require__(24);
var DESCRIPTORS = __webpack_require__(17);
var SPECIES = __webpack_require__(11)('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(11)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(16);
var core = __webpack_require__(7);
var global = __webpack_require__(10);
var speciesConstructor = __webpack_require__(104);
var promiseResolve = __webpack_require__(107);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(16);
var newPromiseCapability = __webpack_require__(76);
var perform = __webpack_require__(106);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4), __webpack_require__(57), __webpack_require__(26), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q, Factor, BrowserFeatures, Errors) {

  // Keep track of stateMachine with this special model. Some reasons to not
  // keep it generic:
  // 1. We know exactly what we're using appState for by requiring props
  // 2. Can have some derived functions to help us translate the lastAuthRes

  var _ = Okta._;
  var $ = Okta.$;
  var compile = Okta.Handlebars.compile;

  var DEFAULT_APP_LOGO = '/img/logos/default.png';
  var USER_NOT_SEEN_ON_DEVICE = '/img/security/unknown.png';
  var UNDEFINED_USER = '/img/security/default.png';
  var NEW_USER = '/img/security/unknown-device.png';
  var NEW_USER_IMAGE_DESCRIPTION = '';
  var UNDEFINED_USER_IMAGE_DESCRIPTION = '';
  var UNKNOWN_IMAGE_DESCRIPTION = '';

  var securityImageUrlTpl = compile('{{baseUrl}}/login/getimage?username={{username}}');

  function getSecurityImage(baseUrl, username, deviceFingerprint) {
    // When the username is empty, we want to show the default image.
    if (_.isEmpty(username) || _.isUndefined(username)) {
      return Q({
        'securityImage': UNDEFINED_USER,
        'securityImageDescription': UNDEFINED_USER_IMAGE_DESCRIPTION
      });
    }

    // Reserved characters in the username must be escaped before the query can be safely executed
    username = encodeURIComponent(username);
    var url = securityImageUrlTpl({ baseUrl: baseUrl, username: username });

    var data = {
      url: url,
      dataType: 'json'
    };
    if (deviceFingerprint) {
      data['headers'] = { 'X-Device-Fingerprint': deviceFingerprint };
    }
    return Q($.ajax(data)).then(function (res) {
      if (res.pwdImg === USER_NOT_SEEN_ON_DEVICE) {
        // When we get an unknown.png security image from OKTA,
        // we want to show the unknown-device security image.
        // We are mapping the server's img url to a new one because
        // we still need to support the original login page.
        return {
          'securityImage': NEW_USER,
          'securityImageDescription': NEW_USER_IMAGE_DESCRIPTION
        };
      }
      return {
        'securityImage': res.pwdImg,
        'securityImageDescription': res.imageDescription || UNKNOWN_IMAGE_DESCRIPTION
      };
    });
  }

  function getMinutesString(factorLifetimeInMinutes) {
    if (factorLifetimeInMinutes > 60 && factorLifetimeInMinutes <= 1440) {
      var lifetimeInHours = factorLifetimeInMinutes / 60;
      return Okta.loc('hours', 'login', [lifetimeInHours]);
    } else if (factorLifetimeInMinutes > 1440) {
      var lifetimeInDays = factorLifetimeInMinutes / 1440;
      return Okta.loc('days', 'login', [lifetimeInDays]);
    }
    //Use minutes as the time unit by default
    if (factorLifetimeInMinutes === 1) {
      return Okta.loc('minutes.oneMinute', 'login');
    }
    return Okta.loc('minutes', 'login', [factorLifetimeInMinutes]);
  }

  function getGracePeriodRemainingDays(gracePeriodEndDate) {
    var endDate = new Date(gracePeriodEndDate).getTime();
    var remainingDays = Math.floor((endDate - new Date().getTime()) / (1000 * 3600 * 24));
    return remainingDays;
  }

  function combineFactorsObjects(factorTypes, factors) {
    var addedFactorTypes = [];
    var combinedFactors = [];
    _.each(factors, function (factor) {
      var factorType = factor.factorType;
      if (!_.contains(addedFactorTypes, factorType)) {
        var factorTypeObj = _.findWhere(factorTypes, { factorType: factorType });
        if (factorTypeObj) {
          addedFactorTypes.push(factorType);
          combinedFactors.push(factorTypeObj);
        } else {
          combinedFactors.push(factor);
        }
      }
    });
    return combinedFactors;
  }

  return Okta.Model.extend({

    initialize: function initialize() {
      // Handle this in initialize (as opposed to a derived property) because
      // the operation is asynchronous
      if (this.settings.get('features.securityImage')) {
        var self = this;
        this.listenTo(this, 'change:username', function (model, username) {
          getSecurityImage(this.get('baseUrl'), username, this.get('deviceFingerprint')).then(function (image) {
            model.set('securityImage', image.securityImage);
            model.set('securityImageDescription', image.securityImageDescription);
            model.unset('deviceFingerprint'); //Fingerprint can only be used once
          }).fail(function (jqXhr) {
            // Only notify the consumer on a CORS error
            if (BrowserFeatures.corsIsNotEnabled(jqXhr)) {
              self.settings.callGlobalError(new Errors.UnsupportedBrowserError(Okta.loc('error.enabled.cors')));
            } else {
              throw jqXhr;
            }
          }).done();
        });
      }
    },

    local: {
      baseUrl: 'string',
      lastAuthResponse: ['object', true, {}],
      transaction: 'object',
      transactionError: 'object',
      introspectSuccess: 'object', // only set during introspection
      introspectError: 'object', // only set during introspection
      username: 'string',
      factors: 'object',
      policy: 'object',
      securityImage: ['string', true, UNDEFINED_USER],
      securityImageDescription: ['string', true, UNDEFINED_USER_IMAGE_DESCRIPTION],
      userCountryCode: 'string',
      userPhoneNumber: 'string',
      factorActivationType: 'string',
      flashError: 'object',
      beaconType: 'string',
      deviceFingerprint: 'string', // valid only once
      typingPattern: 'string',
      // Note: languageCode is special in that it is shared between Settings
      // and AppState. Settings is the *configured* language, and is static.
      // AppState is the dynamic language state - it can be changed via a
      // language picker, etc.
      languageCode: ['string', true],
      disableUsername: ['boolean', false, false],
      trapMfaRequiredResponse: ['boolean', false, false],
      lastFailedChallengeFactorData: ['object', false]
    },

    setAuthResponse: function setAuthResponse(res) {
      var _this = this;

      // Because of MFA_CHALLENGE (i.e. DUO), we need to remember factors
      // across auth responses. Not doing this, for example, results in being
      // unable to switch away from the duo factor dropdown.
      if (res._embedded && res._embedded.policy) {
        this.set('policy', res._embedded.policy);
      }

      if (res._embedded && res._embedded.factors) {
        var factors = res._embedded.factors;
        if (res._embedded.factorTypes) {
          factors = combineFactorsObjects(res._embedded.factorTypes, factors);
        }

        var factorsObject = _.map(factors, function (factor) {
          factor.settings = _this.settings;
          factor.appState = _this;
          return factor;
        });
        this.set('factors', new Factor.Collection(factorsObject, { parse: true }));
      }

      this.set('lastAuthResponse', res);
    },

    clearLastAuthResponse: function clearLastAuthResponse() {
      this.set('lastAuthResponse', {});
    },

    setLastFailedChallengeFactorData: function setLastFailedChallengeFactorData() {
      this.set('lastFailedChallengeFactorData', {
        factor: this.get('factor'),
        errorMessage: this.get('factorResultErrorMessage')
      });
    },

    clearLastFailedChallengeFactorData: function clearLastFailedChallengeFactorData() {
      this.unset('lastFailedChallengeFactorData');
    },

    derived: {
      'isSuccessResponse': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'SUCCESS';
        }
      },
      'isMfaRequired': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'MFA_REQUIRED' || res.status === 'FACTOR_REQUIRED';
        }
      },
      'isProfileRequired': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'PROFILE_REQUIRED';
        }
      },
      'isMfaEnroll': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'MFA_ENROLL' || res.status === 'FACTOR_ENROLL';
        }
      },
      'isMfaChallenge': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'MFA_CHALLENGE' || res.status === 'FACTOR_CHALLENGE';
        }
      },
      'isUnauthenticated': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'UNAUTHENTICATED';
        }
      },
      'isMfaRejectedByUser': {
        // MFA failures are usually error responses
        // except in the case of Okta Push, when a
        // user clicks 'deny' on his phone.
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.factorResult === 'REJECTED';
        }
      },
      'isMfaTimeout': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.factorResult === 'TIMEOUT';
        }
      },
      'isMfaEnrollActivate': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'MFA_ENROLL_ACTIVATE' || res.status === 'FACTOR_ENROLL_ACTIVATE';
        }
      },
      'isWaitingForActivation': {
        deps: ['isMfaEnrollActivate', 'lastAuthResponse'],
        fn: function fn(isMfaEnrollActivate, res) {
          return isMfaEnrollActivate && res.factorResult === 'WAITING';
        }
      },
      'isWaitingForNumberChallenge': {
        deps: ['lastAuthResponse', 'isMfaChallenge'],
        fn: function fn(res, isMfaChallenge) {
          if (isMfaChallenge && res && res.factorResult === 'WAITING' && res._embedded && res._embedded.factor && res._embedded.factor._embedded && res._embedded.factor._embedded.challenge) {
            return true;
          }
          return false;
        }
      },
      'hasMultipleFactorsAvailable': {
        deps: ['factors', 'isMfaRequired', 'isMfaChallenge', 'isUnauthenticated'],
        fn: function fn(factors, isMfaRequired, isMfaChallenge, isUnauthenticated) {
          if (!isMfaRequired && !isMfaChallenge && !isUnauthenticated) {
            return false;
          }
          return factors && factors.length > 1;
        }
      },
      'promptForFactorInUnauthenticated': {
        deps: ['lastAuthResponse', 'factors'],
        fn: function fn(res, factors) {
          if (res.status !== 'UNAUTHENTICATED') {
            return false;
          }
          return factors && factors.length > 0;
        }
      },
      'userId': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded || !res._embedded.user) {
            return null;
          }
          return res._embedded.user.id;
        }
      },
      'isIdxStateToken': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res && _.isString(res.stateToken) && res.stateToken.startsWith('01');
        }
      },
      'isPwdExpiringSoon': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.status === 'PASSWORD_WARN';
        }
      },
      'passwordExpireDays': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded || !res._embedded.policy || !res._embedded.policy.expiration) {
            return null;
          }
          return res._embedded.policy.expiration.passwordExpireDays;
        }
      },
      'isPwdManagedByOkta': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._links || !res._links.next || !res._links.next.title) {
            return true;
          }
          return false;
        }
      },
      'passwordExpiredWebsiteName': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._links || !res._links.next || !res._links.next.title) {
            return null;
          }
          return res._links.next.title;
        }
      },
      'passwordExpiredLinkUrl': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._links || !res._links.next || !res._links.next.title || !res._links.next.href) {
            return null;
          }
          return res._links.next.href;
        }
      },
      'recoveryType': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.recoveryType;
        }
      },
      'factorType': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.factorType;
        }
      },
      'factor': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded || !res._embedded.factor) {
            return null;
          }
          return res._embedded.factor;
        }
      },
      'activatedFactorId': {
        deps: ['factor'],
        fn: function fn(factor) {
          return factor ? factor.id : null;
        }
      },
      'activatedFactorType': {
        deps: ['factor'],
        fn: function fn(factor) {
          return factor ? factor.factorType : null;
        }
      },
      'activatedFactorProvider': {
        deps: ['factor'],
        fn: function fn(factor) {
          return factor ? factor.provider : null;
        }
      },
      'qrcode': {
        deps: ['factor'],
        fn: function fn(factor) {
          try {
            return factor._embedded.activation._links.qrcode.href;
          } catch (err) {
            return null;
          }
        }
      },
      'activationSendLinks': {
        deps: ['factor'],
        fn: function fn(factor) {
          var sendLinks;
          try {
            sendLinks = factor._embedded.activation._links.send;
          } catch (err) {
            sendLinks = [];
          }
          return sendLinks;
        }
      },
      'textActivationLinkUrl': {
        deps: ['activationSendLinks'],
        fn: function fn(activationSendLinks) {
          var item = _.findWhere(activationSendLinks, { name: 'sms' });
          return item ? item.href : null;
        }
      },
      'emailActivationLinkUrl': {
        deps: ['activationSendLinks'],
        fn: function fn(activationSendLinks) {
          var item = _.findWhere(activationSendLinks, { name: 'email' });
          return item ? item.href : null;
        }
      },
      'sharedSecret': {
        deps: ['factor'],
        fn: function fn(factor) {
          try {
            return factor._embedded.activation.sharedSecret;
          } catch (err) {
            return null;
          }
        }
      },
      'duoEnrollActivation': {
        deps: ['factor'],
        fn: function fn(factor) {
          if (!factor || !factor._embedded || !factor._embedded.activation) {
            return null;
          }
          return factor._embedded.activation;
        }
      },
      'prevLink': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (res._links && res._links.prev) {
            return res._links.prev.href;
          }
          return null;
        }
      },
      'skipLink': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (res._links && res._links.skip) {
            return res._links.skip.href;
          }
          return null;
        }
      },
      'gracePeriodRemainingDays': {
        deps: ['policy'],
        fn: function fn(policy) {
          if (policy && policy.gracePeriod && policy.gracePeriod.endDate) {
            return getGracePeriodRemainingDays(policy.gracePeriod.endDate);
          }
          return null;
        }
      },
      'user': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded || !res._embedded.user) {
            return null;
          }
          return res._embedded.user;
        }
      },
      'recoveryQuestion': {
        deps: ['user'],
        fn: function fn(user) {
          if (!user || !user.recovery_question) {
            return null;
          }
          return user.recovery_question.question;
        }
      },
      'userProfile': {
        deps: ['user'],
        fn: function fn(user) {
          if (!user || !user.profile) {
            return null;
          }
          return user.profile;
        }
      },
      'userConsentName': {
        deps: ['userProfile', 'username'],
        fn: function fn(userProfile, username) {
          if (!userProfile || _.isEmpty(userProfile.firstName)) {
            return username;
          }
          if (_.isEmpty(userProfile.lastName)) {
            return userProfile.firstName;
          }
          return userProfile.firstName + ' ' + userProfile.lastName.charAt(0) + '.';
        }
      },
      'userEmail': {
        deps: ['userProfile'],
        fn: function fn(userProfile) {
          if (!userProfile || !userProfile.login) {
            return null;
          }
          return userProfile.login;
        }
      },
      'userFullName': {
        deps: ['userProfile'],
        fn: function fn(userProfile) {
          if (!userProfile || !userProfile.firstName && !userProfile.lastName) {
            return '';
          }
          return userProfile.firstName + ' ' + userProfile.lastName;
        }
      },
      'defaultAppLogo': {
        deps: ['baseUrl'],
        fn: function fn(baseUrl) {
          return baseUrl + DEFAULT_APP_LOGO;
        }
      },
      'expiresAt': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.expiresAt;
        }
      },
      'target': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded) {
            return null;
          }
          return res._embedded.target;
        }
      },
      'targetLabel': {
        deps: ['target'],
        fn: function fn(target) {
          if (!target) {
            return null;
          }
          return target.label;
        }
      },
      'targetLogo': {
        deps: ['target'],
        fn: function fn(target) {
          if (!target || !target._links) {
            return null;
          }
          return target._links.logo;
        }
      },
      'targetTermsOfService': {
        deps: ['target'],
        fn: function fn(target) {
          if (!target || !target._links) {
            return null;
          }
          return target._links['terms-of-service'];
        }
      },
      'targetPrivacyPolicy': {
        deps: ['target'],
        fn: function fn(target) {
          if (!target || !target._links) {
            return null;
          }
          return target._links['privacy-policy'];
        }
      },
      'targetClientURI': {
        deps: ['target'],
        fn: function fn(target) {
          if (!target || !target._links) {
            return null;
          }
          return target._links['client-uri'];
        }
      },
      'scopes': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded) {
            return null;
          }
          return res._embedded.scopes;
        }
      },
      'hasExistingPhones': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded || !res._embedded.factors) {
            return false;
          }
          var factors = res._embedded.factors;
          var factor = _.findWhere(factors, { factorType: 'sms', provider: 'OKTA' });
          if (!factor || !factor._embedded) {
            return false;
          }

          return !!factor._embedded.phones.length;
        }
      },
      'hasExistingPhonesForCall': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._embedded || !res._embedded.factors) {
            return false;
          }
          var factors = res._embedded.factors;
          var factor = _.findWhere(factors, { factorType: 'call', provider: 'OKTA' });
          if (!factor || !factor._embedded) {
            return false;
          }

          return !!factor._embedded.phones.length;
        }
      },
      'isUndefinedUser': {
        deps: ['securityImage'],
        fn: function fn(securityImage) {
          return securityImage === UNDEFINED_USER;
        }
      },
      'isNewUser': {
        deps: ['securityImage'],
        fn: function fn(securityImage) {
          return securityImage === NEW_USER;
        }
      },
      'allowRememberDevice': {
        deps: ['policy'],
        fn: function fn(policy) {
          // Custom code to remove the ability to remeber a device for 
          // MFA verification for a period of time.  By default the
          // Okta Sign In Widget allows a user to skip MFA for a period of time
          // after a successful MFA.  Per CMS requirements, this functionality
          // should be removed.  We will use a variable to toggle the 
          // functionality to support any future desire from CMS to allow users
          // to skip MFA for a specific timeframe (i.e. 30 minutes).
          //
          // if allowRemeberDeviceMFA is true than MFA can be skipped on the 
          //    users device.
          // if allowRemeberDeviceMFA is false than MFA must be verified for
          //    every login attempt.
          var allowRemeberDeviceMFA = this.settings.get('allowRemeberDeviceMFA');

          // if the allowRemeberDeviceMFA variable is not defined or null then we ensure
          // the CMS requirement of never skipping MFA is followed by assigning
          // allowRemeberDeviceMFA to false
          if (allowRemeberDeviceMFA == undefined || allowRemeberDeviceMFA == null) {
            allowRemeberDeviceMFA = false;
          }

          if (allowRemeberDeviceMFA) {
            return policy && policy.allowRememberDevice;
          } else {
            return false;
          }
        }
      },
      'rememberDeviceLabel': {
        deps: ['policy'],
        fn: function fn(policy) {
          if (policy && policy.rememberDeviceLifetimeInMinutes > 0) {
            var timeString = getMinutesString(policy.rememberDeviceLifetimeInMinutes);
            return Okta.loc('rememberDevice.timebased', 'login', [timeString]);
          } else if (policy && policy.rememberDeviceLifetimeInMinutes === 0) {
            return Okta.loc('rememberDevice.devicebased', 'login');
          }
          return Okta.loc('rememberDevice', 'login');
        }
      },
      'rememberDeviceByDefault': {
        deps: ['policy'],
        fn: function fn(policy) {
          return policy && policy.rememberDeviceByDefault;
        }
      },
      'factorsPolicyInfo': {
        deps: ['policy'],
        fn: function fn(policy) {
          return policy && policy.factorsPolicyInfo ? policy.factorsPolicyInfo : null;
        }
      },
      'verifyCustomFactorRedirectUrl': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._links || !res._links.next || res._links.next.name !== 'redirect' || !res._links.next.href) {
            return null;
          }
          return res._links.next.href;
        }
      },
      'enrollCustomFactorRedirectUrl': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          if (!res._links || !res._links.next || res._links.next.name !== 'activate' || !res._links.next.href) {
            return null;
          }
          return res._links.next.href;
        }
      },
      'isFactorResultFailed': {
        deps: ['lastAuthResponse'],
        fn: function fn(res) {
          return res.factorResult === 'FAILED';
        }
      },
      'factorResultErrorMessage': {
        deps: ['lastAuthResponse', 'isFactorResultFailed'],
        fn: function fn(res, isFactorResultFailed) {
          if (isFactorResultFailed) {
            return res.factorResultMessage || Okta.loc('oform.error.unexpected', 'login');
          }
          return null;
        }
      }
    },

    parse: function parse(options) {
      this.settings = options.settings;
      return _.extend(_.omit(options, 'settings'), { languageCode: this.settings.get('languageCode') });
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _defineProperty2 = __webpack_require__(58);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _keys = __webpack_require__(109);

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(195), __webpack_require__(196)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (parseMs, toMilliseconds) {

  var MOMENT_UNIT = {
    MILLISECOND: 'milliseconds',
    SECOND: 'seconds',
    MINUTE: 'minutes',
    HOUR: 'hours',
    DAY: 'days'
  };

  var MOMENT_UNIT_KEYS = (0, _keys2.default)(MOMENT_UNIT);

  /**
   * @method convertMomentUnits
   * Conversion between moment's units and our units internally
   *
   * @param {String} momentUnit The units that val is in
   * @return {String} The key in the MOMENT_UNIT hash
   */
  var convertMomentUnits = function convertMomentUnits(momentUnit) {
    var entry = MOMENT_UNIT_KEYS.filter(function (k) {
      return MOMENT_UNIT[k] === momentUnit;
    });

    return entry.length === 1 ? entry[0] : momentUnit;
  };

  return {

    /**
     * @method getTimeInHighestRelevantUnit
     * Will return a number in the units of the highest relevant time unit.
     * Only checks milliseconds, seconds, minutes, hours, and days.
     * E.g.
     *   15 MINUTE  -> 15 MINUTE
     *   15 minutes -> 15 MINUTE
     *   60 minutes ->  1 HOUR
     *   90 minutes -> 90 MINUTE
     *   24 HOUR    ->  1 DAY
     *   24 hours   ->  1 DAY
     *   30 DAY     -> 30 DAY
     *
     * @typedef { "MILLISECOND" | "SECOND" | "MINUTE" | "HOUR" | "DAY" } TimeUnit
     *
     * @typedef { "MILLISECOND" | "SECOND" | "MINUTE" | "HOUR" | "DAY" |
     *            "milliseconds" | "seconds" | "minutes" | "hours" | "days"
     *          } FlexibleTimeUnit
     *
     * @typedef TimeAndUnit
     * @property {number} time the consolidated time
     * @property {TimeUnit} unit the unit of the time
     *
     * @param {FlexibleTimeUnit} unit The time unit
     * @return {TimeAndUnit} An object containing the amount of time and the unit
     */
    getTimeInHighestRelevantUnit: function getTimeInHighestRelevantUnit(val, unit) {
      var defaultTimeObj = {
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
        milliseconds: 0
      };
      var normalizedUnit = MOMENT_UNIT[unit] || unit;
      var timeObj = void 0;

      try {
        var ms = toMilliseconds((0, _assign2.default)(defaultTimeObj, (0, _defineProperty3.default)({}, normalizedUnit, val)));
        timeObj = parseMs(ms);
      } catch (error) {
        timeObj = {};
      }

      var duration = (0, _keys2.default)(timeObj).reduce(function (init, k) {
        if (timeObj[k] !== 0) {
          init[k] = timeObj[k];
        }
        return init;
      }, {});

      var highestUnit = void 0;
      var time = void 0;
      if ((0, _keys2.default)(duration).length === 1) {
        (0, _keys2.default)(duration).forEach(function (k) {
          time = duration[k];
          highestUnit = k;
        });
      } else {
        time = val;
        highestUnit = normalizedUnit;
      }

      return {
        time: time,
        unit: convertMomentUnits(highestUnit)
      };
    }

  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(191);
module.exports = __webpack_require__(7).Object.assign;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(16);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(192) });


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(17);
var getKeys = __webpack_require__(35);
var gOPS = __webpack_require__(73);
var pIE = __webpack_require__(41);
var toObject = __webpack_require__(52);
var IObject = __webpack_require__(88);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(33)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(194);
module.exports = __webpack_require__(7).Object.keys;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(52);
var $keys = __webpack_require__(35);

__webpack_require__(110)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (milliseconds) {
	if (typeof milliseconds !== 'number') {
		throw new TypeError('Expected a number');
	}

	var roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil;

	return {
		days: roundTowardsZero(milliseconds / 86400000),
		hours: roundTowardsZero(milliseconds / 3600000) % 24,
		minutes: roundTowardsZero(milliseconds / 60000) % 60,
		seconds: roundTowardsZero(milliseconds / 1000) % 60,
		milliseconds: roundTowardsZero(milliseconds) % 1000,
		microseconds: roundTowardsZero(milliseconds * 1000) % 1000,
		nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000
	};
};

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(45);

var _typeof3 = _interopRequireDefault(_typeof2);

var _slicedToArray2 = __webpack_require__(111);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = __webpack_require__(203);

var _entries2 = _interopRequireDefault(_entries);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var converters = {
	days: function days(value) {
		return value * 864e5;
	},
	hours: function hours(value) {
		return value * 36e5;
	},
	minutes: function minutes(value) {
		return value * 6e4;
	},
	seconds: function seconds(value) {
		return value * 1e3;
	},
	milliseconds: function milliseconds(value) {
		return value;
	},
	microseconds: function microseconds(value) {
		return value / 1e3;
	},
	nanoseconds: function nanoseconds(value) {
		return value / 1e6;
	}
};

var toMilliseconds = function toMilliseconds(object) {
	return (0, _entries2.default)(object).reduce(function (milliseconds, _ref) {
		var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
		    key = _ref2[0],
		    value = _ref2[1];

		if (typeof value !== 'number') {
			throw new TypeError('Expected a `number` for key `' + key + '`, got `' + value + '` (' + (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) + ')');
		}

		if (!converters[key]) {
			throw new Error('Unsupported time key');
		}

		return milliseconds + converters[key](value);
	}, 0);
};

module.exports = toMilliseconds;
// TODO: remove this for next major version
module.exports.default = toMilliseconds;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(198), __esModule: true };

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53);
__webpack_require__(46);
module.exports = __webpack_require__(199);


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(75);
var ITERATOR = __webpack_require__(11)('iterator');
var Iterators = __webpack_require__(34);
module.exports = __webpack_require__(7).isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(201), __esModule: true };

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53);
__webpack_require__(46);
module.exports = __webpack_require__(202);


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(19);
var get = __webpack_require__(103);
module.exports = __webpack_require__(7).getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(204), __esModule: true };

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(205);
module.exports = __webpack_require__(7).Object.entries;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(16);
var $entries = __webpack_require__(206)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(17);
var getKeys = __webpack_require__(35);
var toIObject = __webpack_require__(30);
var isEnum = __webpack_require__(41).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(module.exports = {
  INVALID_TOKEN_EXCEPTION: 'E0000011'
});

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(113), __webpack_require__(77), __webpack_require__(212), __webpack_require__(213), __webpack_require__(117), __webpack_require__(36), __webpack_require__(116)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, PrimaryAuthController, PrimaryAuthModel, IDPDiscoveryForm, IDPDiscoveryModel, Footer, BaseLoginController, CustomButtons) {

  return PrimaryAuthController.extend({
    className: 'idp-discovery',

    View: IDPDiscoveryForm,

    constructor: function constructor(options) {
      options.appState.unset('username');

      this.model = new IDPDiscoveryModel({
        requestContext: options.settings.get('idpDiscovery.requestContext'),
        settings: options.settings,
        appState: options.appState
      }, { parse: true });

      BaseLoginController.apply(this, arguments);

      this.addListeners();

      // If social auth is configured, 'socialAuthPositionTop' will determine
      // the order in which the social auth and primary auth are shown on the screen.
      if (options.settings.get('hasConfiguredButtons')) {
        this.add(CustomButtons, {
          prepend: options.settings.get('socialAuthPositionTop'),
          options: {
            // To trigger an afterError event, we require the current controller
            currentController: this
          }
        });
      }

      this.addFooter(options);

      this.setUsername();
    },

    initialize: function initialize() {
      PrimaryAuthController.prototype.initialize.apply(this);

      this.listenTo(this.model, 'goToPrimaryAuth', function () {
        this.settings.set('username', this.model.get('username'));
        if (this.settings.get('features.passwordlessAuth')) {
          var primaryAuthModel = new PrimaryAuthModel({
            username: this.model.get('username'),
            multiOptionalFactorEnroll: this.options.settings.get('features.multiOptionalFactorEnroll'),
            settings: this.options.settings,
            appState: this.options.appState
          }, { parse: true });
          // Events to set the transaction attributes on the app state.
          this.addModelListeners(primaryAuthModel);
          // Make the primary auth request
          primaryAuthModel.save();
        } else {
          this.options.appState.set('disableUsername', true);
          this.options.appState.trigger('navigate', 'signin');
        }
      });
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(210)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (TypingDNA) {
  var tdna;
  return {
    track: function track(selectorId) {
      try {
        tdna = new TypingDNA();
        tdna.addTarget(selectorId);
        tdna.start();
      } catch (e) {
        // Issues in typing should not stop Primary auth.
      }
    },
    getTypingPattern: function getTypingPattern() {
      try {
        return tdna.getTypingPattern({
          type: 1
        });
      } catch (e) {
        return null;
      }
    }
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray2 = __webpack_require__(111);

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _typeof2 = __webpack_require__(45);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * TypingDNA - Typing Biometrics JavaScript API
 * https://api.typingdna.com/scripts/typingdna.js
 * https://typingdna.com/scripts/typingdna.js (alternative)
 *
 * @version 2.15
 * @author Raul Popa
 * @copyright SC TypingDNA SRL, http://typingdna.com
 * @license http://www.apache.org/licenses/LICENSE-2.0
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Typical usage:
 * var tdna = new TypingDNA(); // creates a new TypingDNA object and starts recording
 * var typingPattern = tdna.getTypingPattern({type=1, text="Hello5g21?*"});
 * returns a type 1 typing pattern (and continues recording afterwards)
 *
 * Optional:
 * tdna.stop(); // ends recording and clears history stack (returns recording flag: false)
 * tdna.start(); // restarts the recording after a stop (returns recording flag: true)
 * tdna.reset(); // restarts the recording anytime, clears history stack and starts from scratch (returns nothing)
 * var typingPatternQuality = TypingDNA.getQuality(typingPattern); //returns the quality/strength of any typing pattern
 * (there is no need to initialize the class to do pattern quality checking)
 */

/**
 * Creates a single instance (or a reference) of the TypingDNA class
 * @return {Object} Returns the single instance of the TypingDNA class.
 * @example var tdna = new TypingDNA();
 */
module.exports = function TypingDNA() {
  if (TypingDNA.initialized != true) {
    TypingDNA.prototype.start = function () {
      return TypingDNA.start.apply(this, arguments);
    };
    TypingDNA.prototype.stop = function () {
      return TypingDNA.stop.apply(this, arguments);
    };
    TypingDNA.prototype.reset = function () {
      return TypingDNA.reset.apply(this, arguments);
    };
    TypingDNA.prototype.addTarget = function () {
      return TypingDNA.addTarget.apply(this, arguments);
    };
    TypingDNA.prototype.removeTarget = function () {
      return TypingDNA.removeTarget.apply(this, arguments);
    };
    TypingDNA.prototype.getTypingPattern = function () {
      return TypingDNA.getTypingPattern.apply(this, arguments);
    };
    TypingDNA.prototype.get = function () {
      // still works but will be deprecated in favor of getTypignPattern()
      return TypingDNA.get.apply(this, arguments);
    };
    TypingDNA.prototype.startDiagram = function () {
      // deprecated in favor of start()
      //return TypingDNA.startDiagram.apply(this, arguments);
    };
    TypingDNA.prototype.stopDiagram = function () {
      // deprecated in favor of stop()
      //return TypingDNA.stopDiagram.apply(this, arguments);
    };
    TypingDNA.prototype.getDiagram = function () {
      // still works but will be deprecated in favor of getTypignPattern()
      return TypingDNA.getDiagram.apply(this, arguments);
    };
    TypingDNA.prototype.getExtendedDiagram = function () {
      // still works but will be deprecated in favor of getTypignPattern()
      return TypingDNA.getExtendedDiagram.apply(this, arguments);
    };
    TypingDNA.prototype.getMouseDiagram = function () {
      return TypingDNA.getMouseDiagram.apply(this, arguments);
    };
    TypingDNA.prototype.startMouse = function () {
      return TypingDNA.startMouse.apply(this, arguments);
    };
    TypingDNA.prototype.stopMouse = function () {
      return TypingDNA.stopMouse.apply(this, arguments);
    };
    TypingDNA.prototype.getQuality = function () {
      return TypingDNA.getQuality.apply(this, arguments);
    };
    TypingDNA.prototype.getLength = function () {
      return TypingDNA.getLength.apply(this, arguments);
    };
    TypingDNA.prototype.isMobile = function () {
      return TypingDNA.isMobile.apply(this, arguments);
    };
    TypingDNA.prototype.getTextId = function () {
      return TypingDNA.getTextId.apply(this, arguments);
    };
    TypingDNA.initialized = true;
    TypingDNA.prototype.maxHistoryLength = TypingDNA.maxHistoryLength;
    TypingDNA.prototype.defaultHistoryLength = TypingDNA.defaultHistoryLength;
    TypingDNA.prototype.maxSeekTime = TypingDNA.maxSeekTime;
    TypingDNA.prototype.maxPressTime = TypingDNA.maxPressTime;
    TypingDNA.version = 2.15;
    TypingDNA.flags = 0;
    TypingDNA.instance = this;
    TypingDNA.document = document;
    TypingDNA.maxHistoryLength = 2000;
    TypingDNA.maxSeekTime = 1500;
    TypingDNA.maxPressTime = 300;
    TypingDNA.defaultHistoryLength = 160;
    TypingDNA.spKeyCodes = [8, 13, 32];
    TypingDNA.spKeyCodesObj = {
      8: 1,
      13: 1,
      32: 1
    };
    TypingDNA.keyCodes = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 32, 222, 188, 190, 186, 187, 189, 191, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57];
    TypingDNA.keyCodesObj = {};
    for (var i in TypingDNA.keyCodes) {
      TypingDNA.keyCodesObj[TypingDNA.keyCodes[i]] = 1;
    }
    TypingDNA.pt1 = TypingDNA.ut1 = new Date().getTime();
    TypingDNA.wfk = [];
    TypingDNA.sti = [];
    TypingDNA.skt = [];
    TypingDNA.recording = true;
    TypingDNA.mouseRecording = true;
    TypingDNA.mouseMoveRecording = false;
    TypingDNA.spKeyRecording = true;
    TypingDNA.diagramRecording = true;
    TypingDNA.dwfk = [];
    TypingDNA.dsti = [];
    TypingDNA.dskt = [];
    TypingDNA.drkc = [];
    TypingDNA.dlastDownKey;
    TypingDNA.prevKeyCode = 0;
    TypingDNA.maxMoveDeltaTime = 600;
    TypingDNA.maxScrollDeltaTime = 800;
    TypingDNA.maxStopTime = 1500;
    TypingDNA.maxClickTime = 600;
    TypingDNA.maxMouseHistoryLength = 500;
    TypingDNA.lastMouseMoveTime = TypingDNA.lastMouseDownTime = new Date().getTime();
    TypingDNA.stopTimes = [];
    TypingDNA.clickTimes = [];
    TypingDNA.lastMouseStop = true;
    TypingDNA.zl = 0.0000001;
    TypingDNA.isAndroidChrome = false;
    TypingDNA.ACLastTime = new Date().getTime();
    TypingDNA.ACSeekTime = 0;
    TypingDNA.ACPressTime = 0;
    TypingDNA.ACLastCharCode = 0;
    TypingDNA.ACLastKeyCode = 0;
    TypingDNA.ACInputLengths = {
      inputs: [],
      lastLength: []
    };
    TypingDNA.ACPreviousKeyCode = 0;
    TypingDNA.targetIds = [];
    TypingDNA.lastTarget = "";
    TypingDNA.lastTargetFound = false;
    TypingDNA.replaceMissingKeys = true;
    TypingDNA.replaceMissingKeysPerc = 7;

    TypingDNA.keyDown = function (e) {
      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
        return;
      }
      if (!TypingDNA.isTarget(e.target.id)) {
        return;
      }
      var keyCode = e.keyCode;
      if (TypingDNA.wfk[keyCode] == 1 || TypingDNA.dwfk[keyCode] == 1) {
        //return;
      }
      if (keyCode == 229 && TypingDNA.isMobile() && !TypingDNA.isAndroidChrome) {
        TypingDNA.isAndroidChrome = true;

        TypingDNA.ACSeekTime = new Date().getTime() - TypingDNA.ACLastTime;
        TypingDNA.ACLastTime = new Date().getTime();

        TypingDNA.document.removeEventListener("keydown", TypingDNA.keyDown);
        TypingDNA.document.removeEventListener("keyup", TypingDNA.keyUp);
        TypingDNA.document.removeEventListener("keypress", TypingDNA.keyPress);

        // if android
        TypingDNA.document.addEventListener("keydown", TypingDNA.ACKeyDown);
        TypingDNA.document.addEventListener("keyup", TypingDNA.ACKeyUp);
      } else {
        var t0 = TypingDNA.pt1;
        TypingDNA.pt1 = new Date().getTime();
        var seekTotal = TypingDNA.pt1 - t0;
        var startTime = TypingDNA.pt1;
        if (TypingDNA.recording == true || TypingDNA.spKeyCodesObj[keyCode] && TypingDNA.spKeyRecording == true) {
          if (!e.shiftKey || TypingDNA.isMobile()) {
            TypingDNA.wfk[keyCode] = 1;
            TypingDNA.skt[keyCode] = seekTotal;
            TypingDNA.sti[keyCode] = startTime;
          }
        }
        if (TypingDNA.diagramRecording == true) {
          TypingDNA.dwfk[keyCode] = 1;
          TypingDNA.dskt[keyCode] = seekTotal;
          TypingDNA.dsti[keyCode] = startTime;
          TypingDNA.dlastDownKey = keyCode;
        }
      }
    };

    TypingDNA.keyPress = function (e) {
      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
        return;
      }
      if (!TypingDNA.isTarget(e.target.id)) {
        return;
      }
      if (TypingDNA.diagramRecording == true) {
        var keyCode = TypingDNA.dlastDownKey;
        TypingDNA.drkc[keyCode] = e.charCode;
      }
    };

    TypingDNA.keyUp = function (e) {
      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
        return;
      }
      if (!TypingDNA.isTarget(e.target.id)) {
        return;
      }
      var ut = new Date().getTime();
      var keyCode = e.keyCode;
      if (TypingDNA.recording == true || TypingDNA.spKeyCodesObj[keyCode] && TypingDNA.spKeyRecording == true) {
        if (!e.shiftKey || TypingDNA.isMobile()) {
          if (TypingDNA.wfk[keyCode] == 1) {
            var pressTime = ut - TypingDNA.sti[keyCode];
            var seekTime = TypingDNA.skt[keyCode];
            var arr = [keyCode, seekTime, pressTime, TypingDNA.prevKeyCode, ut, e.target.id];
            TypingDNA.history.add(arr);
            TypingDNA.prevKeyCode = keyCode;
          }
        }
        TypingDNA.wfk[keyCode] = 0;
      }
      if (TypingDNA.diagramRecording == true) {
        if (TypingDNA.drkc[keyCode] != undefined && TypingDNA.drkc[keyCode] != 0) {
          if (TypingDNA.dwfk[keyCode] == 1) {
            var pressTime = ut - TypingDNA.dsti[keyCode];
            var seekTime = TypingDNA.dskt[keyCode];
            var realKeyCode = TypingDNA.drkc[keyCode];
            var arrD = [keyCode, seekTime, pressTime, realKeyCode, ut, e.target.id];
            TypingDNA.history.addDiagram(arrD);
          }
        }
        TypingDNA.dwfk[keyCode] = 0;
      }
    };

    TypingDNA.mouseScroll = function (e) {
      if (TypingDNA.mouseRecording == true) {
        if (TypingDNA.mouseMoveRecording == true) {
          if (TypingDNA.mouse.scrollStarted == true) {
            var currentTime = new Date().getTime();
            TypingDNA.mouse.scrollTimes.push(currentTime);
            TypingDNA.mouse.scrollTopArr.push(TypingDNA.document.body.scrollTop);
            clearInterval(TypingDNA.scrollInterval);
            TypingDNA.scrollInterval = setInterval(TypingDNA.mouse.checkScroll, TypingDNA.maxScrollDeltaTime);
          } else {
            TypingDNA.mouse.scrollStarted = true;
          }
        }
      }
    };

    TypingDNA.mouseMove = function (e) {
      if (TypingDNA.mouseRecording == true) {
        var currentTime = new Date().getTime();
        if (TypingDNA.mouseMoveRecording == true) {
          if (TypingDNA.mouse.started == true) {
            TypingDNA.mouse.times.push(currentTime);
            TypingDNA.mouse.xPositions.push(e.screenX);
            TypingDNA.mouse.yPositions.push(e.screenY);
            clearInterval(TypingDNA.moveInterval);
            TypingDNA.moveInterval = setInterval(TypingDNA.mouse.checkMove, TypingDNA.maxMoveDeltaTime);
          } else {
            TypingDNA.mouse.started = true;
          }
        }
        TypingDNA.lastMouseMoveTime = currentTime;
      }
    };

    TypingDNA.mouseDown = function (e) {
      if (TypingDNA.mouseRecording == true) {
        TypingDNA.mouse.checkMove();
        TypingDNA.mouse.checkScroll();
        if (e.which == 1) {
          TypingDNA.lastMouseDownTime = new Date().getTime();
          var stopTime = TypingDNA.lastMouseDownTime - TypingDNA.lastMouseMoveTime;
          if (stopTime < TypingDNA.maxStopTime && TypingDNA.lastMouseStop == false) {
            TypingDNA.stopTimes.push(stopTime);
            if (TypingDNA.mouseMoveRecording == true) {
              var eventType = 3;
              var arr = [eventType, stopTime];
              TypingDNA.mouse.history.add(arr);
              TypingDNA.lastMouseStop = true;
            }
          }
        }
      }
    };

    TypingDNA.mouseUp = function (e) {
      if (TypingDNA.mouseRecording == true) {
        if (e.which == 1) {
          var clickTime = new Date().getTime() - TypingDNA.lastMouseDownTime;
          if (clickTime < TypingDNA.maxClickTime && TypingDNA.lastMouseDownTime > TypingDNA.lastMouseMoveTime) {
            TypingDNA.clickTimes.push(clickTime);
            if (TypingDNA.mouseMoveRecording == true) {
              var eventType = 4;
              var arr = [eventType, clickTime];
              TypingDNA.mouse.history.add(arr);
            }
          }
        }
      }
    };

    TypingDNA.ACKeyDown = function (e) {
      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
        return;
      }
      TypingDNA.ACSeekTime = new Date().getTime() - TypingDNA.ACLastTime;
      TypingDNA.ACLastTime = new Date().getTime();
      if (!TypingDNA.isTarget(e.target.id)) {
        return;
      }
      if (TypingDNA.ACInputLengths.inputs.indexOf(e.target) === -1) {
        TypingDNA.ACInputLengths.inputs.push(e.target);
        TypingDNA.ACInputLengths.lastLength.push(0);
      }
    };

    TypingDNA.ACKeyUp = function (e) {
      if (!TypingDNA.recording && !TypingDNA.diagramRecording) {
        return;
      }
      TypingDNA.ACPressTime = new Date().getTime() - TypingDNA.ACLastTime;
      TypingDNA.ACLastTime = new Date().getTime();
      if (!TypingDNA.isTarget(e.target.id)) {
        return;
      }
      var keyCode = e.keyCode;
      var targetIndex = TypingDNA.ACInputLengths.inputs.indexOf(e.target);
      if (targetIndex === -1) {
        TypingDNA.ACInputLengths.inputs.push(e.target);
        TypingDNA.ACInputLengths.lastLength.push(0);
        targetIndex = TypingDNA.ACInputLengths.inputs.indexOf(e.target);
      }
      if (keyCode == 229 && e.target.value.length >= TypingDNA.ACInputLengths.lastLength[targetIndex]) {
        var char = e.target.value.substr(e.target.selectionStart - 1 || 0, 1);
        keyCode = char.toUpperCase().charCodeAt(0);
        TypingDNA.ACLastCharCode = char.charCodeAt(0);
        TypingDNA.ACLastKeyCode = char.toUpperCase().charCodeAt(0);
      }
      TypingDNA.ACInputLengths.lastLength[targetIndex] = e.target.value.length;
      var arr = [keyCode, TypingDNA.ACSeekTime, TypingDNA.ACPressTime, TypingDNA.ACPreviousKeyCode, TypingDNA.ACLastTime];
      TypingDNA.history.add(arr);
      TypingDNA.ACPreviousKeyCode = keyCode;
      if (TypingDNA.diagramRecording == true) {
        var arrD = [keyCode, TypingDNA.ACSeekTime, TypingDNA.ACPressTime, TypingDNA.ACLastCharCode];
        TypingDNA.history.addDiagram(arrD);
      }
    };

    TypingDNA.isTarget = function (target) {
      if (TypingDNA.lastTarget == target && TypingDNA.lastTargetFound) {
        return true;
      } else {
        var targetLength = TypingDNA.targetIds.length;
        var targetFound = false;
        if (targetLength > 0) {
          for (var i = 0; i < targetLength; i++) {
            if (TypingDNA.targetIds[i] == target) {
              targetFound = true;
              break;
            }
          }
          TypingDNA.lastTarget = target;
          TypingDNA.lastTargetFound = targetFound;
          return targetFound;
        } else {
          TypingDNA.lastTarget = target;
          TypingDNA.lastTargetFound = true;
          return true;
        }
      }
    };

    if (TypingDNA.document.addEventListener) {
      TypingDNA.document.addEventListener("keydown", TypingDNA.keyDown);
      TypingDNA.document.addEventListener("keyup", TypingDNA.keyUp);
      TypingDNA.document.addEventListener("keypress", TypingDNA.keyPress);
      TypingDNA.document.addEventListener("mousemove", TypingDNA.mouseMove);
      TypingDNA.document.addEventListener("mousedown", TypingDNA.mouseDown);
      TypingDNA.document.addEventListener("mouseup", TypingDNA.mouseUp);
      TypingDNA.document.addEventListener("scroll", TypingDNA.mouseScroll);
    } else if (TypingDNA.document.attachEvent) {
      TypingDNA.document.attachEvent("onkeydown", TypingDNA.keyDown);
      TypingDNA.document.attachEvent("onkeyup", TypingDNA.keyUp);
      TypingDNA.document.attachEvent("onkeypress", TypingDNA.keyPress);
      TypingDNA.document.attachEvent("onmousemove", TypingDNA.mouseMove);
      TypingDNA.document.attachEvent("onmousedown", TypingDNA.mouseDown);
      TypingDNA.document.attachEvent("onmouseup", TypingDNA.mouseUp);
      TypingDNA.document.attachEvent("onscroll", TypingDNA.mouseScroll);
    } else {
      console.log("browser not supported");
    }

    TypingDNA.mouse = {};
    TypingDNA.mouse.times = [];
    TypingDNA.mouse.xPositions = [];
    TypingDNA.mouse.yPositions = [];
    TypingDNA.mouse.scrollTimes = [];
    TypingDNA.mouse.scrollTopArr = [];
    TypingDNA.mouse.history = {};
    TypingDNA.mouse.history.stack = [];

    TypingDNA.mouse.getDistance = function (a, b) {
      return Math.sqrt(a * a + b * b);
    };

    TypingDNA.mouse.getTotalDistance = function (xPositions, yPositions) {
      var totalDistance = 0;
      var length = xPositions.length;
      for (i = 1; i < length - 1; i++) {
        var a = xPositions[i] - xPositions[i - 1];
        var b = yPositions[i] - yPositions[i - 1];
        totalDistance += TypingDNA.mouse.getDistance(a, b);
      }
      return totalDistance;
    };

    TypingDNA.mouse.getAngle = function (xPosDelta, yPosDelta) {
      var angle = 0;
      var leftRight = xPosDelta >= 0; // 1 if left, 0 if right
      var downUp = yPosDelta < 0; // 1 if down, 0 if up
      if (leftRight) {
        if (downUp) {
          angle = 180 + Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251); // 0.01745329251 = pi/180
        } else {
          angle = 270 + (90 - Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251));
        }
      } else {
        if (downUp) {
          angle = 90 + (90 - Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251));
        } else {
          angle = Math.round(Math.atan(Math.abs(xPosDelta) / (Math.abs(yPosDelta) + 0.0000001)) / 0.01745329251);
        }
      }
      return angle;
    };

    TypingDNA.mouse.recordMoveAction = function () {
      var length = TypingDNA.mouse.times.length;
      if (length < 3) {
        return;
      }
      var deltaTime = TypingDNA.mouse.times[length - 1] - TypingDNA.mouse.times[0];
      var xPosDelta = TypingDNA.mouse.xPositions[length - 1] - TypingDNA.mouse.xPositions[0];
      var yPosDelta = TypingDNA.mouse.yPositions[length - 1] - TypingDNA.mouse.yPositions[0];
      var directDistance = Math.round(TypingDNA.mouse.getDistance(xPosDelta, yPosDelta));
      var totalDistance = Math.round(TypingDNA.mouse.getTotalDistance(TypingDNA.mouse.xPositions, TypingDNA.mouse.yPositions));
      var ratioDistance = Math.round(totalDistance * 100 / directDistance);
      var speed = Math.round(directDistance * 100 / deltaTime);
      var angle = TypingDNA.mouse.getAngle(xPosDelta, yPosDelta);
      var eventType = 1;
      var arr = [eventType, deltaTime, directDistance, speed, angle, ratioDistance];
      for (i in arr) {
        if (isNaN(arr[i])) {
          return;
        }
      }
      TypingDNA.mouse.history.add(arr);
      TypingDNA.lastMouseStop = false;
    };

    TypingDNA.mouse.recordScrollAction = function () {
      var length = TypingDNA.mouse.scrollTimes.length;
      if (length < 2) {
        return;
      }
      var deltaTime = TypingDNA.mouse.scrollTimes[length - 1] - TypingDNA.mouse.scrollTimes[0];
      var directDistance = TypingDNA.mouse.scrollTopArr[length - 1] - TypingDNA.mouse.scrollTopArr[0];
      var speed = Math.round(directDistance * 100 / deltaTime);
      var eventType = 2;
      var arr = [eventType, deltaTime, directDistance, speed];
      for (i in arr) {
        if (isNaN(arr[i]) && !isFinite(arr[i])) {
          return;
        }
      }
      TypingDNA.mouse.history.add(arr);
    };

    TypingDNA.mouse.history.add = function (arr) {
      this.stack.push(arr);
      if (this.stack.length > TypingDNA.maxMouseHistoryLength) {
        this.stack.shift();
      }
    };

    TypingDNA.mouse.history.getDiagram = function () {
      var mouseDiagram = this.stack.join("|");
      return [String(TypingDNA.isMobile()) + "," + String(TypingDNA.version), mouseDiagram].join("|");
    };

    TypingDNA.mouse.clearLastMove = function () {
      TypingDNA.mouse.times = [];
      TypingDNA.mouse.xPositions = [];
      TypingDNA.mouse.yPositions = [];
    };

    TypingDNA.mouse.checkMove = function () {
      clearInterval(TypingDNA.moveInterval);
      if (TypingDNA.mouse.started == true) {
        TypingDNA.mouse.started = false;
        TypingDNA.mouse.recordMoveAction();
        TypingDNA.mouse.clearLastMove();
      }
    };

    TypingDNA.mouse.clearLastScroll = function () {
      TypingDNA.mouse.scrollTimes = [];
      TypingDNA.mouse.scrollTopArr = [];
    };

    TypingDNA.mouse.checkScroll = function () {
      clearInterval(TypingDNA.scrollInterval);
      if (TypingDNA.mouse.scrollStarted == true) {
        TypingDNA.mouse.scrollStarted = false;
        TypingDNA.mouse.recordScrollAction();
        TypingDNA.mouse.clearLastScroll();
      }
    };

    /**
     * Adds a target to the targetIds array.
     */
    TypingDNA.addTarget = function (target) {
      var targetLength = TypingDNA.targetIds.length;
      var targetFound = false;
      if (targetLength > 0) {
        for (var i = 0; i < targetLength; i++) {
          if (TypingDNA.targetIds[i] == target) {
            targetFound = true;
            break;
          }
        }
        if (!targetFound) {
          TypingDNA.targetIds.push(target);
        }
      } else {
        TypingDNA.targetIds.push(target);
      }
    };

    /**
     * Adds a target to the targetIds array.
     */
    TypingDNA.removeTarget = function (target) {
      var targetLength = TypingDNA.targetIds.length;
      if (targetLength > 0) {
        for (var i = 0; i < targetLength; i++) {
          if (TypingDNA.targetIds[i] == target) {
            TypingDNA.targetIds.splice(i, 1);
            break;
          }
        }
      }
    };

    /**
     * Resets the history stack
     */
    TypingDNA.reset = function (all) {
      TypingDNA.history.stack = [];
      TypingDNA.history.stackDiagram = [];
      TypingDNA.clickTimes = [];
      TypingDNA.stopTimes = [];
      TypingDNA.ACInputLengths = {
        inputs: [],
        lastLength: []
      };
      if (all == true) {
        TypingDNA.mouse.history.stack = [];
      }
    };

    /**
     * Automatically called at initilization. It starts the recording of keystrokes.
     */
    TypingDNA.start = function () {
      TypingDNA.diagramRecording = true;
      return TypingDNA.recording = true;
    };

    /**
     * Ends the recording of further keystrokes. To restart recording afterwards you can
     * either call TypingDNA.start() or create a new TypingDNA object again, not recommended.
     */
    TypingDNA.stop = function () {
      TypingDNA.diagramRecording = false;
      return TypingDNA.recording = false;
    };

    /**
     * Starts the recording of mouse activity.
     */
    TypingDNA.startMouse = function () {
      return TypingDNA.mouseRecording = TypingDNA.mouseMoveRecording = true;
    };

    /**
     * Stops the recording of mouse activity.
     */
    TypingDNA.stopMouse = function () {
      return TypingDNA.mouseRecording = TypingDNA.mouseMoveRecording = false;
    };

    /**
     * This is the main function that outputs the typing pattern as a String
     * {type:Number, text:String, textId:Number, length: Number, targetId:String, caseSensitive:Boolean}
     * @param {Object} obj an object with the following properties
     * * * @param {String} type 0 for anytext pattern, 1 for sametext pattern (also called diagram pattern)
     * * * and 2 for extended pattern (most versatile, can replace both anytext and sametext patterns)
     * * * @param {Number} length (Optional) the length of the text in the history for which you want
     * * * the typing pattern. length is ignored when text or targetId is set (or both).
     * * * @param {String} text  (Only for type 1 and type 2) a typed string that you want the typing pattern for
     * * * @param {Number} textId (Optional, only for type 1 and type 2) a personalized id for the typed text
     * * * @param {String} targetId (Optional) specifies if pattern is obtain only from text typed in a certain target
     * * * @param {Boolean} caseSensitive (Optional, default: false) Used if you pass a text for type 1 or type 2
     * * * DEPRECATED * * * in favor of type = 2 * * *
     * * * @param {Boolean} extended (Only for type 1) specifies if full information about what was typed is produced,
     * * * including the actual key pressed, if false, only the order of pressed keys is kept (no actual content)
     * @return {String} A typing pattern in string form
     * @example var typingPattern = tdna.getTypingPattern({type=0, length=180});
     * @example var typingPattern = tdna.getTypingPattern({type=1, text="Hello5g21?*"});
     * @example var typingPattern = tdna.getTypingPattern({type=2, text="example@mail.com"});
     */
    TypingDNA.getTypingPattern = function (obj) {
      if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) === 'object') {
        switch (obj.type) {
          case 0:
            return TypingDNA.get(obj.length, obj.targetId);
            break;
          case 1:
            var str = obj.text != undefined ? obj.text : obj.length;
            return TypingDNA.history.getDiagram(obj.extended, str, obj.textId, obj.targetId, obj.caseSensitive);
            break;
          case 2:
            var str = obj.text != undefined ? obj.text : obj.length;
            return TypingDNA.history.getDiagram(true, str, obj.textId, obj.targetId, obj.caseSensitive);
            break;
          default:
            return TypingDNA.get(obj.length);
            break;
        }
      } else {
        return TypingDNA.get();
      }
    };

    TypingDNA.getDiagram = function (str, textId) {
      return TypingDNA.history.getDiagram(false, str, textId, undefined, false);
    };

    TypingDNA.getExtendedDiagram = function (str, textId) {
      return TypingDNA.history.getDiagram(true, str, textId, undefined, false);
    };

    TypingDNA.getMouseDiagram = function () {
      return TypingDNA.mouse.history.getDiagram();
    };

    TypingDNA.get = function (length, targetId) {
      var historyTotalLength = TypingDNA.history.stack.length;
      if (length == undefined || length == 0) {
        length = TypingDNA.defaultHistoryLength;
      }
      if (length > historyTotalLength) {
        length = historyTotalLength;
      }
      var obj = {};

      var _TypingDNA$history$ge = TypingDNA.history.get(length, "", targetId);

      var _TypingDNA$history$ge2 = (0, _slicedToArray3.default)(_TypingDNA$history$ge, 2);

      obj.arr = _TypingDNA$history$ge2[0];
      targetLength = _TypingDNA$history$ge2[1];

      if (targetId != undefined && targetId != "") {
        length = targetLength;
      }
      var zl = TypingDNA.zl;
      var histRev = length;
      var histSktF = TypingDNA.math.fo(TypingDNA.history.get(length, "seek", targetId));
      var histPrtF = TypingDNA.math.fo(TypingDNA.history.get(length, "press", targetId));
      var pressHistMean = Math.round(TypingDNA.math.avg(histPrtF));
      var seekHistMean = Math.round(TypingDNA.math.avg(histSktF));
      var pressHistSD = Math.round(TypingDNA.math.sd(histPrtF));
      var seekHistSD = Math.round(TypingDNA.math.sd(histSktF));
      var charMeanTime = seekHistMean + pressHistMean;
      var pressRatio = TypingDNA.math.rd((pressHistMean + zl) / (charMeanTime + zl), 4);
      var seekToPressRatio = TypingDNA.math.rd((1 - pressRatio) / pressRatio, 4);
      var pressSDToPressRatio = TypingDNA.math.rd((pressHistSD + zl) / (pressHistMean + zl), 4);
      var seekSDToPressRatio = TypingDNA.math.rd((seekHistSD + zl) / (pressHistMean + zl), 4);
      var cpm = Math.round(6E4 / (charMeanTime + zl));
      if (histRev == 0) {
        cpm = 0;
      }
      for (var i in obj.arr) {
        var rev = obj.arr[i][1].length;
        var seekMean = 0;
        var pressMean = 0;
        var postMean = 0;
        var seekSD = 0;
        var pressSD = 0;
        var postSD = 0;
        switch (obj.arr[i][0].length) {
          case 0:
            break;
          case 1:
            var seekMean = TypingDNA.math.rd((obj.arr[i][0][0] + zl) / (seekHistMean + zl), 4);
            break;
          default:
            var arr = TypingDNA.math.fo(obj.arr[i][0]);
            seekMean = TypingDNA.math.rd((TypingDNA.math.avg(arr) + zl) / (seekHistMean + zl), 4);
            seekSD = TypingDNA.math.rd((TypingDNA.math.sd(arr) + zl) / (seekHistSD + zl), 4);
        }
        switch (obj.arr[i][1].length) {
          case 0:
            break;
          case 1:
            var pressMean = TypingDNA.math.rd((obj.arr[i][1][0] + zl) / (pressHistMean + zl), 4);
            break;
          default:
            var arr = TypingDNA.math.fo(obj.arr[i][1]);
            pressMean = TypingDNA.math.rd((TypingDNA.math.avg(arr) + zl) / (pressHistMean + zl), 4);
            pressSD = TypingDNA.math.rd((TypingDNA.math.sd(arr) + zl) / (pressHistSD + zl), 4);
        }
        switch (obj.arr[i][2].length) {
          case 0:
            break;
          case 1:
            var postMean = TypingDNA.math.rd((obj.arr[i][2][0] + zl) / (seekHistMean + zl), 4);
            break;
          default:
            var arr = TypingDNA.math.fo(obj.arr[i][2]);
            postMean = TypingDNA.math.rd((TypingDNA.math.avg(arr) + zl) / (seekHistMean + zl), 4);
            postSD = TypingDNA.math.rd((TypingDNA.math.sd(arr) + zl) / (seekHistSD + zl), 4);
        }
        delete obj.arr[i][2];
        delete obj.arr[i][1];
        delete obj.arr[i][0];
        obj.arr[i][0] = rev;
        obj.arr[i][1] = seekMean;
        obj.arr[i][2] = pressMean;
        obj.arr[i][3] = postMean;
        obj.arr[i][4] = seekSD;
        obj.arr[i][5] = pressSD;
        obj.arr[i][6] = postSD;
      }
      var arr = [];
      TypingDNA.apu(arr, histRev);
      TypingDNA.apu(arr, cpm);
      TypingDNA.apu(arr, charMeanTime);
      TypingDNA.apu(arr, pressRatio);
      TypingDNA.apu(arr, seekToPressRatio);
      TypingDNA.apu(arr, pressSDToPressRatio);
      TypingDNA.apu(arr, seekSDToPressRatio);
      TypingDNA.apu(arr, pressHistMean);
      TypingDNA.apu(arr, seekHistMean);
      TypingDNA.apu(arr, pressHistSD);
      TypingDNA.apu(arr, seekHistSD);
      for (var c = 0; c <= 6; c++) {
        for (var i = 0; i < 44; i++) {
          var keyCode = TypingDNA.keyCodes[i];
          var val = obj.arr[keyCode][c];
          if (val == 0 && c > 0) {
            val = 1;
          }
          TypingDNA.apu(arr, val);
        }
      }
      TypingDNA.apu(arr, TypingDNA.isMobile());
      TypingDNA.apu(arr, TypingDNA.version);
      TypingDNA.apu(arr, TypingDNA.flags);
      arr.push(TypingDNA.history.getSpecialKeys());
      return arr.join(",");
    };

    TypingDNA.apu = function (arr, val) {
      "NaN" == String(val) && (val = 0);
      arr.push(val);
    };

    TypingDNA.math = {};

    TypingDNA.math.rd = function (val, dec) {
      return Number(val.toFixed(dec));
    };

    TypingDNA.math.avg = function (arr) {
      var len = arr.length;
      if (len > 0) {
        var sum = 0;
        for (var i = 0; i < len; i++) {
          sum += arr[i];
        }
        return this.rd(sum / len, 4);
      } else {
        return 0;
      }
    };

    TypingDNA.math.sd = function (arr) {
      var len = arr.length;
      if (len < 2) {
        return 0;
      } else {
        var sumVS = 0;
        var mean = this.avg(arr);
        for (var i = 0; i < len; i++) {
          sumVS += (arr[i] - mean) * (arr[i] - mean);
        }
        var sd = Math.sqrt(sumVS / len);
        return sd;
      }
    };

    TypingDNA.math.fo = function (arr) {
      if (arr.length > 1) {
        var values = arr.concat();
        var len = arr.length;
        values.sort(function (a, b) {
          return a - b;
        });
        var asd = this.sd(values);
        var aMean = values[Math.ceil(arr.length / 2)];
        var multiplier = 2;
        var maxVal = aMean + multiplier * asd;
        var minVal = aMean - multiplier * asd;
        if (len < 20) {
          minVal = 0;
        }
        var fVal = [];
        for (var i = 0; i < len; i++) {
          var tempval = values[i];
          if (tempval < maxVal && tempval > minVal) {
            fVal.push(tempval);
          }
        }
        return fVal;
      } else {
        return arr;
      }
    };

    // Calculate a 32 bit FNV-1a hash
    TypingDNA.math.fnv1aHash = function (str) {
      if (str == undefined && typeof str !== 'string') {
        return 0;
      }
      str = str.toLowerCase();
      var i, l;
      var hval = 0x721b5ad4;
      for (i = 0, l = str.length; i < l; i++) {
        hval ^= str.charCodeAt(i);
        hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
      }
      return hval >>> 0;
    };

    TypingDNA.history = {};
    TypingDNA.history.stack = [];
    TypingDNA.history.stackDiagram = [];

    TypingDNA.history.add = function (arr) {
      this.stack.push(arr);
      if (this.stack.length > TypingDNA.maxHistoryLength) {
        this.stack.shift();
      }
    };

    TypingDNA.history.addDiagram = function (arr) {
      this.stackDiagram.push(arr);
    };

    TypingDNA.history.getDiagram = function (extended, str, textId, targetId, caseSensitive) {
      var caseSensitive = caseSensitive != undefined ? caseSensitive : str == undefined || str == "";
      var returnArr = [];
      var diagramType = extended == true ? 1 : 0;
      var stackDiagram = this.stackDiagram;
      if (targetId != undefined && targetId != "" && stackDiagram.length > 0) {
        stackDiagram = TypingDNA.sliceStackByTargetId(stackDiagram, targetId);
        if (str == undefined || str == "") {
          var element = TypingDNA.document.getElementById(targetId);
          if (element != null) {
            str = element.value;
          }
        }
      } else {
        var targetLength = TypingDNA.targetIds.length;
        if (str == undefined || str == "") {
          if (targetLength > 0) {
            str = "";
            for (var i = 0; i < targetLength; i++) {
              var element = TypingDNA.document.getElementById(TypingDNA.targetIds[i]);
              if (element != null) {
                str += element.value;
              }
            }
          } else {
            if (!extended) {
              console.log("Please use extended pattern OR provide a fixed string param OR use the addTarget method.");
            }
          }
        }
      }
      var missingCount = 0;
      var diagramHistoryLength = stackDiagram.length;
      var strLength = diagramHistoryLength;
      if (typeof str === 'string') {
        strLength = str.length;
      } else if (typeof str === 'number' && str < diagramHistoryLength) {
        strLength = str;
      }
      var returnTextId = 0;
      if (textId != undefined) {
        if (isNaN(parseInt(textId))) {
          returnTextId = TypingDNA.math.fnv1aHash(textId);
        } else {
          returnTextId = parseInt(textId);
        }
      } else {
        if (typeof str === 'string') {
          returnTextId = TypingDNA.math.fnv1aHash(str);
        }
      }
      returnArr.push([TypingDNA.isMobile(), TypingDNA.version, TypingDNA.flags, diagramType, strLength, returnTextId, TypingDNA.history.getSpecialKeys()]);
      if (str != undefined && str.length > 0 && typeof str === 'string') {
        var strLower = str.toLowerCase();
        var strUpper = str.toUpperCase();
        var lastFoundPos = [];
        var lastPos = 0;
        var strUpperCharCode;
        var currentSensitiveCharCode;
        for (var i = 0; i < str.length; i++) {
          var currentCharCode = str.charCodeAt(i);
          if (!caseSensitive) {
            strUpperCharCode = strUpper.charCodeAt(i);
            currentSensitiveCharCode = strUpperCharCode != currentCharCode ? strUpperCharCode : strLower.charCodeAt(i);
          }
          var startPos = lastPos;
          var finishPos = diagramHistoryLength;
          var found = false;
          while (found == false) {
            for (var j = startPos; j < finishPos; j++) {
              var arr = stackDiagram[j];
              var charCode = arr[3];
              if (charCode == currentCharCode || !caseSensitive && charCode == currentSensitiveCharCode) {
                found = true;
                if (j == lastPos) {
                  lastPos++;
                  lastFoundPos = [];
                } else {
                  lastFoundPos.push(j);
                  var len = lastFoundPos.length;
                  if (len > 1 && lastFoundPos[len - 1] == lastFoundPos[len - 2] + 1) {
                    lastPos = j + 1;
                    lastFoundPos = [];
                  }
                }
                var keyCode = arr[0];
                var seekTime = arr[1];
                var pressTime = arr[2];
                if (extended) {
                  returnArr.push([charCode, seekTime, pressTime, keyCode]);
                } else {
                  returnArr.push([seekTime, pressTime]);
                }
                break;
              }
            }
            if (found == false) {
              if (startPos != 0) {
                startPos = 0;
                finishPos = lastPos;
              } else {
                found = true;
                if (TypingDNA.replaceMissingKeys) {
                  missingCount++;
                  if ((0, _typeof3.default)(TypingDNA.savedMissingAvgValues) !== 'object' || TypingDNA.savedMissingAvgValues.historyLength != diagramHistoryLength) {
                    var histSktF = TypingDNA.math.fo(TypingDNA.history.get(0, "seek"));
                    var histPrtF = TypingDNA.math.fo(TypingDNA.history.get(0, "press"));
                    var seekTime = Math.round(TypingDNA.math.avg(histSktF));
                    var pressTime = Math.round(TypingDNA.math.avg(histPrtF));
                    TypingDNA.savedMissingAvgValues = {
                      seekTime: seekTime,
                      pressTime: pressTime,
                      historyLength: diagramHistoryLength
                    };
                  } else {
                    var seekTime = TypingDNA.savedMissingAvgValues.seekTime;
                    var pressTime = TypingDNA.savedMissingAvgValues.pressTime;
                  }
                  var missing = 1;
                  if (extended) {
                    returnArr.push([currentCharCode, seekTime, pressTime, currentCharCode, missing]);
                  } else {
                    returnArr.push([seekTime, pressTime, missing]);
                  }
                  break;
                }
              }
            }
          }
          if (TypingDNA.replaceMissingKeysPerc < missingCount * 100 / strLength) {
            return null;
          }
        }
      } else {
        var startCount = 0;
        if (typeof str === 'number') {
          startCount = diagramHistoryLength - str;
        }
        if (startCount < 0) {
          startCount = 0;
        }
        for (var i = startCount; i < diagramHistoryLength; i++) {
          var arr = stackDiagram[i];
          var keyCode = arr[0];
          var seekTime = arr[1];
          var pressTime = arr[2];
          if (extended) {
            var charCode = arr[3];
            returnArr.push([charCode, seekTime, pressTime, keyCode]);
          } else {
            returnArr.push([seekTime, pressTime]);
          }
        }
      }
      return returnArr.join("|");
    };

    TypingDNA.sliceStackByTargetId = function (stack, targetId) {
      var length = stack.length;
      var newStack = [];
      for (i = 0; i < length; i++) {
        var arr = stack[i];
        if (arr[5] == targetId) {
          newStack.push(arr);
        }
      }
      return newStack;
    };

    TypingDNA.history.get = function (length, type, targetId) {
      var stack = this.stack;
      if (targetId != undefined && targetId != "" && stack.length > 0) {
        stack = TypingDNA.sliceStackByTargetId(stack, targetId);
      }
      var historyTotalLength = stack.length;
      if (length == 0 || length == undefined) {
        length = TypingDNA.defaultHistoryLength;
      }
      if (length > historyTotalLength) {
        length = historyTotalLength;
      }
      switch (type) {
        case "seek":
          var seekArr = [];
          for (i = 1; i <= length; i++) {
            var seekTime = stack[historyTotalLength - i][1];
            if (seekTime <= TypingDNA.maxSeekTime) {
              seekArr.push(seekTime);
            }
          };
          return seekArr;
          break;
        case "press":
          var pressArr = [];
          for (i = 1; i <= length; i++) {
            var pressTime = stack[historyTotalLength - i][2];
            if (pressTime <= TypingDNA.maxPressTime) {
              pressArr.push(pressTime);
            }
          };
          return pressArr;
          break;
        default:
          var historyStackObj = {};
          for (var i in TypingDNA.keyCodes) {
            historyStackObj[TypingDNA.keyCodes[i]] = [[], [], []];
          }
          for (i = 1; i <= length; i++) {
            var arr = stack[historyTotalLength - i];
            var keyCode = arr[0];
            var seekTime = arr[1];
            var pressTime = arr[2];
            var prevKeyCode = arr[3];
            if (TypingDNA.keyCodesObj[keyCode]) {
              if (seekTime <= TypingDNA.maxSeekTime) {
                historyStackObj[keyCode][0].push(seekTime);
                if (prevKeyCode != 0 && TypingDNA.keyCodesObj[prevKeyCode]) {
                  historyStackObj[prevKeyCode][2].push(seekTime);
                }
              }
              if (pressTime <= TypingDNA.maxPressTime) {
                historyStackObj[keyCode][1].push(pressTime);
              }
            }
          };
          return [historyStackObj, length];
      }
    };

    TypingDNA.history.getSpecialKeys = function () {
      var returnArr = [];
      var length = this.stack.length;
      var historyStackObj = {};
      for (var i in TypingDNA.spKeyCodes) {
        historyStackObj[TypingDNA.spKeyCodes[i]] = [[]];
      }
      for (i = 1; i <= length; i++) {
        var arr = this.stack[length - i];
        if (TypingDNA.spKeyCodesObj[arr[0]]) {
          var keyCode = arr[0];
          var pressTime = arr[2];
          if (pressTime <= TypingDNA.maxPressTime) {
            historyStackObj[keyCode][0].push(pressTime);
          }
        }
      }
      for (var i in TypingDNA.spKeyCodes) {
        var arr = TypingDNA.math.fo(historyStackObj[TypingDNA.spKeyCodes[i]][0]);
        var arrLen = arr.length;
        returnArr.push(arrLen);
        if (arrLen > 1) {
          returnArr.push(Math.round(TypingDNA.math.avg(arr)));
          returnArr.push(Math.round(TypingDNA.math.sd(arr)));
        } else if (arrLen == 1) {
          returnArr.push([arr[0], -1]);
        } else {
          returnArr.push([-1, -1]);
        }
      }
      var clicksArrLen = TypingDNA.clickTimes.length;
      returnArr.push(clicksArrLen);
      if (clicksArrLen > 1) {
        returnArr.push(Math.round(TypingDNA.math.avg(TypingDNA.clickTimes)));
        returnArr.push(Math.round(TypingDNA.math.sd(TypingDNA.clickTimes)));
      } else if (clicksArrLen == 1) {
        returnArr.push(TypingDNA.clickTimes[0], -1);
      } else {
        returnArr.push([-1, -1]);
      }
      var stopArrLen = TypingDNA.stopTimes.length;
      returnArr.push(stopArrLen);
      if (stopArrLen > 1) {
        returnArr.push(Math.round(TypingDNA.math.avg(TypingDNA.stopTimes)));
        returnArr.push(Math.round(TypingDNA.math.sd(TypingDNA.stopTimes)));
      } else if (stopArrLen == 1) {
        returnArr.push(TypingDNA.stopTimes[0], -1);
      } else {
        returnArr.push([-1, -1]);
      }
      return returnArr;
    };

    /**
     * Checks the quality of a typing pattern, how well it is revelated, how useful the
     * information will be for matching applications. It returns a value between 0 and 1.
     * Values over 0.3 are acceptable, however a value over 0.7 shows good pattern strength.
     * @param  {String} typingPattern The typing pattern string returned by the get() function.
     * @return {Number} A real number between 0 and 1. A close to 1 value means a stronger pattern.
     * @example var quality = tdna.getQuality(typingPattern);
     */
    TypingDNA.getQuality = function (typingPattern) {
      var obj = typingPattern.split(",");
      for (i = 0; i < obj.length; i++) {
        obj[i] = Number(obj[i]);
      }
      var totalEvents = obj[0];
      var acc = rec = avgAcc = 0;
      var avg = TypingDNA.math.avg(obj);
      var revs = obj.slice(11, 55);
      for (var i in revs) {
        rec += Number(revs[i] > 0);
        acc += Number(revs[i] > 4);
        avgAcc += Number(revs[i] > avg);
      }
      var tReturn = Math.sqrt(rec * acc * avgAcc) / 80;
      return tReturn > 1 ? 1 : tReturn;
    };

    /**
     * Checks the validity of a typing pattern if recorded on mobile.
     * @param  {String} typingPattern The typing pattern string returned by the get() function.
     * @return {Number} A real number between 0 and 1. A number larger than 0.7 usually means a valid pattern.
     * @example var quality = tdna.checkMobileValidity(typingPattern);
     */
    TypingDNA.checkMobileValidity = function (typingPattern) {
      var obj = typingPattern.split(",");
      var totalEvents = obj[0];
      if (totalEvents == 0) {
        return 0;
      }
      var rec = 0;
      var revs = obj.slice(11, 55);
      for (var i in revs) {
        rec += Number(revs[i]);
      }
      return rec / totalEvents;
    };

    TypingDNA.getLength = function (typingPattern) {
      return Number(typingPattern.split(",")[1]);
    };

    TypingDNA.isMobile = function () {
      if (TypingDNA.mobile != undefined) {
        return TypingDNA.mobile;
      } else {
        var check = 0;
        (function (a) {
          if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
            check = 1;
          }
        })(navigator.userAgent || navigator.vendor || window.opera);
        TypingDNA.mobile = check;
        return check;
      }
    };

    TypingDNA.getTextId = function (str) {
      return TypingDNA.math.fnv1aHash(str);
    };
  } else {
    // TypingDNA is a static class, currently doesn't support actual multiple instances (Singleton implementation)
    return TypingDNA.instance;
  }
};

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2016-2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({
    template: '\
        <div class="content-container">\
          <span class="registration-label">{{label}}</span>\
          <a title="{{text}}" aria-label="{{text}}" class="registration-link" href="#">{{text}}</a>\
        </div>\
        ',
    className: 'registration-container',

    events: {
      'click a.registration-link': 'handleClickEvent'
    },

    handleClickEvent: function handleClickEvent(e) {
      e.preventDefault();
      var clickHandler = this.settings.get('registration.click');
      if (clickHandler) {
        clickHandler();
      } else if (this.options.appState.get('isIdxStateToken')) {
        this.options.appState.trigger('navigate', 'signin/enroll-user');
      } else {
        this.options.appState.trigger('navigate', 'signin/register');
      }
    },

    getTemplateData: function getTemplateData() {
      var templateData = {
        label: Okta.loc('registration.signup.label', 'login'),
        text: Okta.loc('registration.signup.text', 'login')
      };
      return templateData;
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(114)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Util, PrimaryAuthForm) {

  var _ = Okta._;

  return PrimaryAuthForm.extend({
    className: 'idp-discovery-form',
    save: function save() {
      return Okta.loc('oform.next', 'login');
    },
    saveId: 'idp-discovery-submit',

    initialize: function initialize() {
      this.listenTo(this, 'save', _.bind(this.model.save, this.model));
      this.stateEnableChange();
    },

    inputs: function inputs() {
      var inputs = [];
      var usernameProps = {
        className: 'margin-btm-30',
        label: Okta.loc('primaryauth.username.placeholder', 'login'),
        'label-top': true,
        explain: Util.createInputExplain('primaryauth.username.tooltip', 'primaryauth.username.placeholder', 'login'),
        'explain-top': true,
        inputId: 'idp-discovery-username',
        disabled: false
      };
      inputs.push(_.extend(this.getUsernameField(), usernameProps));
      if (this.settings.get('features.rememberMe')) {
        inputs.push(this.getRemeberMeCheckbox());
      }
      return inputs;
    },

    focus: function focus() {
      if (!this.model.get('username')) {
        this.getInputs().first().focus();
      } else if (this.getInputs().toArray()[1]) {
        this.getInputs().toArray()[1].focus();
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(77), __webpack_require__(78), __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, PrimaryAuthModel, CookieUtil, Enums, Util) {

  var _ = Okta._;

  return PrimaryAuthModel.extend({

    props: function props() {
      var cookieUsername = CookieUtil.getCookieUsername(),
          properties = this.getUsernameAndRemember(cookieUsername);

      return {
        username: ['string', true, properties.username],
        lastUsername: ['string', false, cookieUsername],
        context: ['object', false],
        remember: ['boolean', true, properties.remember]
      };
    },

    local: {},

    save: function save() {
      var username = this.settings.transformUsername(this.get('username'), Enums.IDP_DISCOVERY),
          remember = this.get('remember'),
          lastUsername = this.get('lastUsername'),
          resource = 'okta:acct:' + username,
          requestContext = this.get('requestContext');

      this.setUsernameCookie(username, remember, lastUsername);

      //the 'save' event here is triggered and used in the BaseLoginController
      //to disable the primary button
      this.trigger('save');

      this.appState.trigger('loading', true);

      var webfingerArgs = {
        resource: resource,
        requestContext: requestContext
      };

      var authClient = this.appState.settings.authClient;

      authClient.webfinger(webfingerArgs).then(_.bind(function (res) {
        if (res && res.links && res.links[0]) {
          if (res.links[0].properties['okta:idp:type'] === 'OKTA') {
            this.trigger('goToPrimaryAuth');
          } else if (res.links[0].href) {
            //override redirectFn to only use Util.redirectWithFormGet if OKTA_INVALID_SESSION_REPOST is included
            //it will be encoded since it will be included in the encoded fromURI
            var redirectFn = res.links[0].href.includes('OKTA_INVALID_SESSION_REPOST%3Dtrue') ? Util.redirectWithFormGet.bind(Util) : this.settings.get('redirectUtilFn');
            redirectFn(res.links[0].href);
          }
        }
      }, this)).fail(_.bind(function () {
        this.trigger('error');
        // Specific event handled by the Header for the case where the security image is not
        // enabled and we want to show a spinner. (Triggered only here and handled only by Header).
        this.appState.trigger('removeLoading');
        CookieUtil.removeUsernameCookie();
      }, this)).fin(_.bind(function () {
        this.appState.trigger('loading', false);
      }, this));
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint camelcase: 0 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(118), __webpack_require__(4), __webpack_require__(8), __webpack_require__(1), __webpack_require__(3), __webpack_require__(2), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Duo, Q, FactorUtil, FormController, Enums, FormType, FooterSignout) {

  var $ = Okta.$,
      _ = Okta._;

  return FormController.extend({

    className: 'mfa-verify-duo duo-form',

    Model: {
      props: {
        host: 'string',
        signature: 'string',
        postAction: 'string',
        factorId: 'string',
        stateToken: 'string',
        rememberDevice: 'boolean'
      },

      initialize: function initialize() {
        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
        // set the initial value for remember device (Cannot do this while defining the
        // local property because this.settings would not be initialized there yet).
        this.set('rememberDevice', rememberDevice);
      },

      getInitOptions: function getInitOptions() {
        var rememberDevice = !!this.get('rememberDevice');
        return this.doTransaction(function (transaction) {
          var data = {
            rememberDevice: rememberDevice
          };
          var factor = _.findWhere(transaction.factors, {
            provider: 'DUO',
            factorType: 'web'
          });
          return factor.verify(data).fail(function (err) {
            // Clean up the cookie on failure.
            throw err;
          });
        });
      },

      verify: function verify(signedResponse) {
        // Note: We should be doing this in OktaAuth! Fix when it's updated.
        var url = this.get('postAction'),
            factorId = this.get('factorId'),
            self = this,
            data = {
          id: factorId,
          stateToken: this.get('stateToken'),
          sig_response: signedResponse
        };
        // We don't actually use authClient.post() here (unlike all the other cases in the
        // sign-in widget) since the endpoint is wired to accept serialized form post instead
        // of a JSON post ($.post() is different from authClient.post() in that in $.post(),
        // jquery decides the Content-Type instead of it being a JSON type). Enroll/Verify DUO
        // are the only two places where we actually do this.
        // NOTE - If we ever decide to change this, we should test this very carefully.
        var rememberDevice = this.get('rememberDevice');
        return Q($.post(url, data)).then(function () {
          return self.doTransaction(function (transaction) {
            var data;
            if (rememberDevice) {
              data = { rememberDevice: rememberDevice };
            }
            return transaction.poll(data);
          });
        }).fail(function (err) {
          self.trigger('error', self, err.xhr);
        });
      }
    },

    Form: {
      autoSave: true,
      noButtonBar: true,
      title: _.partial(Okta.loc, 'factor.duo'),
      attributes: { 'data-se': 'factor-duo' },

      postRender: function postRender() {
        this.add('<iframe frameborder="0" title="' + this.title() + '"></iframe>');
        if (this.options.appState.get('allowRememberDevice')) {
          this.addInput({
            label: false,
            'label-top': true,
            placeholder: this.options.appState.get('rememberDeviceLabel'),
            className: 'margin-btm-0',
            name: 'rememberDevice',
            type: 'checkbox'
          });
        }
        Duo.init({
          'host': this.model.get('host'),
          'sig_request': this.model.get('signature'),
          'iframe': this.$('iframe').get(0),
          'post_action': _.bind(this.model.verify, this.model)
        });
      }
    },

    Footer: FooterSignout,

    fetchInitialData: function fetchInitialData() {
      var self = this;
      return this.model.getInitOptions().then(function (trans) {
        var res = trans.data;
        if (!res._embedded || !res._embedded.factor || !res._embedded.factor._embedded || !res._embedded.factor._embedded.verification) {
          throw new Error('Response does not have duo verification options');
        }
        var verification = res._embedded.factor._embedded.verification;
        self.model.set({
          host: verification.host,
          signature: verification.signature,
          postAction: verification._links.complete.href,
          factorId: res._embedded.factor.id,
          stateToken: res.stateToken
        });
      });
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaChallenge')) {
        return true;
      }
    },

    back: function back() {
      // Empty function on verify controllers to prevent users
      // from navigating back during 'verify' using the browser's
      // back button. The URL will still change, but the view will not
      // More details in OKTA-135060.
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _stringify = __webpack_require__(32);

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = __webpack_require__(100);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(101);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity:[2, 10], max-params: [2, 11] */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(79)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, FooterWithBackLink) {

  var _ = Okta._,
      $ = Okta.$;
  var Util = Okta.internal.util.Util;


  return FormController.extend({
    className: 'piv-cac-card',
    Model: {

      save: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
          var self, data, pivConfig, res;
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.trigger('request');
                  self = this, data = {
                    fromURI: this.settings.get('relayState')
                  }, pivConfig = this.settings.get('piv');
                  _context.prev = 2;
                  _context.next = 5;
                  return this.getCert(pivConfig.certAuthUrl);

                case 5:
                  _context.next = 7;
                  return this.postCert(pivConfig.certAuthUrl, data);

                case 7:
                  res = _context.sent;

                  Util.redirect(res.redirectUrl);
                  _context.next = 14;
                  break;

                case 11:
                  _context.prev = 11;
                  _context.t0 = _context['catch'](2);

                  self.trigger('error', self, _context.t0);

                case 14:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this, [[2, 11]]);
        }));

        function save() {
          return _ref.apply(this, arguments);
        }

        return save;
      }(),

      getCert: function getCert(certAuthUrl) {
        return $.get({
          url: certAuthUrl,
          xhrFields: {
            withCredentials: true
          },
          beforeSend: function beforeSend() {
            // overriding this function to prevent our jquery-wrapper from
            // setting headers. Need to keep this a simple request in order for
            // PIV / CAC to work in IE.
          }
        });
      },

      postCert: function postCert(certAuthUrl, data) {
        return $.post({
          url: certAuthUrl,
          xhrFields: {
            withCredentials: true
          },
          data: (0, _stringify2.default)(data),
          contentType: 'text/plain',
          beforeSend: function beforeSend() {
            // overriding this function to prevent our jquery-wrapper from
            // setting headers. Need to keep this a simple request in order for
            // PIV / CAC to work in IE.
          }
        });
      }
    },

    Form: {
      autoSave: true,
      hasSavingState: false,
      title: _.partial(Okta.loc, 'piv.cac.title', 'login'),
      className: 'piv-cac-card',
      noCancelButton: true,
      save: _.partial(Okta.loc, 'retry', 'login'),
      modelEvents: {
        'request': '_startEnrollment',
        'error': '_stopEnrollment'
      },

      formChildren: [FormType.View({
        View: '<div class="piv-verify-text">\
               <p>{{i18n code="piv.cac.card.insert" bundle="login"}}</p>\
               <div data-se="piv-waiting" class="okta-waiting-spinner"></div>\
             </div>'
      })],

      _startEnrollment: function _startEnrollment() {
        this.$('.okta-waiting-spinner').show();
        this.$('.o-form-button-bar').hide();
      },

      _stopEnrollment: function _stopEnrollment() {
        this.$('.okta-waiting-spinner').hide();
        this.$('.o-form-button-bar').show();
      },

      postRender: function postRender() {
        var _this = this;

        _.defer(function () {
          _this.model.save();
        });
      }
    },

    back: function back() {
      // Empty function on verify controllers to prevent users
      // from navigating back during 'verify' using the browser's
      // back button. The URL will still change, but the view will not
      // More details in OKTA-135060.
    },

    Footer: FooterWithBackLink
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity: [2, 21] max-statements: [2, 25] max-params: [2, 12]*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(36), __webpack_require__(217), __webpack_require__(218), __webpack_require__(219), __webpack_require__(220), __webpack_require__(221), __webpack_require__(222), __webpack_require__(224), __webpack_require__(225), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, BaseLoginController, TOTPForm, YubikeyForm, SecurityQuestionForm, PassCodeForm, EmailMagicLinkForm, PushForm, PasswordForm, InlineTOTPForm, FooterSignout) {
  var CheckBox = Okta.internal.views.forms.inputs.CheckBox;


  return BaseLoginController.extend({
    className: 'mfa-verify',

    initialize: function initialize(options) {
      var factorType = options.factorType;

      var View;
      switch (factorType) {
        case 'question':
          View = SecurityQuestionForm;
          break;
        case 'email':
          if (this.options.appState.get('isIdxStateToken')) {
            View = EmailMagicLinkForm;
          } else {
            View = PassCodeForm;
          }
          break;
        case 'sms':
        case 'call':
          View = PassCodeForm;
          break;
        case 'token':
        case 'token:software:totp':
        case 'token:hotp':
          View = TOTPForm;
          break;
        case 'token:hardware':
          View = YubikeyForm;
          break;
        case 'push':
          View = PushForm;
          break;
        case 'password':
          View = PasswordForm;
          break;
        default:
          throw new Error('Unrecognized factor type');
      }

      this.model = this.findModel(factorType, options);
      if (!this.model) {
        // TODO: recover from this more gracefully - probably to redirect
        // to default factor
        throw new Error('Unrecognized factor/provider');
      }

      this.addListeners();
      this.add(new View(this.toJSON()));

      // If Okta Verify Push and Okta Verify totp are both enabled,
      // then we show Push first, and totp is the "backup" factor,
      // which is rendered in an additional InlineTOTPForm
      if (factorType === 'push' && this.model.get('isOktaFactor')) {
        if (this.model.get('backupFactor')) {
          this.inlineTotpForm = this.add(InlineTOTPForm, {
            options: { model: this.model.get('backupFactor') }
          }).last();
        }

        if (this.settings.get('features.autoPush')) {
          this.autoPushCheckBox = this.add(CheckBox, {
            options: {
              model: this.model,
              name: 'autoPush',
              placeholder: Okta.loc('autoPush', 'login'),
              label: false,
              'label-top': false,
              className: 'margin-btm-0'
            }
          }).last();
        }

        // Remember Device checkbox resides outside of the Push and TOTP forms.
        if (this.options.appState.get('allowRememberDevice')) {
          this.rememberDeviceCheckbox = this.add(CheckBox, {
            options: {
              model: this.model,
              name: 'rememberDevice',
              placeholder: this.options.appState.get('rememberDeviceLabel'),
              label: false,
              'label-top': true,
              className: 'margin-btm-0'
            }
          }).last();
        }
        // Set rememberDevice on the backup factor (totp) if available
        if (this.model.get('backupFactor')) {
          this.listenTo(this.model, 'change:rememberDevice', function (model, rememberDevice) {
            model.get('backupFactor').set('rememberDevice', rememberDevice);
          });
        }
      }

      this.listenTo(this.options.appState, 'change:isWaitingForNumberChallenge', function (state, isWaitingForNumberChallenge) {
        if (isWaitingForNumberChallenge || this.options.appState.get('lastAuthResponse').status === 'SUCCESS') {
          this.autoPushCheckBox && this.autoPushCheckBox.$el.hide();
          this.rememberDeviceCheckbox && this.rememberDeviceCheckbox.$el.hide();
          this.inlineTotpForm && this.inlineTotpForm.$el.hide();
        } else {
          this.autoPushCheckBox && this.autoPushCheckBox.$el.show();
          this.rememberDeviceCheckbox && this.rememberDeviceCheckbox.$el.show();
          this.inlineTotpForm && this.inlineTotpForm.$el.show();
        }
      });

      if (!this.settings.get('features.hideSignOutLinkInMFA')) {
        this.add(new FooterSignout(this.toJSON()));
      }
    },

    findModel: function findModel(factorType, options) {
      var factors = options.appState.get('factors');
      var provider = options.provider;
      var factorIndex = options.factorIndex;

      if (!provider) {
        return factors.findWhere({ factorType: factorType, isFactorTypeVerification: true });
      } else if (factors.hasMultipleFactorsOfSameType(factorType) && factorIndex) {
        return factors.getFactorByTypeAndIndex(factorType, factorIndex);
      } else {
        return factors.findWhere({ provider: provider, factorType: factorType });
      }
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaRequired') && this.options.appState.get('trapMfaRequiredResponse') || this.options.appState.get('isMfaChallenge')) {
        this.options.appState.set('trapMfaRequiredResponse', false);
        return true;
      }
      return false;
    },

    back: function back() {
      // Empty function on verify controllers to prevent users
      // from navigating back during 'verify' using the browser's
      // back button. The URL will still change, but the view will not
      // More details in OKTA-135060.
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, TextBox) {

  var _ = Okta._;

  return Okta.Form.extend({
    className: 'mfa-verify-totp',
    autoSave: true,
    noCancelButton: true,
    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
    scrollOnError: false,
    layout: 'o-form-theme',
    attributes: { 'data-se': 'factor-totp' },

    initialize: function initialize() {
      var factorName = this.model.get('factorLabel');
      var maskPasswordField = this.model.get('provider') === 'RSA' || this.model.get('provider') === 'DEL_OATH';

      this.title = factorName;
      if (this.model.get('isFactorTypeVerification')) {
        this.subtitle = Okta.loc('mfa.challenge.totp.subtitle.multiple', 'login', [factorName]);
      } else {
        this.subtitle = Okta.loc('mfa.challenge.title', 'login', [factorName]);
      }

      this.addInput({
        label: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
        'label-top': true,
        className: 'o-form-fieldset o-form-label-top auth-passcode',
        name: 'answer',
        input: TextBox,
        type: maskPasswordField ? 'password' : 'tel'
      });

      if (this.options.appState.get('allowRememberDevice')) {
        this.addInput({
          label: false,
          'label-top': true,
          placeholder: this.options.appState.get('rememberDeviceLabel'),
          className: 'margin-btm-0',
          name: 'rememberDevice',
          type: 'checkbox'
        });
      }

      if (this.model.get('provider') === 'RSA' || this.model.get('provider') === 'DEL_OATH') {
        this.listenTo(this.model, 'error', _.bind(function (source, error) {
          if (error && error.status === 409) {
            // 409 means we are in change pin, so we should clear out answer input
            this.$('.auth-passcode input').val('');
            this.$('.auth-passcode input').trigger('change');
            this.$('.auth-passcode input').focus();
          }
        }, this));
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, TextBox) {

  var _ = Okta._;

  return Okta.Form.extend({
    className: 'mfa-verify-yubikey',
    autoSave: true,
    noCancelButton: true,
    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
    scrollOnError: false,
    layout: 'o-form-theme',
    attributes: { 'data-se': 'factor-yubikey' },

    initialize: function initialize() {
      var factorName = this.model.get('factorLabel');

      this.title = factorName;
      this.subtitle = Okta.loc('factor.totpHard.yubikey.description', 'login');

      this.addInput({
        label: Okta.loc('factor.totpHard.yubikey.placeholder', 'login'),
        'label-top': true,
        className: 'o-form-fieldset o-form-label-top auth-passcode',
        name: 'answer',
        input: TextBox,
        inputId: 'mfa-answer',
        type: 'password'
      });

      if (this.options.appState.get('allowRememberDevice')) {
        this.addInput({
          label: false,
          'label-top': true,
          className: 'margin-btm-0',
          placeholder: this.options.appState.get('rememberDeviceLabel'),
          name: 'rememberDevice',
          type: 'checkbox'
        });
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  var _ = Okta._;

  return Okta.Form.extend({
    className: 'mfa-verify-question',
    autoSave: true,
    noCancelButton: true,
    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
    scrollOnError: false,
    layout: 'o-form-theme',
    attributes: { 'data-se': 'factor-question' },

    initialize: function initialize() {
      this.title = this.model.get('factorLabel');

      this.addInput({
        label: this.model.get('securityQuestion'),
        'label-top': true,
        placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
        className: 'auth-passcode',
        name: 'answer',
        type: 'password',
        params: {
          showPasswordToggle: true
        }
      });

      if (this.options.appState.get('allowRememberDevice')) {
        this.addInput({
          label: false,
          'label-top': true,
          placeholder: this.options.appState.get('rememberDeviceLabel'),
          className: 'margin-btm-0',
          name: 'rememberDevice',
          type: 'checkbox'
        });
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint complexity: [2, 7] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q, TextBox) {

  var subtitleTpl = Okta.Handlebars.compile('({{subtitle}})');
  var _ = Okta._;
  var API_RATE_LIMIT = 30000; //milliseconds
  var warningTemplate = '<div class="okta-form-infobox-warning infobox infobox-warning login-timeout-warning">\
                           <span class="icon warning-16"></span>\
                           <p>{{{warning}}}</p>\
                         </div>\
                         ';

  function getFormAndButtonDetails(factorType) {
    switch (factorType) {
      case 'sms':
        return {
          buttonDataSe: 'sms-send-code',
          buttonClassName: 'sms-request-button',
          formSubmit: Okta.loc('mfa.sendCode', 'login'),
          formRetry: Okta.loc('mfa.resendCode', 'login'),
          formSubmitted: Okta.loc('mfa.sent', 'login'),
          subtitle: subtitleTpl({ subtitle: this.model.get('phoneNumber') }),
          warning: Okta.loc('factor.sms.time.warning', 'login')
        };
      case 'call':
        return {
          buttonDataSe: 'make-call',
          buttonClassName: 'call-request-button',
          formSubmit: Okta.loc('mfa.call', 'login'),
          formRetry: Okta.loc('mfa.redial', 'login'),
          formSubmitted: Okta.loc('mfa.calling', 'login'),
          subtitle: subtitleTpl({ subtitle: this.model.get('phoneNumber') }),
          warning: Okta.loc('factor.call.time.warning', 'login')
        };
      case 'email':
        return {
          buttonDataSe: 'email-send-code',
          buttonClassName: 'email-request-button',
          formSubmit: Okta.loc('mfa.sendEmail', 'login'),
          formRetry: Okta.loc('mfa.resendEmail', 'login'),
          formSubmitted: Okta.loc('mfa.sent', 'login'),
          subtitle: subtitleTpl({ subtitle: this.model.get('email') })
        };
      default:
        return {
          buttonDataSe: '',
          buttonClassName: '',
          formSubmit: '',
          formRetry: '',
          formSubmitted: ''
        };
    }
  }

  return Okta.Form.extend({
    className: 'mfa-verify-passcode',
    autoSave: true,
    noCancelButton: true,
    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
    scrollOnError: false,
    layout: 'o-form-theme',

    disableSubmitButton: function disableSubmitButton() {
      return this.model.appState.get('isMfaChallenge') && this.model.get('answer');
    },

    showWarning: function showWarning(msg) {
      this.clearWarnings();
      this.add(warningTemplate, '.o-form-error-container', { options: { warning: msg } });
    },
    clearWarnings: function clearWarnings() {
      this.$('.okta-form-infobox-warning').remove();
    },

    initialize: function initialize() {
      var form = this;
      this.title = this.model.get('factorLabel');

      var factorType = this.model.get('factorType');
      var formAndButtonDetails = getFormAndButtonDetails.call(this, factorType);
      var warningDetails = formAndButtonDetails.warning;
      this.$el.attr('data-se', 'factor-' + factorType);

      this.subtitle = formAndButtonDetails.subtitle;
      this.listenTo(this.model, 'error', function () {
        this.clearErrors();
      });
      this.addInput({
        label: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
        'label-top': true,
        className: 'o-form-fieldset o-form-label-top auth-passcode',
        name: 'answer',
        input: TextBox,
        type: 'tel'
      });
      var sendEmailBtn = this.add(Okta.createButton({
        attributes: { 'data-se': formAndButtonDetails.buttonDataSe },
        className: 'button ' + formAndButtonDetails.buttonClassName + ' no-left-margin no-float',
        title: formAndButtonDetails.formSubmit,
        click: function click() {
          form.clearErrors();
          this.disable();
          form.clearWarnings();
          this.options.title = formAndButtonDetails.formSubmitted;
          this.render();
          // To send an OTP to the device, make the same request but use
          // an empty passCode
          this.model.set('answer', '');
          this.model.save().then(function () {
            // render and focus on the passcode input field.
            form.getInputs().first().render().focus();
            return Q.delay(API_RATE_LIMIT);
          }).then(_.bind(function () {
            this.options.title = formAndButtonDetails.formRetry;
            this.enable();
            if (factorType === 'call' || factorType === 'sms') {
              form.showWarning(warningDetails);
            }
            this.render();
          }, this));
        }
      }), '.o-form-fieldset', { prepend: true });

      if (this.options.appState.get('allowRememberDevice')) {
        this.addInput({
          label: false,
          'label-top': true,
          placeholder: this.options.appState.get('rememberDeviceLabel'),
          className: 'margin-btm-0',
          name: 'rememberDevice',
          type: 'checkbox'
        });
      }

      try {
        sendEmailBtn.focus();
      } catch (e) {
        console.log(e);
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint complexity: [2, 7] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q) {
  var _ = Okta._;
  var API_RATE_LIMIT = 30000; //milliseconds

  return Okta.Form.extend({
    layout: 'o-form-theme',
    className: 'factor-verify-magiclink',
    autoSave: true,
    noCancelButton: true,
    initialize: function initialize() {
      // for FACTOR_REQUIRED with email magic link we dont need to show otp code input field and verify button
      var form = this;
      this.title = this.model.get('factorLabel');
      //TODO: OKTA-211618 Temp fix for demo. FACTOR_REQUIRED after sign up is missing the profile object in API response
      var email = this.model.get('email') || this.options.appState.get('lastAuthResponse')._embedded.user.profile.login;
      this.subtitle = '(' + email + ')';
      this.add(Okta.createButton({
        attributes: { 'data-se': 'email-send-code' },
        className: 'button email-request-button',
        title: Okta.loc('mfa.sendEmail', 'login'),
        click: function click() {
          form.clearErrors();
          this.disable();
          this.options.title = Okta.loc('mfa.sent', 'login');
          this.render();
          this.model.save().then(_.bind(function () {
            return Q.delay(API_RATE_LIMIT);
          }, this)).then(_.bind(function () {
            this.options.title = Okta.loc('mfa.resendEmail', 'login');
            this.enable();
            this.render();
          }, this));
        }
      }));
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(78), __webpack_require__(5), __webpack_require__(223)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, CookieUtil, Util, NumberChallengeView) {

  var _ = Okta._;
  // deviceName is escaped on BaseForm (see BaseForm's template)
  var titleTpl = Okta.Handlebars.compile('{{factorName}} ({{{deviceName}}})');
  var WARNING_TIMEOUT = 30000; //milliseconds
  var warningTemplate = '<div class="okta-form-infobox-warning infobox infobox-warning">\
                           <span class="icon warning-16"></span>\
                           <p>{{warning}}</p>\
                         </div>';

  return Okta.Form.extend({
    className: 'mfa-verify-push',
    autoSave: true,
    noCancelButton: true,
    save: _.partial(Okta.loc, 'oktaverify.send', 'login'),
    scrollOnError: false,
    layout: 'o-form-theme',
    attributes: { 'data-se': 'factor-push' },
    events: {
      submit: 'submit'
    },

    initialize: function initialize() {
      this.enabled = true;
      this.listenTo(this.options.appState, 'change:isMfaRejectedByUser', function (state, isMfaRejectedByUser) {
        this.setSubmitState(isMfaRejectedByUser);
        if (isMfaRejectedByUser) {
          this.showError(Okta.loc('oktaverify.rejected', 'login'));
        }
      });

      this.numberChallengeView = this.add(NumberChallengeView).last();
      this.listenTo(this.options.appState, 'change:isWaitingForNumberChallenge', function (state, isWaitingForNumberChallenge) {
        if (isWaitingForNumberChallenge || this.options.appState.get('lastAuthResponse').status === 'SUCCESS') {
          this.clearWarnings();
          this.$el.find('.button').hide();
          this.numberChallengeView.$el.show();
        } else {
          this.numberChallengeView.$el.hide();
          this.$el.find('.button').show();
        }
      });
      this.listenTo(this.options.appState, 'change:isMfaTimeout', function (state, isMfaTimeout) {
        this.setSubmitState(isMfaTimeout);
        if (isMfaTimeout) {
          this.showError(Okta.loc('oktaverify.timeout', 'login'));
        }
      });
      this.listenTo(this.options.appState, 'change:isMfaRequired', function (state, isMfaRequired) {
        if (isMfaRequired) {
          this.clearErrors();
          this.clearWarnings();
        }
      });
      this.title = titleTpl({
        factorName: this.model.get('factorLabel'),
        deviceName: this.model.get('deviceName')
      });
    },
    setSubmitState: function setSubmitState(ableToSubmit) {
      var button = this.$el.find('.button');
      this.enabled = ableToSubmit;
      if (ableToSubmit) {
        button.removeClass('link-button-disabled');
        button.prop('value', Okta.loc('oktaverify.send', 'login'));
        button.prop('disabled', false);
      } else {
        button.addClass('link-button-disabled');
        button.prop('value', Okta.loc('oktaverify.sent', 'login'));
        button.prop('disabled', true);
      }
    },
    submit: function submit(e) {
      if (e !== undefined) {
        e.preventDefault();
      }
      if (this.enabled) {
        this.setSubmitState(false);
        this.doSave();
      }
    },
    postRender: function postRender() {
      var factorsPolicyInfo = this.options.appState.get('factorsPolicyInfo');
      var id = this.model.get('id');
      var isAutoPushEnabled = this.settings.get('features.autoPush') && factorsPolicyInfo && factorsPolicyInfo[id] ? factorsPolicyInfo[id]['autoPushEnabled'] : false;

      if (isAutoPushEnabled) {
        this.model.set('autoPush', true);
        // bind after $el has been rendered, and trigger push once DOM is fully loaded
        _.defer(_.bind(this.submit, this));
      }
    },
    doSave: function doSave() {
      var warningTimeout;
      this.clearErrors();
      this.clearWarnings();
      if (this.model.isValid()) {
        this.listenToOnce(this.model, 'error', function () {
          this.setSubmitState(true);
          this.clearWarnings();
          clearTimeout(warningTimeout);
        });
        this.trigger('save', this.model);
        warningTimeout = Util.callAfterTimeout(_.bind(function () {
          if (!this.options.appState.get('isWaitingForNumberChallenge')) {
            this.showWarning(Okta.loc('oktaverify.warning', 'login'));
          }
        }, this), WARNING_TIMEOUT);
      }
    },
    showError: function showError(msg) {
      this.clearWarnings();
      this.model.trigger('error', this.model, { responseJSON: { errorSummary: msg } });
    },
    showWarning: function showWarning(msg) {
      this.clearWarnings();
      this.add(warningTemplate, '.o-form-error-container', { options: { warning: msg } });
    },
    clearWarnings: function clearWarnings() {
      this.$('.okta-form-infobox-warning').remove();
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({
    className: 'number-challenge-view',
    template: '\n      <p data-se="number-challenge-instruction">\n        {{{i18n code="oktaverify.numberchallenge.instruction" bundle="login" arguments="number"}}}\n      </p>\n      <div class="phone">\n        <div class="phone--body">\n          <div class="phone--screen">\n            <span class="phone--number" data-se="challenge-number">{{number}}</span>\n          </div>\n          <div class="phone--home-button"></div>\n        </div>\n      </div>\n      <p>{{i18n code="oktaverify.numberchallenge.explain"  bundle="login"}}</p>\n    ',
    initialize: function initialize() {
      var _this = this;

      this.listenTo(this.options.appState, 'change:isWaitingForNumberChallenge', function () {
        if (_this.options.appState.get('lastAuthResponse').status !== 'SUCCESS') {
          _this.render();
        }
      });
    },
    getTemplateData: function getTemplateData() {
      var lastAuthResponse = this.options.appState.get('lastAuthResponse');
      if (!this.options.appState.get('isWaitingForNumberChallenge')) {
        return {
          number: null
        };
      }
      return {
        number: lastAuthResponse._embedded.factor._embedded.challenge.correctAnswer
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2016-2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  var _ = Okta._;

  return Okta.Form.extend({
    className: 'mfa-verify-password',
    autoSave: true,
    noCancelButton: true,
    save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
    scrollOnError: false,
    layout: 'o-form-theme',
    attributes: { 'data-se': 'factor-password' },

    initialize: function initialize() {
      this.title = this.model.get('factorLabel');

      this.addInput({
        label: Okta.loc('mfa.challenge.password.placeholder', 'login'),
        'label-top': true,
        className: 'auth-passcode',
        name: 'password',
        type: 'password',
        params: {
          showPasswordToggle: true
        }
      });

      if (this.options.appState.get('allowRememberDevice')) {
        this.addInput({
          label: false,
          'label-top': true,
          placeholder: this.options.appState.get('rememberDeviceLabel'),
          className: 'margin-btm-0',
          name: 'rememberDevice',
          type: 'checkbox'
        });
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, TextBox) {

  function addInlineTotp(form) {
    form.addDivider();
    form.addInput({
      label: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
      'label-top': true,
      className: 'o-form-fieldset o-form-label-top inline-input auth-passcode',
      name: 'answer',
      input: TextBox,
      type: 'tel'
    });
    form.add(Okta.createButton({
      attributes: { 'data-se': 'inline-totp-verify' },
      className: 'button inline-totp-verify margin-top-30',
      title: Okta.loc('mfa.challenge.verify', 'login'),
      click: function click() {
        if (!form.isValid()) {
          return;
        }
        form.model.manageTransaction(function (transaction, setTransaction) {
          // This is the case where we enter the TOTP code and verify while there is an
          // active Push request (or polling) running. We need to invoke previous() on authClient
          // and then call model.save(). If not, we would still be in MFA_CHALLENGE state and
          // verify would result in a wrong request (push verify instead of a TOTP verify).
          if (transaction.status === 'MFA_CHALLENGE' && transaction.prev) {
            form.options.appState.set('trapMfaRequiredResponse', true);
            return transaction.prev().then(function (trans) {
              setTransaction(trans);
              form.model.save();
            });
          } else {
            // Push is not active and we enter the code to verify.
            form.model.save();
          }
        });
      }
    }));
    form.at(1).focus();
  }

  return Okta.Form.extend({
    autoSave: true,
    noButtonBar: true,
    scrollOnError: false,
    layout: 'o-form-theme',

    className: 'mfa-verify-totp-inline',

    attributes: { 'data-se': 'factor-inline-totp' },

    initialize: function initialize() {
      var form = this;
      this.listenTo(this.model, 'error', function () {
        this.clearErrors();
      });
      this.add(Okta.createButton({
        className: 'link',
        attributes: { 'data-se': 'inline-totp-add' },
        title: Okta.loc('mfa.challenge.orEnterCode', 'login'),
        click: function click() {
          this.remove();
          addInlineTotp(form);
        }
      }));
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(59), __webpack_require__(119), __webpack_require__(22), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, webauthn, Spinner, FooterSignout, HtmlErrorMessageView) {

  var _ = Okta._;

  return FormController.extend({
    className: 'mfa-verify verify-windows-hello',
    Model: {
      local: {
        __autoTriggered__: 'boolean'
      },

      save: function save() {
        if (!webauthn.isAvailable()) {
          return;
        }

        this.trigger('request');
        var model = this;

        return this.doTransaction(function (transaction) {
          var factor = _.findWhere(transaction.factors, {
            factorType: 'webauthn',
            provider: 'FIDO'
          });

          return factor.verify().then(function (verifyData) {
            var factorData = verifyData.factor;

            return webauthn.getAssertion(factorData.challenge.nonce, [{ id: factorData.profile.credentialId }]).then(function (assertion) {
              return factor.verify({
                authenticatorData: assertion.authenticatorData,
                clientData: assertion.clientData,
                signatureData: assertion.signature
              });
            }).then(function (data) {
              model.trigger('sync');
              model.trigger('signIn');
              return data;
            }).fail(function (error) {
              switch (error.message) {
                case 'AbortError':
                case 'NotFoundError':
                case 'NotSupportedError':
                  model.trigger('abort', error.message);
                  return transaction;
              }

              throw error;
            });
          });
        });
      }
    },

    Form: {
      autoSave: true,
      hasSavingState: false,
      title: _.partial(Okta.loc, 'factor.windowsHello', 'login'),
      subtitle: function subtitle() {
        return webauthn.isAvailable() ? Okta.loc('verify.windowsHello.subtitle', 'login') : '';
      },
      save: _.partial(Okta.loc, 'verify.windowsHello.save', 'login'),

      customSavingState: {
        stop: 'abort'
      },

      modelEvents: function modelEvents() {
        if (!webauthn.isAvailable()) {
          return {};
        }

        return {
          'request': '_startEnrollment',
          'error': '_stopEnrollment',
          'abort': '_stopEnrollment',
          'signIn': '_successEnrollment'
        };
      },

      noButtonBar: function noButtonBar() {
        return !webauthn.isAvailable();
      },

      formChildren: function formChildren() {
        var result = [];
        if (!webauthn.isAvailable()) {
          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc('enroll.windowsHello.error.notWindows', 'login') }) }, { selector: '.o-form-error-container' }));
        }

        result.push(FormType.View({ View: new Spinner({ model: this.model, visible: false }) }));

        return result;
      },

      postRender: function postRender() {
        if (this.options.appState.get('factors').length === 1 && !this.model.get('__autoTriggered__')) {
          this.model.set('__autoTriggered__', true);
          this.model.save();
        }
      },

      _startEnrollment: function _startEnrollment() {
        this.subtitle = Okta.loc('verify.windowsHello.subtitle.loading', 'login');

        this.model.trigger('spinner:show');
        this._resetErrorMessage();

        this.render();
        this.$('.o-form-button-bar').addClass('hide');
      },

      _stopEnrollment: function _stopEnrollment(errorMessage) {
        this.subtitle = Okta.loc('verify.windowsHello.subtitle', 'login');

        this.model.trigger('spinner:hide');
        this.$('.o-form-button-bar').removeClass('hide');

        var message;
        switch (errorMessage) {
          case 'NotFoundError':
            message = this.options.appState.get('factors').length > 1 ? Okta.loc('verify.windowsHello.error.notFound.selectAnother', 'login') : Okta.loc('verify.windowsHello.error.notFound', 'login');
            break;

          case 'NotSupportedError':
            message = Okta.loc('enroll.windowsHello.error.notConfiguredHtml', 'login');
            break;
        }

        this._resetErrorMessage();

        if (message) {
          var messageView = new HtmlErrorMessageView({
            message: message
          });

          this.$('.o-form-error-container').addClass('o-form-has-errors');
          this.add(messageView, { selector: '.o-form-error-container' });
          this._errorMessageView = this.last();
        }

        this.render();
      },

      _successEnrollment: function _successEnrollment() {
        this.subtitle = this.settings.get('brandName') ? Okta.loc('verify.windowsHello.subtitle.signingIn.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('verify.windowsHello.subtitle.signingIn.generic', 'login');
        this.render();
        this.$('.o-form-button-bar').addClass('hide');
      },

      _resetErrorMessage: function _resetErrorMessage() {
        this._errorMessageView && this._errorMessageView.remove();
        this._errorMessageView = undefined;
        this.clearErrors();
      }
    },

    back: function back() {
      // Empty function on verify controllers to prevent users
      // from navigating back during 'verify' using the browser's
      // back button. The URL will still change, but the view will not
      // More details in OKTA-135060.
    },

    Footer: FooterSignout
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(228), __esModule: true };

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(229);
module.exports = __webpack_require__(7).Object.freeze;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(20);
var meta = __webpack_require__(91).onFreeze;

__webpack_require__(110)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* global u2f */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(1), __webpack_require__(2), __webpack_require__(22), __webpack_require__(4), __webpack_require__(8), __webpack_require__(80), __webpack_require__(23), __webpack_require__(120)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Errors, FormController, FormType, FooterSignout, Q, FactorUtil, FidoUtil, HtmlErrorMessageView) {

  var _ = Okta._;

  function getRegisteredKeysSequence(factors) {
    var keys = [];
    _.each(factors, function (factor) {
      keys.push({
        version: factor.profile.version,
        keyHandle: factor.profile.credentialId
      });
    });
    return keys;
  }

  return FormController.extend({
    className: 'mfa-verify verify-u2f',
    Model: {
      props: {
        rememberDevice: 'boolean'
      },

      initialize: function initialize() {
        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
        // set the initial value for remember device (Cannot do this while defining the
        // local property because this.settings would not be initialized there yet).
        this.set('rememberDevice', rememberDevice);
      },

      save: function save() {
        this.trigger('request');

        return this.doTransaction(function (transaction) {
          var factor;
          if (transaction.factorTypes) {
            factor = _.findWhere(transaction.factorTypes, {
              factorType: 'u2f'
            });
          } else {
            factor = _.findWhere(transaction.factors, {
              factorType: 'u2f',
              provider: 'FIDO'
            });
          }
          var self = this;
          return factor.verify().then(function (transaction) {
            var registeredKeys, appId, nonce;
            if (transaction.factors) {
              var factors = transaction.factors;
              appId = factors[0]['profile']['appId'];
              nonce = transaction.challenge.nonce;
              registeredKeys = getRegisteredKeysSequence(factors);
            } else {
              var factorData = transaction.factor;
              appId = factorData.profile.appId;
              nonce = factorData.challenge.nonce;
              registeredKeys = [{ version: FidoUtil.getU2fVersion(), keyHandle: factorData.profile.credentialId }];
            }
            self.trigger('request');

            var deferred = Q.defer();
            u2f.sign(appId, nonce, registeredKeys, function (data) {
              self.trigger('errors:clear');
              if (data.errorCode && data.errorCode !== 0) {
                var isOneFactor = self.options.appState.get('factors').length === 1;
                deferred.reject(new Errors.U2FError({
                  xhr: {
                    responseJSON: {
                      errorSummary: FidoUtil.getU2fVerifyErrorMessageByCode(data.errorCode, isOneFactor)
                    }
                  }
                }));
              } else {
                var rememberDevice = !!self.get('rememberDevice');
                return factor.verify({
                  clientData: data.clientData,
                  signatureData: data.signatureData,
                  rememberDevice: rememberDevice
                }).then(deferred.resolve);
              }
            });
            return deferred.promise;
          });
        });
      }
    },

    Form: {
      autoSave: true,
      hasSavingState: false,
      title: _.partial(Okta.loc, 'factor.u2f', 'login'),
      className: 'verify-u2f-form',
      noCancelButton: true,
      save: _.partial(Okta.loc, 'verify.u2f.retry', 'login'),
      noButtonBar: function noButtonBar() {
        return !FidoUtil.isU2fAvailable();
      },
      modelEvents: {
        'request': '_startEnrollment',
        'error': '_stopEnrollment'
      },

      formChildren: function formChildren() {
        var result = [];

        if (!FidoUtil.isU2fAvailable()) {
          var errorMessageKey = 'u2f.error.factorNotSupported';
          if (this.options.appState.get('factors').length === 1) {
            errorMessageKey = 'u2f.error.factorNotSupported.oneFactor';
          }
          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc(errorMessageKey, 'login') }) }, { selector: '.o-form-error-container' }));
        } else {
          result.push(FormType.View({
            View: '\
            <div class="u2f-verify-text">\
              <p>{{i18n code="verify.u2f.instructions" bundle="login"}}</p>\
              <p>{{i18n code="verify.u2f.instructionsBluetooth" bundle="login"}}</p>\
              <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\
            </div>'
          }));
        }

        if (this.options.appState.get('allowRememberDevice')) {
          result.push(FormType.Input({
            label: false,
            'label-top': true,
            placeholder: this.options.appState.get('rememberDeviceLabel'),
            className: 'margin-btm-0',
            name: 'rememberDevice',
            type: 'checkbox'
          }));
        }

        return result;
      },

      postRender: function postRender() {
        _.defer(_.bind(function () {
          if (FidoUtil.isU2fAvailable()) {
            this.model.save();
          } else {
            this.$('[data-se="u2f-waiting"]').addClass('hide');
          }
        }, this));
      },

      _startEnrollment: function _startEnrollment() {
        this.$('.okta-waiting-spinner').removeClass('hide');
        this.$('.o-form-button-bar').hide();
      },

      _stopEnrollment: function _stopEnrollment() {
        this.$('.okta-waiting-spinner').addClass('hide');
        this.$('.o-form-button-bar').show();
      }
    },

    back: function back() {
      // Empty function on verify controllers to prevent users
      // from navigating back during 'verify' using the browser's
      // back button. The URL will still change, but the view will not
      // More details in OKTA-135060.
    },

    Footer: FooterSignout
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity:[2, 10], max-params: [2, 11] */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(1), __webpack_require__(2), __webpack_require__(121), __webpack_require__(59), __webpack_require__(22), __webpack_require__(4), __webpack_require__(8), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Errors, FormController, FormType, CryptoUtil, webauthn, FooterSignout, Q, FactorUtil, HtmlErrorMessageView) {

  var _ = Okta._;

  function getAllowCredentials(factors) {
    var allowCredentials = [];
    _.each(factors, function (factor) {
      allowCredentials.push({
        type: 'public-key',
        id: CryptoUtil.strToBin(factor.profile.credentialId)
      });
    });
    return allowCredentials;
  }

  return FormController.extend({
    className: 'mfa-verify verify-webauthn',
    Model: {
      props: {
        rememberDevice: 'boolean'
      },

      initialize: function initialize() {
        var _this = this;

        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
        // set the initial value for remember device (Cannot do this while defining the
        // local property because this.settings would not be initialized there yet).
        this.set('rememberDevice', rememberDevice);
        this.appState.on('factorSwitched signOut', function () {
          if (_this.webauthnAbortController) {
            _this.webauthnAbortController.abort();
            _this.webauthnAbortController = null;
          }
        });
      },

      save: function save() {
        this.trigger('request');

        return this.doTransaction(function (transaction) {
          var factor;
          if (transaction.factorTypes) {
            factor = _.findWhere(transaction.factorTypes, {
              factorType: 'webauthn'
            });
          } else {
            factor = _.findWhere(transaction.factors, {
              factorType: 'webauthn',
              provider: 'FIDO'
            });
          }

          var self = this;
          return factor.verify().then(function (transaction) {
            var allowCredentials, challenge;
            if (transaction.factors) {
              var factors = transaction.factors;
              challenge = transaction.challenge;
              allowCredentials = getAllowCredentials(factors);
            } else {
              var factorData = transaction.factor;
              challenge = factorData.challenge;
              allowCredentials = getAllowCredentials([factorData]);
            }
            self.trigger('request');
            // verify via browser webauthn js
            var options = _.extend({}, challenge, {
              allowCredentials: allowCredentials,
              challenge: CryptoUtil.strToBin(challenge.challenge)
            });
            self.webauthnAbortController = new AbortController();
            return new Q(navigator.credentials.get({
              publicKey: options,
              signal: self.webauthnAbortController.signal
            })).then(function (assertion) {
              var rememberDevice = !!self.get('rememberDevice');
              return factor.verify({
                clientData: CryptoUtil.binToStr(assertion.response.clientDataJSON),
                authenticatorData: CryptoUtil.binToStr(assertion.response.authenticatorData),
                signatureData: CryptoUtil.binToStr(assertion.response.signature),
                rememberDevice: rememberDevice
              });
            }).fail(function (error) {
              self.trigger('errors:clear');
              // Do not display if it is abort error triggered by code when switching.
              // self.webauthnAbortController would be null if abort was triggered by code.
              if (!self.webauthnAbortController) {
                throw new Errors.WebauthnAbortError();
              } else {
                throw new Errors.WebAuthnError({
                  xhr: { responseJSON: { errorSummary: error.message } }
                });
              }
            }).finally(function () {
              // unset webauthnAbortController on successful authentication or error
              self.webauthnAbortController = null;
            });
          });
        });
      }
    },

    Form: {
      autoSave: true,
      hasSavingState: false,
      title: _.partial(Okta.loc, 'factor.webauthn.biometric', 'login'),
      className: 'verify-webauthn-form',
      noCancelButton: true,
      save: _.partial(Okta.loc, 'verify.u2f.retry', 'login'),
      noButtonBar: function noButtonBar() {
        return !webauthn.isNewApiAvailable();
      },
      modelEvents: {
        'request': '_startEnrollment',
        'error': '_stopEnrollment'
      },

      formChildren: function formChildren() {
        var children = [];

        if (webauthn.isNewApiAvailable()) {
          children.push(FormType.View({
            View: '<div class="webauthn-verify-text">\
                 <p>{{i18n code="verify.webauthn.biometric.instructions" bundle="login"}}</p>\
                 <div data-se="webauthn-waiting" class="okta-waiting-spinner"></div>\
               </div>'
          }));
        } else {
          var errorMessageKey = 'webauthn.biometric.error.factorNotSupported';
          if (this.options.appState.get('factors').length === 1) {
            errorMessageKey = 'webauthn.biometric.error.factorNotSupported.oneFactor';
          }
          children.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc(errorMessageKey, 'login') }) }, { selector: '.o-form-error-container' }));
        }

        if (this.options.appState.get('allowRememberDevice')) {
          children.push(FormType.Input({
            label: false,
            'label-top': true,
            placeholder: this.options.appState.get('rememberDeviceLabel'),
            className: 'margin-btm-0',
            name: 'rememberDevice',
            type: 'checkbox'
          }));
        }

        return children;
      },

      postRender: function postRender() {
        _.defer(_.bind(function () {
          if (webauthn.isNewApiAvailable()) {
            this.model.save();
          } else {
            this.$('[data-se="webauthn-waiting"]').hide();
          }
        }, this));
      },

      _startEnrollment: function _startEnrollment() {
        this.$('.okta-waiting-spinner').show();
        this.$('.o-form-button-bar').hide();
      },

      _stopEnrollment: function _stopEnrollment() {
        this.$('.okta-waiting-spinner').hide();
        this.$('.o-form-button-bar').show();
      }
    },

    back: function back() {
      // Empty function on verify controllers to prevent users
      // from navigating back during 'verify' using the browser's
      // back button. The URL will still change, but the view will not
      // More details in OKTA-135060.
    },

    Footer: FooterSignout
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2018-2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(22), __webpack_require__(8), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, FooterSignout, FactorUtil, HtmlErrorMessageView) {

  var _ = Okta._;
  var Util = Okta.internal.util.Util;


  return FormController.extend({

    className: 'verify-custom-factor custom-factor-form',

    Model: {
      props: {
        rememberDevice: 'boolean'
      },

      initialize: function initialize() {
        var rememberDevice = FactorUtil.getRememberDeviceValue(this.appState);
        // set the initial value for remember device (Cannot do this while defining the
        // local property because this.settings would not be initialized there yet).
        this.set('rememberDevice', rememberDevice);
      },

      save: function save() {
        var _this = this;

        var rememberDevice = !!this.get('rememberDevice');
        return this.manageTransaction(function (transaction, setTransaction) {
          var data = {
            rememberDevice: rememberDevice
          };
          var factor = _.findWhere(transaction.factors, {
            provider: _this.get('provider'),
            factorType: _this.get('factorType')
          });
          return factor.verify(data).then(function (trans) {
            setTransaction(trans);
            var url = _this.appState.get('verifyCustomFactorRedirectUrl');
            if (url !== null) {
              Util.redirect(url);
            }
          }).fail(function (err) {
            throw err;
          });
        });
      }
    },

    Form: function Form() {
      var factors = this.options.appState.get('factors');
      var factor = factors.findWhere({
        provider: this.options.provider,
        factorType: this.options.factorType
      });
      var vendorName = factor.get('vendorName');
      var saveText = Okta.loc('mfa.challenge.verify', 'login');
      var subtitle = Okta.loc('verify.customFactor.subtitle', 'login', [vendorName]);
      return {
        autoSave: true,
        title: vendorName,
        save: saveText,
        subtitle: subtitle,
        attributes: { 'data-se': 'factor-custom' },
        initialize: function initialize() {
          if (this.options.appState.get('allowRememberDevice')) {
            this.addInput({
              label: false,
              'label-top': true,
              placeholder: this.options.appState.get('rememberDeviceLabel'),
              className: 'margin-btm-0',
              name: 'rememberDevice',
              type: 'checkbox'
            });
          }
        },
        formChildren: function formChildren() {
          var result = [],
              lastFailedChallengeFactorData = this.options.appState.get('lastFailedChallengeFactorData');
          if (lastFailedChallengeFactorData) {
            result.push(FormType.View({ View: new HtmlErrorMessageView({ message: lastFailedChallengeFactorData.errorMessage }) }, { selector: '.o-form-error-container' }));
          }
          return result;
        }
      };
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaChallenge')) {
        return true;
      }
    },

    back: function back() {
      // Empty function on verify controllers to prevent users
      // from navigating back during 'verify' using the browser's
      // back button. The URL will still change, but the view will not
      // More details in OKTA-135060.
    },

    initialize: function initialize() {
      this.model.set('provider', this.options.provider);
      this.model.set('factorType', this.options.factorType);
      if (!this.settings.get('features.hideSignOutLinkInMFA')) {
        this.addFooter(FooterSignout);
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _isInteger = __webpack_require__(234);

var _isInteger2 = _interopRequireDefault(_isInteger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity: [2, 13] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(3), __webpack_require__(12), __webpack_require__(122), __webpack_require__(238), __webpack_require__(239)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, Enums, RouterUtil, FactorList, RequiredFactorList, Footer) {

  var _ = Okta._,
      $ = Okta.$,
      subtitleTpl = Okta.tpl('<span>{{{subtitle}}}</span>');

  return FormController.extend({
    className: 'enroll-choices',
    state: {
      pageType: null
    },

    Model: {},

    Form: {
      noCancelButton: true,

      title: _.partial(Okta.loc, 'enroll.choices.title', 'login'),

      noButtonBar: function noButtonBar() {
        return this.state.get('pageType') === Enums.ALL_OPTIONAL_NONE_ENROLLED;
      },

      subtitle: ' ',

      getSubtitle: function getSubtitle() {
        switch (this.state.get('pageType')) {
          case Enums.ALL_OPTIONAL_SOME_ENROLLED:
          case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
            return Okta.loc('enroll.choices.optional', 'login');
          case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
            var remainingDays = this.options.appState.get('gracePeriodRemainingDays');
            return (0, _isInteger2.default)(remainingDays) && remainingDays >= 0 ? this.getGracePeriodSubtitle(remainingDays) : this.getDefaultSubtitle();
          default:
            return this.getDefaultSubtitle();
        }
      },

      getDefaultSubtitle: function getDefaultSubtitle() {
        return this.settings.get('brandName') ? Okta.loc('enroll.choices.description.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('enroll.choices.description.generic', 'login');
      },

      getGracePeriodSubtitle: function getGracePeriodSubtitle(remainingDays) {
        return remainingDays >= 1 ? Okta.loc('enroll.choices.description.gracePeriod.bold', 'login', [remainingDays]) : Okta.loc('enroll.choices.description.gracePeriod.oneDay.bold', 'login');
      },

      save: function save() {
        switch (this.state.get('pageType')) {
          case Enums.ALL_OPTIONAL_SOME_ENROLLED:
          case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
            return Okta.loc('enroll.choices.submit.finish', 'login');
          case Enums.HAS_REQUIRED_NONE_ENROLLED:
            return Okta.loc('enroll.choices.submit.configure', 'login');
          case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
            return Okta.loc('enroll.choices.submit.next', 'login');
          default:
            return '';
        }
      },

      initialize: function initialize(options) {
        this.listenTo(this, 'save', function () {
          var current;
          switch (this.state.get('pageType')) {
            case Enums.HAS_REQUIRED_NONE_ENROLLED:
            case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
              current = options.appState.get('factors').getFirstUnenrolledRequiredFactor();
              options.appState.trigger('navigate', RouterUtil.createEnrollFactorUrl(current.get('provider'), current.get('factorType')));
              break;
            default:
              return this.model.doTransaction(function (transaction) {
                return transaction.skip();
              });
          }
        });
      },

      preRender: function preRender() {
        // form subtitle does not support unescaped strings, and we need some html elements
        // in the subtitle for this form. So instead of a regular subtitle, we add a <span>
        // with the text we need
        this.add(subtitleTpl({ subtitle: this.getSubtitle() }), $('p.okta-form-subtitle'));

        var factors = this.options.appState.get('factors');
        switch (this.state.get('pageType')) {
          case Enums.HAS_REQUIRED_NONE_ENROLLED:
          case Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:
            this.add(new RequiredFactorList({
              minimize: true,
              collection: new Okta.Collection(factors.where({ required: true })),
              appState: this.options.appState
            }));
            break;
          case Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:
          case Enums.ALL_OPTIONAL_SOME_ENROLLED:
          case Enums.ALL_OPTIONAL_NONE_ENROLLED:
            var enrolled = factors.where({ enrolled: true }),
                notEnrolled = factors.filter(function (factor) {
              // pick factors that are not enrolled or have additional enrollments
              return !factor.get('enrolled') || factor.get('additionalEnrollment');
            }),
                notEnrolledListTitle;
            if (enrolled.length > 0) {
              notEnrolledListTitle = Okta.loc('enroll.choices.list.optional', 'login');
              this.add(new FactorList({
                listTitle: Okta.loc('enroll.choices.list.enrolled', 'login'),
                minimize: true,
                collection: new Okta.Collection(enrolled),
                appState: this.options.appState
              }));
            }
            this.add(new FactorList({
              listTitle: notEnrolledListTitle,
              collection: new Okta.Collection(notEnrolled),
              appState: this.options.appState,
              showInlineSetupButton: true
            }));
            break;
        }
      }

    },

    initialize: function initialize(options) {
      var numRequiredEnrolled = 0,
          numRequiredNotEnrolled = 0,
          numOptionalEnrolled = 0,
          numOptionalNotEnrolled = 0,
          hasRequired,
          pageType;

      options.appState.get('factors').each(function (factor) {
        var required = factor.get('required'),
            enrolled = factor.get('enrolled'),
            additionalEnrollment = factor.get('additionalEnrollment');
        if (required && enrolled) {
          numRequiredEnrolled++;
        } else if (required && !enrolled) {
          numRequiredNotEnrolled++;
        } else if (!required && enrolled) {
          numOptionalEnrolled++;
        } else if (!required && !enrolled) {
          numOptionalNotEnrolled++;
        }
        // If a factor has multiple instances and
        // additional optional enrollments
        if (enrolled && additionalEnrollment) {
          numOptionalNotEnrolled++;
        }
      });

      hasRequired = numRequiredEnrolled > 0 || numRequiredNotEnrolled > 0;

      // There are 5 possible states this screen can be in:

      // 1. Has required, but none have been enrolled. Wizard start page.
      if (hasRequired && numRequiredEnrolled === 0) {
        pageType = Enums.HAS_REQUIRED_NONE_ENROLLED;
      }

      // 2. Has required, and have enrolled at least one. The page layout
      //    to configure the remaining required factors.
      else if (hasRequired && numRequiredNotEnrolled > 0) {
          pageType = Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED;
        }

        // 3. Has required, and finished enrolling all required factors. The
        //    page layout you see to configure any optional factors or skip.
        else if (hasRequired && numOptionalNotEnrolled > 0) {
            pageType = Enums.HAS_REQUIRED_ALL_REQUIRED_ENROLLED;
          }

          // 4. Factors are all optional, no factors enrolled.
          else if (numOptionalEnrolled === 0 && numOptionalNotEnrolled > 0) {
              pageType = Enums.ALL_OPTIONAL_NONE_ENROLLED;
            }

            // 5. Factors are all optional, some factors have already been
            //    enrolled (can either enroll more or skip).
            else if (numOptionalNotEnrolled > 0) {
                pageType = Enums.ALL_OPTIONAL_SOME_ENROLLED;
              }

              // 6. Factors are all optional, all factors have already been
              //    enrolled, among them there is OktaVerify with Push enrolled as totp
              //    (API return OktaVerify push factor as unenrolled in this case and as we always merge
              //    push and totp in UI so we redirect to skip link here).
              else {
                  this.model.doTransaction(function (transaction) {
                    return transaction.skip();
                  });
                }

      this.state.set('pageType', pageType);

      if (this.options.appState.get('skipLink') && pageType === Enums.HAS_REQUIRED_SOME_REQUIRED_ENROLLED) {
        this.add(new Footer(this.toJSON()));
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(235), __esModule: true };

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(236);
module.exports = __webpack_require__(7).Number.isInteger;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(16);

$export($export.S, 'Number', { isInteger: __webpack_require__(237) });


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(20);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(122)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorList) {

  var _ = Okta._;

  return FactorList.extend({

    listTitle: _.partial(Okta.loc, 'enroll.choices.list.setup', 'login'),

    className: function className() {
      return FactorList.prototype.className + ' enroll-required-factor-list';
    },

    postRender: function postRender() {
      var currentModel, currentRow;
      FactorList.prototype.postRender.apply(this, arguments);
      currentModel = this.options.appState.get('factors').getFirstUnenrolledRequiredFactor();
      currentRow = this.find(function (view) {
        return view.model === currentModel;
      });
      currentRow.maximize();
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({
    template: '<a href="#" class="link goto js-skip" data-se="skip-link">\n          {{i18n code="enroll.choices.setup.skip" bundle="login"}}\n       </a>',
    className: 'auth-footer clearfix',
    events: {
      'click .js-skip': function clickJsSkip(e) {
        e.preventDefault();
        this.model.doTransaction(function (transaction) {
          return transaction.skip();
        });
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint camelcase: 0*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(118), __webpack_require__(4), __webpack_require__(1), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Duo, Q, FormController, Footer) {

  var $ = Okta.$,
      _ = Okta._;

  return FormController.extend({

    className: 'enroll-duo duo-form',

    Model: {
      props: {
        host: 'string',
        signature: 'string',
        postAction: 'string',
        factorId: 'string',
        stateToken: 'string'
      },

      getInitOptions: function getInitOptions() {
        return this.doTransaction(function (transaction) {
          var factor = _.findWhere(transaction.factors, {
            factorType: 'web',
            provider: 'DUO'
          });
          return factor.enroll();
        });
      },

      activate: function activate(signedResponse) {
        // Note: We should be doing this in OktaAuth! Fix when it's updated.
        var url = this.get('postAction'),
            factorId = this.get('factorId'),
            self = this,
            data = {
          id: factorId,
          stateToken: this.get('stateToken'),
          sig_response: signedResponse
        };
        // We don't actually use authClient.post() here (unlike all the other cases in the
        // sign-in widget) since the endpoint is wired to accept serialized form post instead
        // of a JSON post ($.post() is different from authClient.post() in that in $.post(),
        // jquery decides the Content-Type instead of it being a JSON type). Enroll/Verify DUO
        // are the only two places where we actually do this.
        // NOTE - If we ever decide to change this, we should test this very carefully.
        return Q($.post(url, data)).then(function () {
          return self.doTransaction(function (transaction) {
            return transaction.poll();
          });
        }).fail(function (err) {
          self.trigger('error', self, err.xhr);
        });
      }
    },

    Form: {
      autoSave: true,
      noButtonBar: true,
      title: _.partial(Okta.loc, 'enroll.duo.title', 'login'),

      postRender: function postRender() {
        this.add('<iframe frameborder="0" title="' + this.title() + '"></iframe>');
        Duo.init({
          'host': this.model.get('host'),
          'sig_request': this.model.get('signature'),
          'iframe': this.$('iframe').get(0),
          'post_action': _.bind(this.model.activate, this.model)
        });
      }
    },

    Footer: Footer,

    fetchInitialData: function fetchInitialData() {
      var self = this;
      return this.model.getInitOptions(this.options.appState).then(function (trans) {
        var res = trans.data;
        if (!res || !res._embedded || !res._embedded.factor || !res._embedded.factor._embedded || !res._embedded.factor._embedded.activation) {
          throw new Error('Response does not have duo activation options');
        }

        var factor = res._embedded.factor;
        var activation = factor._embedded.activation;
        self.model.set({
          host: activation.host,
          signature: activation.signature,
          postAction: activation._links.complete.href,
          factorId: factor.id,
          stateToken: res.stateToken
        });
      });
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate')) {
        return true;
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(8), __webpack_require__(5), __webpack_require__(9), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FactorUtil, Util, Footer, TextBox) {

  var _ = Okta._;

  return FormController.extend({
    className: 'enroll-question',
    Model: {
      props: {
        question: 'string',
        answer: ['string', true]
      },
      local: {
        securityQuestions: 'object'
      },
      save: function save() {
        return this.doTransaction(function (transaction) {
          var factor = _.findWhere(transaction.factors, {
            factorType: 'question',
            provider: 'OKTA'
          });
          return factor.enroll({
            profile: {
              question: this.get('question'),
              answer: this.get('answer')
            }
          });
        });
      }
    },

    Form: {
      autoSave: true,
      title: _.partial(Okta.loc, 'enroll.securityQuestion.setup', 'login'),
      inputs: function inputs() {
        return [{
          label: false,
          'label-top': true,
          name: 'question',
          type: 'select',
          wide: true,
          options: function options() {
            return this.model.get('securityQuestions');
          },
          params: {
            searchThreshold: 25
          }
        }, {
          label: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
          'label-top': true,
          explain: Util.createInputExplain('mfa.challenge.answer.tooltip', 'mfa.challenge.answer.placeholder', 'login'),
          'explain-top': true,
          className: 'o-form-fieldset o-form-label-top auth-passcode',
          name: 'answer',
          input: TextBox,
          type: 'text'
        }];
      }
    },

    Footer: Footer,

    fetchInitialData: function fetchInitialData() {
      var self = this;
      return this.model.manageTransaction(function (transaction) {
        var factor = _.findWhere(transaction.factors, {
          factorType: 'question',
          provider: 'OKTA'
        });
        return factor.questions();
      }).then(function (questionsRes) {
        var questions = {};
        _.each(questionsRes, function (question) {
          questions[question.question] = FactorUtil.getSecurityQuestionLabel(question);
        });
        self.model.set('securityQuestions', questions);
      });
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(43), __webpack_require__(9), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, ValidationUtil, Footer, TextBox) {

  var _ = Okta._;

  return FormController.extend({
    className: 'enroll-password',
    Model: {
      props: {
        password: ['string', true],
        confirmPassword: ['string', true]
      },
      validate: function validate() {
        return ValidationUtil.validateFieldsMatch(this, 'password', 'confirmPassword', Okta.loc('password.enroll.error.match', 'login'));
      },
      save: function save() {
        return this.doTransaction(function (transaction) {
          var factor = _.findWhere(transaction.factors, {
            factorType: 'password',
            provider: 'OKTA'
          });
          return factor.enroll({
            profile: {
              password: this.get('password')
            }
          });
        });
      }
    },

    Form: {
      autoSave: true,
      title: _.partial(Okta.loc, 'enroll.password.setup', 'login'),
      inputs: function inputs() {
        return [{
          label: Okta.loc('mfa.challenge.password.placeholder', 'login'),
          'label-top': true,
          className: 'o-form-fieldset o-form-label-top auth-passcode',
          name: 'password',
          input: TextBox,
          type: 'password'
        }, {
          label: Okta.loc('password.confirmPassword.placeholder', 'login'),
          'label-top': true,
          className: 'o-form-fieldset o-form-label-top auth-passcode',
          name: 'confirmPassword',
          input: TextBox,
          type: 'password'
        }];
      }
    },
    Footer: Footer
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(59), __webpack_require__(119), __webpack_require__(9), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, webauthn, Spinner, Footer, HtmlErrorMessageView) {

  var _ = Okta._;

  return FormController.extend({
    className: 'enroll-windows-hello',
    Model: {
      local: {
        __isEnrolled__: 'boolean'
      },

      save: function save() {
        if (!webauthn.isAvailable()) {
          return;
        }

        this.trigger('request');

        if (this.get('__isEnrolled__')) {
          return this.activate();
        }

        return this.doTransaction(function (transaction) {
          return this._enroll(transaction);
        });
      },

      _enroll: function _enroll(transaction) {
        var factor = _.findWhere(transaction.factors, {
          factorType: 'webauthn',
          provider: 'FIDO'
        });

        return factor.enroll();
      },

      activate: function activate() {
        this.set('__isEnrolled__', true);

        return this.doTransaction(function (transaction) {
          var activation = transaction.factor.activation;
          var user = transaction.user;
          var model = this;

          var accountInfo = {
            rpDisplayName: activation.rpDisplayName,
            userDisplayName: user.profile.displayName,
            accountName: user.profile.login,
            userId: user.id
          };
          var cryptoParams = [{
            algorithm: activation.algorithm
          }];
          var challenge = activation.nonce;

          return webauthn.makeCredential(accountInfo, cryptoParams, challenge).then(function (creds) {
            return transaction.activate({
              credentialId: creds.credential.id,
              publicKey: creds.publicKey,
              attestation: null
            });
          }).fail(function (error) {
            switch (error.message) {
              case 'AbortError':
              case 'NotFoundError':
              case 'NotSupportedError':
                model.trigger('abort', error.message);
                return transaction;
            }

            throw error;
          });
        });
      }
    },

    Form: {
      autoSave: true,
      hasSavingState: false,
      title: _.partial(Okta.loc, 'enroll.windowsHello.title', 'login'),
      subtitle: function subtitle() {
        return webauthn.isAvailable() ? Okta.loc('enroll.windowsHello.subtitle', 'login') : '';
      },
      save: _.partial(Okta.loc, 'enroll.windowsHello.save', 'login'),

      customSavingState: {
        stop: 'abort'
      },

      modelEvents: function modelEvents() {
        if (!webauthn.isAvailable()) {
          return {};
        }

        return {
          'request': '_startEnrollment',
          'error': '_stopEnrollment',
          'abort': '_stopEnrollment'
        };
      },

      noButtonBar: function noButtonBar() {
        return !webauthn.isAvailable();
      },

      formChildren: function formChildren() {
        var result = [];

        if (!webauthn.isAvailable()) {
          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc('enroll.windowsHello.error.notWindows', 'login') }) }, { selector: '.o-form-error-container' }));
        }

        result.push(FormType.View({ View: new Spinner({ model: this.model, visible: false }) }));

        return result;
      },

      _startEnrollment: function _startEnrollment() {
        this.subtitle = Okta.loc('enroll.windowsHello.subtitle.loading', 'login');

        this.model.trigger('spinner:show');
        this._resetErrorMessage();

        this.render();
        this.$('.o-form-button-bar').addClass('hide');
      },

      _stopEnrollment: function _stopEnrollment(errorMessage) {
        this.subtitle = Okta.loc('enroll.windowsHello.subtitle', 'login');

        this.model.trigger('spinner:hide');

        var message;
        switch (errorMessage) {
          case 'NotSupportedError':
            message = Okta.loc('enroll.windowsHello.error.notConfiguredHtml', 'login');
            break;
        }

        this._resetErrorMessage();

        if (message) {
          var messageView = new HtmlErrorMessageView({
            message: message
          });

          this.$('.o-form-error-container').addClass('o-form-has-errors');
          this.add(messageView, { selector: '.o-form-error-container' });
          this._errorMessageView = this.last();
        }

        this.render();
        this.$('.o-form-button-bar').removeClass('hide');
      },

      _resetErrorMessage: function _resetErrorMessage() {
        this._errorMessageView && this._errorMessageView.remove();
        this._errorMessageView = undefined;
        this.clearErrors();
      }
    },

    Footer: Footer,

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate')) {
        this.model.activate();
        return true;
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint complexity: [2, 8] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(9), __webpack_require__(123), __webpack_require__(6), __webpack_require__(81), __webpack_require__(2), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, Footer, PhoneTextBox, TextBox, CountryUtil, FormType, Util) {

  var _ = Okta._;
  var API_RATE_LIMIT = 30000; //milliseconds
  var Keys = Okta.internal.util.Keys;

  var warningTemplate = '<div class="okta-form-infobox-warning infobox infobox-warning login-timeout-warning">\
                           <span class="icon warning-16"></span>\
                           <p>{{{warning}}}</p>\
                         </div>\
                         ';

  var factorIdIsDefined = {
    factorId: function factorId(val) {
      return !_.isUndefined(val);
    }
  };

  function isCallFactor(factorType) {
    return factorType === 'call';
  }

  function getClassName(factorType) {
    return isCallFactor(factorType) ? 'enroll-call' : 'enroll-sms';
  }

  function sendCode(e) {
    if (Keys.isEnter(e)) {
      e.stopPropagation();
      e.preventDefault();
      if (e.type === 'keyup' && e.data && e.data.model) {
        e.data.model.sendCode();
      }
    }
  }

  return FormController.extend({
    className: function className() {
      return getClassName(this.options.factorType);
    },
    Model: {
      props: {
        countryCode: ['string', true, 'US'],
        phoneNumber: ['string', true],
        phoneExtension: ['string', false],
        lastEnrolledPhoneNumber: 'string',
        passCode: ['string', true],
        factorId: 'string'
      },
      local: {
        hasExistingPhones: 'boolean',
        trapEnrollment: 'boolean',
        ableToResend: 'boolean',
        factorType: 'string',
        skipPhoneValidation: 'boolean'
      },
      derived: {
        countryCallingCode: {
          deps: ['countryCode'],
          fn: function fn(countryCode) {
            return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
          }
        },
        fullPhoneNumber: {
          deps: ['countryCallingCode', 'phoneNumber'],
          fn: function fn(countryCallingCode, phoneNumber) {
            return phoneNumber ? countryCallingCode + phoneNumber : '';
          }
        },
        enrolled: {
          deps: ['lastEnrolledPhoneNumber', 'fullPhoneNumber'],
          fn: function fn(lastEnrolled, current) {
            return lastEnrolled === current;
          }
        }
      },
      limitResending: function limitResending() {
        this.set({ ableToResend: false });
        _.delay(_.bind(this.set, this), API_RATE_LIMIT, { ableToResend: true });
      },
      sendCode: function sendCode() {
        var self = this;
        var phoneNumber = this.get('fullPhoneNumber');
        var phoneExtension = this.get('phoneExtension');

        self.trigger('errors:clear');

        if (!phoneNumber.length) {
          self.trigger('invalid', self, { 'phoneNumber': 'model.validation.field.blank' });
          return;
        }

        return this.doTransaction(function (transaction) {
          var isMfaEnroll = transaction.status === 'MFA_ENROLL' || transaction.status === 'FACTOR_ENROLL';
          var profileData = {
            phoneNumber: phoneNumber,
            updatePhone: isMfaEnroll ? self.get('hasExistingPhones') : true
          };
          if (isCallFactor(self.get('factorType'))) {
            profileData['phoneExtension'] = phoneExtension;
          }

          if (self.get('skipPhoneValidation')) {
            profileData['validatePhone'] = false;
          }

          var doEnroll = function doEnroll(trans) {
            var factor = _.findWhere(trans.factors, {
              factorType: self.get('factorType'),
              provider: 'OKTA'
            });
            return factor.enroll({
              profile: profileData
            }).fail(function (error) {
              if (error.errorCode === 'E0000098') {
                // E0000098: "This phone number is invalid."
                self.set('skipPhoneValidation', true);
                error.xhr.responseJSON.errorSummary = Okta.loc('enroll.sms.try_again', 'login');
              }
              throw error;
            });
          };

          if (isMfaEnroll) {
            return doEnroll(transaction);
          } else {
            // We must transition to MfaEnroll before updating the phone number
            self.set('trapEnrollment', true);
            return transaction.prev().then(doEnroll).then(function (trans) {
              self.set('trapEnrollment', false);
              return trans;
            });
          }
          // Rethrow errors so we can change state
          // AFTER setting the new transaction
        }, true).then(function () {
          self.set('lastEnrolledPhoneNumber', phoneNumber);
          self.limitResending();
        }).fail(function () {
          self.set('ableToResend', true);
          self.set('trapEnrollment', false);
        });
      },
      resendCode: function resendCode() {
        this.trigger('errors:clear');
        this.limitResending();
        return this.doTransaction(function (transaction) {
          return transaction.resend(this.get('factorType'));
        });
      },
      save: function save() {
        return this.doTransaction(function (transaction) {
          return transaction.activate({
            passCode: this.get('passCode')
          });
        });
      }
    },

    Form: function Form() {
      var factorType = this.options.factorType;
      var isCall = isCallFactor(factorType);
      var formTitle = Okta.loc(isCall ? 'enroll.call.setup' : 'enroll.sms.setup', 'login');
      var formSubmit = Okta.loc(isCall ? 'mfa.call' : 'mfa.sendCode', 'login');
      var formRetry = Okta.loc(isCall ? 'mfa.redial' : 'mfa.resendCode', 'login');
      var formSubmitted = Okta.loc(isCall ? 'mfa.calling' : 'mfa.sent', 'login');
      var numberFieldClassName = isCall ? 'enroll-call-phone' : 'enroll-sms-phone';
      var buttonClassName = isCall ? 'call-request-button' : 'sms-request-button';

      var formChildren = [FormType.Input({
        name: 'countryCode',
        type: 'select',
        wide: true,
        options: CountryUtil.getCountries()
      }), FormType.Input({
        label: Okta.loc('mfa.phoneNumber.placeholder', 'login'),
        'label-top': true,
        className: numberFieldClassName,
        name: 'phoneNumber',
        input: PhoneTextBox,
        type: 'text',
        render: function render() {
          this.$('input[name="phoneNumber"]').off('keydown keyup', sendCode).keydown(sendCode).keyup({ model: this.model }, sendCode);
        }
      })];
      if (isCall) {
        formChildren.push(FormType.Input({
          label: Okta.loc('mfa.phoneNumber.ext.placeholder', 'login'),
          'label-top': true,
          className: 'enroll-call-extension',
          name: 'phoneExtension',
          input: TextBox,
          type: 'text'
        }));
      }
      formChildren.push(FormType.Button({
        title: formSubmit,
        attributes: { 'data-se': buttonClassName },
        className: 'button button-primary js-enroll-phone margin-top-30 ' + buttonClassName,
        click: function click() {
          this.model.sendCode();
        }
      }), FormType.Button({
        title: formRetry,
        attributes: { 'data-se': buttonClassName },
        className: 'button js-enroll-phone margin-top-30 ' + buttonClassName,
        click: function click() {
          this.model.resendCode();
        },
        initialize: function initialize() {
          this.$el.css({ display: 'none' });
          this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {
            if (ableToResend) {
              this.options.title = formRetry;
              this.enable();
            } else {
              this.options.title = formSubmitted;
              this.disable();
            }
            this.render();
          });
        }
      }), FormType.Divider({
        showWhen: factorIdIsDefined
      }), FormType.Input({
        label: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
        'label-top': true,
        explain: Util.createInputExplain('mfa.challenge.enterCode.tooltip', 'mfa.challenge.enterCode.placeholder', 'login'),
        'explain-top': true,
        name: 'passCode',
        input: TextBox,
        type: 'tel',
        showWhen: factorIdIsDefined
      }), FormType.Toolbar({
        noCancelButton: true,
        save: Okta.loc('mfa.challenge.verify', 'login'),
        showWhen: factorIdIsDefined
      }));

      return {
        title: formTitle,
        noButtonBar: true,
        autoSave: true,
        className: getClassName(factorType),

        showWarning: function showWarning(msg) {
          this.clearWarnings();
          this.add(warningTemplate, '.o-form-error-container', { options: { warning: msg } });
        },

        clearWarnings: function clearWarnings() {
          this.$('.okta-form-infobox-warning').remove();
        },

        initialize: function initialize() {
          this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {
            if (ableToResend) {
              this.showWarning(Okta.loc(isCall ? 'factor.call.time.warning' : 'factor.sms.time.warning', 'login'));
            } else {
              this.clearWarnings();
            }
          });
          this.listenTo(this.model, 'error errors:clear', function () {
            this.clearWarnings();
            this.clearErrors();
          });
          this.listenTo(this.model, 'change:enrolled', function () {
            this.$('.js-enroll-phone').toggle();
          });
        },
        formChildren: formChildren
      };
    },

    Footer: Footer,

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate')) {
        this.model.set('factorId', this.options.appState.get('activatedFactorId'));
        return true;
      }
      if (this.options.appState.get('isMfaEnroll') && this.model.get('trapEnrollment')) {
        return true;
      }
    },

    initialize: function initialize() {
      if (isCallFactor(this.options.factorType)) {
        this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhonesForCall'));
      } else {
        this.model.set('hasExistingPhones', this.options.appState.get('hasExistingPhones'));
      }
      this.model.set('factorType', this.options.factorType);
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint max-len:0 */

!(module.exports = {
  'US': '1',
  'AG': '1',
  'AI': '1',
  'AS': '1',
  'BB': '1',
  'BM': '1',
  'BS': '1',
  'CA': '1',
  'DM': '1',
  'DO': '1',
  'GD': '1',
  'GU': '1',
  'JM': '1',
  'KN': '1',
  'KY': '1',
  'LC': '1',
  'MP': '1',
  'MS': '1',
  'PR': '1',
  'SX': '1',
  'TC': '1',
  'TT': '1',
  'VC': '1',
  'VG': '1',
  'VI': '1',
  'RU': '7',
  'KZ': '7',
  'EG': '20',
  'ZA': '27',
  'GR': '30',
  'NL': '31',
  'BE': '32',
  'FR': '33',
  'ES': '34',
  'HU': '36',
  'IT': '39',
  'VA': '39',
  'RO': '40',
  'CH': '41',
  'AT': '43',
  'GB': '44',
  'GG': '44',
  'IM': '44',
  'JE': '44',
  'DK': '45',
  'SE': '46',
  'NO': '47',
  'SJ': '47',
  'PL': '48',
  'DE': '49',
  'PE': '51',
  'MX': '52',
  'CU': '53',
  'AR': '54',
  'BR': '55',
  'CL': '56',
  'CO': '57',
  'VE': '58',
  'MY': '60',
  'AU': '61',
  'CC': '61',
  'CX': '61',
  'ID': '62',
  'PH': '63',
  'NZ': '64',
  'SG': '65',
  'TH': '66',
  'JP': '81',
  'KR': '82',
  'VN': '84',
  'CN': '86',
  'TR': '90',
  'IN': '91',
  'PK': '92',
  'AF': '93',
  'LK': '94',
  'MM': '95',
  'IR': '98',
  'SS': '211',
  'MA': '212',
  'EH': '212',
  'DZ': '213',
  'TN': '216',
  'LY': '218',
  'GM': '220',
  'SN': '221',
  'MR': '222',
  'ML': '223',
  'GN': '224',
  'CI': '225',
  'BF': '226',
  'NE': '227',
  'TG': '228',
  'BJ': '229',
  'MU': '230',
  'LR': '231',
  'SL': '232',
  'GH': '233',
  'NG': '234',
  'TD': '235',
  'CF': '236',
  'CM': '237',
  'CV': '238',
  'ST': '239',
  'GQ': '240',
  'GA': '241',
  'CG': '242',
  'CD': '243',
  'AO': '244',
  'GW': '245',
  'IO': '246',
  'AC': '247',
  'SC': '248',
  'SD': '249',
  'RW': '250',
  'ET': '251',
  'SO': '252',
  'DJ': '253',
  'KE': '254',
  'TZ': '255',
  'UG': '256',
  'BI': '257',
  'MZ': '258',
  'ZM': '260',
  'MG': '261',
  'RE': '262',
  'YT': '262',
  'ZW': '263',
  'NA': '264',
  'MW': '265',
  'LS': '266',
  'BW': '267',
  'SZ': '268',
  'KM': '269',
  'SH': '290',
  'TA': '290',
  'ER': '291',
  'AW': '297',
  'FO': '298',
  'GL': '299',
  'GI': '350',
  'PT': '351',
  'LU': '352',
  'IE': '353',
  'IS': '354',
  'AL': '355',
  'MT': '356',
  'CY': '357',
  'FI': '358',
  'AX': '358',
  'BG': '359',
  'LT': '370',
  'LV': '371',
  'EE': '372',
  'MD': '373',
  'AM': '374',
  'BY': '375',
  'AD': '376',
  'MC': '377',
  'SM': '378',
  'UA': '380',
  'RS': '381',
  'ME': '382',
  'XK': '383',
  'HR': '385',
  'SI': '386',
  'BA': '387',
  'MK': '389',
  'CZ': '420',
  'SK': '421',
  'LI': '423',
  'FK': '500',
  'BZ': '501',
  'GT': '502',
  'SV': '503',
  'HN': '504',
  'NI': '505',
  'CR': '506',
  'PA': '507',
  'PM': '508',
  'HT': '509',
  'GP': '590',
  'BL': '590',
  'MF': '590',
  'BO': '591',
  'GY': '592',
  'EC': '593',
  'GF': '594',
  'PY': '595',
  'MQ': '596',
  'SR': '597',
  'UY': '598',
  'CW': '599',
  'BQ': '599',
  'TL': '670',
  'NF': '672',
  'BN': '673',
  'NR': '674',
  'PG': '675',
  'TO': '676',
  'SB': '677',
  'VU': '678',
  'FJ': '679',
  'PW': '680',
  'WF': '681',
  'CK': '682',
  'NU': '683',
  'WS': '685',
  'KI': '686',
  'NC': '687',
  'TV': '688',
  'PF': '689',
  'TK': '690',
  'FM': '691',
  'MH': '692',
  '001': '979',
  'KP': '850',
  'HK': '852',
  'MO': '853',
  'KH': '855',
  'LA': '856',
  'BD': '880',
  'TW': '886',
  'MV': '960',
  'LB': '961',
  'JO': '962',
  'SY': '963',
  'IQ': '964',
  'KW': '965',
  'SA': '966',
  'YE': '967',
  'OM': '968',
  'PS': '970',
  'AE': '971',
  'IL': '972',
  'BH': '973',
  'QA': '974',
  'BT': '975',
  'MN': '976',
  'NP': '977',
  'TJ': '992',
  'TM': '993',
  'AZ': '994',
  'GE': '995',
  'KG': '996',
  'UZ': '998',
  'GS': '500',
  'PN': '64',
  'AQ': '672',
  'UM': '1',
  'AN': '599'
});

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(2), __webpack_require__(1), __webpack_require__(5), __webpack_require__(9), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormType, FormController, Util, Footer, TextBox) {

  var _ = Okta._;

  function isRSA(provider) {
    return provider === 'RSA';
  }

  function getClassName(provider) {
    return isRSA(provider) ? 'enroll-rsa' : 'enroll-onprem';
  }

  return FormController.extend({
    className: function className() {
      return getClassName(this.options.provider);
    },
    Model: function Model() {
      var provider = this.options.provider;
      var factors = this.options.appState.get('factors');
      var factor = factors.findWhere(_.pick(this.options, 'provider', 'factorType'));
      var profile = factor.get('profile');
      var credentialId = profile && profile.credentialId ? profile.credentialId : '';
      return {
        props: {
          credentialId: ['string', true, credentialId],
          passCode: ['string', true],
          factorId: 'string'
        },
        save: function save() {
          return this.doTransaction(function (transaction) {
            var factor = _.findWhere(transaction.factors, {
              factorType: 'token',
              provider: provider
            });
            return factor.enroll({
              passCode: this.get('passCode'),
              profile: { credentialId: this.get('credentialId') }
            });
          });
        }
      };
    },

    Form: function Form() {
      var provider = this.options.provider;
      var factors = this.options.appState.get('factors');
      var factor = factors.findWhere(_.pick(this.options, 'provider', 'factorType'));
      var vendorName = factor.get('vendorName');
      var title = isRSA(provider) ? Okta.loc('factor.totpHard.rsaSecurId', 'login') : vendorName;

      return {
        title: title,
        noButtonBar: true,
        autoSave: true,
        className: getClassName(provider),
        initialize: function initialize() {
          this.listenTo(this.model, 'error', _.bind(function (source, error) {
            if (error && error.status === 409) {
              // 409 means we are in change pin, so we should clear out answer input
              this.$('.o-form-input-name-passCode input').val('');
              this.$('.o-form-input-name-passCode input').trigger('change');
              this.$('.o-form-input-name-passCode input').focus();
            }
          }, this));
        },
        formChildren: [FormType.Input({
          label: Okta.loc('enroll.onprem.username.placeholder', 'login', [vendorName]),
          'label-top': true,
          explain: Util.createInputExplain('enroll.onprem.username.tooltip', 'enroll.onprem.username.placeholder', 'login', [vendorName], [vendorName]),
          'explain-top': true,
          name: 'credentialId',
          input: TextBox,
          type: 'text'
        }), FormType.Input({
          label: Okta.loc('enroll.onprem.passcode.placeholder', 'login', [vendorName]),
          'label-top': true,
          explain: Util.createInputExplain('enroll.onprem.passcode.tooltip', 'enroll.onprem.passcode.placeholder', 'login', [vendorName], [vendorName]),
          'explain-top': true,
          name: 'passCode',
          input: TextBox,
          type: 'password'
        }), FormType.Toolbar({
          noCancelButton: true,
          save: Okta.loc('mfa.challenge.verify', 'login')
        })]
      };
    },

    Footer: Footer

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(2), __webpack_require__(1), __webpack_require__(5), __webpack_require__(9), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormType, FormController, Util, Footer, TextBox) {

  var _ = Okta._;

  return FormController.extend({
    className: 'enroll-symantec',
    Model: {
      props: {
        credentialId: ['string', true],
        passCode: ['string', true],
        nextPassCode: ['string', true],
        factorId: 'string'
      },
      save: function save() {
        return this.doTransaction(function (transaction) {

          var factor = _.findWhere(transaction.factors, {
            factorType: 'token',
            provider: 'SYMANTEC'
          });
          return factor.enroll({
            passCode: this.get('passCode'),
            nextPassCode: this.get('nextPassCode'),
            profile: { credentialId: this.get('credentialId') }
          });
        });
      }
    },

    Form: {
      title: _.partial(Okta.loc, 'factor.totpHard.symantecVip', 'login'),
      subtitle: _.partial(Okta.loc, 'enroll.symantecVip.subtitle', 'login'),
      noButtonBar: true,
      autoSave: true,
      className: 'enroll-symantec',
      formChildren: function formChildren() {
        return [FormType.Input({
          label: Okta.loc('enroll.symantecVip.credentialId.placeholder', 'login'),
          'label-top': true,
          explain: Util.createInputExplain('enroll.symantecVip.credentialId.tooltip', 'enroll.symantecVip.credentialId.placeholder', 'login'),
          'explain-top': true,
          name: 'credentialId',
          input: TextBox,
          type: 'text'
        }), FormType.Input({
          label: Okta.loc('enroll.symantecVip.passcode1.placeholder', 'login'),
          'label-top': true,
          explain: Util.createInputExplain('enroll.symantecVip.passcode1.tooltip', 'enroll.symantecVip.passcode1.placeholder', 'login'),
          'explain-top': true,
          name: 'passCode',
          input: TextBox,
          type: 'text'
        }), FormType.Input({
          label: Okta.loc('enroll.symantecVip.passcode2.placeholder', 'login'),
          'label-top': true,
          explain: Util.createInputExplain('enroll.symantecVip.passcode2.tooltip', 'enroll.symantecVip.passcode2.placeholder', 'login'),
          'explain-top': true,
          name: 'nextPassCode',
          input: TextBox,
          type: 'text'
        }), FormType.Toolbar({
          noCancelButton: true,
          save: Okta.loc('mfa.challenge.verify', 'login')
        })];
      }
    },

    Footer: Footer

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(2), __webpack_require__(1), __webpack_require__(9), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormType, FormController, Footer, TextBox) {

  var _ = Okta._;

  return FormController.extend({
    className: 'enroll-yubikey',
    Model: {
      props: {
        passCode: ['string', true],
        factorId: 'string'
      },
      save: function save() {
        return this.doTransaction(function (transaction) {
          var factor = _.findWhere(transaction.factors, {
            factorType: 'token:hardware',
            provider: 'YUBICO'
          });
          return factor.enroll({
            passCode: this.get('passCode')
          });
        });
      }
    },

    Form: {
      title: _.partial(Okta.loc, 'enroll.yubikey.title', 'login'),
      subtitle: _.partial(Okta.loc, 'enroll.yubikey.subtitle', 'login'),
      noCancelButton: true,
      save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
      autoSave: true,
      className: 'enroll-yubikey',
      formChildren: [FormType.View({
        View: '<div class="yubikey-demo" data-type="yubikey-example"></div>'
      }), FormType.Input({
        name: 'passCode',
        input: TextBox,
        type: 'password'
      })]
    },

    Footer: Footer
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(8), __webpack_require__(1), __webpack_require__(2), __webpack_require__(12), __webpack_require__(250), __webpack_require__(82), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorUtil, FormController, FormType, RouterUtil, StoreLinks, BarcodeView, Footer) {

  var _ = Okta._;

  var showWhenDeviceTypeSelected = {
    '__deviceType__': function __deviceType__(val) {
      return val !== undefined;
    }
  };

  var AppDownloadInstructionsView = Okta.View.extend({
    attributes: { 'data-se': 'app-download-instructions' },
    className: 'app-download-instructions',
    template: '\
      <span class="app-logo {{appIcon}}"></span>\
      <p class="instructions">{{{appStoreLinkText}}}</p>\
    ',
    initialize: function initialize() {
      this.listenTo(this.model, 'change:__deviceType__', this.render);
    },
    getTemplateData: function getTemplateData() {
      var appStoreLink, appIcon, appStoreName;
      var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
      appStoreName = StoreLinks.STORE[this.model.get('__deviceType__')];
      if (this.model.get('__provider__') === 'GOOGLE') {
        appStoreLink = StoreLinks.GOOGLE[this.model.get('__deviceType__')];
        appIcon = 'google-auth-38';
      } else {
        appStoreLink = StoreLinks.OKTA[this.model.get('__deviceType__')];
        appIcon = 'okta-verify-38';
      }
      return {
        appStoreLinkText: Okta.loc('enroll.totp.downloadApp', 'login', [appStoreLink, factorName, appStoreName]),
        appIcon: appIcon
      };
    }
  });

  var EnrollTotpController = FormController.extend({
    className: 'enroll-totp',
    Model: function Model() {
      return {
        local: {
          '__deviceType__': 'string',
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        },
        save: function save() {
          return this.doTransaction(function (transaction) {
            var factor = _.findWhere(transaction.factors, {
              factorType: this.get('__factorType__'),
              provider: this.get('__provider__')
            });
            return factor.enroll();
          });
        }
      };
    },

    Form: {
      title: function title() {
        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
        return Okta.loc('enroll.totp.title', 'login', [factorName]);
      },
      subtitle: _.partial(Okta.loc, 'enroll.totp.selectDevice', 'login'),
      autoSave: true,
      noButtonBar: true,
      attributes: { 'data-se': 'step-device-type' },

      formChildren: function formChildren() {
        var inputOptions = {
          APPLE: Okta.loc('iphone', 'login'),
          ANDROID: Okta.loc('android', 'login')
        };

        var children = [FormType.Input({
          name: '__deviceType__',
          type: 'radio',
          options: inputOptions
        }), FormType.Divider({ showWhen: showWhenDeviceTypeSelected }), FormType.View({
          View: AppDownloadInstructionsView,
          showWhen: showWhenDeviceTypeSelected
        }), FormType.Toolbar({
          noCancelButton: true,
          save: Okta.loc('oform.next', 'login'),
          showWhen: showWhenDeviceTypeSelected
        })];

        return children;
      }
    },

    Footer: Footer

  });

  return EnrollTotpController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(module.exports = {
  OKTA: {
    APPLE: 'https://itunes.apple.com/us/app/okta-verify/id490179405',
    ANDROID: 'https://play.google.com/store/apps/details?id=com.okta.android.auth'
  },
  GOOGLE: {
    APPLE: 'https://itunes.apple.com/us/app/google-authenticator/id388497605',
    ANDROID: 'https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2'
  },
  STORE: {
    APPLE: 'App Store',
    ANDROID: 'Google Play Store'
  }
});

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* global u2f */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(2), __webpack_require__(1), __webpack_require__(80), __webpack_require__(9), __webpack_require__(4), __webpack_require__(23), __webpack_require__(120)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Errors, FormType, FormController, FidoUtil, Footer, Q, HtmlErrorMessageView) {

  var _ = Okta._;

  return FormController.extend({
    className: 'enroll-u2f',
    Model: {
      local: {
        '__enrolled__': 'boolean'
      },

      save: function save() {
        this.trigger('request');

        if (this.get('__enrolled__')) {
          return this.activate();
        }

        return this.doTransaction(function (transaction) {
          var factor = _.findWhere(transaction.factors, {
            factorType: 'u2f',
            provider: 'FIDO'
          });
          return factor.enroll();
        });
      },

      activate: function activate() {
        this.set('__enrolled__', true);
        this.trigger('errors:clear');

        return this.doTransaction(function (transaction) {
          var activation = transaction.factor.activation;
          var appId = activation.appId;
          var registerRequests = [{
            version: FidoUtil.getU2fVersion(),
            challenge: activation.nonce
          }];
          var self = this;
          var deferred = Q.defer();
          u2f.register(appId, registerRequests, [], function (data) {
            self.trigger('errors:clear');
            if (data.errorCode && data.errorCode !== 0) {
              deferred.reject(new Errors.U2FError({
                xhr: {
                  responseJSON: {
                    errorSummary: FidoUtil.getU2fEnrollErrorMessageByCode(data.errorCode)
                  }
                }
              }));
            } else {
              deferred.resolve(transaction.activate({
                registrationData: data.registrationData,
                version: data.version,
                challenge: data.challenge,
                clientData: data.clientData
              }));
            }
          });
          return deferred.promise;
        });
      }
    },

    Form: {
      title: _.partial(Okta.loc, 'enroll.u2f.title', 'login'),
      save: _.partial(Okta.loc, 'enroll.u2f.save', 'login'),
      noCancelButton: true,
      hasSavingState: false,
      autoSave: true,
      className: 'enroll-u2f-form',
      noButtonBar: function noButtonBar() {
        return !FidoUtil.isU2fAvailable();
      },
      modelEvents: {
        'request': '_startEnrollment',
        'error': '_stopEnrollment'
      },
      formChildren: function formChildren() {
        var result = [];

        if (!FidoUtil.isU2fAvailable()) {
          var errorMessageKey = 'u2f.error.factorNotSupported';
          if (this.options.appState.get('factors').length === 1) {
            errorMessageKey = 'u2f.error.factorNotSupported.oneFactor';
          }
          result.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc(errorMessageKey, 'login') }) }, { selector: '.o-form-error-container' }));
        } else {
          //There is html in enroll.u2f.general2 in our properties file, reason why is unescaped
          result.push(FormType.View({
            View: '<div class="u2f-instructions"><ol>\
          <li>{{{i18n code="enroll.u2f.general2" bundle="login"}}}</li>\
          <li>{{i18n code="enroll.u2f.general3" bundle="login"}}</li>\
          </ol></div>'
          }));

          result.push(FormType.View({
            View: '\
          <div class="u2f-enroll-text hide">\
            <p>{{i18n code="enroll.u2f.instructions" bundle="login"}}</p>\
            <p>{{i18n code="enroll.u2f.instructionsBluetooth" bundle="login"}}</p>\
            <div data-se="u2f-devices" class="u2f-devices-images">\
              <div class="u2f-usb"></div>\
              <div class="u2f-bluetooth"></div>\
            </div>\
            <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\
          </div>'
          }));
        }

        return result;
      },

      _startEnrollment: function _startEnrollment() {
        this.$('.u2f-instructions').addClass('hide');
        this.$('.u2f-enroll-text').removeClass('hide');
        this.$('.o-form-button-bar').hide();
      },

      _stopEnrollment: function _stopEnrollment() {
        this.$('.u2f-instructions').removeClass('hide');
        this.$('.u2f-enroll-text').addClass('hide');
        this.$('.o-form-button-bar').show();
      }
    },

    Footer: Footer,

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate')) {
        this.model.activate();
        return true;
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(13), __webpack_require__(2), __webpack_require__(1), __webpack_require__(121), __webpack_require__(59), __webpack_require__(9), __webpack_require__(4), __webpack_require__(23), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Errors, FormType, FormController, CryptoUtil, webauthn, Footer, Q, HtmlErrorMessageView, BrowserFeatures) {

  var _ = Okta._;

  function getExcludeCredentials(credentials) {
    var excludeCredentials = [];
    _.each(credentials, function (credential) {
      excludeCredentials.push({
        type: 'public-key',
        id: CryptoUtil.strToBin(credential.id)
      });
    });
    return excludeCredentials;
  }

  return FormController.extend({
    className: 'enroll-webauthn',
    Model: {
      local: {
        '__enrolled__': 'boolean'
      },

      save: function save() {
        this.trigger('request');

        if (this.get('__enrolled__')) {
          return this.activate();
        }

        return this.doTransaction(function (transaction) {
          var factor = _.findWhere(transaction.factors, {
            factorType: 'webauthn',
            provider: 'FIDO'
          });
          return factor.enroll();
        });
      },

      activate: function activate() {
        var _this = this;

        this.set('__enrolled__', true);
        this.trigger('errors:clear');
        this.appState.on('backToFactors', function () {
          if (_this.webauthnAbortController) {
            _this.webauthnAbortController.abort();
            _this.webauthnAbortController = null;
          }
        });

        return this.doTransaction(function (transaction) {
          // enroll via browser webauthn js
          var activation = transaction.factor.activation;
          var self = this;
          if (webauthn.isNewApiAvailable()) {
            var options = _.extend({}, activation, {
              challenge: CryptoUtil.strToBin(activation.challenge),
              user: {
                id: CryptoUtil.strToBin(activation.user.id),
                name: activation.user.name,
                displayName: activation.user.displayName
              },
              excludeCredentials: getExcludeCredentials(activation.excludeCredentials)
            });
            self.webauthnAbortController = new AbortController();
            return new Q(navigator.credentials.create({
              publicKey: options,
              signal: self.webauthnAbortController.signal
            })).then(function (newCredential) {
              return transaction.activate({
                attestation: CryptoUtil.binToStr(newCredential.response.attestationObject),
                clientData: CryptoUtil.binToStr(newCredential.response.clientDataJSON)
              });
            }).fail(function (error) {
              self.trigger('errors:clear');
              // Do not display if it is abort error triggered by code when switching.
              // self.webauthnAbortController would be null if abort was triggered by code. 
              if (!self.webauthnAbortController) {
                throw new Errors.WebauthnAbortError();
              } else {
                throw new Errors.WebAuthnError({
                  xhr: { responseJSON: { errorSummary: error.message } }
                });
              }
            }).finally(function () {
              // unset webauthnAbortController on successful authentication or error
              self.webauthnAbortController = null;
            });
          }
        });
      }
    },

    Form: {
      title: _.partial(Okta.loc, 'enroll.webauthn.biometric.title', 'login'),
      save: _.partial(Okta.loc, 'enroll.webauthn.save', 'login'),
      noCancelButton: true,
      hasSavingState: false,
      autoSave: true,
      className: 'enroll-webauthn-form',
      noButtonBar: function noButtonBar() {
        return !webauthn.isNewApiAvailable();
      },
      modelEvents: {
        'request': '_startEnrollment',
        'error': '_stopEnrollment'
      },
      formChildren: function formChildren() {
        var children = [];

        if (webauthn.isNewApiAvailable()) {
          //enroll.webauthn.biometric.instructions.edge is unescaped because it contains html
          children.push(FormType.View({
            View: Okta.View.extend({
              className: 'webauthn-enroll-text',
              template: '\
                <div class="webauthn-enroll-instructions">\
                  <p>{{i18n code="enroll.webauthn.biometric.instructions" bundle="login"}}</p>\
                </div>\
                {{#if isEdge}}\
                  <div class="webauthn-edge-text">\
                     <p>{{{i18n code="enroll.webauthn.biometric.instructions.edge" bundle="login"}}}</p>\
                  </div>\
                {{/if}}\
                {{#if onlySupportsSecurityKey}}\
                  <div class="webauthn-restrictions-text">\
                     <p>{{{i18n code="enroll.webauthn.instructions.noSupportForBiometric" bundle="login"}}}</p>\
                  </div>\
                {{/if}}\
                <div data-se="webauthn-waiting" class="okta-waiting-spinner hide"></div>\
              ',
              getTemplateData: function getTemplateData() {
                return {
                  isEdge: BrowserFeatures.isEdge(),
                  onlySupportsSecurityKey: (BrowserFeatures.isFirefox() || BrowserFeatures.isSafari()) && BrowserFeatures.isMac()
                };
              }
            })
          }));
        } else {
          var errorMessageKey = 'webauthn.biometric.error.factorNotSupported';
          if (this.options.appState.get('factors').length === 1) {
            errorMessageKey = 'webauthn.biometric.error.factorNotSupported.oneFactor';
          }
          children.push(FormType.View({ View: new HtmlErrorMessageView({ message: Okta.loc(errorMessageKey, 'login') }) }, { selector: '.o-form-error-container' }));
        }

        return children;
      },

      _startEnrollment: function _startEnrollment() {
        this.$('.okta-waiting-spinner').show();
        this.$('.o-form-button-bar').hide();
      },

      _stopEnrollment: function _stopEnrollment() {
        this.$('.okta-waiting-spinner').hide();
        this.$('.o-form-button-bar').show();
      }
    },

    Footer: Footer,

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate')) {
        this.model.activate();
        return true;
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019-2020, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(57), __webpack_require__(2), __webpack_require__(124), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Factor, FormType, EnrollCustomFactorController, HtmlErrorMessageView) {
  var Util = Okta.internal.util.Util;


  return EnrollCustomFactorController.extend({
    Model: {
      local: {
        provider: 'string',
        factorType: 'string'
      },
      save: function save() {
        var _this = this;

        return this.manageTransaction(function () {
          var url = _this.appState.get('enrollCustomFactorRedirectUrl');
          if (url !== null) {
            Util.redirect(url);
          }
        });
      }
    },

    Form: function Form() {
      var factor = new Factor.Model(this.options.appState.get('factor'), this.toJSON());
      var vendorName = factor.get('vendorName');
      var subtitle = Okta.loc('enroll.customFactor.subtitle', 'login', [vendorName]);
      var saveText = Okta.loc('enroll.customFactor.save', 'login');
      return {
        autoSave: true,
        title: vendorName,
        subtitle: subtitle,
        save: saveText,
        formChildren: function formChildren() {
          var result = [];
          if (this.options.appState.get('isFactorResultFailed')) {
            result.push(FormType.View({ View: new HtmlErrorMessageView({ message: this.options.appState.get('factorResultErrorMessage') }) }, { selector: '.o-form-error-container' }));
          }
          return result;
        }
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(9), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, Footer, HtmlErrorMessageView) {

  return FormController.extend({
    className: 'enroll-hotp',
    Model: function Model() {
      return {
        local: {
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        }
      };
    },
    Form: {
      title: function title() {
        var factors = this.options.appState.get('factors');
        var hotpFactor = factors.findWhere({
          provider: this.model.get('__provider__'),
          factorType: this.model.get('__factorType__')
        });
        return Okta.loc('enroll.totp.title', 'login', [hotpFactor.get('factorLabel')]);
      },
      noButtonBar: true,
      attributes: { 'data-se': 'restrict-enroll' },

      formChildren: function formChildren() {
        var children = [FormType.View({
          View: new HtmlErrorMessageView({ message: Okta.loc('enroll.hotp.restricted', 'login') })
        })];

        return children;
      }
    },

    Footer: Footer

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(8), __webpack_require__(1), __webpack_require__(2), __webpack_require__(12), __webpack_require__(82), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorUtil, FormController, FormType, RouterUtil, BarcodeView, Footer) {

  var _ = Okta._;

  return FormController.extend({
    className: 'barcode-totp',
    Model: function Model() {
      return {
        local: {
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        }
      };
    },

    Form: {
      title: function title() {
        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
        return Okta.loc('enroll.totp.title', 'login', [factorName]);
      },
      subtitle: _.partial(Okta.loc, 'mfa.scanBarcode', 'login'),
      save: _.partial(Okta.loc, 'oform.next', 'login'),
      noCancelButton: true,
      attributes: { 'data-se': 'step-scan' },
      className: 'barcode-scan',

      formChildren: [FormType.View({ View: BarcodeView })]
    },

    Footer: Footer,

    initialize: function initialize() {
      this.listenTo(this.form, 'save', function () {
        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'), this.model.get('__factorType__'), 'activate');
        this.options.appState.trigger('navigate', url);
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(8), __webpack_require__(1), __webpack_require__(2), __webpack_require__(12), __webpack_require__(82), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorUtil, FormController, FormType, RouterUtil, BarcodeView, Footer) {

  var _ = Okta._;

  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
  // in network connection lost errors in Safari and IE.
  var PUSH_INTERVAL = 6000;

  return FormController.extend({
    className: 'barcode-push',
    Model: function Model() {
      return {
        local: {
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        }
      };
    },

    Form: {
      title: function title() {
        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
        return Okta.loc('enroll.totp.title', 'login', [factorName]);
      },
      subtitle: _.partial(Okta.loc, 'mfa.scanBarcode', 'login'),
      noButtonBar: true,
      attributes: { 'data-se': 'step-scan' },
      className: 'barcode-scan',
      initialize: function initialize() {
        this.listenTo(this.model, 'error errors:clear', function () {
          this.clearErrors();
        });
      },

      formChildren: [FormType.View({ View: BarcodeView })]
    },

    Footer: Footer,

    initialize: function initialize() {
      this.pollForEnrollment();
    },

    pollForEnrollment: function pollForEnrollment() {
      return this.model.doTransaction(function (transaction) {
        return transaction.poll(PUSH_INTERVAL);
      });
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate')) {
        return true;
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(125), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, EnterPasscodeForm, Footer) {

  return FormController.extend({
    className: 'activate-totp',
    Model: function Model() {
      return {
        props: {
          factorId: ['string', true, this.options.appState.get('activatedFactorId')],
          passCode: ['string', true]
        },
        local: {
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        },
        save: function save() {
          return this.doTransaction(function (transaction) {
            return transaction.activate({
              passCode: this.get('passCode')
            });
          });
        }
      };
    },

    Form: EnterPasscodeForm,

    Footer: Footer

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(8), __webpack_require__(1), __webpack_require__(2), __webpack_require__(12), __webpack_require__(259), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorUtil, FormController, FormType, RouterUtil, ManualSetupFooter, TextBox) {

  var _ = Okta._;

  return FormController.extend({
    className: 'enroll-manual-totp',
    Model: function Model() {
      return {
        local: {
          'sharedSecret': ['string', false, this.options.appState.get('sharedSecret')],
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        }
      };
    },

    Form: {
      title: function title() {
        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
        return Okta.loc('enroll.totp.title', 'login', [factorName]);
      },
      subtitle: _.partial(Okta.loc, 'enroll.totp.cannotScanBarcode', 'login'),
      noButtonBar: true,
      attributes: { 'data-se': 'step-manual-setup' },

      formChildren: function formChildren() {
        var instructions = this.settings.get('brandName') ? Okta.loc('enroll.totp.manualSetupInstructions.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('enroll.totp.manualSetupInstructions.generic', 'login');
        return [FormType.View({
          View: Okta.View.extend({
            template: '\
                <p class="okta-form-subtitle o-form-explain text-align-c">\
                  {{instructions}}\
                </p>\
              ',
            getTemplateData: function getTemplateData() {
              return {
                instructions: instructions
              };
            }
          })
        }), FormType.Input({
          name: 'sharedSecret',
          input: TextBox,
          type: 'text',
          disabled: true
        }), FormType.Toolbar({
          noCancelButton: true,
          save: Okta.loc('oform.next', 'login')
        })];
      }
    },

    Footer: ManualSetupFooter,

    initialize: function initialize() {
      this.listenTo(this.form, 'save', function () {
        var url = RouterUtil.createActivateFactorUrl(this.model.get('__provider__'), this.model.get('__factorType__'), 'activate');
        this.options.appState.trigger('navigate', url);
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(12), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, RouterUtil, Enums) {

  return Okta.View.extend({
    template: '\
      <a href="#" class="link help js-back" data-se="back-link">\
        {{i18n code="mfa.backToFactors" bundle="login"}}\
      </a>\
      <a href="#" class="link help goto js-goto" data-se="goto-link">\
        {{i18n code="mfa.scanBarcode" bundle="login"}}\
      </a>\
    ',
    className: 'auth-footer',
    events: {
      'click .js-back': function clickJsBack(e) {
        e.preventDefault();
        this.back();
      },
      'click .js-goto': function clickJsGoto(e) {
        e.preventDefault();
        // go to a different screen with current auth status:
        // refresh the latest response
        this.model.startTransaction(function (authClient) {
          return authClient.tx.resume();
        });
      }
    },
    back: function back() {
      this.state.set('navigateDir', Enums.DIRECTION_BACK);
      if (this.options.appState.get('prevLink')) {
        // Once we are in the MFA_ENROLL_ACTIVATE, we need to reset to the
        // correct state. Fortunately, this means that the router will
        // handle navigation once the request is finished.
        this.model.doTransaction(function (transaction) {
          return transaction.prev();
        });
      } else {
        this.options.appState.trigger('navigate', 'signin/enroll');
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(81), __webpack_require__(8), __webpack_require__(1), __webpack_require__(2), __webpack_require__(12), __webpack_require__(261), __webpack_require__(123), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, CountryUtil, FactorUtil, FormController, FormType, RouterUtil, Footer, PhoneTextBox, TextBox) {

  var _ = Okta._;

  function goToFactorActivation(view, step) {
    var url = RouterUtil.createActivateFactorUrl(view.options.appState.get('activatedFactorProvider'), view.options.appState.get('activatedFactorType'), step);
    view.options.appState.trigger('navigate', url);
  }

  function setStateValues(view) {
    var userPhoneNumber, userCountryCode;
    if (view.model.get('activationType') === 'SMS') {
      userCountryCode = view.model.get('countryCode');
      userPhoneNumber = view.model.get('phoneNumber');
    }
    view.options.appState.set({
      factorActivationType: view.model.get('activationType'),
      userCountryCode: userCountryCode,
      userPhoneNumber: userPhoneNumber
    });
  }

  function enrollFactor(view, factorType) {
    return view.model.doTransaction(function (transaction) {
      return transaction.prev().then(function (trans) {
        var factor = _.findWhere(trans.factors, {
          factorType: factorType,
          provider: 'OKTA'
        });
        return factor.enroll();
      }).then(function (trans) {
        var textActivationLinkUrl,
            emailActivationLinkUrl,
            sharedSecret,
            res = trans.data;

        if (res && res._embedded && res._embedded.factor && res._embedded.factor._embedded && res._embedded.factor._embedded.activation) {

          var factor = res._embedded.factor;

          // Shared secret
          sharedSecret = factor._embedded.activation.sharedSecret;

          if (factor._embedded.activation._links && factor._embedded.activation._links.send) {

            var activationSendLinks = factor._embedded.activation._links.send;

            // SMS activation url
            var smsItem = _.findWhere(activationSendLinks, { name: 'sms' });
            textActivationLinkUrl = smsItem ? smsItem.href : null;

            // Email activation url
            var emailItem = _.findWhere(activationSendLinks, { name: 'email' });
            emailActivationLinkUrl = emailItem ? emailItem.href : null;
          }
        }

        view.model.set({
          'SMS': textActivationLinkUrl,
          'EMAIL': emailActivationLinkUrl,
          'sharedSecret': sharedSecret
        });

        return trans;
      });
    });
  }

  return FormController.extend({
    className: 'enroll-manual-push',
    Model: function Model() {
      return {
        local: {
          activationType: ['string', true, this.options.appState.get('factorActivationType') || 'SMS'],
          countryCode: ['string', false, 'US'],
          phoneNumber: 'string',
          'SMS': ['string', false, this.options.appState.get('textActivationLinkUrl')],
          'EMAIL': ['string', false, this.options.appState.get('emailActivationLinkUrl')],
          'sharedSecret': ['string', false, this.options.appState.get('sharedSecret')],
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        },
        derived: {
          countryCallingCode: {
            deps: ['countryCode'],
            fn: function fn(countryCode) {
              return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
            }
          },
          fullPhoneNumber: {
            deps: ['countryCallingCode', 'phoneNumber'],
            fn: function fn(countryCallingCode, phoneNumber) {
              return countryCallingCode + phoneNumber;
            }
          }
        }
      };
    },

    Form: {
      title: function title() {
        var factorName = FactorUtil.getFactorLabel(this.model.get('__provider__'), this.model.get('__factorType__'));
        return Okta.loc('enroll.totp.title', 'login', [factorName]);
      },
      subtitle: _.partial(Okta.loc, 'enroll.totp.cannotScanBarcode', 'login'),
      noButtonBar: true,
      attributes: { 'data-se': 'step-manual-setup' },

      formChildren: function formChildren() {
        var instructions = this.settings.get('brandName') ? Okta.loc('enroll.totp.sharedSecretInstructions.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('enroll.totp.sharedSecretInstructions.generic', 'login');
        var children = [FormType.Input({
          name: 'activationType',
          type: 'select',
          wide: true,
          options: {
            SMS: Okta.loc('enroll.totp.sendSms', 'login'),
            EMAIL: Okta.loc('enroll.totp.sendEmail', 'login'),
            MANUAL: Okta.loc('enroll.totp.setupManually', 'login')
          }
        }), FormType.Input({
          name: 'countryCode',
          type: 'select',
          wide: true,
          options: CountryUtil.getCountries(),
          showWhen: { activationType: 'SMS' }
        }), FormType.Input({
          label: Okta.loc('mfa.phoneNumber.placeholder', 'login'),
          'label-top': true,
          className: 'enroll-sms-phone',
          name: 'phoneNumber',
          input: PhoneTextBox,
          type: 'text',
          showWhen: { activationType: 'SMS' }
        }), FormType.View({
          View: Okta.View.extend({
            template: '\
                <p class="okta-form-subtitle o-form-explain text-align-c">\
                  {{instructions}}\
                </p>\
              ',
            getTemplateData: function getTemplateData() {
              return {
                instructions: instructions
              };
            }
          }),
          showWhen: { activationType: 'MANUAL' }
        }), FormType.Input({
          name: 'sharedSecret',
          input: TextBox,
          type: 'text',
          disabled: true,
          showWhen: { activationType: 'MANUAL' },
          initialize: function initialize() {
            this.listenTo(this.model, 'change:sharedSecret', this.render);
          }
        }), FormType.View({
          View: '<div data-type="next-button-wrap"></div>',
          showWhen: { activationType: 'MANUAL' }
        }), FormType.Button({
          title: Okta.loc('oform.next', 'login'),
          className: 'button button-primary button-wide button-next',
          attributes: { 'data-se': 'next-button' },
          click: _.bind(function () {
            setStateValues(this);
            goToFactorActivation(this, 'passcode');
          }, this)
        }, '[data-type="next-button-wrap"]'), FormType.Toolbar({
          noCancelButton: true,
          save: Okta.loc('oform.send', 'login'),
          showWhen: {
            activationType: function activationType(val) {
              return val === 'SMS' || val === 'EMAIL';
            }
          }
        })];
        return children;
      }
    },

    Footer: Footer,

    initialize: function initialize() {
      this.setInitialModel();
      // Move this logic to a model when AuthClient supports sending email and sms
      this.listenTo(this.form, 'save', function () {
        var self = this;
        this.model.doTransaction(function (transaction) {
          var activationType = this.get('activationType').toLowerCase(),
              opts = {};

          if (activationType === 'sms') {
            opts.profile = { phoneNumber: this.get('fullPhoneNumber') };
          }

          return transaction.factor.activation.send(activationType, opts).then(function (trans) {
            setStateValues(self);
            // Note: Need to defer because OktaAuth calls our router success
            // handler on the next tick - if we immediately called, appState would
            // still be populated with the last response
            _.defer(function () {
              goToFactorActivation(self, 'sent');
            });
            return trans;
          });
        });
      });

      this.listenTo(this.model, 'change:activationType', function (model, value) {
        this.form.clearErrors();
        if (value === 'MANUAL' && this.options.appState.get('activatedFactorType') !== 'token:software:totp') {
          enrollFactor(this, 'token:software:totp');
        } else if (this.options.appState.get('activatedFactorType') !== 'push') {
          enrollFactor(this, 'push');
        }
      });
    },

    setInitialModel: function setInitialModel() {
      if (this.options.appState.get('factorActivationType') === 'SMS') {
        this.model.set({
          countryCode: this.options.appState.get('userCountryCode') || 'US',
          phoneNumber: this.options.appState.get('userPhoneNumber')
        });
      }
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isMfaEnrollActivate') || this.options.appState.get('isMfaEnroll')) {
        return true;
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, RouterUtil) {

  var _ = Okta._;

  function goToFactorActivation(appState) {
    var url = RouterUtil.createActivateFactorUrl(appState.get('activatedFactorProvider'), appState.get('activatedFactorType'));
    appState.trigger('navigate', url);
  }

  return Okta.View.extend({
    template: '\
      <a href="#" class="link help js-back" data-se="back-link">\
        {{i18n code="mfa.backToFactors" bundle="login"}}\
      </a>\
      <a href="#" class="link help goto js-goto" data-se="goto-link">\
        {{i18n code="mfa.scanBarcode" bundle="login"}}\
      </a>\
    ',
    className: 'auth-footer',
    events: {
      'click .js-back': function clickJsBack(e) {
        e.preventDefault();
        this.back();
      },
      'click .js-goto': function clickJsGoto(e) {
        e.preventDefault();
        var goToFactor = _.partial(goToFactorActivation, this.options.appState);
        this.options.appState.unset('factorActivationType');
        if (this.options.appState.get('activatedFactorType') !== 'push') {
          this.model.doTransaction(function (transaction) {
            return transaction.prev().then(function (trans) {
              var factor = _.findWhere(trans.factors, {
                factorType: 'push',
                provider: 'OKTA'
              });
              return factor.enroll();
            });
          }).then(goToFactor);
        } else {
          this.model.startTransaction(function (authClient) {
            return authClient.tx.resume();
          }).then(function () {
            // Sets to trigger on a tick after the appState has been set.
            // This is due to calling the globalSuccessFn in a callback
            setTimeout(goToFactor);
          });
        }
      }
    },
    back: function back() {
      var self = this;
      self.options.appState.unset('factorActivationType');
      if (self.options.appState.get('prevLink')) {
        this.model.doTransaction(function (transaction) {
          return transaction.prev();
        }).then(function () {
          // we trap 'MFA_ENROLL' response that's why we need to trigger navigation from here
          self.options.appState.trigger('navigate', 'signin/enroll');
        });
      } else {
        self.options.appState.trigger('navigate', 'signin/enroll');
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(81), __webpack_require__(1), __webpack_require__(2), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, CountryUtil, FormController, FormType, RouterUtil) {

  var _ = Okta._;

  // Note: Keep-alive is set to 5 seconds - using 5 seconds here will result
  // in network connection lost errors in Safari and IE.
  var PUSH_INTERVAL = 6000;

  var Footer = Okta.View.extend({
    template: '\
      <a href="#" class="link help js-back" data-se="back-link">\
        {{i18n code="oform.back" bundle="login"}}\
      </a>\
    ',
    className: 'auth-footer',
    events: {
      'click .js-back': function clickJsBack(e) {
        e.preventDefault();
        this.back();
      }
    },
    back: function back() {
      var url = RouterUtil.createActivateFactorUrl(this.options.appState.get('activatedFactorProvider'), this.options.appState.get('activatedFactorType'), 'manual');
      this.options.appState.trigger('navigate', url);
    }
  });

  var emailSentForm = {
    title: _.partial(Okta.loc, 'enroll.totp.enrollViaEmail.title', 'login'),
    noButtonBar: true,
    attributes: { 'data-se': 'sent-email-activation-link' },
    formChildren: [FormType.View({
      View: Okta.View.extend({
        template: '\
            <p>{{i18n code="enroll.totp.enrollViaEmail.msg" bundle="login"}}</p>\
            <p class="email-address">{{email}}</p>\
          ',
        getTemplateData: function getTemplateData() {
          return { email: this.options.appState.get('userEmail') };
        }
      })
    })]
  };

  var smsSentForm = {
    title: _.partial(Okta.loc, 'enroll.totp.enrollViaSms.title', 'login'),
    noButtonBar: true,
    attributes: { 'data-se': 'sent-sms-activation-link' },
    formChildren: [FormType.View({
      View: Okta.View.extend({
        template: '\
            <p>{{i18n code="enroll.totp.enrollViaSms.msg" bundle="login"}}</p>\
            <p class="phone-number">{{phoneNumber}}</p>\
          ',
        getTemplateData: function getTemplateData() {
          return { phoneNumber: this.model.get('fullPhoneNumber') };
        }
      })
    })]
  };

  return FormController.extend({
    className: 'enroll-activation-link-sent',
    Model: function Model() {
      return {
        local: {
          countryCode: ['string', false, this.options.appState.get('userCountryCode')],
          phoneNumber: ['string', false, this.options.appState.get('userPhoneNumber')],
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        },
        derived: {
          countryCallingCode: {
            deps: ['countryCode'],
            fn: function fn(countryCode) {
              return '+' + CountryUtil.getCallingCodeForCountry(countryCode);
            }
          },
          fullPhoneNumber: {
            deps: ['countryCallingCode', 'phoneNumber'],
            fn: function fn(countryCallingCode, phoneNumber) {
              return countryCallingCode + phoneNumber;
            }
          }
        }
      };
    },

    Form: function Form() {
      var activationType = this.options.appState.get('factorActivationType');
      switch (activationType) {
        case 'SMS':
          return smsSentForm;
        case 'EMAIL':
          return emailSentForm;
        default:
          throw new Error('Unknown activation option: ' + activationType);
      }
    },

    Footer: Footer,

    initialize: function initialize() {
      this.pollForEnrollment();
    },

    remove: function remove() {
      return FormController.prototype.remove.apply(this, arguments);
    },

    pollForEnrollment: function pollForEnrollment() {
      return this.model.doTransaction(function (transaction) {
        return transaction.poll(PUSH_INTERVAL);
      });
    },

    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isWaitingForActivation')) {
        this.pollForEnrollment();
        return true;
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(12), __webpack_require__(125)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, RouterUtil, EnterPasscodeForm) {

  var Footer = Okta.View.extend({
    template: '\
      <a href="#" class="link help js-back" data-se="back-link">\
        {{i18n code="oform.back" bundle="login"}}\
      </a>\
    ',
    className: 'auth-footer',
    events: {
      'click .js-back': function clickJsBack(e) {
        e.preventDefault();
        this.back();
      }
    },
    back: function back() {
      var url = RouterUtil.createActivateFactorUrl(this.options.appState.get('activatedFactorProvider'), 'push', 'manual');
      this.options.appState.trigger('navigate', url);
    }
  });

  return FormController.extend({
    className: 'activate-push',
    Model: function Model() {
      return {
        props: {
          factorId: ['string', true, this.options.appState.get('activatedFactorId')],
          passCode: ['string', true]
        },
        local: {
          '__factorType__': ['string', false, this.options.factorType],
          '__provider__': ['string', false, this.options.provider]
        },
        save: function save() {
          return this.doTransaction(function (transaction) {
            return transaction.activate({
              passCode: this.get('passCode')
            });
          });
        }
      };
    },

    Form: EnterPasscodeForm,

    Footer: Footer

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(3), __webpack_require__(2), __webpack_require__(43), __webpack_require__(8), __webpack_require__(5), __webpack_require__(126), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, Enums, FormType, ValidationUtil, FactorUtil, Util, Footer, TextBox) {

  var _ = Okta._;

  return FormController.extend({
    className: 'password-expired',
    Model: {
      props: {
        oldPassword: ['string', true],
        newPassword: ['string', true],
        confirmPassword: ['string', true]
      },
      validate: function validate() {
        return ValidationUtil.validatePasswordMatch(this);
      },
      save: function save() {
        this.trigger('save');
        return this.doTransaction(function (transaction) {
          return transaction.changePassword({
            oldPassword: this.get('oldPassword'),
            newPassword: this.get('newPassword')
          });
        });
      }
    },
    Form: {
      save: _.partial(Okta.loc, 'password.expired.submit', 'login'),
      title: function title() {
        var expiringSoon = this.options.appState.get('isPwdExpiringSoon'),
            numDays = this.options.appState.get('passwordExpireDays');
        if (expiringSoon && numDays > 0) {
          return Okta.loc('password.expiring.title', 'login', [numDays]);
        } else if (expiringSoon && numDays === 0) {
          return Okta.loc('password.expiring.today', 'login');
        } else if (expiringSoon) {
          return Okta.loc('password.expiring.soon', 'login');
        } else {
          return this.settings.get('brandName') ? Okta.loc('password.expired.title.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('password.expired.title.generic', 'login');
        }
      },
      subtitle: function subtitle() {
        if (this.options.appState.get('isPwdExpiringSoon')) {
          return this.settings.get('brandName') ? Okta.loc('password.expiring.subtitle.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('password.expiring.subtitle.generic', 'login');
        }

        var policy = this.options.appState.get('policy');
        if (!policy) {
          return;
        }

        return FactorUtil.getPasswordComplexityDescription(policy);
      },
      formChildren: function formChildren() {
        return [FormType.Input({
          'label-top': true,
          label: Okta.loc('password.oldPassword.placeholder', 'login'),
          explain: Util.createInputExplain('password.oldPassword.tooltip', 'password.oldPassword.placeholder', 'login'),
          'explain-top': true,
          name: 'oldPassword',
          input: TextBox,
          type: 'password'
        }), FormType.Divider(), FormType.Input({
          className: 'margin-btm-5',
          'label-top': true,
          label: Okta.loc('password.newPassword.placeholder', 'login'),
          explain: Util.createInputExplain('password.newPassword.tooltip', 'password.newPassword.placeholder', 'login'),
          'explain-top': true,
          name: 'newPassword',
          input: TextBox,
          type: 'password'
        }), FormType.Input({
          'label-top': true,
          label: Okta.loc('password.confirmPassword.placeholder', 'login'),
          explain: Util.createInputExplain('password.confirmPassword.tooltip', 'password.confirmPassword.placeholder', 'login'),
          'explain-top': true,
          name: 'confirmPassword',
          input: TextBox,
          type: 'password'
        })];
      }
    },
    Footer: Footer,

    initialize: function initialize() {
      this.listenTo(this.form, 'save', function () {
        var creds = {
          username: this.options.appState.get('userEmail'),
          password: this.model.get('newPassword')
        };
        this.settings.processCreds(creds).then(_.bind(this.model.save, this.model));
      });
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(126)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, Footer) {

  var _ = Okta._;
  var Util = Okta.internal.util.Util;


  return FormController.extend({
    className: 'custom-password-expired',
    Model: {},
    Form: {
      noButtonBar: true,
      title: function title() {
        var expiringSoon = this.options.appState.get('isPwdExpiringSoon'),
            numDays = this.options.appState.get('passwordExpireDays');
        if (expiringSoon && numDays > 0) {
          return Okta.loc('password.expiring.title', 'login', [numDays]);
        } else if (expiringSoon && numDays === 0) {
          return Okta.loc('password.expiring.today', 'login');
        } else if (expiringSoon) {
          return Okta.loc('password.expiring.soon', 'login');
        } else {
          return this.settings.get('brandName') ? Okta.loc('password.expired.title.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('password.expired.title.generic', 'login');
        }
      },
      subtitle: function subtitle() {
        if (this.options.appState.get('isPwdExpiringSoon')) {
          var subtitle = this.settings.get('brandName') ? Okta.loc('password.expiring.subtitle.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('password.expiring.subtitle.generic', 'login');
          return subtitle + ' ' + Okta.loc('password.expired.custom.subtitle', 'login');
        }

        return Okta.loc('password.expired.custom.subtitle', 'login');
      },
      formChildren: function formChildren() {
        return [FormType.Button({
          title: _.partial(Okta.loc, 'password.expired.custom.submit', 'login', [this.options.appState.get('passwordExpiredWebsiteName')]),
          className: 'button button-primary button-wide',
          attributes: { 'data-se': 'custom-button' },
          click: function click() {
            Util.redirect(this.options.appState.get('passwordExpiredLinkUrl'));
          }
        })];
      }
    },
    Footer: Footer
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(3), __webpack_require__(2), __webpack_require__(43), __webpack_require__(5), __webpack_require__(127), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, Enums, FormType, ValidationUtil, Util, ContactSupport, TextBox) {

  var _ = Okta._;
  var noFactorsError = '<div class="okta-form-infobox-error infobox infobox-error" role="alert">\
    <span class="icon error-16"></span>\
    <p>{{i18n code="password.forgot.noFactorsEnabled" bundle="login"}}</p>\
  </div>';

  var Footer = Okta.View.extend({
    template: '\
      {{#unless hideBackToSignInForReset}}\
        <a href="#" class="link help js-back" data-se="back-link">\
          {{i18n code="goback" bundle="login"}}\
        </a>\
      {{/unless}}\
      {{#if helpSupportNumber}}\
      <a href="#" class="link goto js-contact-support">\
        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\
      </a>\
      {{/if}}\
    ',
    className: 'auth-footer',
    events: {
      'click .js-back': function clickJsBack(e) {
        e.preventDefault();
        this.back();
      },
      'click .js-contact-support': function clickJsContactSupport(e) {
        e.preventDefault();
        this.state.trigger('contactSupport');
        this.$('.js-contact-support').hide();
      }
    },
    getTemplateData: function getTemplateData() {
      return {
        hideBackToSignInForReset: this.settings.get('features.hideBackToSignInForReset'),
        helpSupportNumber: this.settings.get('helpSupportNumber')
      };
    },
    back: function back() {
      this.state.set('navigateDir', Enums.DIRECTION_BACK);
      this.options.appState.trigger('navigate', '');
    }
  });

  return FormController.extend({
    className: 'forgot-password',
    Model: {
      props: {
        username: ['string', true],
        factorType: ['string', true]
      },
      validate: function validate() {
        return ValidationUtil.validateUsername(this);
      },
      save: function save() {
        var self = this;
        var relayState = this.settings.get('relayState');
        this.startTransaction(function (authClient) {
          return authClient.forgotPassword({
            username: self.settings.transformUsername(self.get('username'), Enums.FORGOT_PASSWORD),
            factorType: self.get('factorType'),
            relayState: relayState
          });
        }).fail(function () {
          //need empty fail handler on model to display errors on form
        });
      }
    },
    Form: {
      noButtonBar: true,
      title: _.partial(Okta.loc, 'password.reset', 'login'),
      formChildren: function formChildren() {
        /*eslint complexity: [2, 9] max-statements: [2, 23] */
        var smsEnabled = this.settings.get('features.smsRecovery');
        var callEnabled = this.settings.get('features.callRecovery');
        var emailEnabled = this.settings.get('features.emailRecovery');
        var noFactorsEnabled = !(smsEnabled || callEnabled || emailEnabled);
        var formChildren = [];

        if (noFactorsEnabled) {
          this.add(noFactorsError, '.o-form-error-container');
        } else {
          formChildren.push(FormType.Input({
            label: Okta.loc('password.forgot.email.or.username.placeholder', 'login'),
            'label-top': true,
            explain: Util.createInputExplain('password.forgot.email.or.username.tooltip', 'password.forgot.email.or.username.placeholder', 'login'),
            'explain-top': true,
            name: 'username',
            input: TextBox,
            inputId: 'account-recovery-username',
            type: 'text',
            inlineValidation: false
          }));
          if (smsEnabled || callEnabled) {
            formChildren.push(FormType.View({
              View: Okta.View.extend({
                template: '\
                  <p class="mobile-recovery-hint">\
                    {{i18n code="recovery.mobile.hint" bundle="login" arguments="mobileFactors"}}\
                  </p>',
                getTemplateData: function getTemplateData() {
                  var mobileFactors;
                  if (smsEnabled && callEnabled) {
                    mobileFactors = Okta.loc('recovery.smsOrCall');
                  } else if (callEnabled) {
                    mobileFactors = Okta.loc('recovery.call');
                  } else {
                    mobileFactors = Okta.loc('recovery.sms');
                  }
                  return { mobileFactors: mobileFactors };
                }
              })
            }));
          }
          if (smsEnabled) {
            this.$el.addClass('forgot-password-sms-enabled');
            formChildren.push(this.createRecoveryFactorButton('sms-button', 'password.forgot.sendText', Enums.RECOVERY_FACTOR_TYPE_SMS, this));
            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_SMS);
          }
          if (callEnabled) {
            this.$el.addClass('forgot-password-call-enabled');
            formChildren.push(this.createRecoveryFactorButton('call-button', 'password.forgot.call', Enums.RECOVERY_FACTOR_TYPE_CALL, this));
            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_CALL);
          }
          if (emailEnabled) {
            this.$el.addClass('forgot-password-email-enabled');
            formChildren.push(this.createRecoveryFactorButton('email-button', 'password.forgot.sendEmail', Enums.RECOVERY_FACTOR_TYPE_EMAIL, this));
            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_EMAIL);
          }
        }

        return formChildren;
      },
      initialize: function initialize() {

        this.listenTo(this.state, 'contactSupport', function () {
          this.add(ContactSupport, '.o-form-error-container');
        });

        this.listenTo(this, 'save', function () {
          this.options.appState.set('username', this.model.get('username'));
          this.model.save();
        });
      },
      setDefaultFactorType: function setDefaultFactorType(factorType) {
        if (_.isEmpty(this.model.get('factorType'))) {
          this.model.set('factorType', factorType);
        }
      },
      createRecoveryFactorButton: function createRecoveryFactorButton(className, labelCode, factorType, form) {
        return FormType.Button({
          attributes: { 'data-se': className },
          className: 'button button-primary button-wide ' + className,
          title: Okta.loc(labelCode, 'login'),
          click: function click() {
            form.clearErrors();
            if (this.model.isValid()) {
              this.model.set('factorType', factorType);
              form.trigger('save', this.model);
            }
          }
        });
      }
    },
    Footer: Footer,

    initialize: function initialize() {
      this.options.appState.unset('username');
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(3), __webpack_require__(22), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, Enums, FooterSignout, TextBox) {

  var _ = Okta._;
  var API_RATE_LIMIT = 30000; //milliseconds

  return FormController.extend({
    className: 'recovery-challenge',
    Model: {
      props: {
        passCode: ['string', true]
      },
      local: {
        ableToResend: 'boolean'
      },
      resendCode: function resendCode() {
        // Note: This does not require a trapAuthResponse because Backbone's
        // router will not navigate if the url path is the same
        this.limitResending();
        return this.doTransaction(function (transaction) {
          return transaction.resend();
        });
      },
      limitResending: function limitResending() {
        this.set({ ableToResend: false });
        _.delay(_.bind(this.set, this), API_RATE_LIMIT, { ableToResend: true });
      },
      save: function save() {
        return this.doTransaction(function (transaction) {
          return transaction.verify({
            passCode: this.get('passCode')
          });
        });
      }
    },
    Form: {
      autoSave: true,
      save: _.partial(Okta.loc, 'mfa.challenge.verify', 'login'),
      title: function title() {
        if (this.options.appState.get('factorType') === Enums.RECOVERY_FACTOR_TYPE_CALL) {
          return Okta.loc('recoveryChallenge.call.title', 'login');
        } else {
          return Okta.loc('recoveryChallenge.sms.title', 'login');
        }
      },
      className: 'recovery-challenge',
      initialize: function initialize() {
        this.listenTo(this.model, 'error', function () {
          this.clearErrors();
        });
      },
      formChildren: function formChildren() {
        return [FormType.Button({
          title: Okta.loc('mfa.resendCode', 'login'),
          attributes: { 'data-se': 'resend-button' },
          className: 'button sms-request-button margin-top-30',
          click: function click() {
            this.model.resendCode();
          },
          initialize: function initialize() {
            this.listenTo(this.model, 'change:ableToResend', function (model, ableToResend) {
              if (ableToResend) {
                this.options.title = Okta.loc('mfa.resendCode', 'login');
                this.enable();
                this.render();
              } else {
                this.options.title = Okta.loc('mfa.sent', 'login');
                this.disable();
                this.render();
              }
            });
          }
        }), FormType.Input({
          label: Okta.loc('mfa.challenge.enterCode.placeholder', 'login'),
          'label-top': true,
          className: 'enroll-sms-phone',
          name: 'passCode',
          input: TextBox,
          type: 'text'
        })];
      }
    },

    events: {
      'click .send-email-link': function clickSendEmailLink(e) {
        e.preventDefault();
        var settings = this.model.settings,
            username = this.options.appState.get('username'),
            recoveryType = this.options.appState.get('recoveryType');

        this.model.startTransaction(function (authClient) {
          // The user could have landed here via the Forgot Password/Unlock Account flow
          switch (recoveryType) {
            case Enums.RECOVERY_TYPE_PASSWORD:
              return authClient.forgotPassword({
                username: settings.transformUsername(username, Enums.FORGOT_PASSWORD),
                factorType: Enums.RECOVERY_FACTOR_TYPE_EMAIL
              });
            case Enums.RECOVERY_TYPE_UNLOCK:
              return authClient.unlockAccount({
                username: settings.transformUsername(username, Enums.UNLOCK_ACCOUNT),
                factorType: Enums.RECOVERY_FACTOR_TYPE_EMAIL
              });
            default:
              return;
          }
        });
      }
    },

    initialize: function initialize() {
      var recoveryType = this.options.appState.get('recoveryType'),
          sendEmailLink;

      switch (recoveryType) {
        case Enums.RECOVERY_TYPE_PASSWORD:
          sendEmailLink = '\
          <a href="#" class="link send-email-link" data-se="send-email-link">\
            {{i18n code="password.forgot.code.notReceived" bundle="login"}}\
          </a>';
          break;
        case Enums.RECOVERY_TYPE_UNLOCK:
          sendEmailLink = '\
          <a href="#" class="link send-email-link" data-se="send-email-link">\
            {{i18n code="account.unlock.code.notReceived" bundle="login"}}\
          </a>';
          break;
        default:
          break;
      }

      if (sendEmailLink && this.settings.get('features.emailRecovery')) {
        this.add(sendEmailLink);
      }

      if (!this.settings.get('features.hideBackToSignInForReset')) {
        this.add(new FooterSignout(_.extend(this.toJSON(), { linkText: Okta.loc('goback', 'login'), linkClassName: '' })));
      }
    },

    postRender: function postRender() {
      this.model.limitResending();
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums, FormController, FormType) {

  var _ = Okta._;

  return FormController.extend({
    className: 'password-reset-email-sent',
    Model: function Model() {
      return {
        local: {
          userFullName: ['string', false, this.options.appState.get('userFullName')]
        }
      };
    },

    Form: {
      title: _.partial(Okta.loc, 'password.forgot.emailSent.title', 'login'),
      subtitle: function subtitle() {
        var username = this.options.appState.get('username');
        return Okta.loc('password.forgot.emailSent.desc', 'login', [username]);
      },
      noButtonBar: true,
      attributes: { 'data-se': 'pwd-reset-email-sent' },
      formChildren: function formChildren() {
        var children = [FormType.View({
          View: Okta.View.extend({
            template: '\
              <span class="accessibility-text" role="status">{{alert}}</span>\
              ',
            getTemplateData: function getTemplateData() {
              return { 'alert': Okta.loc('password.forgot.emailSent.title', 'login') };
            }
          })
        })];

        if (!this.settings.get('features.hideBackToSignInForReset')) {
          children.push(FormType.Button({
            title: Okta.loc('goback', 'login'),
            className: 'button button-primary button-wide',
            attributes: { 'data-se': 'back-button' },
            click: function click() {
              var self = this;
              return this.model.doTransaction(function (transaction) {
                return transaction.cancel();
              }).then(function () {
                self.state.set('navigateDir', Enums.DIRECTION_BACK);
                self.options.appState.trigger('navigate', '');
              });
            }
          }));
        }

        return children;
      }
    },

    initialize: function initialize(options) {
      this.settings.callGlobalSuccess(Enums.FORGOT_PASSWORD_EMAIL_SENT, {
        username: options.appState.get('username')
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(22), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, FooterSignout, TextBox) {

  return FormController.extend({
    className: 'recovery-question',
    Model: {
      props: {
        answer: ['string', true],
        showAnswer: 'boolean'
      },
      save: function save() {
        return this.doTransaction(function (transaction) {
          return transaction.answer({ answer: this.get('answer') });
        });
      }
    },
    Form: {
      autoSave: true,
      save: function save() {
        switch (this.options.appState.get('recoveryType')) {
          case 'PASSWORD':
            return Okta.loc('password.forgot.question.submit', 'login');
          case 'UNLOCK':
            return Okta.loc('account.unlock.question.submit', 'login');
          default:
            return Okta.loc('mfa.challenge.verify', 'login');
        }
      },
      title: function title() {
        switch (this.options.appState.get('recoveryType')) {
          case 'PASSWORD':
            return Okta.loc('password.forgot.question.title', 'login');
          case 'UNLOCK':
            return Okta.loc('account.unlock.question.title', 'login');
          default:
            return '';
        }
      },
      formChildren: function formChildren() {
        return [FormType.Input({
          label: this.options.appState.get('recoveryQuestion'),
          placeholder: Okta.loc('mfa.challenge.answer.placeholder', 'login'),
          name: 'answer',
          input: TextBox,
          type: 'password',
          initialize: function initialize() {
            this.listenTo(this.model, 'change:showAnswer', function () {
              var type = this.model.get('showAnswer') ? 'text' : 'password';
              this.getInputs()[0].changeType(type);
            });
          }
        }), FormType.Input({
          label: false,
          'label-top': true,
          placeholder: Okta.loc('mfa.challenge.answer.showAnswer', 'login'),
          className: 'recovery-question-show margin-btm-0',
          name: 'showAnswer',
          type: 'checkbox'
        })];
      }
    },
    initialize: function initialize() {
      if (!this.settings.get('features.hideBackToSignInForReset')) {
        this.addFooter(FooterSignout, { linkText: Okta.loc('goback', 'login'), linkClassName: '' });
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(43), __webpack_require__(8), __webpack_require__(5), __webpack_require__(22), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, ValidationUtil, FactorUtil, Util, FooterSignout, TextBox) {

  var _ = Okta._;

  return FormController.extend({
    className: 'password-reset',
    Model: {
      props: {
        newPassword: ['string', true],
        confirmPassword: ['string', true]
      },
      validate: function validate() {
        return ValidationUtil.validatePasswordMatch(this);
      },
      save: function save() {
        this.trigger('save');
        var self = this;
        return this.doTransaction(function (transaction) {
          return transaction.resetPassword({
            newPassword: self.get('newPassword')
          });
        });
      }
    },
    Form: {
      save: _.partial(Okta.loc, 'password.reset', 'login'),
      title: function title() {
        return this.settings.get('brandName') ? Okta.loc('password.reset.title.specific', 'login', [this.settings.get('brandName')]) : Okta.loc('password.reset.title.generic', 'login');
      },
      subtitle: function subtitle() {
        var policy = this.options.appState.get('policy');
        if (!policy) {
          return;
        }

        return FactorUtil.getPasswordComplexityDescription(policy);
      },
      formChildren: function formChildren() {
        return [FormType.Input({
          className: 'margin-btm-5',
          label: Okta.loc('password.newPassword.placeholder', 'login'),
          'label-top': true,
          explain: Util.createInputExplain('password.newPassword.tooltip', 'password.newPassword.placeholder', 'login'),
          'explain-top': true,
          name: 'newPassword',
          input: TextBox,
          type: 'password'
        }), FormType.Input({
          label: Okta.loc('password.confirmPassword.placeholder', 'login'),
          'label-top': true,
          explain: Util.createInputExplain('password.confirmPassword.tooltip', 'password.confirmPassword.placeholder', 'login'),
          'explain-top': true,
          name: 'confirmPassword',
          input: TextBox,
          type: 'password'
        })];
      }
    },

    initialize: function initialize() {
      this.listenTo(this.form, 'save', function () {
        var creds = {
          username: this.options.appState.get('userEmail'),
          password: this.model.get('newPassword')
        };
        this.settings.processCreds(creds).then(_.bind(this.model.save, this.model));
      });

      if (!this.settings.get('features.hideBackToSignInForReset')) {
        this.addFooter(FooterSignout);
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController) {

  return FormController.extend({
    className: 'recovery-loading',

    Model: {},
    Form: {
      noButtonBar: true
    },

    initialize: function initialize(options) {
      var self = this;
      return this.model.startTransaction(function (authClient) {
        return authClient.verifyRecoveryToken({
          recoveryToken: options.token
        });
      }).fail(function () {
        self.options.appState.trigger('loading', false);
        self.options.appState.trigger('removeLoading');
      });
    },

    preRender: function preRender() {
      this.options.appState.trigger('loading', true);
    },

    trapAuthResponse: function trapAuthResponse() {
      this.options.appState.trigger('loading', false);
      return false;
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(3), __webpack_require__(2), __webpack_require__(5), __webpack_require__(43), __webpack_require__(127), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, Enums, FormType, Util, ValidationUtil, ContactSupport, TextBox) {

  var _ = Okta._;
  var noFactorsError = '<div class="okta-form-infobox-error infobox infobox-error" role="alert">\
    <span class="icon error-16"></span>\
    <p>{{i18n code="account.unlock.noFactorsEnabled" bundle="login"}}</p>\
  </div>';

  var Footer = Okta.View.extend({
    template: '\
      <a href="#" class="link help js-back" data-se="back-link">\
        {{i18n code="goback" bundle="login"}}\
      </a>\
      {{#if helpSupportNumber}}\
      <a href="#" class="link goto js-contact-support">\
        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\
      </a>\
      {{/if}}\
    ',
    className: 'auth-footer',
    events: {
      'click .js-back': function clickJsBack(e) {
        e.preventDefault();
        this.back();
      },
      'click .js-contact-support': function clickJsContactSupport(e) {
        e.preventDefault();
        this.state.trigger('contactSupport');
        this.$('.js-contact-support').hide();
      }
    },
    getTemplateData: function getTemplateData() {
      return this.settings.pick('helpSupportNumber');
    },
    back: function back() {
      this.state.set('navigateDir', Enums.DIRECTION_BACK);
      this.options.appState.trigger('navigate', '');
    }
  });

  return FormController.extend({
    className: 'account-unlock',
    Model: {
      props: {
        username: ['string', true],
        factorType: ['string', true]
      },
      validate: function validate() {
        return ValidationUtil.validateUsername(this);
      },
      save: function save() {
        var self = this;
        return this.startTransaction(function (authClient) {
          return authClient.unlockAccount({
            username: self.settings.transformUsername(self.get('username'), Enums.UNLOCK_ACCOUNT),
            factorType: self.get('factorType')
          });
        }).fail(function () {
          //need empty fail handler on model to display errors on form
        });
      }
    },
    Form: {
      noButtonBar: true,
      title: _.partial(Okta.loc, 'account.unlock.title', 'login'),
      formChildren: function formChildren() {
        /*eslint complexity: [2, 9] max-statements: [2, 24] */
        var smsEnabled = this.settings.get('features.smsRecovery');
        var callEnabled = this.settings.get('features.callRecovery');
        var emailEnabled = this.settings.get('features.emailRecovery');
        var noFactorsEnabled = !(smsEnabled || callEnabled || emailEnabled);
        var formChildren = [];
        var form = this;

        if (noFactorsEnabled) {
          this.add(noFactorsError, '.o-form-error-container');
        } else {
          formChildren.push(FormType.Input({
            label: Okta.loc('account.unlock.email.or.username.placeholder', 'login'),
            'label-top': true,
            explain: Util.createInputExplain('account.unlock.email.or.username.tooltip', 'account.unlock.email.or.username.placeholder', 'login'),
            'explain-top': true,
            name: 'username',
            input: TextBox,
            inputId: 'account-recovery-username',
            type: 'text',
            inlineValidation: false
          }));

          if (smsEnabled || callEnabled) {
            formChildren.push(FormType.View({
              View: Okta.View.extend({
                template: '\
                  <p class="mobile-recovery-hint">\
                    {{i18n code="recovery.mobile.hint" bundle="login" arguments="mobileFactors"}}\
                  </p>',
                getTemplateData: function getTemplateData() {
                  var mobileFactors;
                  if (smsEnabled && callEnabled) {
                    mobileFactors = Okta.loc('recovery.smsOrCall');
                  } else if (callEnabled) {
                    mobileFactors = Okta.loc('recovery.call');
                  } else {
                    mobileFactors = Okta.loc('recovery.sms');
                  }
                  return { mobileFactors: mobileFactors };
                }
              })
            }));
          }

          if (smsEnabled) {
            this.$el.addClass('forgot-password-sms-enabled');
            formChildren.push(this.createRecoveryFactorButton('sms-button', 'account.unlock.sendText', Enums.RECOVERY_FACTOR_TYPE_SMS, form));
            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_SMS);
          }
          if (callEnabled) {
            this.$el.addClass('forgot-password-call-enabled');
            formChildren.push(this.createRecoveryFactorButton('call-button', 'account.unlock.voiceCall', Enums.RECOVERY_FACTOR_TYPE_CALL, form));
            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_CALL);
          }
          if (emailEnabled) {
            this.$el.addClass('forgot-password-email-enabled');
            formChildren.push(this.createRecoveryFactorButton('email-button', 'account.unlock.sendEmail', Enums.RECOVERY_FACTOR_TYPE_EMAIL, form));
            this.setDefaultFactorType(Enums.RECOVERY_FACTOR_TYPE_EMAIL);
          }
        }

        return formChildren;
      },
      initialize: function initialize() {

        this.listenTo(this, 'save', function () {
          this.options.appState.set('username', this.model.get('username'));
          this.model.save();
        });

        this.listenTo(this.state, 'contactSupport', function () {
          this.add(ContactSupport, '.o-form-error-container');
        });
      },
      setDefaultFactorType: function setDefaultFactorType(factorType) {
        if (_.isEmpty(this.model.get('factorType'))) {
          this.model.set('factorType', factorType);
        }
      },
      createRecoveryFactorButton: function createRecoveryFactorButton(className, labelCode, factorType, form) {
        return FormType.Button({
          attributes: { 'data-se': className },
          className: 'button button-primary button-wide ' + className,
          title: Okta.loc(labelCode, 'login'),
          click: function click() {
            form.clearErrors();
            if (this.model.isValid()) {
              this.model.set('factorType', factorType);
              form.trigger('save', this.model);
            }
          }
        });
      }
    },
    Footer: Footer
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums, FormController, FormType) {

  var _ = Okta._;

  return FormController.extend({
    className: 'account-unlocked',
    Model: function Model() {
      return {
        local: {
          userFullName: ['string', false, this.options.appState.get('userFullName')]
        }
      };
    },

    Form: {
      title: _.partial(Okta.loc, 'account.unlock.unlocked.title', 'login'),
      subtitle: _.partial(Okta.loc, 'account.unlock.unlocked.desc', 'login'),
      noButtonBar: true,
      attributes: { 'data-se': 'account-unlocked' },
      formChildren: function formChildren() {
        return [FormType.Button({
          title: Okta.loc('goback', 'login'),
          className: 'button button-primary button-wide',
          attributes: { 'data-se': 'back-button' },
          click: function click() {
            this.state.set('navigateDir', Enums.DIRECTION_BACK);
            this.options.appState.trigger('navigate', '');
          }
        })];
      }
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums, FormController, FormType) {

  var _ = Okta._;

  return FormController.extend({
    className: 'account-unlock-email-sent',
    Model: function Model() {
      return {
        local: {
          userFullName: ['string', false, this.options.appState.get('userFullName')]
        }
      };
    },

    Form: {
      title: _.partial(Okta.loc, 'account.unlock.emailSent.title', 'login'),
      subtitle: function subtitle() {
        var username = this.options.appState.get('username');
        return Okta.loc('account.unlock.emailSent.desc', 'login', [username]);
      },
      noButtonBar: true,
      attributes: { 'data-se': 'unlock-email-sent' },
      formChildren: function formChildren() {
        return [FormType.Button({
          title: Okta.loc('goback', 'login'),
          className: 'button button-primary button-wide',
          attributes: { 'data-se': 'back-button' },
          click: function click() {
            this.state.set('navigateDir', Enums.DIRECTION_BACK);
            this.options.appState.trigger('navigate', '');
          }
        })];
      }
    },

    initialize: function initialize(options) {
      this.settings.callGlobalSuccess(Enums.UNLOCK_ACCOUNT_EMAIL_SENT, {
        username: options.appState.get('username')
      });
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/* eslint-disable max-depth */
/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(0), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Q, Okta, FormController) {

  return FormController.extend({
    className: 'refresh-auth-state',

    Model: {},

    Form: {
      noButtonBar: true
    },

    preRender: function preRender() {
      var appState = this.options.appState;
      var token = this.options.token;
      this.model.startTransaction(function (authClient) {
        appState.trigger('loading', true);
        if (token && token === this.settings.get('stateToken')) {
          // widget bootstrapped with statetoken via settings
          // check if stateToken in url is same as settings
          //unset stateToken to prevent the baseloginrouter controller from calling it again on render
          this.settings.unset('stateToken');
          var trans = this.options.appState.get('introspectSuccess');
          var transError = this.options.appState.get('introspectError');
          if (trans || transError) {
            if (trans && trans.data) {
              return Q.resolve(trans);
            } else {
              return Q.reject(transError);
            }
          }
        } else if (token) {
          // widget bootstrapped with statetoken only in the url and not in settings
          return authClient.tx.resume({
            stateToken: token
          });
        } else {
          // get stateToken from cookie
          // currently only applies to old pipeline
          if (authClient.tx.exists()) {
            return authClient.tx.resume();
          }
          appState.trigger('navigate', '');
        }
      });
    },

    remove: function remove() {
      this.options.appState.trigger('loading', false);
      return FormController.prototype.remove.apply(this, arguments);
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(277), __webpack_require__(278), __webpack_require__(36), __webpack_require__(3), __webpack_require__(128), __webpack_require__(279), __webpack_require__(13), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, RegistrationSchema, LoginModel, BaseLoginController, Enums, RegistrationFormFactory, SubSchema, Errors, Util) {
  var _ = Okta._,
      Backbone = Okta.Backbone;


  var Footer = Okta.View.extend({
    template: '\
      <a href="#" class="link help" data-se="back-link">\
        {{i18n code="goback" bundle="login"}}\
      </a>\
    ',
    className: 'auth-footer',
    events: {
      'click .help': function clickHelp(e) {
        e.preventDefault();
        this.back();
      }
    },
    back: function back() {
      this.state.set('navigateDir', Enums.DIRECTION_BACK);
      this.options.appState.trigger('navigate', '');
    }
  });

  return BaseLoginController.extend({
    className: 'registration',
    initialize: function initialize() {
      // setup schema
      var Schema = RegistrationSchema.extend({
        settings: this.options.settings,
        url: this.options.settings.get('baseUrl') + '/api/v1/registration/form'
      });
      var schema = new Schema();
      this.state.set('schema', schema);
    },
    getRegistrationApiUrl: function getRegistrationApiUrl() {
      // default policyId
      var defaultPolicyId = this.settings.get('defaultPolicyId');
      // org policyId
      var orgPolicyId = this.options.settings.get('policyId');
      var apiUrl = defaultPolicyId ? this.getRegistrationPolicyApi(defaultPolicyId) : this.getRegistrationPolicyApi(orgPolicyId);
      return apiUrl;
    },
    getRegistrationPolicyApi: function getRegistrationPolicyApi(policyId) {
      return this.options.settings.get('baseUrl') + '/api/v1/registration/' + policyId;
    },
    doPostSubmit: function doPostSubmit() {
      if (this.model.get('activationToken')) {
        // register via activation token
        var self = this;
        self.settings.callGlobalSuccess(Enums.REGISTRATION_COMPLETE, {
          activationToken: this.model.get('activationToken')
        });

        var loginModel = new LoginModel({
          settings: self.model.appState.settings
        });
        loginModel.loginWithActivationToken(this.model.get('activationToken')).then(function (transaction) {
          self.model.trigger('setTransaction', transaction);
        });
      } else {
        // register via activation email
        this.model.appState.set('username', this.model.get('email'));
        this.model.appState.trigger('navigate', 'signin/register-complete');
      }
    },
    registerUser: function registerUser(postData) {
      var self = this;
      this.model.attributes = postData;
      Backbone.Model.prototype.save.call(this.model).then(function () {
        var activationToken = self.model.get('activationToken');
        var postSubmitData = activationToken ? activationToken : self.model.get('email');
        self.settings.postSubmit(postSubmitData, function () {
          self.doPostSubmit();
        }, function (errors) {
          self.showErrors(errors);
        });
      }).fail(function (err) {
        var responseJSON = err.responseJSON;
        if (responseJSON && responseJSON.errorCauses.length) {
          var errMsg = responseJSON.errorCauses[0].errorSummary;
          Util.triggerAfterError(self, new Errors.RegistrationError(errMsg));
        }
      });
    },
    createRegistrationModel: function createRegistrationModel(modelProperties) {
      var self = this;
      var Model = Okta.Model.extend({
        url: self.getRegistrationApiUrl() + '/register',
        settings: this.settings,
        appState: this.options.appState,
        props: modelProperties,
        local: {
          activationToken: 'string'
        },
        toJSON: function toJSON() {
          var data = Okta.Model.prototype.toJSON.apply(this, arguments);
          return {
            userProfile: data,
            relayState: this.settings.get('relayState')
          };
        },
        parse: function parse(resp) {
          this.set('activationToken', resp.activationToken);
          delete resp.activationToken;
          return resp;
        },
        save: function save() {
          this.settings.preSubmit(this.attributes, function (postData) {
            self.registerUser(postData);
          }, function (errors) {
            self.showErrors(errors);
          });
        }
      });
      return new Model();
    },
    showErrors: function showErrors(error, hideRegisterButton) {
      //for parseSchema error hide form and show error at form level
      if (error.callback === 'parseSchema' && error.errorCauses) {
        error.errorSummary = _.clone(error.errorCauses[0].errorSummary);
        delete error.errorCauses;
      }
      //show error on form
      this.model.trigger('error', this.model, {
        responseJSON: error
      });

      //throw registration error
      var errMsg = error.callback ? error.callback + ':' + error.errorSummary : error.errorSummary;
      Util.triggerAfterError(this, new Errors.RegistrationError(errMsg));

      if (hideRegisterButton) {
        this.$el.find('.button-primary').hide();
      }
    },
    fetchInitialData: function fetchInitialData() {
      var self = this;
      // register parse complete event listener
      self.state.get('schema').on('parseComplete', function (updatedSchema) {
        var modelProperties = updatedSchema.properties.createModelProperties();
        self.settings.set('defaultPolicyId', updatedSchema.properties.defaultPolicyId);

        // create model
        self.model = self.createRegistrationModel(modelProperties);
        // create form
        var Form = Okta.Form.extend({
          layout: 'o-form-theme',
          autoSave: true,
          noCancelButton: true,
          title: Okta.loc('registration.form.title', 'login'),
          save: Okta.loc('registration.form.submit', 'login')
        });
        var form = new Form(self.toJSON());
        // add form
        self.add(form);
        // add footer
        self.footer = new self.Footer(self.toJSON());
        self.add(self.footer);
        self.addListeners();
        if (updatedSchema.error) {
          self.showErrors(updatedSchema.error, true);
        } else {
          // add fields
          updatedSchema.properties.each(function (schemaProperty) {
            var inputOptions = RegistrationFormFactory.createInputOptions(schemaProperty);
            var subSchemas = schemaProperty.get('subSchemas');
            var name = schemaProperty.get('name');
            form.addInput(inputOptions);
            if (name === 'password' && subSchemas) {
              form.add(SubSchema.extend({ id: 'subschemas-' + name, subSchemas: subSchemas }));
            }
          });
          var requiredFieldsLabel = Okta.tpl('<span class="required-fields-label">{{label}}</span>')({
            label: Okta.loc('registration.required.fields.label', 'login')
          });
          form.add(requiredFieldsLabel);
        }
      });
      // fetch schema from API
      return this.state.get('schema').fetch();
    },
    Footer: Footer
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  var _ = Okta._;
  var _Okta$internal$models = Okta.internal.models,
      BaseSchema = _Okta$internal$models.BaseSchema,
      SchemaProperty = _Okta$internal$models.SchemaProperty;


  var RegistrationSchemaPropertyCollection = SchemaProperty.Collection.extend({
    createModelProperties: function createModelProperties() {
      var modelProperties = SchemaProperty.Collection.prototype.createModelProperties.apply(this);
      _.each(modelProperties, function (modelProperty, name) {
        modelProperty.required = !!this.get(name).get('required');
      }, this);
      return modelProperties;
    }
  });

  return BaseSchema.Model.extend({
    expand: ['schema'],

    constructor: function constructor() {
      this.properties = new RegistrationSchemaPropertyCollection();
      Okta.BaseModel.apply(this, arguments);
    },

    parse: function parse(resp) {

      var parseResponseData = _.bind(function (resp) {
        var requireFields = resp.schema.required;
        if (_.isArray(requireFields)) {
          _.each(requireFields, function (requireField) {
            var field = this.properties.get(requireField);
            if (field) {
              field.set('required', true);
            }
          }, this);
        }

        var fieldOrderIds = resp.schema.fieldOrder;
        if (_.isArray(fieldOrderIds)) {
          _.each(fieldOrderIds, function (fieldOrderId, sortOrder) {
            var field = this.properties.get(fieldOrderId);
            if (field) {
              field.set('sortOrder', sortOrder);
            }
          }, this);
          this.properties.comparator = 'sortOrder';
          this.properties.sort();
        }
        this.properties.defaultPolicyId = resp.policyId;
        return resp;
      }, this);

      var self = this;
      this.settings.parseSchema(resp, function (resp) {
        if (resp.profileSchema) {
          resp.schema = resp.profileSchema;
          BaseSchema.Model.prototype.parse.apply(self, [resp]);
          resp = parseResponseData(resp);
        }
        self.trigger('parseComplete', { properties: self.properties });
      }, function (error) {
        self.trigger('parseComplete', { properties: self.properties, error: error });
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(42)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, BaseLoginModel) {

  return BaseLoginModel.extend({
    constructor: function constructor(options) {
      this.settings = options && options.settings;
      Okta.Model.apply(this, arguments);
    },
    loginWithActivationToken: function loginWithActivationToken(activationToken) {
      return this.startTransaction(function (authClient) {
        return authClient.signIn({ token: activationToken });
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {
  var SubSchema = Okta.View.extend({
    index: '',
    message: '',
    class: function _class() {
      return;
    },
    className: function className() {
      return 'subschema-unsatisfied subschema-' + this.index;
    },
    template: '\
      <p class="default-schema">\
        <span class="icon icon-16"/>\
        {{message}}\
      </p>\
    ',
    getTemplateData: function getTemplateData() {
      return {
        message: this.message
      };
    }
  });

  return Okta.View.extend({
    className: 'subschema',

    children: function children() {
      return this.subSchemas.map(function (subSchema, index) {
        var description = subSchema.get('description');
        // TODO API should send translated strings instead of i18n code inside description
        // or send param with i18n code
        var message = description;
        return SubSchema.extend({
          index: index,
          message: message
        });
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3), __webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Enums, FormController, FormType) {

  return FormController.extend({
    events: {
      'click .back-btn': function clickBackBtn(e) {
        e.preventDefault();
        this.back();
      }
    },
    back: function back() {
      this.state.set('navigateDir', Enums.DIRECTION_BACK);
      this.options.appState.trigger('navigate', '');
    },
    className: 'registration-complete',
    Model: function Model() {},
    initialize: function initialize() {
      this.settings.callGlobalSuccess(Enums.ACTIVATION_EMAIL_SENT, {
        username: this.options.appState.get('username')
      });
    },
    Form: {
      noButtonBar: true,
      formChildren: function formChildren() {
        return [FormType.View({
          View: Okta.View.extend({
            template: '\
              <span class="title-icon icon icon-16 confirm-16-green"></span>\
              <h2>{{title}}</h2>\
              <span>{{desc}}</span>\
              <a href="#" class="button button-primary button-wide back-btn" data-se="back-link">\
                {{i18n code="goback" bundle="login"}}\
              </a>\
              ',
            getTemplateData: function getTemplateData() {
              var email = this.options.appState.get('username');
              return {
                'desc': Okta.loc('registration.complete.desc', 'login', [email]),
                'title': Okta.loc('registration.complete.title', 'login')
              };
            }
          })
        })];
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint max-len: [2, 160] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2), __webpack_require__(282)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FormController, FormType, ScopeList) {

  var _ = Okta._;

  return FormController.extend({
    className: 'consent-required',
    initialize: function initialize() {
      this.model.set('expiresAt', this.options.appState.get('expiresAt'));
      this.model.set('scopes', this.options.appState.get('scopes'));
      this.listenTo(this.form, 'cancel', _.bind(this.model.cancel, this.model));
    },
    postRender: function postRender() {
      FormController.prototype.postRender.apply(this, arguments);

      // Update the "don't allow" and "allow access" buttons to be neutral by changing "allow button" to be gray.
      this.$('.o-form-button-bar .button-primary').removeClass('button-primary');
    },
    Model: {
      props: {
        expiresAt: ['string', true],
        scopes: ['array', true]
      },
      save: function save() {
        return this.doTransaction(function (transaction) {
          return transaction.consent({
            consent: {
              expiresAt: this.get('expiresAt'),
              scopes: _.pluck(this.get('scopes'), 'name')
            }
          });
        });
      },
      cancel: function cancel() {
        var self = this;
        return this.doTransaction(function (transaction) {
          return transaction.cancel();
        }).then(function () {
          var consentCancelFn = self.settings.get('consent.cancel');
          if (_.isFunction(consentCancelFn)) {
            consentCancelFn();
          }
        });
      }
    },
    Form: {
      noCancelButton: false,
      autoSave: true,
      save: _.partial(Okta.loc, 'consent.required.consentButton', 'login'),
      cancel: _.partial(Okta.loc, 'consent.required.cancelButton', 'login'),
      formChildren: function formChildren() {
        return [FormType.View({
          View: Okta.View.extend({
            className: 'consent-title detail-row',
            template: '\
                {{#if clientURI}}\
                  <a href="{{clientURI}}" class="client-logo-link" target="_blank">\
                {{/if}}\
                {{#if customLogo}}\
                  <img class="client-logo custom-logo" src="{{customLogo}}" />\
                {{else}}\
                  <img class="client-logo default-logo" src="{{defaultLogo}}" />\
                {{/if}}\
                {{#if clientURI}}\
                  </a>\
                {{/if}}\
                <span>{{{i18n code="consent.required.text" bundle="login" arguments="appName"}}}</span>\
              ',
            getTemplateData: function getTemplateData() {
              var appState = this.options.appState;
              return {
                appName: appState.escape('targetLabel'),
                customLogo: appState.get('targetLogo') && appState.get('targetLogo').href,
                defaultLogo: appState.get('defaultAppLogo'),
                clientURI: appState.get('targetClientURI') && appState.get('targetClientURI').href
              };
            }
          })
        }), FormType.View({
          View: new ScopeList({ model: this.model })
        }), FormType.View({
          View: Okta.View.extend({
            className: 'consent-description detail-row',
            template: '\
                <p>{{i18n code="consent.required.description" bundle="login"}}</p>\
              '
          })
        })];
      }
    },
    Footer: Okta.View.extend({
      className: 'consent-footer',
      template: '\
        {{#if termsOfService}}\
          <a class="terms-of-service" href="{{termsOfService}}" target="_blank">{{i18n code="consent.required.termsOfService" bundle="login"}}</a>\
          {{#if privacyPolicy}}\
            &#8226\
          {{/if}}\
        {{/if}}\
        {{#if privacyPolicy}}\
          <a class="privacy-policy" href="{{privacyPolicy}}" target="_blank">{{i18n code="consent.required.privacyPolicy" bundle="login"}}</a>\
        {{/if}}\
      ',
      getTemplateData: function getTemplateData() {
        var appState = this.options.appState;
        return {
          termsOfService: appState.get('targetTermsOfService') && appState.get('targetTermsOfService').href,
          privacyPolicy: appState.get('targetPrivacyPolicy') && appState.get('targetPrivacyPolicy').href
        };
      }
    })
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(283)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, ScopeItem) {

  return Okta.View.extend({
    className: 'scope-list detail-row',

    postRender: function postRender() {
      var _this = this;

      this.model.get('scopes').forEach(function (scope) {
        _this.add(ScopeItem, {
          options: {
            name: scope.displayName || scope.name,
            description: scope.description
          }
        });
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(74)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({
    className: 'scope-item',
    template: '\
      <div class="scope-item-text">\
        <p>{{name}}</p>\
      </div>\
      {{#if description}}\
        <span class="scope-item-tooltip icon form-help-16" />\
      {{/if}}\
    ',

    postRender: function postRender() {
      this.$('.scope-item-tooltip').qtip({
        content: {
          text: this.options.description
        },
        style: { classes: 'okta-sign-in-tooltip qtip-custom qtip-shadow' },
        position: {
          my: 'bottom right',
          target: 'mouse'
        }
      });
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(285), __webpack_require__(36), __webpack_require__(286), __webpack_require__(79)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, EnrollUser, BaseLoginController, EnrollUserForm, FooterWithBackLink) {
  return BaseLoginController.extend({
    className: 'enroll-user',
    initialize: function initialize(options) {
      this.options = options || {};
      // create model
      this.model = new EnrollUser(this.options);
    },
    fetchInitialData: function fetchInitialData() {
      // If user is unauthenticated and starts enroll flow make a post call to transition state to PROFILE_REQUIRED
      if (this.options.appState.get('isUnauthenticated')) {
        return this.model.getEnrollFormData();
      } else {
        return BaseLoginController.prototype.fetchInitialData.call();
      }
    },
    trapAuthResponse: function trapAuthResponse() {
      if (this.options.appState.get('isProfileRequired')) {
        return true;
      }
    },
    postRender: function postRender() {
      var form = new EnrollUserForm(this.toJSON());
      this.add(form);
      this.add(new FooterWithBackLink(this.toJSON()));
      this.addListeners();
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the 'License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(42)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, BaseLoginModel) {
  var _ = Okta._;


  return BaseLoginModel.extend({
    initialize: function initialize(options) {
      this.options = options || {};
      this.appState = this.options.appState;
    },
    constructPostData: function constructPostData(profileAttributes) {
      var postData = {
        'registration': {
          'profile': profileAttributes
        }
      };
      // send createNewAccount flag for new user creation
      if (this.appState.get('policy').registration.createNewAccount) {
        postData.registration['createNewAccount'] = true;
      }
      return postData;
    },
    getEnrollFormData: function getEnrollFormData() {
      return this.manageTransaction(function (transaction, setTransaction) {
        return transaction.enroll().then(function (trans) {
          setTransaction(trans);
        });
      });
    },
    save: function save() {
      var data = BaseLoginModel.prototype.toJSON.apply(this, arguments);
      data = _.omit(data, ['appState', 'settings', 'createNewAccount']);
      if (_.isEmpty(data)) {
        var error = {
          'errorSummary': Okta.loc('oform.errorbanner.title', 'login')
        };
        this.trigger('error', this, {
          responseJSON: error
        });
      } else {
        return this.manageTransaction(function (transaction, setTransaction) {
          transaction.enroll(this.constructPostData(data)).then(function (trans) {
            setTransaction(trans);
          });
        });
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint max-len: [2, 130] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(128), __webpack_require__(287)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, RegistrationFormFactory, ProfileSchema) {
  return Okta.Form.extend({
    layout: 'o-form-theme',
    autoSave: true,
    noCancelButton: true,
    title: Okta.loc('registration.form.title', 'login'),
    save: Okta.loc('registration.form.submit', 'login'),
    initialize: function initialize(options) {
      var _this = this;

      this.options = options || {};
      this.schema = new ProfileSchema({ profileSchemaAttributes: this.options.appState.get('policy').registration.profile });
      this.schema.properties.each(function (schemaProperty) {
        var inputOptions = RegistrationFormFactory.createInputOptions(schemaProperty);
        _this.addInput(inputOptions);
      });
      var requiredFieldsLabel = Okta.tpl('<span class="required-fields-label">{{label}}</span>')({
        label: Okta.loc('registration.required.fields.label', 'login')
      });
      this.add(requiredFieldsLabel);
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {
  var _ = Okta._;
  var BaseSchema = Okta.internal.models.BaseSchema;


  return BaseSchema.Model.extend({
    expand: ['schema'],
    setFieldPlaceholder: function setFieldPlaceholder(formFields) {
      _.each(formFields, function (formField) {
        formField.title = formField.label;
      });
      return formFields;
    },
    initialize: function initialize(options) {
      var profileAttributes = options.profileSchemaAttributes;
      profileAttributes = this.setFieldPlaceholder(profileAttributes);
      if (profileAttributes) {
        var userProfileSchema = {
          'properties': {}
        };
        for (var i = 0; i < profileAttributes.length; i++) {
          var profileAttributeObject = profileAttributes[i];
          userProfileSchema.properties[profileAttributeObject.name] = profileAttributeObject;
        }
        this.parse.apply(this, [{ 'schema': userProfileSchema }]);
      }
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint complexity: [2, 8] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4), __webpack_require__(8), __webpack_require__(289), __webpack_require__(57)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, Q, FactorUtil, FactorsDropDown, Factor) {

  return Okta.View.extend({

    template: '\
      <div class="beacon-blank auth-beacon">\
        <div class="beacon-blank js-blank-beacon-border auth-beacon-border"></div>\
      </div>\
      <div class="bg-helper auth-beacon auth-beacon-factor {{className}}" data-se="factor-beacon">\
        <div class="okta-sign-in-beacon-border auth-beacon-border"></div>\
      </div>\
      <div data-type="factor-types-dropdown" class="factors-dropdown-wrap"></div>\
    ',

    events: {
      'click .auth-beacon-factor': function clickAuthBeaconFactor(e) {
        e.preventDefault();
        e.stopPropagation();
        var expanded = this.$('.dropdown .options').toggle().is(':visible');
        this.$('a.option-selected').attr('aria-expanded', expanded);
        if (expanded) {
          this.$('#okta-dropdown-options').find('li.factor-option:first a').focus();
        }
      }
    },

    initialize: function initialize() {
      this.options.appState.set('beaconType', 'factor');
    },

    getTemplateData: function getTemplateData() {
      var factors = this.options.appState.get('factors'),
          factor,
          className;
      if (factors) {
        factor = FactorUtil.findFactorInFactorsArray(factors, this.options.provider, this.options.factorType);
      } else {
        factor = new Factor.Model(this.options.appState.get('factor'));
      }
      className = factor.get('iconClassName');
      return { className: className || '' };
    },

    postRender: function postRender() {
      if (this.options.animate) {
        this.$('.auth-beacon-factor').fadeIn(200);
      }
      var appState = this.options.appState;
      if (appState.get('hasMultipleFactorsAvailable')) {
        this.add(FactorsDropDown, '[data-type="factor-types-dropdown"]');
      }
    },

    fadeOut: function fadeOut() {
      var deferred = Q.defer();
      this.$('.auth-beacon-factor').fadeOut(200, function () {
        deferred.resolve();
      });
      return deferred.promise;
    },

    equals: function equals(Beacon, options) {
      return Beacon && this instanceof Beacon && options.provider === this.options.provider && (options.factorType === this.options.factorType || FactorUtil.isOktaVerify(options.provider, options.factorType) && FactorUtil.isOktaVerify(this.options.provider, this.options.factorType));
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(8), __webpack_require__(57), __webpack_require__(290)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, FactorUtil, Factor, FactorsDropDownOptions) {
  var _ = Okta._,
      $ = Okta.$;
  var BaseDropDown = Okta.internal.views.components.BaseDropDown;


  $(document).click(function (e) {
    var $target = $(e.target);
    var isDropdown = $target.closest('.option-selected').length > 0 && $target.closest('.dropdown').length > 0;
    if (!isDropdown) {
      $('.dropdown .options').hide();
      $('.dropdown a.option-selected').attr('aria-expanded', false);
    }
  });

  return BaseDropDown.extend({
    className: 'bg-helper icon-button',
    screenReaderText: function screenReaderText() {
      var factors = this.options.appState.get('factors'),
          factor,
          factorLabel;
      if (factors) {
        factor = FactorUtil.findFactorInFactorsArray(factors, this.options.provider, this.options.factorType);
      } else {
        factor = new Factor.Model(this.options.appState.get('factor'), this.toJSON());
      }
      factorLabel = factor.get('factorLabel');
      return Okta.loc('mfa.factors.dropdown.sr.text', 'login', [factorLabel]);
    },
    events: {
      'click a.option-selected': function clickAOptionSelected(e) {
        e.preventDefault();
        if (_.result(this, 'disabled')) {
          e.stopPropagation();
        } else {
          var expanded = this.$('.options').toggle().is(':visible');
          this.$('a.option-selected').attr('aria-expanded', expanded);
          if (expanded) {
            this.$('#okta-dropdown-options').find('li.factor-option:first a').focus();
          }
        }
      },
      'click .dropdown-disabled': function clickDropdownDisabled(e) {
        e.preventDefault();
        e.stopPropagation();
      }
    },
    initialize: function initialize() {
      this.addOption(FactorsDropDownOptions.getDropdownOption('TITLE'));
      var factorsList = this.options.appState.get('factors');
      var multiplePushFactors = factorsList.hasMultipleFactorsOfSameType('push');
      factorsList.each(function (factor) {
        // Do not add okta totp if there are multiple okta push (each push will have an inline totp)
        if (!(factor.get('factorType') === 'token:software:totp' && multiplePushFactors)) {
          this.addOption(FactorsDropDownOptions.getDropdownOption(factor.get('factorName')), { model: factor });
          this.listenTo(this.last(), 'options:toggle', function () {
            this.$('.options').hide();
            this.$('a.option-selected').attr('aria-expanded', false);
          });
        }
      }, this);
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint max-statements: [2, 16], complexity: [2, 10] */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta, RouterUtil) {

  var _ = Okta._;

  // deviceName is escaped on BaseForm (see BaseForm's template)
  var pushTitleTpl = Okta.Handlebars.compile('{{factorName}} ({{{deviceName}}})');
  var _action = function _action(model) {

    var factorIndex;
    var factorType = model.get('factorType');
    var factorsList = this.options.appState.get('factors');
    if (factorsList.hasMultipleFactorsOfSameType(factorType)) {
      factorIndex = factorsList.getFactorIndex(factorType, model.get('id'));
    }
    var url = RouterUtil.createVerifyUrl(model.get('provider'), factorType, factorIndex);
    var self = this;

    this.options.appState.trigger('factorSwitched');
    this.model.manageTransaction(function (transaction, setTransaction) {
      // FACTOR_CHALLENGE does not have a prev link
      if (transaction.status === 'FACTOR_CHALLENGE') {
        this.options.appState.set('trapMfaRequiredResponse', true);
      }
      if (transaction.status === 'MFA_CHALLENGE' && transaction.prev) {
        this.options.appState.set('trapMfaRequiredResponse', true);
        return transaction.prev().then(function (trans) {
          self.trigger('options:toggle');
          setTransaction(trans);
          self.options.appState.trigger('navigate', url);
        });
      } else {
        self.trigger('options:toggle');
        self.options.appState.trigger('navigate', url);
      }
    });
  };

  var dropdownOptions = {
    'TITLE': {
      title: _.partial(Okta.loc, 'mfa.factors.dropdown.title', 'login'),
      className: 'dropdown-list-title',
      disabled: true
    },

    'OKTA_VERIFY': {
      icon: 'factor-icon mfa-okta-verify-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'OKTA_VERIFY_PUSH': {
      icon: 'factor-icon mfa-okta-verify-30',
      className: 'factor-option',
      title: function title() {
        return pushTitleTpl({
          factorName: this.model.get('factorLabel'),
          deviceName: this.model.get('deviceName')
        });
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'GOOGLE_AUTH': {
      icon: 'factor-icon mfa-google-auth-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'CUSTOM_HOTP': {
      icon: 'factor-icon mfa-hotp-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'SYMANTEC_VIP': {
      icon: 'factor-icon mfa-symantec-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'RSA_SECURID': {
      icon: 'factor-icon mfa-rsa-30',
      className: 'factor-option',
      title: _.partial(Okta.loc, 'factor.totpHard.rsaSecurId', 'login'),
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'ON_PREM': {
      icon: 'factor-icon mfa-onprem-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'DUO': {
      icon: 'factor-icon mfa-duo-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'DUO_PUSH': {
      icon: 'duo-push-16',
      className: 'suboption factor-option',
      // TODO: add phone number here
      title: _.partial(Okta.loc, 'mfa.duoSecurity.push', 'login', ['XXX-XXX-7890'])
    },

    'DUO_SMS': {
      icon: 'duo-sms-16',
      className: 'suboption factor-option',
      // TODO: add phone number here
      title: _.partial(Okta.loc, 'mfa.duoSecurity.sms', 'login', ['XXX-XXX-7890'])
    },

    'DUO_CALL': {
      icon: 'duo-call-16',
      className: 'suboption factor-option',
      // TODO: add phone number here
      title: _.partial(Okta.loc, 'mfa.duoSecurity.call', 'login', ['XXX-XXX-7890'])
    },

    'YUBIKEY': {
      icon: 'factor-icon mfa-yubikey-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'SMS': {
      icon: 'factor-icon mfa-sms-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'CALL': {
      icon: 'factor-icon mfa-call-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'QUESTION': {
      icon: 'factor-icon mfa-question-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'PASSWORD': {
      icon: 'factor-icon mfa-password-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'WINDOWS_HELLO': {
      icon: 'factor-icon mfa-windows-hello-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'U2F': {
      icon: 'factor-icon mfa-u2f-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'WEBAUTHN': {
      icon: 'factor-icon mfa-webauthn-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'EMAIL': {
      icon: 'factor-icon mfa-email-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'GENERIC_SAML': {
      icon: 'factor-icon mfa-custom-factor-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'GENERIC_OIDC': {
      icon: 'factor-icon mfa-custom-factor-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    },

    'CUSTOM_CLAIMS': {
      icon: 'factor-icon mfa-custom-factor-30',
      className: 'factor-option',
      title: function title() {
        return this.model.get('factorLabel');
      },
      action: function action() {
        _action.call(this, this.model);
      }
    }

  };

  return {
    getDropdownOption: function getDropdownOption(factorName) {
      return dropdownOptions[factorName];
    }
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Okta) {

  return Okta.View.extend({

    className: 'piv-beacon',
    template: '\
      <div class="beacon-blank auth-beacon">\
        <div class="beacon-blank js-blank-beacon-border auth-beacon-border"></div>\
      </div>\
      <div class="bg-helper auth-beacon smartcard" data-se="piv-beacon">\
        <div class="okta-sign-in-beacon-border auth-beacon-border"></div>\
      </div>\
    ',

    equals: function equals(Beacon) {
      return Beacon && this instanceof Beacon;
    }

  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _FormController = __webpack_require__(293);

var _FormController2 = _interopRequireDefault(_FormController);

var _BaseLoginRouter = __webpack_require__(312);

var _BaseLoginRouter2 = _interopRequireDefault(_BaseLoginRouter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

module.exports = _BaseLoginRouter2.default.extend({
  routes: {
    '': 'defaultAuth',
    '*wildcard': 'defaultAuth'
  },

  defaultAuth: function defaultAuth() {
    this.render(_FormController2.default);
  }

});

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

__webpack_require__(79);

var _ViewFactory = __webpack_require__(294);

var _ViewFactory2 = _interopRequireDefault(_ViewFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _okta.Controller.extend({
  className: 'form-controller',

  initialize: function initialize() {
    _okta.Controller.prototype.initialize.call(this);

    this.listenTo(this.options.appState, 'idxResponseUpdated', this.render);
    this.listenTo(this.options.appState, 'invokeAction', this.invokeAction);
    this.listenTo(this.options.appState, 'switchForm', this.switchForm);
    this.listenTo(this.options.appState, 'saveForm', this.handleFormSave);
  },

  preRender: function preRender() {
    this.removeChildren();
  },
  postRender: function postRender() {
    var currentViewState = this.options.appState.getCurrentViewState();

    var TheView = _ViewFactory2.default.create(currentViewState.name, this.options.appState.get('factorType'), this.options.appState.get('currentStep'));
    this.formView = this.add(TheView, {
      options: {
        currentViewState: currentViewState,
        messages: this.options.appState.get('messages')
      }
    }).last();

    this.listenTo(this.formView, 'save', this.handleFormSave);
  },
  invokeAction: function invokeAction() {
    var _this = this;

    var actionPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var actionFn = this.options.appState.getActionByPath(actionPath);

    if (_okta._.isFunction(actionFn)) {
      // TODO: OKTA-243167
      // 1. what's the approach to show spinner indicating API in fligh?
      // 2. how to catch error?
      actionFn().then(function (resp) {
        _this.options.appState.trigger('remediationSuccess', resp.response);
      }).catch();
    }
  },
  switchForm: function switchForm(formName) {
    // trigger formname change to change view
    this.options.appState.set('currentFormName', formName);
    this.options.appState.trigger('idxResponseUpdated', formName);
  },
  handleFormSave: function handleFormSave(model) {
    var _this2 = this;

    var formName = model.get('formName');
    var actionFn = this.options.appState.get('currentState')[formName];
    if (!_okta._.isFunction(actionFn)) {
      model.trigger('error', 'Cannot find http action for "' + formName + '".');
      return;
    }

    this.toggleFormButtonState(true);
    model.trigger('request');
    return actionFn(model.toJSON()).then(function (resp) {
      _this2.options.appState.trigger('remediationSuccess', resp.response);
    }).catch(function (error) {
      model.trigger('error', model, { 'responseJSON': error }, true);
      _this2.toggleFormButtonState(false);
    });
  },


  /**
   * SignIn widget has its own (hacky) way to customize the button disabled state:
   * adding `link-button-disabled` despite the name was intend only to disable
   * `link-button`.
   * Instead of doing decent refactor, we want to follow the convention for now.
   *
   * @param {boolean} disabled whether add extra disable CSS class.
   */
  toggleFormButtonState: function toggleFormButtonState(disabled) {
    var button = this.$el.find('.o-form-button-bar .button');
    button.toggleClass('link-button-disabled', disabled);
  }

}); /*!
     * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
     * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
     *
     * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     *
     * See the License for the specific language governing permissions and limitations under the License.
     */

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty2 = __webpack_require__(58);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _terminalTransferred, _terminalReturn;

// factor ignostic views

// password


// email
// import EnrollFactorEmailView from './views/email/EnrollFactorEmailView';


var _Logger = __webpack_require__(25);

var _Logger2 = _interopRequireDefault(_Logger);

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _IdentifierView = __webpack_require__(299);

var _IdentifierView2 = _interopRequireDefault(_IdentifierView);

var _DeviceChallengePollView = __webpack_require__(300);

var _DeviceChallengePollView2 = _interopRequireDefault(_DeviceChallengePollView);

var _SelectFactorEnrollView = __webpack_require__(301);

var _SelectFactorEnrollView2 = _interopRequireDefault(_SelectFactorEnrollView);

var _SelectFactorAuthenticateView = __webpack_require__(302);

var _SelectFactorAuthenticateView2 = _interopRequireDefault(_SelectFactorAuthenticateView);

var _EnrollProfileView = __webpack_require__(303);

var _EnrollProfileView2 = _interopRequireDefault(_EnrollProfileView);

var _TerminalView = __webpack_require__(132);

var _TerminalView2 = _interopRequireDefault(_TerminalView);

var _SuccessView = __webpack_require__(304);

var _SuccessView2 = _interopRequireDefault(_SuccessView);

var _EnrollFactorPasswordView = __webpack_require__(305);

var _EnrollFactorPasswordView2 = _interopRequireDefault(_EnrollFactorPasswordView);

var _RequiredFactorPasswordView = __webpack_require__(307);

var _RequiredFactorPasswordView2 = _interopRequireDefault(_RequiredFactorPasswordView);

var _RequiredFactorEmailView = __webpack_require__(308);

var _RequiredFactorEmailView2 = _interopRequireDefault(_RequiredFactorEmailView);

var _TerminalReturnEmailView = __webpack_require__(310);

var _TerminalReturnEmailView2 = _interopRequireDefault(_TerminalReturnEmailView);

var _TerminalTransferedEmailView = __webpack_require__(311);

var _TerminalTransferedEmailView2 = _interopRequireDefault(_TerminalTransferedEmailView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT = '_';

var VIEWS_MAPPING = {
  'identify': (0, _defineProperty3.default)({}, DEFAULT, _IdentifierView2.default),
  'device-challenge-poll': (0, _defineProperty3.default)({}, DEFAULT, _DeviceChallengePollView2.default),
  //select-factor-authenticate is used to show the list of factors before challenge flow
  //select-factor-enroll is used to show the list of factors before enroll flows
  'select-factor': {
    authenticate: _SelectFactorAuthenticateView2.default,
    enroll: _SelectFactorEnrollView2.default
  },

  'enroll-profile': (0, _defineProperty3.default)({}, DEFAULT, _EnrollProfileView2.default),
  'enroll-factor': {
    email: _RequiredFactorEmailView2.default, // TODO EnrollFactorEmailView is unimplemented
    password: _EnrollFactorPasswordView2.default
  },
  'challenge-factor': {
    email: _RequiredFactorEmailView2.default,
    password: _RequiredFactorPasswordView2.default
  },
  'terminal-transferred': (_terminalTransferred = {}, (0, _defineProperty3.default)(_terminalTransferred, DEFAULT, _TerminalView2.default), (0, _defineProperty3.default)(_terminalTransferred, 'email', _TerminalTransferedEmailView2.default), _terminalTransferred),
  'terminal-return': (_terminalReturn = {}, (0, _defineProperty3.default)(_terminalReturn, DEFAULT, _TerminalView2.default), (0, _defineProperty3.default)(_terminalReturn, 'email', _TerminalReturnEmailView2.default), _terminalReturn),
  'success-redirect': (0, _defineProperty3.default)({}, DEFAULT, _SuccessView2.default)
};

module.exports = {
  create: function create(formName) {
    var factorType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT;
    var step = arguments[2];

    var config = VIEWS_MAPPING[formName];
    if (!config) {
      _Logger2.default.warn('Cannot find customized View (form: ' + formName + '). Fallback to default configuration.');
      if (formName.indexOf('terminal') === 0) {
        return _TerminalView2.default;
      } else {
        return _BaseView2.default;
      }
    }
    // look for customized view by step, then by factor, if not found then use DEFAULT
    var View = config[step] || config[factorType] || config[DEFAULT];

    if (!View) {
      _Logger2.default.warn('Cannot find customized View (form: ' + formName + ', factor: ' + factorType + '). Fallback to BaseView.');
      return _BaseView2.default;
    }

    return View;
  }
};

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _okta = __webpack_require__(0);

var _FactorOptions = __webpack_require__(296);

var _FactorOptions2 = _interopRequireDefault(_FactorOptions);

var _FactorUtil = __webpack_require__(129);

var _FactorUtil2 = _interopRequireDefault(_FactorUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var changeLabelToTop = function changeLabelToTop(opt) {
  return (0, _assign2.default)({}, opt, { 'label-top': true });
};

var createFactorTypeView = function createFactorTypeView(opt) {
  var optionItems = (opt.options || []).map(function (opt) {
    return (0, _assign2.default)({}, _FactorUtil2.default.getFactorData(opt.factorType), opt);
  });
  return {
    View: _FactorOptions2.default,
    options: {
      name: opt.name,
      collection: new _okta.Collection(optionItems)
    }
  };
};
var inputCreationStrategy = {
  text: changeLabelToTop,
  password: changeLabelToTop,
  factorType: createFactorTypeView
};

var create = function create(uiSchemaObj) {
  var strategyFn = inputCreationStrategy[uiSchemaObj.type] || _okta._.identity;
  return strategyFn(uiSchemaObj);
};
module.exports = {
  create: create
};

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var FactorRow = _okta.View.extend({
  className: 'enroll-factor-row clearfix',
  template: '\
      <div class="enroll-factor-icon-container">\
        <div class="factor-icon enroll-factor-icon {{iconClassName}}">\
        </div>\
      </div>\
      <div class="enroll-factor-description">\
        <h3 class="enroll-factor-label">{{label}}</h3>\
        {{#if factorDescription}}\
          <p>{{factorDescription}} </p>\
        {{/if}}\
        <div class="enroll-factor-button"></div>\
      </div>\
    ',
  children: function children() {
    return [[(0, _okta.createButton)({
      className: 'button select-factor',
      title: function title() {
        return 'Select';
      },
      click: function click() {
        this.model.trigger('selectFactor', this.model.get('value'));
      }
    }), '.enroll-factor-button']];
  },
  minimize: function minimize() {
    this.$el.addClass('enroll-factor-row-min');
  }
}); /*!
     * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
     * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
     *
     * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     *
     * See the License for the specific language governing permissions and limitations under the License.
     */
exports.default = _okta.ListView.extend({

  className: 'enroll-factor-list',

  item: FactorRow,

  itemSelector: '.list-content',

  initialize: function initialize() {
    this.listenTo(this.collection, 'selectFactor', function (data) {
      this.model.set(this.options.name, data);
      this.options.appState.trigger('saveForm', this.model);
    });
  },

  template: '\n    <div class="list-title">\n    {{i18n code="enroll.choices.description" bundle="login"}}\n    </div>    <div class="list-content"></div>'

});

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty2 = __webpack_require__(58);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _okta = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var covertIonFieldToProp = function covertIonFieldToProp(ionField) {
  var config = (0, _assign2.default)({}, _okta._.chain(ionField).pick('minLength', 'maxLength', 'required').defaults({ type: 'string', required: true }).value());
  return (0, _defineProperty3.default)({}, ionField.name, config);
}; /*!
    * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
    * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
    *
    * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *
    * See the License for the specific language governing permissions and limitations under the License.
    */


var create = function create() {
  var remediation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var value = remediation.uiSchema;
  var props = _okta._.chain(value).map(covertIonFieldToProp).reduce(function (init, field) {
    return (0, _assign2.default)({}, init, field);
  }).value();

  var BaseModel = _okta.Model.extend({
    props: props,

    local: {
      formName: 'string'
    }
  });

  return BaseModel;
};

module.exports = {
  create: create
};

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _okta = __webpack_require__(0);

var Link = _okta.View.extend({

  template: '{{label}}',

  tagName: 'a',

  attributes: function attributes() {
    var href = this.options.href || '#';
    return {
      'data-se': this.options.name,
      href: href
    };
  },
  className: function className() {
    var nameToClass = this.options.name.replace(/[ ]/g, '-');

    return 'link js-' + nameToClass;
  },
  postRender: function postRender() {
    var _this = this;

    //TODO OKTA-245224
    if (!this.options.href) {
      this.$el.click(function (event) {
        var appState = _this.options.appState;
        event.preventDefault();
        _this.options.formName ? appState.trigger('switchForm', _this.options.formName) : appState.trigger('invokeAction', _this.options.actionPath);
      });
    }
  }
}); /*!
     * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
     * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
     *
     * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     *
     * See the License for the specific language governing permissions and limitations under the License.
     */

module.exports = Link;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseFooter = __webpack_require__(31);

var _BaseFooter2 = _interopRequireDefault(_BaseFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseForm2.default.extend({

  title: (0, _okta.loc)('primaryauth.title'),
  save: (0, _okta.loc)('oform.next', 'login'),
  initialize: function initialize() {
    _BaseForm2.default.prototype.initialize.apply(this, arguments);
    if (this.options.appState.hasRemediationForm('launch-authenticator')) {
      this.add(_okta.View.extend({
        className: 'sign-in-with-device-option',
        template: '\n          <div class="okta-verify-container"></div>\n          <div class="separation-line"><span>OR</span></div>\n        ',
        initialize: function initialize() {
          var appState = this.options.appState;
          this.add((0, _okta.createButton)({
            className: 'button',
            title: 'Sign in using Okta Verify',
            click: function click() {
              appState.trigger('invokeAction', 'launch-authenticator');
            }
          }), '.okta-verify-container');
        }
      }), '.o-form-fieldset-container', false, true);
    }
  }
});

var Footer = _BaseFooter2.default.extend({
  links: function links() {
    var baseUrl = this.options.settings.get('baseUrl');
    var href = baseUrl + '/help/login';
    if (this.options.settings.get('helpLinks.help')) {
      href = this.options.settings.get('helpLinks.help');
    }
    var signupLinkObj = {
      'type': 'link',
      'label': 'Sign up',
      'name': 'enroll',
      'actionPath': 'select-enroll-profile'
    };
    var links = [{
      'name': 'help',
      'label': 'Need help signing in?',
      'href': href
    }];
    if (this.options.appState.hasRemediationForm('select-enroll-profile')) {
      links.push(signupLinkObj);
    }
    return links;
  }
});

exports.default = _BaseView2.default.extend({
  Body: Body,
  Footer: Footer
});

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(102);

var _promise2 = _interopRequireDefault(_promise);

var _stringify = __webpack_require__(32);

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _okta = __webpack_require__(0);

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseFooter = __webpack_require__(31);

var _BaseFooter2 = _interopRequireDefault(_BaseFooter);

var _Logger = __webpack_require__(25);

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var request = function request(opts) {
  var ajaxOptions = (0, _assign2.default)({
    method: 'GET',
    contentType: 'application/json'
  }, opts);
  return _okta.$.ajax(ajaxOptions);
}; /* global Promise */


var Body = _BaseForm2.default.extend({
  noButtonBar: true,

  className: 'ion-form device-challenge-poll',

  initialize: function initialize() {
    _BaseForm2.default.prototype.initialize.apply(this, arguments);
    this.deviceChallengePollRemediation = this.options.appState.getCurrentViewState();
    this.doChallenge();
    this.startPolling();
  },
  remove: function remove() {
    _BaseForm2.default.prototype.remove.apply(this, arguments);
    this.stopPolling();
  },
  doChallenge: function doChallenge() {
    var deviceChallenge = this.options.appState.get(this.deviceChallengePollRemediation.relatesTo);
    switch (deviceChallenge.challengeMethod) {
      case 'LOOPBACK':
        this.title = (0, _okta.loc)('signin', 'login');
        this.add('<div class="spinner"></div>');
        this.doLoopback(deviceChallenge.domain, deviceChallenge.ports, deviceChallenge.challengeRequest);
        break;
      case 'CUSTOM_URI':
        this.title = 'Verify account access';
        this.subtitle = 'Launching Okta Verify...';
        this.add('\n        If nothing prompts from the browser,  \n        <a href="#" id="launch-ov" class="link">click here</a> to launch Okta Verify, \n        or make sure Okta Verify is installed.\n      ');
        this.customURI = deviceChallenge.href;
        this.doCustomURI();
        break;
    }
  },
  postRender: function postRender() {
    _BaseForm2.default.prototype.postRender.apply(this, arguments);
    this.$('#launch-ov').on('click', this.doCustomURI.bind(this));
  },
  doLoopback: function doLoopback() {
    var authenticatorDomainUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var ports = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var challengeRequest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    var currentPort = void 0;
    var foundPort = false;

    var getAuthenticatorUrl = function getAuthenticatorUrl(path) {
      return authenticatorDomainUrl + ':' + currentPort + '/' + path;
    };

    var checkPort = function checkPort() {
      return request({
        url: getAuthenticatorUrl('probe'),
        timeout: 1000 // if authenticator & its probing endpoint exist, it should respond within 1000ms
      });
    };

    var onPortFound = function onPortFound() {
      foundPort = true;
      return request({
        url: getAuthenticatorUrl('challenge'),
        method: 'POST',
        body: (0, _stringify2.default)({ challengeRequest: challengeRequest }),
        timeout: 3000 // authenticator should respond within 3000ms for challenge request
      });
    };

    var onFailure = function onFailure() {};

    var doProbing = function doProbing() {
      return checkPort().done(onPortFound).fail(onFailure);
    };

    var probeChain = _promise2.default.resolve();
    ports.forEach(function (port) {
      probeChain = probeChain.then(function () {
        if (!foundPort) {
          currentPort = port;
          return doProbing();
        }
      }).catch(function () {
        _Logger2.default.error('Something unexpected happened during device probing.');
      });
    });
  },
  doCustomURI: function doCustomURI() {
    return request({
      url: this.customURI,
      method: 'POST'
    });
  },
  startPolling: function startPolling() {
    var _this = this;

    var deviceChallengePollingInterval = this.deviceChallengePollRemediation.refresh;
    if (_okta._.isNumber(deviceChallengePollingInterval)) {
      this.polling = setInterval(function () {
        _this.options.appState.trigger('saveForm', _this.model);
      }, deviceChallengePollingInterval);
    }
  },
  stopPolling: function stopPolling() {
    if (this.polling) {
      clearInterval(this.polling);
    }
  }
});

var Footer = _BaseFooter2.default.extend({
  links: function links() {
    var links = [];
    var deviceChallenge = this.options.appState.get(this.options.appState.getCurrentViewState().relatesTo);
    if (deviceChallenge.challengeMethod === 'CUSTOM_URI') {
      links = [{
        name: 'sign-in-options',
        type: 'link',
        label: (0, _okta.loc)('goback', 'login'),
        href: this.settings.get('baseUrl')
      }];
    }
    return links;
  }
});

exports.default = _BaseView2.default.extend({
  Body: Body,
  Footer: Footer
});

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _okta = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseForm2.default.extend({
  title: function title() {
    return (0, _okta.loc)('enroll.choices.setup', 'login');
  },
  noButtonBar: true
});

exports.default = _BaseView2.default.extend({
  Body: Body
});

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _okta = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseForm2.default.extend({
  title: function title() {
    return (0, _okta.loc)('mfa.factors.dropdown.title', 'login');
  },
  noButtonBar: true
});

exports.default = _BaseView2.default.extend({
  Body: Body
});

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseFooter = __webpack_require__(31);

var _BaseFooter2 = _interopRequireDefault(_BaseFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseForm2.default.extend({
  title: function title() {
    return (0, _okta.loc)('registration.form.title', 'login');
  },


  save: (0, _okta.loc)('registration.form.submit', 'login')
});

var Footer = _BaseFooter2.default.extend({
  links: function links() {
    var links = [];
    if (this.options.appState.hasRemediationForm('select-identify')) {
      links.push({
        'type': 'link',
        'label': 'Already have an account ?',
        'name': 'back',
        'actionPath': 'select-identify'
      });
    }
    return links;
  }
});

exports.default = _BaseView2.default.extend({
  Body: Body,
  Footer: Footer
});

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _Util = __webpack_require__(5);

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseForm2.default.extend({
  title: function title() {
    return 'You will be redirected';
  },

  noButtonBar: true,
  initialize: function initialize() {
    _BaseForm2.default.prototype.initialize.apply(this, arguments);
    // TODO OKTA-250473
    // Form post for success redirect
    var url = this.options.appState.getCurrentViewState().href;
    _Util2.default.redirectWithFormGet(url);
  }
});

exports.default = _BaseView2.default.extend({
  Body: Body
});

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _okta = __webpack_require__(0);

var _BaseView = __webpack_require__(18);

var _BaseView2 = _interopRequireDefault(_BaseView);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseFactorView = __webpack_require__(60);

var _BaseFactorView2 = _interopRequireDefault(_BaseFactorView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseForm2.default.extend({
  title: (0, _okta.loc)('factor.password', 'login'),
  save: (0, _okta.loc)('mfa.challenge.verify', 'login'),

  getUISchema: function getUISchema() {
    var uiSchemas = _BaseForm2.default.prototype.getUISchema.apply(this, arguments);
    return uiSchemas.concat([{
      name: 'confirmPassword',
      label: 'Repeat Password',
      type: 'password',
      params: {
        showPasswordToggle: true
      }
    }]);
  }
});

exports.default = _BaseFactorView2.default.extend({

  Body: Body,

  createModelClass: function createModelClass() {
    var ModelClass = _BaseView2.default.prototype.createModelClass.apply(this, arguments);
    var local = (0, _assign2.default)({
      confirmPassword: {
        type: 'string',
        required: true
      }
    }, ModelClass.prototype.local);
    return ModelClass.extend({
      local: local,
      validate: function validate() {
        if (this.get('credentials.passcode') !== this.get('confirmPassword') && this.get('credential.value') !== this.get('confirmPassword')) {

          var ret = {};
          ret['confirmPassword'] = (0, _okta.loc)('password.error.match', 'login');
          return ret;
        }
      }

    });
  }
});

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _HeaderBeacon = __webpack_require__(131);

var _HeaderBeacon2 = _interopRequireDefault(_HeaderBeacon);

var _FactorUtil = __webpack_require__(129);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var BeaconView = _HeaderBeacon2.default.extend({

  getBeaconClassName: function getBeaconClassName() {
    var factorType = this.options.appState.get('factorType');
    return (0, _FactorUtil.getFactorData)(factorType).iconClassName;
  }
});

module.exports = BeaconView;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseFooter = __webpack_require__(31);

var _BaseFooter2 = _interopRequireDefault(_BaseFooter);

var _BaseFactorView = __webpack_require__(60);

var _BaseFactorView2 = _interopRequireDefault(_BaseFactorView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var recoveryLinkAction = 'factor.recover';

var Body = _BaseForm2.default.extend({

  title: (0, _okta.loc)('factor.password', 'login'),

  save: (0, _okta.loc)('mfa.challenge.verify', 'login')
});

var Footer = _BaseFooter2.default.extend({
  links: function links() {
    // recovery link
    var links = [];

    if (this.options.appState.getActionByPath(recoveryLinkAction)) {
      links.push({
        'type': 'link',
        'label': 'Forgot Password',
        'name': 'forgot-password',
        'actionPath': recoveryLinkAction
      });
    }
    // check if we have a select-factor form in remediation, if so add a link
    if (this.options.appState.hasRemediationForm('select-factor')) {
      links.push({
        'type': 'link',
        'label': 'Switch Factor',
        'name': 'switchFactor',
        'formName': 'select-factor'
      });
    }
    return links;
  }
});

exports.default = _BaseFactorView2.default.extend({
  Body: Body,
  Footer: Footer
});

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _okta = __webpack_require__(0);

var _BaseForm = __webpack_require__(14);

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _BaseFooter = __webpack_require__(31);

var _BaseFooter2 = _interopRequireDefault(_BaseFooter);

var _email = __webpack_require__(133);

var _email2 = _interopRequireDefault(_email);

var _polling = __webpack_require__(309);

var _polling2 = _interopRequireDefault(_polling);

var _BaseFactorView = __webpack_require__(60);

var _BaseFactorView2 = _interopRequireDefault(_BaseFactorView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SHOW_RESEND_TIMEOUT = 60000;

var ResendView = _okta.View.extend({
  // by default is hide after one minute polling
  className: 'hide resend-email-view',
  initialize: function initialize() {
    this.add((0, _okta.createCallout)({
      subtitle: 'Haven\'t received an email? To try again, click "Resend Email"',
      type: 'warning'
    }));
    this.add((0, _okta.createButton)({
      className: 'button',
      title: 'Resend Email',
      click: function click() {
        this.options.appState.trigger('invokeAction', 'factor.send');
      }
    }));
  },
  postRender: function postRender() {
    var _this = this;

    this.showMeTimeout = _okta._.delay(function () {
      _this.$el.removeClass('hide');
    }, SHOW_RESEND_TIMEOUT);
  },
  remove: function remove() {
    _okta.View.prototype.remove.apply(this, arguments);
    clearTimeout(this.showMeTimeout);
  }
});

var Body = _BaseForm2.default.extend((0, _assign2.default)({
  save: (0, _okta.loc)('mfa.challenge.verify', 'login'),

  subtitle: 'An email has been sent to you. Please click the link in your email or enter the code from that email below.',

  initialize: function initialize() {
    _BaseForm2.default.prototype.initialize.apply(this, arguments);

    // polling has been killed when click save to avoid race conditions
    // hence resume if save failed.
    this.listenTo(this.options.model, 'error', this.startPolling.bind(this));
  },
  saveForm: function saveForm() {
    _BaseForm2.default.prototype.saveForm.apply(this, arguments);
    this.stopPolling();
    // TODO: abort ongoing request. (https://oktainc.atlassian.net/browse/OKTA-244134)
  },
  sendEmailLink: function sendEmailLink() {
    // auto send email magic link after page has rendered.
    _okta._.delay(_okta._.bind(function () {
      this.options.appState.trigger('invokeAction', 'factor.send');
    }, this), 300);
  },
  postRender: function postRender() {
    this.add(ResendView, {
      selector: '.okta-form-subtitle',
      prepend: true
    });

    // auto send email magic link email on load
    this.sendEmailLink();

    this.startPolling();
  },
  remove: function remove() {
    _BaseForm2.default.prototype.remove.apply(this, arguments);
    this.stopPolling();
  }
}, _email2.default, _polling2.default));

var Footer = _BaseFooter2.default.extend({
  links: function links() {
    var links = [
      // email recovery not supported to LEA
    ];
    // check if we have a select-factor form in remediation, if so add a link
    if (this.options.appState.hasRemediationForm('select-factor')) {
      links.push({
        'type': 'link',
        'label': 'Switch Factor',
        'name': 'switchFactor',
        'formName': 'select-factor'
      });
    }
    return links;
  }
});

exports.default = _BaseFactorView2.default.extend({
  Body: Body,
  Footer: Footer
});

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

exports.default = {
  startPolling: function startPolling() {
    var _this = this;

    var factor = this.options.appState.get('factor');
    var factorPollingInterval = factor && factor.poll && factor.poll.refresh;
    if (_okta._.isNumber(factorPollingInterval)) {
      this.polling = setInterval(function () {
        _this.options.appState.trigger('invokeAction', 'factor.poll');
      }, factorPollingInterval);
    }
  },
  stopPolling: function stopPolling() {
    if (this.polling) {
      clearInterval(this.polling);
    }
  }
};

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _email = __webpack_require__(133);

var _email2 = _interopRequireDefault(_email);

var _BaseFactorTerminalView = __webpack_require__(134);

var _BaseFactorTerminalView2 = _interopRequireDefault(_BaseFactorTerminalView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseFactorTerminalView2.default.prototype.Body.extend((0, _assign2.default)({
  subtitle: 'To finish signing in, return to the screen where you requested the email link.'
}, _email2.default));

exports.default = _BaseFactorTerminalView2.default.extend({
  Body: Body
});

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BaseFactorTerminalView = __webpack_require__(134);

var _BaseFactorTerminalView2 = _interopRequireDefault(_BaseFactorTerminalView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Body = _BaseFactorTerminalView2.default.prototype.Body.extend({
  title: function title() {
    return 'You can close this window';
  }
});

exports.default = _BaseFactorTerminalView2.default.extend({
  Body: Body
});

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _Settings = __webpack_require__(97);

var _Settings2 = _interopRequireDefault(_Settings);

var _BrowserFeatures = __webpack_require__(26);

var _BrowserFeatures2 = _interopRequireDefault(_BrowserFeatures);

var _Bundles = __webpack_require__(55);

var _Bundles2 = _interopRequireDefault(_Bundles);

var _ColorsUtil = __webpack_require__(112);

var _ColorsUtil2 = _interopRequireDefault(_ColorsUtil);

var _Enums = __webpack_require__(3);

var _Enums2 = _interopRequireDefault(_Enums);

var _Errors = __webpack_require__(13);

var _Errors2 = _interopRequireDefault(_Errors);

var _Logger = __webpack_require__(25);

var _Logger2 = _interopRequireDefault(_Logger);

var _AuthContainer = __webpack_require__(108);

var _AuthContainer2 = _interopRequireDefault(_AuthContainer);

var _Header = __webpack_require__(98);

var _Header2 = _interopRequireDefault(_Header);

var _actionsTransformer = __webpack_require__(313);

var _actionsTransformer2 = _interopRequireDefault(_actionsTransformer);

var _responseTransformer = __webpack_require__(315);

var _responseTransformer2 = _interopRequireDefault(_responseTransformer);

var _uiSchemaTransformer = __webpack_require__(316);

var _uiSchemaTransformer2 = _interopRequireDefault(_uiSchemaTransformer);

var _AppState = __webpack_require__(317);

var _AppState2 = _interopRequireDefault(_AppState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

// BaseLoginRouter contains the more complicated router logic - rendering/
// transition, etc. Most router changes should happen in LoginRouter (which is
// responsible for adding new routes)
function loadLanguage(appState, languageCode, i18n, assetBaseUrl, assetRewrite) {
  var timeout = setTimeout(function () {
    // Trigger a spinner if we're waiting on a request for a new language.
    appState.trigger('loading', true);
  }, 200);

  return _Bundles2.default.loadLanguage(languageCode, i18n, {
    baseUrl: assetBaseUrl,
    rewrite: assetRewrite
  }).then(function () {
    clearTimeout(timeout);
    appState.trigger('loading', false);
  });
}

exports.default = _okta.Router.extend({
  Events: _okta.Backbone.Events,

  initialize: function initialize(options) {
    // Create a default success and/or error handler if
    // one is not provided.
    if (!options.globalSuccessFn) {
      options.globalSuccessFn = function () {};
    }
    if (!options.globalErrorFn) {
      options.globalErrorFn = function (err) {
        _Logger2.default.error(err);
      };
    }
    this.settings = new _Settings2.default(_okta._.omit(options, 'el', 'authClient'), { parse: true });
    this.settings.setAuthClient(options.authClient);

    if (!options.el) {
      this.settings.callGlobalError(new _Errors2.default.ConfigError((0, _okta.loc)('error.required.el')));
    }

    (0, _okta.$)('body > div').on('click', function () {
      // OKTA-69769 Tooltip wont close on iPhone/iPad
      // Registering a click handler on the first div
      // allows a tap that falls outside the tooltip
      // to be registered as a tap by iOS
      // and then the open tooltip will lose focus and close.
    });

    this.appState = new _AppState2.default();

    var wrapper = new _AuthContainer2.default({ appState: this.appState });

    (0, _okta.$)(options.el).append(wrapper.render().$el);
    this.el = '#' + _Enums2.default.WIDGET_CONTAINER_ID;
    this.header = new _Header2.default({
      el: this.el,
      appState: this.appState,
      settings: this.settings
    });

    // TODO: OKTA-244631 How to suface up the CORS error in IDX?
    // Since in new pipeline, it invokes introspect API first
    // hence no way to call GlobalError when CORS failure.
    this.listenTo(this.appState, 'change:remediationFailure', function (appState, err) {
      // Global error handling for CORS enabled errors
      if (err.xhr && _BrowserFeatures2.default.corsIsNotEnabled(err.xhr)) {
        this.settings.callGlobalError(new _Errors2.default.UnsupportedBrowserError((0, _okta.loc)('error.enabled.cors')));
        return;
      }
      //set flashError
      this.appState.set('flashError', err);
      this.defaultAuth();
    });

    this.listenTo(this.appState, 'change:introspectSuccess', function (appState, trans) {
      //transfer introspectSuccess into remediationSuccess response
      // `data` attribute is added by auth-js Transaction Class as the 'original response'
      // but it's not useful in idx pipeline which has own way to keep the
      // original response in AppState(`__rawResponse`)
      this.appState.trigger('remediationSuccess', _okta._.omit(trans, 'data'));
    });

    this.listenTo(this.appState, 'remediationSuccess', this.handleRemediationSuccess);
  },

  handleRemediationSuccess: function handleRemediationSuccess(trans) {
    // transform response
    var ionResponse = _okta._.compose(_uiSchemaTransformer2.default, _actionsTransformer2.default, _responseTransformer2.default)(trans);
    this.appState.setIonResponse(ionResponse);
  },

  render: function render(Controller) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // If we need to load a language (or apply custom i18n overrides), do
    // this now and re-run render after it's finished.
    if (!_Bundles2.default.isLoaded(this.settings.get('languageCode'))) {
      return loadLanguage(this.appState, this.settings.get('languageCode'), this.settings.get('i18n'), this.settings.get('assets.baseUrl'), this.settings.get('assets.rewrite')).then(_okta._.bind(this.render, this, Controller, options)).done();
    }

    // Load the custom colors only on the first render
    if (this.settings.get('colors.brand') && !_ColorsUtil2.default.isLoaded()) {
      var colors = {
        brand: this.settings.get('colors.brand')
      };

      _ColorsUtil2.default.addStyle(colors);
    }

    if (!this.header.rendered()) {
      this.el = this.header.render().getContentEl();
    }

    // render Controller
    this.unload();
    var controllerOptions = _okta._.extend({
      el: this.el,
      settings: this.settings,
      appState: this.appState
    }, options);
    this.controller = new Controller(controllerOptions);
    this.controller.render();
  },

  hide: function hide() {
    this.header.$el.hide();
  },

  show: function show() {
    this.header.$el.show();
  },

  remove: function remove() {
    this.unload();
    this.header.$el.remove();
    this.stopListening(this.appState);
    this.stopListening(this.settings);
    _Bundles2.default.remove();
    _okta.Backbone.history.stop();
  }
});

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _okta = __webpack_require__(0);

var _httpClient = __webpack_require__(314);

var _httpClient2 = _interopRequireDefault(_httpClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

var convertActionToRequestFunction = function convertActionToRequestFunction(action) {
  var reqFn = function reqFn(extraData) {
    var request = action(extraData);
    return _httpClient2.default.fetchRequest(request.url, request.method, request.data);
  };
  if (action.refresh) {
    reqFn.refresh = action.refresh;
  }

  return reqFn;
};

/**
 *
 * @param {AuthnResult} resp transformed authn v2 response
 * @returns {AuthnResult} result with transformed actions
 */
var transformActions = function transformActions(transformedResp) {
  if (!_okta._.isObject(transformedResp)) {
    return null;
  }

  // Assuming we have only functions in 1st level objects
  return _okta._.mapObject(transformedResp, function (firstLevelObject) {
    return _okta._.mapObject(firstLevelObject, function (val) {
      if (_okta._.isFunction(val)) {
        return convertActionToRequestFunction(val);
      } else {
        return val;
      }
    });
  });
};

module.exports = transformActions;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(32);

var _stringify2 = _interopRequireDefault(_stringify);

var _crossFetch = __webpack_require__(135);

var _crossFetch2 = _interopRequireDefault(_crossFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var headers = {
  'Accept': 'application/json',
  'Content-Type': 'application/json',
  'X-Okta-User-Agent-Extended': 'okta-idx-js'
}; /*!
    * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
    * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
    *
    * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *
    * See the License for the specific language governing permissions and limitations under the License.
    */

/**
 * This file could later be adapted and moved to okta-auth-js / okta-idx-js
 */


var fetchRequest = function fetchRequest(url, method, body) {
  var fetchPromise = (0, _crossFetch2.default)(url, {
    method: method,
    headers: headers,
    body: (0, _stringify2.default)(body),
    credentials: 'include'
  }).then(function (response) {
    var responsePromise = response.json().catch(function () {
      throw 'Not a JSON';
    });
    // handle error
    if (!response.ok) {
      return responsePromise.then(function (error) {
        throw error;
      });
    } else {
      return responsePromise.then(function (resp) {
        return {
          response: resp,
          status: response.status
        };
      });
    }
  });

  return fetchPromise;
};

module.exports = { fetchRequest: fetchRequest };

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(109);

var _keys2 = _interopRequireDefault(_keys);

var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _defineProperty2 = __webpack_require__(58);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _okta = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transform the ion spec response into canonical format.
 */

/**
 * Authn V2 response
 * @typedef {Object} AuthnResponse
 */

/**
 * @typedef {Object} AuthnResult
 * @property {CurrentState} currentState
 * @property {Object=} user
 * @property {Object=} factor
 */

/**
 * @typedef {Object} CurrentState
 * @property {string} stateHandle
 * @property {string} step
 * @property {string} intent
 * @property {function} cancel
 * @property {function} context
 * @property {Remediation} remediation
 */

/**
 * @typedef {Object} Remediation
 * @property {RemediationObject[]} values
 */

/**
 * @typedef {Object} RemediationObject
 * @property {string} name
 * @property {value[]} value mandatory visible parameters
 * @property {uiSchema[]} uiSchema `value` corresponding UI Schema
 */

var isObject = function isObject(x) {
  return _okta._.isObject(x);
}; /*!
    * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
    * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
    *
    * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *
    * See the License for the specific language governing permissions and limitations under the License.
    */

var isArray = function isArray(x) {
  return Array.isArray(x);
};
var containsAny = function containsAny(xs, ys) {
  return _okta._.intersection(xs, ys).length > 0;
};

var getRelObjectByName = function getRelObjectByName(resp, relName) {
  var getRelBy_ = function getRelBy_(result_, resp_) {
    if (isObject(resp_)) {
      if (resp_.rel && containsAny(resp_.rel, relName)) {
        result_.push(resp_);
      } else {
        _okta._.mapObject(resp_, getRelBy_.bind({}, result_));
      }
    } else if (isArray(resp_)) {
      resp_.forEach(getRelBy_.bind({}, result_));
    }
    return result_;
  };

  return getRelBy_([], resp);
};

/**
 *
 * @returns {Object} actionObject
 * @returns {string} actionObject.name
 * @returns {function} actionObject.createRequest
 */
var createActionObj = function createActionObj(relObj) {
  var data = (relObj.value || []).filter(function (v) {
    return v.visible === false;
  }).map(function (v) {
    return (0, _defineProperty3.default)({}, v.name, v.value);
  }).reduce(function (init, x) {
    return (0, _assign2.default)({}, init, x);
  }, {});

  var needExtraData = relObj.value.length !== (0, _keys2.default)(data).length;
  var method = relObj.method;
  var url = relObj.href;
  var obj = {
    name: relObj.name,
    createRequest: function createRequest() {
      var extraData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var reqData = needExtraData ? (0, _assign2.default)({}, data, extraData) : data;
      return {
        method: method,
        url: url,
        data: reqData
      };
    }
  };
  if (relObj.refresh) {
    obj.createRequest.refresh = relObj.refresh;
  }

  return obj;
};

/**
 * @returns {Object.<string, function>} actions
 */
var createActions = function createActions(allCreateForms) {
  var allActions = allCreateForms.map(createActionObj);

  // turns list of actions into a mapping
  return allActions.reduce(function (init, action) {
    return (0, _assign2.default)({}, init, (0, _defineProperty3.default)({}, action.name, action.createRequest));
  }, {});
};

var convertRelFormToFunction = function convertRelFormToFunction(value) {
  var allCreateForms = getRelObjectByName(value, ['create-form']);
  var actions = createActions(allCreateForms);
  var restValue = _okta._.omit.apply(_okta._, [value].concat((0, _keys2.default)(actions)));

  return (0, _assign2.default)({}, restValue, actions);
};

/**
 * Transform 'type: "object"' by converting "rel: form" to be a function.
 */
var convertObjectType = function convertObjectType(resp) {
  var result = {};
  _okta._.each(resp, function (val, key) {
    // if key is remediation we dont do any transformation
    if (key === 'remediation') {
      return;
    }

    // for arrays we just want it as a top level object
    // Example factors array in select-factor form
    if (val.type === 'array') {
      result[key] = {
        value: val.value
      };
    }

    // for objects we run convertRelFormToFunction
    if (val.type === 'object') {
      result[key] = convertRelFormToFunction(val.value);
    }
  });
  return result;
};

/**
 * remove attribute that used for actions (`createActionObj`)
 *
 * @returns {RemediationObject} remediationObject
 */
var normalizeRemedation = function normalizeRemedation(remedationValue) {
  var result = _okta._.omit(remedationValue, 'rel', 'method', 'value');
  result.value = remedationValue.value.filter(function (v) {
    return v.visible !== false;
  });

  return result;
};

/**
 *
 * @param {AuthnResponse} originalResp
 * @param {*} omitKeys
 * @returns {CurrentState} currentState
 */
var createCurrentStateObject = function createCurrentStateObject(originalResp, omitKeys) {
  var resp = _okta._.omit.apply(_okta._, [originalResp].concat(omitKeys));
  var allCreateForms = getRelObjectByName(resp, ['create-form']);
  var actions = createActions(allCreateForms);
  var restData = _okta._.omit.apply(_okta._, [resp, 'remediation', 'success'].concat((0, _keys2.default)(actions)));
  var remediation = [];

  if (resp.remediation) {
    remediation = resp.remediation.value.map(normalizeRemedation);
  }
  // success does not have remediation, only has a name and href
  if (resp.success) {
    remediation = [resp.success];
  }

  return (0, _assign2.default)(restData, actions, {
    remediation: remediation
  });
};

/**
 *
 * @param {AuthnResponse} resp authn v2 response
 * @returns {AuthnResult} transformed result
 */
var convert = function convert(resp) {
  if (!isObject(resp)) {
    return null;
  }

  var firstLevelObjects = convertObjectType(resp);
  var currentState = createCurrentStateObject(resp, (0, _keys2.default)(firstLevelObjects));

  var result = (0, _assign2.default)({}, firstLevelObjects, {
    currentState: currentState,
    __rawResponse: resp
  });
  return result;
};

module.exports = convert;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(21);

var _assign2 = _interopRequireDefault(_assign);

var _okta = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Adds factorType metadata to each select-factor option item using factors array
 */
var createFactorTypeOptions = function createFactorTypeOptions(options, factors) {
  _okta._.each(options, function (optionItem) {
    var factorValue = optionItem.value;
    var factor = factors.find(function (item) {
      return item.factorProfileId === factorValue || item.factorId === factorValue;
    });
    optionItem.factorType = factor.factorType;
  });
  return options;
};

/**
 * @typedef {Object} IONFormField
 * @property {string} name
 * @property {string=} type
 * @property {string=} required
 * @property {string=} secret
 * @property {string=} label
 * @property {Object[]} options
 */

/**
 *
 * @param {IONFormField[]} remediationValue
 * @param {factor[]} factors
 */
/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

/**
 * Create UI Schema into remedation object base on remediation values
 */
var createUISchema = function createUISchema() {
  var remediationValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var factors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  // For cases where field itself is a form, it has a formname and we are appending the formname to each field
  // This is so that while making the request we can bundle these key:value pairs under the same key name
  // For simplicity we are assuming that when field itself is a form its only one level deep
  remediationValue = _okta._.chain(remediationValue).map(function (v) {
    if (v.form) {
      var inputGroupName = v.name;
      return v.form.value.map(function (input) {
        return (0, _assign2.default)({}, input, { name: inputGroupName + '.' + input.name });
      });
    } else {
      return v;
    }
  }).flatten().value();
  return remediationValue.map(function (ionFormField) {
    var uiSchema = {
      type: 'text'
    };
    if (ionFormField.secret === true) {
      uiSchema.type = 'password';
      uiSchema.params = {
        showPasswordToggle: true
      };
    }
    // select factor form for multiple factor enroll and multiple factor verify
    // when factor has not been enrolled we get back factorProfileId, and once its enrolled
    // we get back factorId
    if (ionFormField.name === 'factorId' || ionFormField.name === 'factorProfileId') {
      uiSchema.type = 'factorType';
      uiSchema.options = createFactorTypeOptions(ionFormField.options, factors);
    }
    return (0, _assign2.default)({}, ionFormField, uiSchema);
  });
};

/**
 *
 * @param {AuthResult} transformedResp (after `actionsTransformer`)
 */
var insertUISchema = function insertUISchema(transformedResp) {
  if (transformedResp.currentState) {
    var remediation = transformedResp.currentState.remediation || [];
    var factors = transformedResp.factors && transformedResp.factors.value || [];
    transformedResp.currentState.remediation = remediation.map(function (obj) {
      obj.uiSchema = createUISchema(obj.value, factors);
      return obj;
    });
  }
  return transformedResp;
};

module.exports = insertUISchema;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _okta = __webpack_require__(0);

var _Logger = __webpack_require__(25);

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2019, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

exports.default = _okta.Model.extend({

  local: {
    introspectSuccess: 'object', // only set during introspection
    introspectError: 'object', // only set during introspection

    currentState: 'object',
    factor: 'object', // optional
    user: 'object', // optional
    currentFormName: 'string'
  },

  derived: {
    remediation: {
      deps: ['currentState'],
      fn: function fn() {
        var currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return Array.isArray(currentState.remediation) ? currentState.remediation : [];
      }
    },
    factorProfile: {
      deps: ['factor'],
      fn: function fn() {
        var factor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return factor.profile || {};
      }
    },
    factorType: {
      deps: ['factor'],
      fn: function fn() {
        var factor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return factor.factorType;
      }
    },
    currentStep: {
      deps: ['currentState'],
      fn: function fn() {
        var currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return currentState.step && currentState.step.toLowerCase();
      }
    },
    showSignoutLink: {
      deps: ['currentState'],
      fn: function fn() {
        var currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var invalidSignOutSteps = ['IDENTIFY', 'ENROLL', 'SUCCESS'];
        // hide signout for IDENTIFY, ENROLL & SUCCESS step
        return _okta._.isFunction(currentState.cancel) && !invalidSignOutSteps.includes(currentState.step);
      }
    }
  },

  hasRemediationForm: function hasRemediationForm(formName) {
    return this.get('currentState').remediation.filter(function (v) {
      return v.name === formName;
    }).length === 1;
  },
  getActionByPath: function getActionByPath(actionPath) {
    var paths = actionPath.split('.');
    var targetObject = void 0;
    if (paths.length === 1) {
      targetObject = this.get('currentState');
    } else {
      targetObject = this.get(paths.shift());
    }
    // Limitation
    // At the time of writting, action only lives in first level of state objects.
    var actionName = paths.shift();
    if (targetObject && _okta._.isFunction(targetObject[actionName])) {
      return targetObject[actionName];
    } else {
      return null;
    }
  },
  getCurrentViewState: function getCurrentViewState() {
    var currentFormName = this.get('currentFormName');

    var currentViewState = void 0;
    if (!_okta._.isEmpty(this.get('remediation'))) {
      currentViewState = this.get('remediation').filter(function (r) {
        return r.name === currentFormName;
      })[0];
    }

    if (!currentViewState) {
      if (currentFormName) {
        _Logger2.default.warn('Cannot find view state for form ' + currentFormName + '. Fall back to terminal state.');
      }

      currentViewState = this.get('terminal');
    }

    return currentViewState;
  },
  setIonResponse: function setIonResponse(resp) {
    // Don't re-render view if new response is same as last.
    // Usually happening at polling and pipeline doesn't proceed to next step.
    // expiresAt will be different for each response, hence compare objects without that property
    if (_okta._.isEqual(_okta._.omit(resp.__rawResponse, 'expiresAt'), _okta._.omit(this.get('__rawResponse'), 'expiresAt'))) {
      return;
    }

    // `currentFormName` is default to first form of remediation object or nothing.
    resp.currentFormName = null;

    if (!_okta._.isEmpty(resp.currentState.remediation)) {
      resp.currentFormName = resp.currentState.remediation[0].name;
    }

    // default terminal state for fall back
    if (_okta._.isEmpty(resp.terminal)) {
      resp.terminal = {
        name: 'terminal',
        value: [],
        uiSchema: []
      };
    }

    this.set(resp);

    // broadcast idxResponseUpdated to re-render the view
    this.trigger('idxResponseUpdated', resp);
  }
});

// Keep track of stateMachine with this special model. Similar to Appstate.js

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

var fetchRequest = __webpack_require__(319);
var storageUtil = __webpack_require__(44);

module.exports = __webpack_require__(321)(storageUtil, fetchRequest);


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2018-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

var fetch = __webpack_require__(135);

/* eslint-disable complexity */
function fetchRequest(method, url, args) {
  var body = args.data;
  var headers = args.headers || {};
  var contentType = (headers['Content-Type'] || headers['content-type'] || '');

  // JSON encode body (if appropriate)
  if (contentType === 'application/json' && body && typeof body !== 'string') {
    body = JSON.stringify(body);
  }

  var fetchPromise = fetch(url, {
    method: method,
    headers: args.headers,
    body: body,
    credentials: args.withCredentials === false ? 'omit' : 'include'
  })
  .then(function(response) {
    var error = !response.ok;
    var status = response.status;
    var respHandler = function(resp) {
      var result = {
        responseText: resp,
        status: status
      };
      if (error) {
        // Throwing response object since error handling is done in http.js
        throw result;
      }
      return result;
    };
    if (response.headers.get('Content-Type') &&
        response.headers.get('Content-Type').toLowerCase().indexOf('application/json') >= 0) {
      return response.json().then(respHandler);
    } else {
      return response.text().then(respHandler);
    }
  });
  return fetchPromise;
}

module.exports = fetchRequest;


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		registeredInModuleLoader = true;
	}
	if (true) {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				// We're using "expires" because "max-age" is not supported by IE
				attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				var stringifiedAttributes = '';

				for (var attributeName in attributes) {
					if (!attributes[attributeName]) {
						continue;
					}
					stringifiedAttributes += '; ' + attributeName;
					if (attributes[attributeName] === true) {
						continue;
					}
					stringifiedAttributes += '=' + attributes[attributeName];
				}
				return (document.cookie = key + '=' + value + stringifiedAttributes);
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!this.json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
/* eslint-disable complexity */
/* eslint-disable max-statements */

__webpack_require__(322);

var AuthSdkError      = __webpack_require__(27);
var builderUtil       = __webpack_require__(324);
var config            = __webpack_require__(37);
var cookies           = __webpack_require__(44).storage;
var http              = __webpack_require__(38);
var oauthUtil         = __webpack_require__(138);
var Q                 = __webpack_require__(4);
var session           = __webpack_require__(327);
var token             = __webpack_require__(328);
var TokenManager      = __webpack_require__(332);
var tx                = __webpack_require__(137);
var util              = __webpack_require__(15);

function OktaAuthBuilder(args) {
  var sdk = this;

  var url = builderUtil.getValidUrl(args);
  // OKTA-242989: support for grantType will be removed in 3.0 
  var usePKCE = args.pkce || args.grantType === 'authorization_code';
  this.options = {
    url: util.removeTrailingSlash(url),
    clientId: args.clientId,
    issuer: util.removeTrailingSlash(args.issuer),
    authorizeUrl: util.removeTrailingSlash(args.authorizeUrl),
    userinfoUrl: util.removeTrailingSlash(args.userinfoUrl),
    tokenUrl: util.removeTrailingSlash(args.tokenUrl),
    pkce: usePKCE,
    redirectUri: args.redirectUri,
    httpRequestClient: args.httpRequestClient,
    storageUtil: args.storageUtil,
    transformErrorXHR: args.transformErrorXHR,
    headers: args.headers
  };

  if (this.options.pkce && !sdk.features.isPKCESupported()) {
    throw new AuthSdkError('This browser doesn\'t support PKCE');
  }

  this.userAgent = 'okta-auth-js-' + config.SDK_VERSION;

  // Digital clocks will drift over time, so the server
  // can misalign with the time reported by the browser.
  // The maxClockSkew allows relaxing the time-based
  // validation of tokens (in seconds, not milliseconds).
  // It currently defaults to 300, because 5 min is the
  // default maximum tolerance allowed by Kerberos.
  // (https://technet.microsoft.com/en-us/library/cc976357.aspx)
  if (!args.maxClockSkew && args.maxClockSkew !== 0) {
    this.options.maxClockSkew = config.DEFAULT_MAX_CLOCK_SKEW;
  } else {
    this.options.maxClockSkew = args.maxClockSkew;
  }

  // Give the developer the ability to disable token signature
  // validation.
  this.options.ignoreSignature = !!args.ignoreSignature;

  sdk.session = {
    close: util.bind(session.closeSession, null, sdk),
    exists: util.bind(session.sessionExists, null, sdk),
    get: util.bind(session.getSession, null, sdk),
    refresh: util.bind(session.refreshSession, null, sdk),
    setCookieAndRedirect: util.bind(session.setCookieAndRedirect, null, sdk)
  };

  sdk.tx = {
    status: util.bind(tx.transactionStatus, null, sdk),
    resume: util.bind(tx.resumeTransaction, null, sdk),
    exists: util.bind(tx.transactionExists, null, sdk),
    introspect: util.bind(tx.introspect, null, sdk)
  };

  // This is exposed so we can mock document.cookie in our tests
  sdk.tx.exists._get = function(name) {
    return cookies.get(name);
  };

  // This is exposed so we can mock window.location.href in our tests
  sdk.idToken = {
    authorize: {
      _getLocationHref: function() {
        return window.location.href;
      }
    }
  };

  sdk.token = {
    getWithoutPrompt: util.bind(token.getWithoutPrompt, null, sdk),
    getWithPopup: util.bind(token.getWithPopup, null, sdk),
    getWithRedirect: util.bind(token.getWithRedirect, null, sdk),
    parseFromUrl: util.bind(token.parseFromUrl, null, sdk),
    decode: token.decodeToken,
    renew: util.bind(token.renewToken, null, sdk),
    getUserInfo: util.bind(token.getUserInfo, null, sdk),
    verify: util.bind(token.verifyToken, null, sdk)
  };

  // This is exposed so we can set window.location in our tests
  sdk.token.getWithRedirect._setLocation = function(url) {
    window.location = url;
  };

  // This is exposed so we can mock getting window.history in our tests
  sdk.token.parseFromUrl._getHistory = function() {
    return window.history;
  };

  // This is exposed so we can mock getting window.location in our tests
  sdk.token.parseFromUrl._getLocation = function() {
    return window.location;
  };

  // This is exposed so we can mock getting window.document in our tests
  sdk.token.parseFromUrl._getDocument = function() {
    return window.document;
  };

  sdk.fingerprint._getUserAgent = function() {
    return navigator.userAgent;
  };

  var isWindowsPhone = /windows phone|iemobile|wpdesktop/i;
  sdk.features.isFingerprintSupported = function() {
    var agent = sdk.fingerprint._getUserAgent();
    return agent && !isWindowsPhone.test(agent);
  };

  sdk.tokenManager = new TokenManager(sdk, args.tokenManager);
}

var proto = OktaAuthBuilder.prototype;

proto.features = {};

proto.features.isPopupPostMessageSupported = function() {
  var isIE8or9 = document.documentMode && document.documentMode < 10;
  if (window.postMessage && !isIE8or9) {
    return true;
  }
  return false;
};

proto.features.isTokenVerifySupported = function() {
  return typeof crypto !== 'undefined' && crypto.subtle && typeof Uint8Array !== 'undefined';
};

proto.features.isPKCESupported = function() {
  return proto.features.isTokenVerifySupported();
};

// { username, password, (relayState), (context) }
proto.signIn = function (opts) {
  var sdk = this;
  opts = util.clone(opts || {});
  function postToTransaction(options) {
    delete opts.sendFingerprint;
    return tx.postToTransaction(sdk, '/api/v1/authn', opts, options);
  }
  if (!opts.sendFingerprint) {
    return postToTransaction();
  }
  return sdk.fingerprint()
  .then(function(fingerprint) {
    return postToTransaction({
      headers: {
        'X-Device-Fingerprint': fingerprint
      }
    });
  });
};

proto.signOut = function () {
  return this.session.close();
};

builderUtil.addSharedPrototypes(proto);

// { resource, (rel), (requestContext)}
proto.webfinger = function (opts) {
  var url = '/.well-known/webfinger' + util.toQueryParams(opts);
  var options = {
    headers: {
      'Accept': 'application/jrd+json'
    }
  };
  return http.get(this, url, options);
};

proto.fingerprint = function(options) {
  options = options || {};
  var sdk = this;
  if (!sdk.features.isFingerprintSupported()) {
    return Q.reject(new AuthSdkError('Fingerprinting is not supported on this device'));
  }

  var deferred = Q.defer();

  var iframe = document.createElement('iframe');
  iframe.style.display = 'none';

  function listener(e) {
    if (!e || !e.data || e.origin !== sdk.options.url) {
      return;
    }

    try {
      var msg = JSON.parse(e.data);
    } catch (err) {
      return deferred.reject(new AuthSdkError('Unable to parse iframe response'));
    }

    if (!msg) { return; }
    if (msg.type === 'FingerprintAvailable') {
      return deferred.resolve(msg.fingerprint);
    }
    if (msg.type === 'FingerprintServiceReady') {
      e.source.postMessage(JSON.stringify({
        type: 'GetFingerprint'
      }), e.origin);
    }
  }
  oauthUtil.addListener(window, 'message', listener);

  iframe.src = sdk.options.url + '/auth/services/devicefingerprint';
  document.body.appendChild(iframe);

  var timeout = setTimeout(function() {
    deferred.reject(new AuthSdkError('Fingerprinting timed out'));
  }, options.timeout || 15000);

  return deferred.promise.fin(function() {
    clearTimeout(timeout);
    oauthUtil.removeListener(window, 'message', listener);
    if (document.body.contains(iframe)) {
      iframe.parentElement.removeChild(iframe);
    }
  });
};

module.exports = builderUtil.buildOktaAuth(OktaAuthBuilder);


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

__webpack_require__(323);

// Production steps of ECMA-262, Edition 5, 15.4.4.14
// Reference: http://es5.github.io/#x15.4.4.14
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function(searchElement, fromIndex) {

    var k;

    // 1. Let o be the result of calling ToObject passing
    //    the this value as the argument.
    if (this == null) {
      throw new TypeError('"this" is null or not defined');
    }

    var o = Object(this);

    // 2. Let lenValue be the result of calling the Get
    //    internal method of o with the argument "length".
    // 3. Let len be ToUint32(lenValue).
    var len = o.length >>> 0;

    // 4. If len is 0, return -1.
    if (len === 0) {
      return -1;
    }

    // 5. If argument fromIndex was passed let n be
    //    ToInteger(fromIndex); else let n be 0.
    var n = +fromIndex || 0;

    if (Math.abs(n) === Infinity) {
      n = 0;
    }

    // 6. If n >= len, return -1.
    if (n >= len) {
      return -1;
    }

    // 7. If n >= 0, then Let k be n.
    // 8. Else, n<0, Let k be len - abs(n).
    //    If k is less than 0, then let k be 0.
    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

    // 9. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the
      //    HasProperty internal method of o with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then
      //    i.  Let elementK be the result of calling the Get
      //        internal method of o with the argument ToString(k).
      //   ii.  Let same be the result of applying the
      //        Strict Equality Comparison Algorithm to
      //        searchElement and elementK.
      //  iii.  If same is true, return k.
      if (k in o && o[k] === searchElement) {
        return k;
      }
      k++;
    }
    return -1;
  };
}

if (!Array.isArray) {
  Array.isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };
}


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

;(function () {

  var object =  true ? exports : this; // #8: web workers
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  function InvalidCharacterError(message) {
    this.message = message;
  }
  InvalidCharacterError.prototype = new Error;
  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    var str = String(input);
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next str index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      str.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = str.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) {
        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
      }
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    var str = String(input).replace(/=+$/, '');
    if (str.length % 4 == 1) {
      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
    }
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = str.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2018-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

var AuthSdkError = __webpack_require__(27);
var tx = __webpack_require__(137);
var util = __webpack_require__(15);

function getValidUrl(args) {
  if (!args) {
    throw new AuthSdkError('No arguments passed to constructor. ' +
      'Required usage: new OktaAuth(args)');
  }

  var url = args.url;
  if (!url) {
    var isUrlRegex = new RegExp('^http?s?://.+');
    if (args.issuer && isUrlRegex.test(args.issuer)) {
      // Infer the URL from the issuer URL, omitting the /oauth2/{authServerId}
      url = args.issuer.split('/oauth2/')[0];
    } else {
      throw new AuthSdkError('No url passed to constructor. ' +
      'Required usage: new OktaAuth({url: "https://{yourOktaDomain}.com"})');
    }
  }

  if (url.indexOf('-admin.') !== -1) {
    throw new AuthSdkError('URL passed to constructor contains "-admin" in subdomain. ' +
      'Required usage: new OktaAuth({url: "https://{yourOktaDomain}.com})');
  }

  return url;
}

function addSharedPrototypes(proto) {
  // { username, (relayState) }
  proto.forgotPassword = function (opts) {
    return tx.postToTransaction(this, '/api/v1/authn/recovery/password', opts);
  };

  // { username, (relayState) }
  proto.unlockAccount = function (opts) {
    return tx.postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);
  };

  // { recoveryToken }
  proto.verifyRecoveryToken = function (opts) {
    return tx.postToTransaction(this, '/api/v1/authn/recovery/token', opts);
  };
}

function buildOktaAuth(OktaAuthBuilder) {
  return function(storageUtil, httpRequestClient) {
    function OktaAuth(args) {
      if (!(this instanceof OktaAuth)) {
        return new OktaAuth(args);
      }

      if (args) {
        args.storageUtil = storageUtil;

        if (args.ajaxRequest) {
          util.deprecate('ajaxRequest is being deprecated, use httpRequestClient attribute instead.');
          args.httpRequestClient = args.ajaxRequest;
        } else if (!args.httpRequestClient) {
          args.httpRequestClient = httpRequestClient;
        }
      }

      util.bind(OktaAuthBuilder, this)(args);
    }
    OktaAuth.prototype = OktaAuthBuilder.prototype;
    OktaAuth.prototype.constructor = OktaAuth;

    // Hoist feature detection functions to static type
    OktaAuth.features = OktaAuthBuilder.prototype.features;

    return OktaAuth;
  };
}

module.exports = {
  addSharedPrototypes: addSharedPrototypes,
  buildOktaAuth: buildOktaAuth,
  getValidUrl: getValidUrl
};


/***/ }),
/* 325 */
/***/ (function(module, exports) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

function AuthApiError(err, xhr) {
  this.name = 'AuthApiError';
  this.message = err.errorSummary;
  this.errorSummary = err.errorSummary;
  this.errorCode = err.errorCode;
  this.errorLink = err.errorLink;
  this.errorId = err.errorId;
  this.errorCauses = err.errorCauses;

  if (xhr) {
    this.xhr = xhr;
  }
}
AuthApiError.prototype = new Error();

module.exports = AuthApiError;


/***/ }),
/* 326 */
/***/ (function(module, exports) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

function AuthPollStopError() {
  this.name = 'AuthPollStopError';
  this.message = 'The poll was stopped by the sdk';
}
AuthPollStopError.prototype = new Error();

module.exports = AuthPollStopError;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

var util = __webpack_require__(15);
var http = __webpack_require__(38);

function sessionExists(sdk) {
  return sdk.session.get()
    .then(function(res) {
      if (res.status === 'ACTIVE') {
        return true;
      }
      return false;
    })
    .fail(function() {
      return false;
    });
}

function getSession(sdk) { 
  return http.get(sdk, '/api/v1/sessions/me')
  .then(function(session) {
    var res = util.omit(session, '_links');

    res.refresh = function() {
      return http.post(sdk, util.getLink(session, 'refresh').href);
    };

    res.user = function() {
      return http.get(sdk, util.getLink(session, 'user').href);
    };

    return res;
  })
  .fail(function() {
    // Return INACTIVE status on failure
    return {status: 'INACTIVE'};
  });
}

function closeSession(sdk) {
  return http.httpRequest(sdk, {
    url: sdk.options.url + '/api/v1/sessions/me',
    method: 'DELETE'
  });
}

function refreshSession(sdk) {
  return http.post(sdk, '/api/v1/sessions/me/lifecycle/refresh');
}

function setCookieAndRedirect(sdk, sessionToken, redirectUrl) {
  redirectUrl = redirectUrl || window.location.href;
  window.location = sdk.options.url + '/login/sessionCookieRedirect' +
    util.toQueryParams({
      checkAccountSetupComplete: true,
      token: sessionToken,
      redirectUrl: redirectUrl
    });
}

module.exports = {
  sessionExists: sessionExists,
  getSession: getSession,
  closeSession: closeSession,
  refreshSession: refreshSession,
  setCookieAndRedirect: setCookieAndRedirect
};


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

/* eslint-disable complexity, max-statements */
var http          = __webpack_require__(38);
var util          = __webpack_require__(15);
var oauthUtil     = __webpack_require__(138);
var Q             = __webpack_require__(4);
var sdkCrypto     = __webpack_require__(329);
var AuthSdkError  = __webpack_require__(27);
var OAuthError    = __webpack_require__(330);
var config        = __webpack_require__(37);
var cookies       = __webpack_require__(44).storage;
var PKCE          = __webpack_require__(331);

function decodeToken(token) {
  var jwt = token.split('.');
  var decodedToken;

  try {
    decodedToken = {
      header: JSON.parse(util.base64UrlToString(jwt[0])),
      payload: JSON.parse(util.base64UrlToString(jwt[1])),
      signature: jwt[2]
    };
  } catch(e) {
    throw new AuthSdkError('Malformed token');
  }

  return decodedToken;
}

function verifyToken(sdk, token, validationParams) {
  return new Q()
  .then(function() {
    if (!token || !token.idToken) {
      throw new AuthSdkError('Only idTokens may be verified');
    }

    var jwt = decodeToken(token.idToken);

    var validationOptions = {
      clientId: sdk.options.clientId,
      issuer: sdk.options.issuer || sdk.options.url,
      ignoreSignature: sdk.options.ignoreSignature
    };

    util.extend(validationOptions, validationParams);

    // Standard claim validation
    oauthUtil.validateClaims(sdk, jwt.payload, validationOptions);

    // If the browser doesn't support native crypto or we choose not
    // to verify the signature, bail early
    if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {
      return token;
    }

    return oauthUtil.getKey(sdk, token.issuer, jwt.header.kid)
    .then(function(key) {
      return sdkCrypto.verifyToken(token.idToken, key);
    })
    .then(function(valid) {
      if (!valid) {
        throw new AuthSdkError('The token signature is not valid');
      }
      return token;
    });
  });
}

function addPostMessageListener(sdk, timeout, state) {
  var deferred = Q.defer();

  function responseHandler(e) {
    if (!e.data || e.data.state !== state) {
      // A message not meant for us
      return;
    }

    // Configuration mismatch between saved token and current app instance
    // This may happen if apps with different issuers are running on the same host url
    // If they share the same storage key, they may read and write tokens in the same location.
    // Common when developing against http://localhost
    if (e.origin !== sdk.options.url) {
      return deferred.reject(new AuthSdkError('The request does not match client configuration'));
    }

    deferred.resolve(e.data);
  }

  oauthUtil.addListener(window, 'message', responseHandler);

  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out'))
    .fin(function() {
      oauthUtil.removeListener(window, 'message', responseHandler);
    });
}

function addFragmentListener(sdk, windowEl, timeout) {
  var deferred = Q.defer();

  function hashChangeHandler() {
    /*
      We are only able to access window.location.hash on a window
      that has the same domain. A try/catch is necessary because
      there's no other way to determine that the popup is in
      another domain. When we try to access a window on another
      domain, an error is thrown.
    */
    try {
      if (windowEl &&
          windowEl.location &&
          windowEl.location.hash) {
        deferred.resolve(oauthUtil.hashToObject(windowEl.location.hash));
      } else if (windowEl && !windowEl.closed) {
        setTimeout(hashChangeHandler, 500);
      }
    } catch (err) {
      setTimeout(hashChangeHandler, 500);
    }
  }

  hashChangeHandler();

  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out'));
}

function exchangeCodeForToken(sdk, oauthParams, authorizationCode, urls) {
  // PKCE authorization_code flow
  // Retrieve saved values and build oauthParams for call to /token
  var meta = PKCE.loadMeta(sdk);
  var getTokenParams = {
    clientId: oauthParams.clientId,
    authorizationCode: authorizationCode,
    codeVerifier: meta.codeVerifier,
    redirectUri: meta.redirectUri
  };
  return PKCE.getToken(sdk, getTokenParams, urls)
  .then(function(res) {
    validateResponse(res, getTokenParams);
    return res;
  })
  .fin(function() {
    PKCE.clearMeta(sdk);
  });
}

function validateResponse(res, oauthParams) {
  if (res['error'] || res['error_description']) {
    throw new OAuthError(res['error'], res['error_description']);
  }

  if (res.state !== oauthParams.state) {
    throw new AuthSdkError('OAuth flow response state doesn\'t match request state');
  }
}

function handleOAuthResponse(sdk, oauthParams, res, urls) {
  urls = urls || {};

  var responseType = oauthParams.responseType;
  var scopes = util.clone(oauthParams.scopes);
  var clientId = oauthParams.clientId || sdk.options.clientId;

  return new Q()
  .then(function() {
    validateResponse(res, oauthParams);

    // We do not support "hybrid" scenarios where the response includes both a code and a token.
    // If the response contains a code it is used immediately to obtain new tokens.
    if (res['code']) {
      responseType = ['token', 'id_token']; // what we expect the code to provide us
      return exchangeCodeForToken(sdk, oauthParams, res['code'], urls);
    }
    return res;
  }).then(function(res) {
    var tokenDict = {};

    if (res['access_token']) {
      tokenDict['token'] = {
        accessToken: res['access_token'],
        expiresAt: Number(res['expires_in']) + Math.floor(Date.now()/1000),
        tokenType: res['token_type'],
        scopes: scopes,
        authorizeUrl: urls.authorizeUrl,
        userinfoUrl: urls.userinfoUrl
      };
    }

    if (res['id_token']) {
      var jwt = sdk.token.decode(res['id_token']);

      var idToken = {
        idToken: res['id_token'],
        claims: jwt.payload,
        expiresAt: jwt.payload.exp,
        scopes: scopes,
        authorizeUrl: urls.authorizeUrl,
        issuer: urls.issuer,
        clientId: clientId
      };

      var validationParams = {
        clientId: clientId,
        issuer: urls.issuer,
        nonce: oauthParams.nonce
      };

      if (oauthParams.ignoreSignature !== undefined) {
        validationParams.ignoreSignature = oauthParams.ignoreSignature;
      }

      return verifyToken(sdk, idToken, validationParams)
      .then(function() {
        tokenDict['id_token'] = idToken;
        return tokenDict;
      });
    }

    return tokenDict;
  })
  .then(function(tokenDict) {
    if (!Array.isArray(responseType)) {
      return tokenDict[responseType];
    }

    // Validate response against tokenTypes
    var validateTokenTypes =  ['token', 'id_token'];
    validateTokenTypes.filter(function(key) {
      return (responseType.indexOf(key) !== -1);
    }).forEach(function(key) {
      if (!tokenDict[key]) {
        throw new AuthSdkError('Unable to parse OAuth flow response: ' + key + ' was not returned.');
      }     
    });

    // Create token array in the order of the responseType array
    return responseType.map(function(item) {
      return tokenDict[item];
    });
  });
}

function getDefaultOAuthParams(sdk) {
  return {
    pkce: sdk.options.pkce || false,
    clientId: sdk.options.clientId,
    redirectUri: sdk.options.redirectUri || window.location.href,
    responseType: 'id_token',
    responseMode: 'okta_post_message',
    state: oauthUtil.generateState(),
    nonce: oauthUtil.generateNonce(),
    scopes: ['openid', 'email'],
    ignoreSignature: sdk.options.ignoreSignature
  };
}

function convertOAuthParamsToQueryParams(oauthParams) {
  // Quick validation
  if (!oauthParams.clientId) {
    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');
  }

  if (util.isString(oauthParams.responseType) && oauthParams.responseType.indexOf(' ') !== -1) {
    throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');
  }

  // Convert our params to their actual OAuth equivalents
  var oauthQueryParams = util.removeNils({
    'client_id': oauthParams.clientId,
    'code_challenge': oauthParams.codeChallenge,
    'code_challenge_method': oauthParams.codeChallengeMethod,
    'display': oauthParams.display,
    'idp': oauthParams.idp,
    'idp_scope': oauthParams.idpScope,
    'login_hint': oauthParams.loginHint,
    'max_age': oauthParams.maxAge,
    'nonce': oauthParams.nonce,
    'prompt': oauthParams.prompt,
    'redirect_uri': oauthParams.redirectUri,
    'response_mode': oauthParams.responseMode,
    'response_type': oauthParams.responseType,
    'sessionToken': oauthParams.sessionToken,
    'state': oauthParams.state,
  });

  ['idp_scope', 'response_type'].forEach( function( mayBeArray ) { 
    if (Array.isArray(oauthQueryParams[mayBeArray])) {
      oauthQueryParams[mayBeArray] = oauthQueryParams[mayBeArray].join(' ');
    }
  });

  if (oauthParams.responseType.indexOf('id_token') !== -1 &&
      oauthParams.scopes.indexOf('openid') === -1) {
    throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');
  } else {
    oauthQueryParams.scope = oauthParams.scopes.join(' ');
  }

  return oauthQueryParams;
}

function buildAuthorizeParams(oauthParams) {
  var oauthQueryParams = convertOAuthParamsToQueryParams(oauthParams);
  return util.toQueryParams(oauthQueryParams);
}

/*
 * Retrieve an idToken from an Okta or a third party idp
 *
 * Two main flows:
 *
 *  1) Exchange a sessionToken for a token
 *
 *    Required:
 *      clientId: passed via the OktaAuth constructor or into getToken
 *      sessionToken: 'yourtoken'
 *
 *    Optional:
 *      redirectUri: defaults to window.location.href
 *      scopes: defaults to ['openid', 'email']
 *
 *    Forced:
 *      prompt: 'none'
 *      responseMode: 'okta_post_message'
 *      display: undefined
 *
 *  2) Get a token from an idp
 *
 *    Required:
 *      clientId: passed via the OktaAuth constructor or into getToken
 *
 *    Optional:
 *      redirectUri: defaults to window.location.href
 *      scopes: defaults to ['openid', 'email']
 *      idp: defaults to Okta as an idp
 *      prompt: no default. Pass 'none' to throw an error if user is not signed in
 *
 *    Forced:
 *      display: 'popup'
 *
 *  Only common optional params shown. Any OAuth parameters not explicitly forced are available to override
 *
 * @param {Object} oauthOptions
 * @param {String} [oauthOptions.clientId] ID of this client
 * @param {String} [oauthOptions.redirectUri] URI that the iframe or popup will go to once authenticated
 * @param {String[]} [oauthOptions.scopes] OAuth 2.0 scopes to request (openid must be specified)
 * @param {String} [oauthOptions.idp] ID of an external IdP to use for user authentication
 * @param {String} [oauthOptions.sessionToken] Bootstrap Session Token returned by the Okta Authentication API
 * @param {String} [oauthOptions.prompt] Determines whether the Okta login will be displayed on failure.
 *                                       Use 'none' to prevent this behavior
 *
 * @param {Object} options
 * @param {Integer} [options.timeout] Time in ms before the flow is automatically terminated. Defaults to 120000
 * @param {String} [options.popupTitle] Title dispayed in the popup.
 *                                      Defaults to 'External Identity Provider User Authentication'
 */
function getToken(sdk, oauthOptions, options) {
  oauthOptions = oauthOptions || {};
  options = options || {};

  return prepareOauthParams(sdk, oauthOptions)
  .then(function(oauthParams) {

    // Start overriding any options that don't make sense
    var sessionTokenOverrides = {
      prompt: 'none',
      responseMode: 'okta_post_message',
      display: null
    };

    var idpOverrides = {
      display: 'popup'
    };

    if (oauthOptions.sessionToken) {
      util.extend(oauthParams, sessionTokenOverrides);
    } else if (oauthOptions.idp) {
      util.extend(oauthParams, idpOverrides);
    }

    // Use the query params to build the authorize url
    var requestUrl,
        endpoint,
        urls;
    try {
      // Get authorizeUrl and issuer
      urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);
      endpoint = oauthOptions.codeVerifier ? urls.tokenUrl : urls.authorizeUrl;
      requestUrl = endpoint + buildAuthorizeParams(oauthParams);
    } catch (e) {
      return Q.reject(e);
    }

    // Determine the flow type
    var flowType;
    if (oauthParams.sessionToken || oauthParams.display === null) {
      flowType = 'IFRAME';
    } else if (oauthParams.display === 'popup') {
      flowType = 'POPUP';
    } else {
      flowType = 'IMPLICIT';
    }

    function getOrigin(url) {
      /* eslint-disable-next-line no-useless-escape */
      var originRegex = /^(https?\:\/\/)?([^:\/?#]*(?:\:[0-9]+)?)/;
      return originRegex.exec(url)[0];
    }

    // Execute the flow type
    switch (flowType) {
      case 'IFRAME':
        var iframePromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);
        var iframeEl = oauthUtil.loadFrame(requestUrl);
        return iframePromise
          .then(function(res) {
            return handleOAuthResponse(sdk, oauthParams, res, urls);
          })
          .fin(function() {
            if (document.body.contains(iframeEl)) {
              iframeEl.parentElement.removeChild(iframeEl);
            }
          });

      case 'POPUP': // eslint-disable-line no-case-declarations
        var popupPromise;

        // Add listener on postMessage before window creation, so
        // postMessage isn't triggered before we're listening
        if (oauthParams.responseMode === 'okta_post_message') {
          if (!sdk.features.isPopupPostMessageSupported()) {
            return Q.reject(new AuthSdkError('This browser doesn\'t have full postMessage support'));
          }
          popupPromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);
        }

        // Create the window
        var windowOptions = {
          popupTitle: options.popupTitle
        };
        var windowEl = oauthUtil.loadPopup(requestUrl, windowOptions);

        // Poll until we get a valid hash fragment
        if (oauthParams.responseMode === 'fragment') {
          var windowOrigin = getOrigin(sdk.idToken.authorize._getLocationHref());
          var redirectUriOrigin = getOrigin(oauthParams.redirectUri);
          if (windowOrigin !== redirectUriOrigin) {
            return Q.reject(new AuthSdkError('Using fragment, the redirectUri origin (' + redirectUriOrigin +
              ') must match the origin of this page (' + windowOrigin + ')'));
          }
          popupPromise = addFragmentListener(sdk, windowEl, options.timeout);
        }

        // Both postMessage and fragment require a poll to see if the popup closed
        var popupDeferred = Q.defer();
        /* eslint-disable-next-line no-case-declarations, no-inner-declarations */
        function hasClosed(win) {
          if (win.closed) {
            popupDeferred.reject(new AuthSdkError('Unable to parse OAuth flow response'));
          }
        }
        var closePoller = setInterval(function() {
          hasClosed(windowEl);
        }, 500);

        // Proxy the promise results into the deferred
        popupPromise
        .then(function(res) {
          popupDeferred.resolve(res);
        })
        .fail(function(err) {
          popupDeferred.reject(err);
        });

        return popupDeferred.promise
          .then(function(res) {
            return handleOAuthResponse(sdk, oauthParams, res, urls);
          })
          .fin(function() {
            if (!windowEl.closed) {
              clearInterval(closePoller);
              windowEl.close();
            }
          });

      default:
        return Q.reject(new AuthSdkError('The full page redirect flow is not supported'));
    }
  });
}

function getWithoutPrompt(sdk, oauthOptions, options) {
  var oauthParams = util.clone(oauthOptions) || {};
  util.extend(oauthParams, {
    prompt: 'none',
    responseMode: 'okta_post_message',
    display: null
  });
  return getToken(sdk, oauthParams, options);
}

function getWithPopup(sdk, oauthOptions, options) {
  var oauthParams = util.clone(oauthOptions) || {};
  util.extend(oauthParams, {
    display: 'popup',
    responseMode: 'okta_post_message'
  });
  return getToken(sdk, oauthParams, options);
}

function prepareOauthParams(sdk, oauthOptions) {
  // clone and prepare options
  oauthOptions = util.clone(oauthOptions) || {};

  // OKTA-242989: support for grantType will be removed in 3.0 
  if (oauthOptions.grantType === 'authorization_code') {
    oauthOptions.pkce = true;
  }

  // build params using defaults + options
  var oauthParams = getDefaultOAuthParams(sdk);
  util.extend(oauthParams, oauthOptions);

  if (oauthParams.pkce !== true) {
    return Q.resolve(oauthParams);
  }

  // PKCE flow
  if (!sdk.features.isPKCESupported()) {
    return Q.reject(new AuthSdkError('This browser doesn\'t support PKCE'));
  }

  // set default code challenge method, if none provided
  if (!oauthParams.codeChallengeMethod) {
    oauthParams.codeChallengeMethod = PKCE.DEFAULT_CODE_CHALLENGE_METHOD;
  }

  // responseType is forced
  oauthParams.responseType = 'code';

  return oauthUtil.getWellKnown(sdk, null)
    .then(function(res) {
      var methods = res['code_challenge_methods_supported'] || [];
      if (methods.indexOf(oauthParams.codeChallengeMethod) === -1) {
        throw new AuthSdkError('Invalid code_challenge_method');
      }
    })
    .then(function() {
      // PKCE authorization_code flow
      var codeVerifier = PKCE.generateVerifier(oauthParams.codeVerifier);

      // We will need these values after redirect when we call /token
      var meta = {
        codeVerifier: codeVerifier,
        redirectUri: oauthParams.redirectUri
      };
      PKCE.saveMeta(sdk, meta);

      return PKCE.computeChallenge(codeVerifier);
    })
    .then(function(codeChallenge) {

      // Clone/copy the params. Set codeChallenge
      var clonedParams = util.clone(oauthParams) || {};
      util.extend(clonedParams, oauthParams, {
        codeChallenge: codeChallenge,
      });
      return clonedParams;
    });
}

function getWithRedirect(sdk, oauthOptions, options) {
  oauthOptions = util.clone(oauthOptions) || {};

  return prepareOauthParams(sdk, oauthOptions)
    .then(function(oauthParams) {

      // Dynamically set the responseMode unless the user has provided one
      // Server-side flow requires query. Client-side apps usually prefer fragment.
      if (!oauthOptions.responseMode) {
        if (oauthParams.responseType.includes('code') && !oauthParams.pkce) {
          // server-side flows using authorization_code
          oauthParams.responseMode = 'query';
        } else {
          // general case, client-side flow.
          oauthParams.responseMode = 'fragment';
        }
      }

      var urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);
      var requestUrl = urls.authorizeUrl + buildAuthorizeParams(oauthParams);

      // Set session cookie to store the oauthParams
      cookies.set(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME, JSON.stringify({
        responseType: oauthParams.responseType,
        state: oauthParams.state,
        nonce: oauthParams.nonce,
        scopes: oauthParams.scopes,
        clientId: oauthParams.clientId,
        urls: urls,
        ignoreSignature: oauthParams.ignoreSignature
      }));

      // Set nonce cookie for servers to validate nonce in id_token
      cookies.set(config.REDIRECT_NONCE_COOKIE_NAME, oauthParams.nonce);

      // Set state cookie for servers to validate state
      cookies.set(config.REDIRECT_STATE_COOKIE_NAME, oauthParams.state);

      sdk.token.getWithRedirect._setLocation(requestUrl);
    });
}

function renewToken(sdk, token) {
  if (!oauthUtil.isToken(token)) {
    return Q.reject(new AuthSdkError('Renew must be passed a token with ' +
      'an array of scopes and an accessToken or idToken'));
  }

  var responseType;
  if (sdk.options.pkce) {
    responseType = 'code';
  } else if (token.accessToken) {
    responseType = 'token';
  } else {
    responseType = 'id_token';
  }

  return sdk.token.getWithoutPrompt({
    responseType: responseType,
    scopes: token.scopes
  }, {
    authorizeUrl: token.authorizeUrl,
    userinfoUrl: token.userinfoUrl,
    issuer: token.issuer
  });
}

function removeHash(sdk) {
  var nativeHistory = sdk.token.parseFromUrl._getHistory();
  var nativeDoc = sdk.token.parseFromUrl._getDocument();
  var nativeLoc = sdk.token.parseFromUrl._getLocation();
  if (nativeHistory && nativeHistory.replaceState) {
    nativeHistory.replaceState(null, nativeDoc.title, nativeLoc.pathname + nativeLoc.search);
  } else {
    nativeLoc.hash = '';
  }
}

function parseFromUrl(sdk, url) {
  var nativeLoc = sdk.token.parseFromUrl._getLocation();
  var hash = nativeLoc.hash;
  if (url) {
    hash = url.substring(url.indexOf('#'));
  }

  if (!hash) {
    return Q.reject(new AuthSdkError('Unable to parse a token from the url'));
  }

  var oauthParamsCookie = cookies.get(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);
  if (!oauthParamsCookie) {
    return Q.reject(new AuthSdkError('Unable to retrieve OAuth redirect params cookie'));
  }

  try {
    var oauthParams = JSON.parse(oauthParamsCookie);
    var urls = oauthParams.urls;
    delete oauthParams.urls;
    cookies.delete(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);
  } catch(e) {
    return Q.reject(new AuthSdkError('Unable to parse the ' +
      config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME + ' cookie: ' + e.message));
  }

  return Q.resolve(oauthUtil.hashToObject(hash))
    .then(function(res) {
      if (!url) {
        // Remove the hash from the url
        removeHash(sdk);
      }
      return handleOAuthResponse(sdk, oauthParams, res, urls);
    });
}

function getUserInfo(sdk, accessTokenObject) {
  if (!accessTokenObject ||
      (!oauthUtil.isToken(accessTokenObject) && !accessTokenObject.accessToken && !accessTokenObject.userinfoUrl)) {
    return Q.reject(new AuthSdkError('getUserInfo requires an access token object'));
  }
  return http.httpRequest(sdk, {
    url: accessTokenObject.userinfoUrl,
    method: 'GET',
    accessToken: accessTokenObject.accessToken
  })
  .fail(function(err) {
    if (err.xhr && (err.xhr.status === 401 || err.xhr.status === 403)) {
      var authenticateHeader;
      if (err.xhr.headers && util.isFunction(err.xhr.headers.get) && err.xhr.headers.get('WWW-Authenticate')) {
        authenticateHeader = err.xhr.headers.get('WWW-Authenticate');
      } else if (util.isFunction(err.xhr.getResponseHeader)) {
        authenticateHeader = err.xhr.getResponseHeader('WWW-Authenticate');
      }
      if (authenticateHeader) {
        var errorMatches = authenticateHeader.match(/error="(.*?)"/) || [];
        var errorDescriptionMatches = authenticateHeader.match(/error_description="(.*?)"/) || [];
        var error = errorMatches[1];
        var errorDescription = errorDescriptionMatches[1];
        if (error && errorDescription) {
          err = new OAuthError(error, errorDescription);
        }
      }
    }
    throw err;
  });
}

module.exports = {
  getToken: getToken,
  getWithoutPrompt: getWithoutPrompt,
  getWithPopup: getWithPopup,
  getWithRedirect: getWithRedirect,
  parseFromUrl: parseFromUrl,
  decodeToken: decodeToken,
  renewToken: renewToken,
  getUserInfo: getUserInfo,
  verifyToken: verifyToken,
  handleOAuthResponse: handleOAuthResponse,
  prepareOauthParams: prepareOauthParams
};


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

var util = __webpack_require__(15);

function verifyToken(idToken, key) {
  key = util.clone(key);

  var format = 'jwk';
  var algo = {
    name: 'RSASSA-PKCS1-v1_5',
    hash: { name: 'SHA-256' }
  };
  var extractable = true;
  var usages = ['verify'];

  // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails
  // This is a metadata tag that specifies the intent of how the key should be used.
  // It's not necessary to properly verify the jwt's signature.
  delete key.use;

  return crypto.subtle.importKey(
    format,
    key,
    algo,
    extractable,
    usages
  )
  .then(function(cryptoKey) {
    var jwt = idToken.split('.');
    var payload = util.stringToBuffer(jwt[0] + '.' + jwt[1]);
    var b64Signature = util.base64UrlDecode(jwt[2]);
    var signature = util.stringToBuffer(b64Signature);

    return crypto.subtle.verify(
      algo,
      cryptoKey,
      signature,
      payload
    );
  });
}

module.exports = {
  verifyToken: verifyToken
};


/***/ }),
/* 330 */
/***/ (function(module, exports) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */

function OAuthError(errorCode, summary) {
  this.name = 'OAuthError';
  this.message = summary;

  this.errorCode = errorCode;
  this.errorSummary = summary;
}
OAuthError.prototype = new Error();

module.exports = OAuthError;


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2019-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

 /* eslint-disable complexity, max-statements */
var AuthSdkError  = __webpack_require__(27);
var http          = __webpack_require__(38);
var util          = __webpack_require__(15);

// Code verifier: Random URL-safe string with a minimum length of 43 characters.
// Code challenge: Base64 URL-encoded SHA-256 hash of the code verifier.
var MIN_VERIFIER_LENGTH = 43;
var MAX_VERIFIER_LENGTH = 128;
var DEFAULT_CODE_CHALLENGE_METHOD = 'S256';

function dec2hex (dec) {
  return ('0' + dec.toString(16)).substr(-2);
}

function getRandomString(length) {
  var a = new Uint8Array(Math.ceil(length / 2));
  crypto.getRandomValues(a);
  var str = Array.from(a, dec2hex).join('');
  return str.slice(0, length);
}

function generateVerifier(prefix) {
  var verifier = prefix || '';
  if (verifier.length < MIN_VERIFIER_LENGTH) {
    verifier = verifier + getRandomString(MIN_VERIFIER_LENGTH - verifier.length);
  }
  return encodeURIComponent(verifier).slice(0, MAX_VERIFIER_LENGTH);
}

function saveMeta(sdk, meta) {
  var storage = sdk.options.storageUtil.getPKCEStorage();
  storage.setStorage(meta);
}

function loadMeta(sdk) {
  var storage = sdk.options.storageUtil.getPKCEStorage();
  var obj = storage.getStorage();
  return obj;
}

function clearMeta(sdk) {
  var storage = sdk.options.storageUtil.getPKCEStorage();
  storage.clearStorage();
}

/* global Uint8Array, TextEncoder */
function computeChallenge(str) {  
  var buffer = new TextEncoder().encode(str);
  return crypto.subtle.digest('SHA-256', buffer).then(function(arrayBuffer) {
    var hash = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));
    var b64u = util.stringToBase64Url(hash); // url-safe base64 variant
    return b64u;
  });
}


function validateOptions(oauthOptions) {
  // Quick validation
  if (!oauthOptions.clientId) {
    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');
  }

  if (!oauthOptions.redirectUri) {
    throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');
  }

  if (!oauthOptions.authorizationCode) {
    throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');
  }

  if (!oauthOptions.codeVerifier) {
    throw new AuthSdkError('The "codeVerifier" (generated and saved by your app) must be passed to /token');
  }
}

function getPostData(options) {
  // Convert options to OAuth params
  var params = util.removeNils({
    'client_id': options.clientId,
    'redirect_uri': options.redirectUri,
    'grant_type': 'authorization_code',
    'code': options.authorizationCode,
    'code_verifier': options.codeVerifier
  });
  // Encode as URL string
  return util.toQueryParams(params).slice(1);
}

// exchange authorization code for an access token
function getToken(sdk, oauthOptions, urls) {
  validateOptions(oauthOptions);
  var data = getPostData(oauthOptions);

  return http.httpRequest(sdk, {
    url: urls.tokenUrl,
    method: 'POST',
    args: data,
    withCredentials: false,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  });
}

module.exports = {
  DEFAULT_CODE_CHALLENGE_METHOD: DEFAULT_CODE_CHALLENGE_METHOD,
  generateVerifier: generateVerifier,
  clearMeta: clearMeta,
  saveMeta: saveMeta,
  loadMeta: loadMeta,
  computeChallenge: computeChallenge,
  getToken: getToken
};


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

/* eslint complexity:[0,8] max-statements:[0,21] */
var util = __webpack_require__(15);
var AuthSdkError = __webpack_require__(27);
var storageUtil = __webpack_require__(44);
var Q = __webpack_require__(4);
var Emitter = __webpack_require__(333);
var config = __webpack_require__(37);
var storageBuilder = __webpack_require__(136);
var SdkClock = __webpack_require__(334);

var DEFAULT_OPTIONS = {
  autoRenew: true,
  storage: 'localStorage',
  expireEarlySeconds: 30
};

function getExpireTime(tokenMgmtRef, token) {
  var expireTime = token.expiresAt - tokenMgmtRef.options.expireEarlySeconds;
  return expireTime;
}

function hasExpired(tokenMgmtRef, token) {
  var expireTime = getExpireTime(tokenMgmtRef, token);
  return expireTime <= tokenMgmtRef.clock.now();
}

function emitExpired(tokenMgmtRef, key, token) {
  tokenMgmtRef.emitter.emit('expired', key, token);
}

function emitError(tokenMgmtRef, error) {
  tokenMgmtRef.emitter.emit('error', error);
}

function clearExpireEventTimeout(tokenMgmtRef, key) {
  clearTimeout(tokenMgmtRef.expireTimeouts[key]);
  delete tokenMgmtRef.expireTimeouts[key];

  // Remove the renew promise (if it exists)
  delete tokenMgmtRef.renewPromise[key];
}

function clearExpireEventTimeoutAll(tokenMgmtRef) {
  var expireTimeouts = tokenMgmtRef.expireTimeouts;
  for (var key in expireTimeouts) {
    if (!expireTimeouts.hasOwnProperty(key)) {
      continue;
    }
    clearExpireEventTimeout(tokenMgmtRef, key);
  }
}

function setExpireEventTimeout(sdk, tokenMgmtRef, key, token) {
  var expireTime = getExpireTime(tokenMgmtRef, token);
  var expireEventWait = Math.max(expireTime - tokenMgmtRef.clock.now(), 0) * 1000;

  // Clear any existing timeout
  clearExpireEventTimeout(tokenMgmtRef, key);

  var expireEventTimeout = setTimeout(function() {
    emitExpired(tokenMgmtRef, key, token);
  }, expireEventWait);

  // Add a new timeout
  tokenMgmtRef.expireTimeouts[key] = expireEventTimeout;
}

function setExpireEventTimeoutAll(sdk, tokenMgmtRef, storage) {
  try {
    var tokenStorage = storage.getStorage();
  } catch(e) {
    // Any errors thrown on instantiation will not be caught,
    // because there are no listeners yet
    emitError(tokenMgmtRef, e);
    return;
  }

  for(var key in tokenStorage) {
    if (!tokenStorage.hasOwnProperty(key)) {
      continue;
    }
    var token = tokenStorage[key];
    setExpireEventTimeout(sdk, tokenMgmtRef, key, token);
  }
}

function add(sdk, tokenMgmtRef, storage, key, token) {
  var tokenStorage = storage.getStorage();
  if (!util.isObject(token) ||
      !token.scopes ||
      (!token.expiresAt && token.expiresAt !== 0) ||
      (!token.idToken && !token.accessToken)) {
    throw new AuthSdkError('Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties');
  }
  tokenStorage[key] = token;
  storage.setStorage(tokenStorage);
  setExpireEventTimeout(sdk, tokenMgmtRef, key, token);
}

function get(storage, key) {
  var tokenStorage = storage.getStorage();
  return tokenStorage[key];
}

function getAsync(sdk, tokenMgmtRef, storage, key) {
  return Q.Promise(function(resolve) {
    var token = get(storage, key);
    if (!token || !hasExpired(tokenMgmtRef, token)) {
      return resolve(token);
    }

    var tokenPromise = tokenMgmtRef.options.autoRenew
      ? renew(sdk, tokenMgmtRef, storage, key)
      : remove(tokenMgmtRef, storage, key);

    return resolve(tokenPromise);
  });
}

function remove(tokenMgmtRef, storage, key) {
  // Clear any listener for this token
  clearExpireEventTimeout(tokenMgmtRef, key);

  // Remove it from storage
  var tokenStorage = storage.getStorage();
  delete tokenStorage[key];
  storage.setStorage(tokenStorage);
}

function renew(sdk, tokenMgmtRef, storage, key) {
  // Multiple callers may receive the same promise. They will all resolve or reject from the same request.
  var existingPromise = tokenMgmtRef.renewPromise[key];
  if (existingPromise) {
    return existingPromise;
  }

  try {
    var token = get(storage, key);
    if (!token) {
      throw new AuthSdkError('The tokenManager has no token for the key: ' + key);
    }
  } catch (e) {
    return Q.reject(e);
  }

  // Remove existing autoRenew timeout for this key
  clearExpireEventTimeout(tokenMgmtRef, key);

  // Store the renew promise state, to avoid renewing again
  tokenMgmtRef.renewPromise[key] = sdk.token.renew(token)
    .then(function(freshTokens) {
      var freshToken = freshTokens;
      // With PKCE flow we will receive multiple tokens. Find the one we are looking for
      if (freshTokens instanceof Array) {
        freshToken = freshTokens.find(function(freshToken) {
          return (freshToken.idToken && token.idToken) || (freshToken.accessToken && token.accessToken);
        });
      }

      var oldToken = get(storage, key);
      if (!oldToken) {
        // It is possible to enter a state where the tokens have been cleared
        // after a renewal request was triggered. To ensure we do not store a
        // renewed token, we verify the promise key doesn't exist and return.
        return;
      }
      add(sdk, tokenMgmtRef, storage, key, freshToken);
      tokenMgmtRef.emitter.emit('renewed', key, freshToken, oldToken);
      return freshToken;
    })
    .catch(function(err) {
      if (err.name === 'OAuthError' || err.name === 'AuthSdkError') {
        remove(tokenMgmtRef, storage, key);
        emitError(tokenMgmtRef, err);
      }
      throw err;
    })
    .finally(function() {
      // Remove existing promise key
      delete tokenMgmtRef.renewPromise[key];
    });

  return tokenMgmtRef.renewPromise[key];
}

function clear(tokenMgmtRef, storage) {
  clearExpireEventTimeoutAll(tokenMgmtRef);
  storage.clearStorage();
}

function TokenManager(sdk, options) {
  options = util.extend({}, DEFAULT_OPTIONS, util.removeNils(options));

  if (options.storage === 'localStorage' && !storageUtil.browserHasLocalStorage()) {
    util.warn('This browser doesn\'t support localStorage. Switching to sessionStorage.');
    options.storage = 'sessionStorage';
  }

  if (options.storage === 'sessionStorage' && !storageUtil.browserHasSessionStorage()) {
    util.warn('This browser doesn\'t support sessionStorage. Switching to cookie-based storage.');
    options.storage = 'cookie';
  }

  var storage;
  switch(options.storage) {
    case 'localStorage':
      storage = storageBuilder(localStorage, config.TOKEN_STORAGE_NAME);
      break;
    case 'sessionStorage':
      storage = storageBuilder(sessionStorage, config.TOKEN_STORAGE_NAME);
      break;
    case 'cookie':
      storage = storageBuilder(storageUtil.getCookieStorage(options), config.TOKEN_STORAGE_NAME);
      break;
    default:
      throw new AuthSdkError('Unrecognized storage option');
  }

  var clock = SdkClock.create(sdk, options);
  var tokenMgmtRef = {
    clock: clock,
    options: options,
    emitter: new Emitter(),
    expireTimeouts: {},
    renewPromise: {}
  };

  this.add = util.bind(add, this, sdk, tokenMgmtRef, storage);
  this.get = util.bind(getAsync, this, sdk, tokenMgmtRef, storage);
  this.remove = util.bind(remove, this, tokenMgmtRef, storage);
  this.clear = util.bind(clear, this, tokenMgmtRef, storage);
  this.renew = util.bind(renew, this, sdk, tokenMgmtRef, storage);
  this.on = util.bind(tokenMgmtRef.emitter.on, tokenMgmtRef.emitter);
  this.off = util.bind(tokenMgmtRef.emitter.off, tokenMgmtRef.emitter);

  setExpireEventTimeoutAll(sdk, tokenMgmtRef, storage);
}

module.exports = TokenManager;


/***/ }),
/* 333 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(15);

function SdkClock(localOffset) {
  // Calculated local clock offset from server time (in milliseconds). Can be positive or negative.
  this.localOffset = parseInt(localOffset || 0);
}

util.extend(SdkClock.prototype, {
  // Return the current time (in seconds)
  now: function() {
    var now = (Date.now() + this.localOffset) / 1000;
    return now;
  }
});

// factory method. Create an instance of a clock from current context.
SdkClock.create = function(/* sdk, options */) {
  // TODO: calculate localOffset
  var localOffset = 0;
  return new SdkClock(localOffset);
};

module.exports = SdkClock;


/***/ })
/******/ ]);
});
//# sourceMappingURL=okta-sign-in.js.map